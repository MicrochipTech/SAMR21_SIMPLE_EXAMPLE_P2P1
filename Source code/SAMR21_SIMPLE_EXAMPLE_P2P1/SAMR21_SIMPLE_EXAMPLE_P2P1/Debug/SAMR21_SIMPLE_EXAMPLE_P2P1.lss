
SAMR21_SIMPLE_EXAMPLE_P2P1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012d08  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000009c  20000000  00012d08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002134  2000009c  00012da4  0003009c  2**2
                  ALLOC
  3 .stack        00000e00  200021d0  00014ed8  0003009c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0006f5da  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000aabc  00000000  00000000  0009f72a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000164f1  00000000  00000000  000aa1e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001058  00000000  00000000  000c06d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001c10  00000000  00000000  000c172f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013a5e  00000000  00000000  000c333f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00026292  00000000  00000000  000d6d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00092a0f  00000000  00000000  000fd02f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000372c  00000000  00000000  0018fa40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
       0:	d0 2f 00 20 75 89 00 00 71 89 00 00 71 89 00 00     ./. u...q...q...
	...

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
      2c:	71 89 00 00 00 00 00 00 00 00 00 00 71 89 00 00     q...........q...
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
      3c:	71 89 00 00 71 89 00 00 71 89 00 00 71 89 00 00     q...q...q...q...
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
      4c:	d5 67 00 00 21 64 00 00 71 89 00 00 71 89 00 00     .g..!d..q...q...
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
      5c:	71 89 00 00 71 89 00 00 49 72 00 00 59 72 00 00     q...q...Ir..Yr..
				rtc_count_set_compare(module, config->compare_values[i],
      6c:	69 72 00 00 79 72 00 00 89 72 00 00 99 72 00 00     ir..yr...r...r..
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
      7c:	71 89 00 00 71 89 00 00 71 89 00 00 51 86 00 00     q...q...q...Q...
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
      8c:	61 86 00 00 71 86 00 00 00 00 00 00 00 00 00 00     a...q...........
				return STATUS_ERR_INVALID_ARG;
      9c:	71 89 00 00 71 89 00 00 00 00 00 00 71 89 00 00     q...q.......q...
	...

00002100 <__d_nv_mem_start>:
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff
    4400:	ffffffff 	.word	0xffffffff
    4404:	ffffffff 	.word	0xffffffff
    4408:	ffffffff 	.word	0xffffffff
    440c:	ffffffff 	.word	0xffffffff
    4410:	ffffffff 	.word	0xffffffff
    4414:	ffffffff 	.word	0xffffffff
    4418:	ffffffff 	.word	0xffffffff
    441c:	ffffffff 	.word	0xffffffff
    4420:	ffffffff 	.word	0xffffffff
    4424:	ffffffff 	.word	0xffffffff
    4428:	ffffffff 	.word	0xffffffff
    442c:	ffffffff 	.word	0xffffffff
    4430:	ffffffff 	.word	0xffffffff
    4434:	ffffffff 	.word	0xffffffff
    4438:	ffffffff 	.word	0xffffffff
    443c:	ffffffff 	.word	0xffffffff
    4440:	ffffffff 	.word	0xffffffff
    4444:	ffffffff 	.word	0xffffffff
    4448:	ffffffff 	.word	0xffffffff
    444c:	ffffffff 	.word	0xffffffff
    4450:	ffffffff 	.word	0xffffffff
    4454:	ffffffff 	.word	0xffffffff
    4458:	ffffffff 	.word	0xffffffff
    445c:	ffffffff 	.word	0xffffffff
    4460:	ffffffff 	.word	0xffffffff
    4464:	ffffffff 	.word	0xffffffff
    4468:	ffffffff 	.word	0xffffffff
    446c:	ffffffff 	.word	0xffffffff
    4470:	ffffffff 	.word	0xffffffff
    4474:	ffffffff 	.word	0xffffffff
    4478:	ffffffff 	.word	0xffffffff
    447c:	ffffffff 	.word	0xffffffff
    4480:	ffffffff 	.word	0xffffffff
    4484:	ffffffff 	.word	0xffffffff
    4488:	ffffffff 	.word	0xffffffff
    448c:	ffffffff 	.word	0xffffffff
    4490:	ffffffff 	.word	0xffffffff
    4494:	ffffffff 	.word	0xffffffff
    4498:	ffffffff 	.word	0xffffffff
    449c:	ffffffff 	.word	0xffffffff
    44a0:	ffffffff 	.word	0xffffffff
    44a4:	ffffffff 	.word	0xffffffff
    44a8:	ffffffff 	.word	0xffffffff
    44ac:	ffffffff 	.word	0xffffffff
    44b0:	ffffffff 	.word	0xffffffff
    44b4:	ffffffff 	.word	0xffffffff
    44b8:	ffffffff 	.word	0xffffffff
    44bc:	ffffffff 	.word	0xffffffff
    44c0:	ffffffff 	.word	0xffffffff
    44c4:	ffffffff 	.word	0xffffffff
    44c8:	ffffffff 	.word	0xffffffff
    44cc:	ffffffff 	.word	0xffffffff
    44d0:	ffffffff 	.word	0xffffffff
    44d4:	ffffffff 	.word	0xffffffff
    44d8:	ffffffff 	.word	0xffffffff
    44dc:	ffffffff 	.word	0xffffffff
    44e0:	ffffffff 	.word	0xffffffff
    44e4:	ffffffff 	.word	0xffffffff
    44e8:	ffffffff 	.word	0xffffffff
    44ec:	ffffffff 	.word	0xffffffff
    44f0:	ffffffff 	.word	0xffffffff
    44f4:	ffffffff 	.word	0xffffffff
    44f8:	ffffffff 	.word	0xffffffff
    44fc:	ffffffff 	.word	0xffffffff
    4500:	ffffffff 	.word	0xffffffff
    4504:	ffffffff 	.word	0xffffffff
    4508:	ffffffff 	.word	0xffffffff
    450c:	ffffffff 	.word	0xffffffff
    4510:	ffffffff 	.word	0xffffffff
    4514:	ffffffff 	.word	0xffffffff
    4518:	ffffffff 	.word	0xffffffff
    451c:	ffffffff 	.word	0xffffffff
    4520:	ffffffff 	.word	0xffffffff
    4524:	ffffffff 	.word	0xffffffff
    4528:	ffffffff 	.word	0xffffffff
    452c:	ffffffff 	.word	0xffffffff
    4530:	ffffffff 	.word	0xffffffff
    4534:	ffffffff 	.word	0xffffffff
    4538:	ffffffff 	.word	0xffffffff
    453c:	ffffffff 	.word	0xffffffff
    4540:	ffffffff 	.word	0xffffffff
    4544:	ffffffff 	.word	0xffffffff
    4548:	ffffffff 	.word	0xffffffff
    454c:	ffffffff 	.word	0xffffffff
    4550:	ffffffff 	.word	0xffffffff
    4554:	ffffffff 	.word	0xffffffff
    4558:	ffffffff 	.word	0xffffffff
    455c:	ffffffff 	.word	0xffffffff
    4560:	ffffffff 	.word	0xffffffff
    4564:	ffffffff 	.word	0xffffffff
    4568:	ffffffff 	.word	0xffffffff
    456c:	ffffffff 	.word	0xffffffff
    4570:	ffffffff 	.word	0xffffffff
    4574:	ffffffff 	.word	0xffffffff
    4578:	ffffffff 	.word	0xffffffff
    457c:	ffffffff 	.word	0xffffffff
    4580:	ffffffff 	.word	0xffffffff
    4584:	ffffffff 	.word	0xffffffff
    4588:	ffffffff 	.word	0xffffffff
    458c:	ffffffff 	.word	0xffffffff
    4590:	ffffffff 	.word	0xffffffff
    4594:	ffffffff 	.word	0xffffffff
    4598:	ffffffff 	.word	0xffffffff
    459c:	ffffffff 	.word	0xffffffff
    45a0:	ffffffff 	.word	0xffffffff
    45a4:	ffffffff 	.word	0xffffffff
    45a8:	ffffffff 	.word	0xffffffff
    45ac:	ffffffff 	.word	0xffffffff
    45b0:	ffffffff 	.word	0xffffffff
    45b4:	ffffffff 	.word	0xffffffff
    45b8:	ffffffff 	.word	0xffffffff
    45bc:	ffffffff 	.word	0xffffffff
    45c0:	ffffffff 	.word	0xffffffff
    45c4:	ffffffff 	.word	0xffffffff
    45c8:	ffffffff 	.word	0xffffffff
    45cc:	ffffffff 	.word	0xffffffff
    45d0:	ffffffff 	.word	0xffffffff
    45d4:	ffffffff 	.word	0xffffffff
    45d8:	ffffffff 	.word	0xffffffff
    45dc:	ffffffff 	.word	0xffffffff
    45e0:	ffffffff 	.word	0xffffffff
    45e4:	ffffffff 	.word	0xffffffff
    45e8:	ffffffff 	.word	0xffffffff
    45ec:	ffffffff 	.word	0xffffffff
    45f0:	ffffffff 	.word	0xffffffff
    45f4:	ffffffff 	.word	0xffffffff
    45f8:	ffffffff 	.word	0xffffffff
    45fc:	ffffffff 	.word	0xffffffff
    4600:	ffffffff 	.word	0xffffffff
    4604:	ffffffff 	.word	0xffffffff
    4608:	ffffffff 	.word	0xffffffff
    460c:	ffffffff 	.word	0xffffffff
    4610:	ffffffff 	.word	0xffffffff
    4614:	ffffffff 	.word	0xffffffff
    4618:	ffffffff 	.word	0xffffffff
    461c:	ffffffff 	.word	0xffffffff
    4620:	ffffffff 	.word	0xffffffff
    4624:	ffffffff 	.word	0xffffffff
    4628:	ffffffff 	.word	0xffffffff
    462c:	ffffffff 	.word	0xffffffff
    4630:	ffffffff 	.word	0xffffffff
    4634:	ffffffff 	.word	0xffffffff
    4638:	ffffffff 	.word	0xffffffff
    463c:	ffffffff 	.word	0xffffffff
    4640:	ffffffff 	.word	0xffffffff
    4644:	ffffffff 	.word	0xffffffff
    4648:	ffffffff 	.word	0xffffffff
    464c:	ffffffff 	.word	0xffffffff
    4650:	ffffffff 	.word	0xffffffff
    4654:	ffffffff 	.word	0xffffffff
    4658:	ffffffff 	.word	0xffffffff
    465c:	ffffffff 	.word	0xffffffff
    4660:	ffffffff 	.word	0xffffffff
    4664:	ffffffff 	.word	0xffffffff
    4668:	ffffffff 	.word	0xffffffff
    466c:	ffffffff 	.word	0xffffffff
    4670:	ffffffff 	.word	0xffffffff
    4674:	ffffffff 	.word	0xffffffff
    4678:	ffffffff 	.word	0xffffffff
    467c:	ffffffff 	.word	0xffffffff
    4680:	ffffffff 	.word	0xffffffff
    4684:	ffffffff 	.word	0xffffffff
    4688:	ffffffff 	.word	0xffffffff
    468c:	ffffffff 	.word	0xffffffff
    4690:	ffffffff 	.word	0xffffffff
    4694:	ffffffff 	.word	0xffffffff
    4698:	ffffffff 	.word	0xffffffff
    469c:	ffffffff 	.word	0xffffffff
    46a0:	ffffffff 	.word	0xffffffff
    46a4:	ffffffff 	.word	0xffffffff
    46a8:	ffffffff 	.word	0xffffffff
    46ac:	ffffffff 	.word	0xffffffff
    46b0:	ffffffff 	.word	0xffffffff
    46b4:	ffffffff 	.word	0xffffffff
    46b8:	ffffffff 	.word	0xffffffff
    46bc:	ffffffff 	.word	0xffffffff
    46c0:	ffffffff 	.word	0xffffffff
    46c4:	ffffffff 	.word	0xffffffff
    46c8:	ffffffff 	.word	0xffffffff
    46cc:	ffffffff 	.word	0xffffffff
    46d0:	ffffffff 	.word	0xffffffff
    46d4:	ffffffff 	.word	0xffffffff
    46d8:	ffffffff 	.word	0xffffffff
    46dc:	ffffffff 	.word	0xffffffff
    46e0:	ffffffff 	.word	0xffffffff
    46e4:	ffffffff 	.word	0xffffffff
    46e8:	ffffffff 	.word	0xffffffff
    46ec:	ffffffff 	.word	0xffffffff
    46f0:	ffffffff 	.word	0xffffffff
    46f4:	ffffffff 	.word	0xffffffff
    46f8:	ffffffff 	.word	0xffffffff
    46fc:	ffffffff 	.word	0xffffffff
    4700:	ffffffff 	.word	0xffffffff
    4704:	ffffffff 	.word	0xffffffff
    4708:	ffffffff 	.word	0xffffffff
    470c:	ffffffff 	.word	0xffffffff
    4710:	ffffffff 	.word	0xffffffff
    4714:	ffffffff 	.word	0xffffffff
    4718:	ffffffff 	.word	0xffffffff
    471c:	ffffffff 	.word	0xffffffff
    4720:	ffffffff 	.word	0xffffffff
    4724:	ffffffff 	.word	0xffffffff
    4728:	ffffffff 	.word	0xffffffff
    472c:	ffffffff 	.word	0xffffffff
    4730:	ffffffff 	.word	0xffffffff
    4734:	ffffffff 	.word	0xffffffff
    4738:	ffffffff 	.word	0xffffffff
    473c:	ffffffff 	.word	0xffffffff
    4740:	ffffffff 	.word	0xffffffff
    4744:	ffffffff 	.word	0xffffffff
    4748:	ffffffff 	.word	0xffffffff
    474c:	ffffffff 	.word	0xffffffff
    4750:	ffffffff 	.word	0xffffffff
    4754:	ffffffff 	.word	0xffffffff
    4758:	ffffffff 	.word	0xffffffff
    475c:	ffffffff 	.word	0xffffffff
    4760:	ffffffff 	.word	0xffffffff
    4764:	ffffffff 	.word	0xffffffff
    4768:	ffffffff 	.word	0xffffffff
    476c:	ffffffff 	.word	0xffffffff
    4770:	ffffffff 	.word	0xffffffff
    4774:	ffffffff 	.word	0xffffffff
    4778:	ffffffff 	.word	0xffffffff
    477c:	ffffffff 	.word	0xffffffff
    4780:	ffffffff 	.word	0xffffffff
    4784:	ffffffff 	.word	0xffffffff
    4788:	ffffffff 	.word	0xffffffff
    478c:	ffffffff 	.word	0xffffffff
    4790:	ffffffff 	.word	0xffffffff
    4794:	ffffffff 	.word	0xffffffff
    4798:	ffffffff 	.word	0xffffffff
    479c:	ffffffff 	.word	0xffffffff
    47a0:	ffffffff 	.word	0xffffffff
    47a4:	ffffffff 	.word	0xffffffff
    47a8:	ffffffff 	.word	0xffffffff
    47ac:	ffffffff 	.word	0xffffffff
    47b0:	ffffffff 	.word	0xffffffff
    47b4:	ffffffff 	.word	0xffffffff
    47b8:	ffffffff 	.word	0xffffffff
    47bc:	ffffffff 	.word	0xffffffff
    47c0:	ffffffff 	.word	0xffffffff
    47c4:	ffffffff 	.word	0xffffffff
    47c8:	ffffffff 	.word	0xffffffff
    47cc:	ffffffff 	.word	0xffffffff
    47d0:	ffffffff 	.word	0xffffffff
    47d4:	ffffffff 	.word	0xffffffff
    47d8:	ffffffff 	.word	0xffffffff
    47dc:	ffffffff 	.word	0xffffffff
    47e0:	ffffffff 	.word	0xffffffff
    47e4:	ffffffff 	.word	0xffffffff
    47e8:	ffffffff 	.word	0xffffffff
    47ec:	ffffffff 	.word	0xffffffff
    47f0:	ffffffff 	.word	0xffffffff
    47f4:	ffffffff 	.word	0xffffffff
    47f8:	ffffffff 	.word	0xffffffff
    47fc:	ffffffff 	.word	0xffffffff
    4800:	ffffffff 	.word	0xffffffff
    4804:	ffffffff 	.word	0xffffffff
    4808:	ffffffff 	.word	0xffffffff
    480c:	ffffffff 	.word	0xffffffff
    4810:	ffffffff 	.word	0xffffffff
    4814:	ffffffff 	.word	0xffffffff
    4818:	ffffffff 	.word	0xffffffff
    481c:	ffffffff 	.word	0xffffffff
    4820:	ffffffff 	.word	0xffffffff
    4824:	ffffffff 	.word	0xffffffff
    4828:	ffffffff 	.word	0xffffffff
    482c:	ffffffff 	.word	0xffffffff
    4830:	ffffffff 	.word	0xffffffff
    4834:	ffffffff 	.word	0xffffffff
    4838:	ffffffff 	.word	0xffffffff
    483c:	ffffffff 	.word	0xffffffff
    4840:	ffffffff 	.word	0xffffffff
    4844:	ffffffff 	.word	0xffffffff
    4848:	ffffffff 	.word	0xffffffff
    484c:	ffffffff 	.word	0xffffffff
    4850:	ffffffff 	.word	0xffffffff
    4854:	ffffffff 	.word	0xffffffff
    4858:	ffffffff 	.word	0xffffffff
    485c:	ffffffff 	.word	0xffffffff
    4860:	ffffffff 	.word	0xffffffff
    4864:	ffffffff 	.word	0xffffffff
    4868:	ffffffff 	.word	0xffffffff
    486c:	ffffffff 	.word	0xffffffff
    4870:	ffffffff 	.word	0xffffffff
    4874:	ffffffff 	.word	0xffffffff
    4878:	ffffffff 	.word	0xffffffff
    487c:	ffffffff 	.word	0xffffffff
    4880:	ffffffff 	.word	0xffffffff
    4884:	ffffffff 	.word	0xffffffff
    4888:	ffffffff 	.word	0xffffffff
    488c:	ffffffff 	.word	0xffffffff
    4890:	ffffffff 	.word	0xffffffff
    4894:	ffffffff 	.word	0xffffffff
    4898:	ffffffff 	.word	0xffffffff
    489c:	ffffffff 	.word	0xffffffff
    48a0:	ffffffff 	.word	0xffffffff
    48a4:	ffffffff 	.word	0xffffffff
    48a8:	ffffffff 	.word	0xffffffff
    48ac:	ffffffff 	.word	0xffffffff
    48b0:	ffffffff 	.word	0xffffffff
    48b4:	ffffffff 	.word	0xffffffff
    48b8:	ffffffff 	.word	0xffffffff
    48bc:	ffffffff 	.word	0xffffffff
    48c0:	ffffffff 	.word	0xffffffff
    48c4:	ffffffff 	.word	0xffffffff
    48c8:	ffffffff 	.word	0xffffffff
    48cc:	ffffffff 	.word	0xffffffff
    48d0:	ffffffff 	.word	0xffffffff
    48d4:	ffffffff 	.word	0xffffffff
    48d8:	ffffffff 	.word	0xffffffff
    48dc:	ffffffff 	.word	0xffffffff
    48e0:	ffffffff 	.word	0xffffffff
    48e4:	ffffffff 	.word	0xffffffff
    48e8:	ffffffff 	.word	0xffffffff
    48ec:	ffffffff 	.word	0xffffffff
    48f0:	ffffffff 	.word	0xffffffff
    48f4:	ffffffff 	.word	0xffffffff
    48f8:	ffffffff 	.word	0xffffffff
    48fc:	ffffffff 	.word	0xffffffff
    4900:	ffffffff 	.word	0xffffffff
    4904:	ffffffff 	.word	0xffffffff
    4908:	ffffffff 	.word	0xffffffff
    490c:	ffffffff 	.word	0xffffffff
    4910:	ffffffff 	.word	0xffffffff
    4914:	ffffffff 	.word	0xffffffff
    4918:	ffffffff 	.word	0xffffffff
    491c:	ffffffff 	.word	0xffffffff
    4920:	ffffffff 	.word	0xffffffff
    4924:	ffffffff 	.word	0xffffffff
    4928:	ffffffff 	.word	0xffffffff
    492c:	ffffffff 	.word	0xffffffff
    4930:	ffffffff 	.word	0xffffffff
    4934:	ffffffff 	.word	0xffffffff
    4938:	ffffffff 	.word	0xffffffff
    493c:	ffffffff 	.word	0xffffffff
    4940:	ffffffff 	.word	0xffffffff
    4944:	ffffffff 	.word	0xffffffff
    4948:	ffffffff 	.word	0xffffffff
    494c:	ffffffff 	.word	0xffffffff
    4950:	ffffffff 	.word	0xffffffff
    4954:	ffffffff 	.word	0xffffffff
    4958:	ffffffff 	.word	0xffffffff
    495c:	ffffffff 	.word	0xffffffff
    4960:	ffffffff 	.word	0xffffffff
    4964:	ffffffff 	.word	0xffffffff
    4968:	ffffffff 	.word	0xffffffff
    496c:	ffffffff 	.word	0xffffffff
    4970:	ffffffff 	.word	0xffffffff
    4974:	ffffffff 	.word	0xffffffff
    4978:	ffffffff 	.word	0xffffffff
    497c:	ffffffff 	.word	0xffffffff
    4980:	ffffffff 	.word	0xffffffff
    4984:	ffffffff 	.word	0xffffffff
    4988:	ffffffff 	.word	0xffffffff
    498c:	ffffffff 	.word	0xffffffff
    4990:	ffffffff 	.word	0xffffffff
    4994:	ffffffff 	.word	0xffffffff
    4998:	ffffffff 	.word	0xffffffff
    499c:	ffffffff 	.word	0xffffffff
    49a0:	ffffffff 	.word	0xffffffff
    49a4:	ffffffff 	.word	0xffffffff
    49a8:	ffffffff 	.word	0xffffffff
    49ac:	ffffffff 	.word	0xffffffff
    49b0:	ffffffff 	.word	0xffffffff
    49b4:	ffffffff 	.word	0xffffffff
    49b8:	ffffffff 	.word	0xffffffff
    49bc:	ffffffff 	.word	0xffffffff
    49c0:	ffffffff 	.word	0xffffffff
    49c4:	ffffffff 	.word	0xffffffff
    49c8:	ffffffff 	.word	0xffffffff
    49cc:	ffffffff 	.word	0xffffffff
    49d0:	ffffffff 	.word	0xffffffff
    49d4:	ffffffff 	.word	0xffffffff
    49d8:	ffffffff 	.word	0xffffffff
    49dc:	ffffffff 	.word	0xffffffff
    49e0:	ffffffff 	.word	0xffffffff
    49e4:	ffffffff 	.word	0xffffffff
    49e8:	ffffffff 	.word	0xffffffff
    49ec:	ffffffff 	.word	0xffffffff
    49f0:	ffffffff 	.word	0xffffffff
    49f4:	ffffffff 	.word	0xffffffff
    49f8:	ffffffff 	.word	0xffffffff
    49fc:	ffffffff 	.word	0xffffffff
    4a00:	ffffffff 	.word	0xffffffff
    4a04:	ffffffff 	.word	0xffffffff
    4a08:	ffffffff 	.word	0xffffffff
    4a0c:	ffffffff 	.word	0xffffffff
    4a10:	ffffffff 	.word	0xffffffff
    4a14:	ffffffff 	.word	0xffffffff
    4a18:	ffffffff 	.word	0xffffffff
    4a1c:	ffffffff 	.word	0xffffffff
    4a20:	ffffffff 	.word	0xffffffff
    4a24:	ffffffff 	.word	0xffffffff
    4a28:	ffffffff 	.word	0xffffffff
    4a2c:	ffffffff 	.word	0xffffffff
    4a30:	ffffffff 	.word	0xffffffff
    4a34:	ffffffff 	.word	0xffffffff
    4a38:	ffffffff 	.word	0xffffffff
    4a3c:	ffffffff 	.word	0xffffffff
    4a40:	ffffffff 	.word	0xffffffff
    4a44:	ffffffff 	.word	0xffffffff
    4a48:	ffffffff 	.word	0xffffffff
    4a4c:	ffffffff 	.word	0xffffffff
    4a50:	ffffffff 	.word	0xffffffff
    4a54:	ffffffff 	.word	0xffffffff
    4a58:	ffffffff 	.word	0xffffffff
    4a5c:	ffffffff 	.word	0xffffffff
    4a60:	ffffffff 	.word	0xffffffff
    4a64:	ffffffff 	.word	0xffffffff
    4a68:	ffffffff 	.word	0xffffffff
    4a6c:	ffffffff 	.word	0xffffffff
    4a70:	ffffffff 	.word	0xffffffff
    4a74:	ffffffff 	.word	0xffffffff
    4a78:	ffffffff 	.word	0xffffffff
    4a7c:	ffffffff 	.word	0xffffffff
    4a80:	ffffffff 	.word	0xffffffff
    4a84:	ffffffff 	.word	0xffffffff
    4a88:	ffffffff 	.word	0xffffffff
    4a8c:	ffffffff 	.word	0xffffffff
    4a90:	ffffffff 	.word	0xffffffff
    4a94:	ffffffff 	.word	0xffffffff
    4a98:	ffffffff 	.word	0xffffffff
    4a9c:	ffffffff 	.word	0xffffffff
    4aa0:	ffffffff 	.word	0xffffffff
    4aa4:	ffffffff 	.word	0xffffffff
    4aa8:	ffffffff 	.word	0xffffffff
    4aac:	ffffffff 	.word	0xffffffff
    4ab0:	ffffffff 	.word	0xffffffff
    4ab4:	ffffffff 	.word	0xffffffff
    4ab8:	ffffffff 	.word	0xffffffff
    4abc:	ffffffff 	.word	0xffffffff
    4ac0:	ffffffff 	.word	0xffffffff
    4ac4:	ffffffff 	.word	0xffffffff
    4ac8:	ffffffff 	.word	0xffffffff
    4acc:	ffffffff 	.word	0xffffffff
    4ad0:	ffffffff 	.word	0xffffffff
    4ad4:	ffffffff 	.word	0xffffffff
    4ad8:	ffffffff 	.word	0xffffffff
    4adc:	ffffffff 	.word	0xffffffff
    4ae0:	ffffffff 	.word	0xffffffff
    4ae4:	ffffffff 	.word	0xffffffff
    4ae8:	ffffffff 	.word	0xffffffff
    4aec:	ffffffff 	.word	0xffffffff
    4af0:	ffffffff 	.word	0xffffffff
    4af4:	ffffffff 	.word	0xffffffff
    4af8:	ffffffff 	.word	0xffffffff
    4afc:	ffffffff 	.word	0xffffffff
    4b00:	ffffffff 	.word	0xffffffff
    4b04:	ffffffff 	.word	0xffffffff
    4b08:	ffffffff 	.word	0xffffffff
    4b0c:	ffffffff 	.word	0xffffffff
    4b10:	ffffffff 	.word	0xffffffff
    4b14:	ffffffff 	.word	0xffffffff
    4b18:	ffffffff 	.word	0xffffffff
    4b1c:	ffffffff 	.word	0xffffffff
    4b20:	ffffffff 	.word	0xffffffff
    4b24:	ffffffff 	.word	0xffffffff
    4b28:	ffffffff 	.word	0xffffffff
    4b2c:	ffffffff 	.word	0xffffffff
    4b30:	ffffffff 	.word	0xffffffff
    4b34:	ffffffff 	.word	0xffffffff
    4b38:	ffffffff 	.word	0xffffffff
    4b3c:	ffffffff 	.word	0xffffffff
    4b40:	ffffffff 	.word	0xffffffff
    4b44:	ffffffff 	.word	0xffffffff
    4b48:	ffffffff 	.word	0xffffffff
    4b4c:	ffffffff 	.word	0xffffffff
    4b50:	ffffffff 	.word	0xffffffff
    4b54:	ffffffff 	.word	0xffffffff
    4b58:	ffffffff 	.word	0xffffffff
    4b5c:	ffffffff 	.word	0xffffffff
    4b60:	ffffffff 	.word	0xffffffff
    4b64:	ffffffff 	.word	0xffffffff
    4b68:	ffffffff 	.word	0xffffffff
    4b6c:	ffffffff 	.word	0xffffffff
    4b70:	ffffffff 	.word	0xffffffff
    4b74:	ffffffff 	.word	0xffffffff
    4b78:	ffffffff 	.word	0xffffffff
    4b7c:	ffffffff 	.word	0xffffffff
    4b80:	ffffffff 	.word	0xffffffff
    4b84:	ffffffff 	.word	0xffffffff
    4b88:	ffffffff 	.word	0xffffffff
    4b8c:	ffffffff 	.word	0xffffffff
    4b90:	ffffffff 	.word	0xffffffff
    4b94:	ffffffff 	.word	0xffffffff
    4b98:	ffffffff 	.word	0xffffffff
    4b9c:	ffffffff 	.word	0xffffffff
    4ba0:	ffffffff 	.word	0xffffffff
    4ba4:	ffffffff 	.word	0xffffffff
    4ba8:	ffffffff 	.word	0xffffffff
    4bac:	ffffffff 	.word	0xffffffff
    4bb0:	ffffffff 	.word	0xffffffff
    4bb4:	ffffffff 	.word	0xffffffff
    4bb8:	ffffffff 	.word	0xffffffff
    4bbc:	ffffffff 	.word	0xffffffff
    4bc0:	ffffffff 	.word	0xffffffff
    4bc4:	ffffffff 	.word	0xffffffff
    4bc8:	ffffffff 	.word	0xffffffff
    4bcc:	ffffffff 	.word	0xffffffff
    4bd0:	ffffffff 	.word	0xffffffff
    4bd4:	ffffffff 	.word	0xffffffff
    4bd8:	ffffffff 	.word	0xffffffff
    4bdc:	ffffffff 	.word	0xffffffff
    4be0:	ffffffff 	.word	0xffffffff
    4be4:	ffffffff 	.word	0xffffffff
    4be8:	ffffffff 	.word	0xffffffff
    4bec:	ffffffff 	.word	0xffffffff
    4bf0:	ffffffff 	.word	0xffffffff
    4bf4:	ffffffff 	.word	0xffffffff
    4bf8:	ffffffff 	.word	0xffffffff
    4bfc:	ffffffff 	.word	0xffffffff
    4c00:	ffffffff 	.word	0xffffffff
    4c04:	ffffffff 	.word	0xffffffff
    4c08:	ffffffff 	.word	0xffffffff
    4c0c:	ffffffff 	.word	0xffffffff
    4c10:	ffffffff 	.word	0xffffffff
    4c14:	ffffffff 	.word	0xffffffff
    4c18:	ffffffff 	.word	0xffffffff
    4c1c:	ffffffff 	.word	0xffffffff
    4c20:	ffffffff 	.word	0xffffffff
    4c24:	ffffffff 	.word	0xffffffff
    4c28:	ffffffff 	.word	0xffffffff
    4c2c:	ffffffff 	.word	0xffffffff
    4c30:	ffffffff 	.word	0xffffffff
    4c34:	ffffffff 	.word	0xffffffff
    4c38:	ffffffff 	.word	0xffffffff
    4c3c:	ffffffff 	.word	0xffffffff
    4c40:	ffffffff 	.word	0xffffffff
    4c44:	ffffffff 	.word	0xffffffff
    4c48:	ffffffff 	.word	0xffffffff
    4c4c:	ffffffff 	.word	0xffffffff
    4c50:	ffffffff 	.word	0xffffffff
    4c54:	ffffffff 	.word	0xffffffff
    4c58:	ffffffff 	.word	0xffffffff
    4c5c:	ffffffff 	.word	0xffffffff
    4c60:	ffffffff 	.word	0xffffffff
    4c64:	ffffffff 	.word	0xffffffff
    4c68:	ffffffff 	.word	0xffffffff
    4c6c:	ffffffff 	.word	0xffffffff
    4c70:	ffffffff 	.word	0xffffffff
    4c74:	ffffffff 	.word	0xffffffff
    4c78:	ffffffff 	.word	0xffffffff
    4c7c:	ffffffff 	.word	0xffffffff
    4c80:	ffffffff 	.word	0xffffffff
    4c84:	ffffffff 	.word	0xffffffff
    4c88:	ffffffff 	.word	0xffffffff
    4c8c:	ffffffff 	.word	0xffffffff
    4c90:	ffffffff 	.word	0xffffffff
    4c94:	ffffffff 	.word	0xffffffff
    4c98:	ffffffff 	.word	0xffffffff
    4c9c:	ffffffff 	.word	0xffffffff
    4ca0:	ffffffff 	.word	0xffffffff
    4ca4:	ffffffff 	.word	0xffffffff
    4ca8:	ffffffff 	.word	0xffffffff
    4cac:	ffffffff 	.word	0xffffffff
    4cb0:	ffffffff 	.word	0xffffffff
    4cb4:	ffffffff 	.word	0xffffffff
    4cb8:	ffffffff 	.word	0xffffffff
    4cbc:	ffffffff 	.word	0xffffffff
    4cc0:	ffffffff 	.word	0xffffffff
    4cc4:	ffffffff 	.word	0xffffffff
    4cc8:	ffffffff 	.word	0xffffffff
    4ccc:	ffffffff 	.word	0xffffffff
    4cd0:	ffffffff 	.word	0xffffffff
    4cd4:	ffffffff 	.word	0xffffffff
    4cd8:	ffffffff 	.word	0xffffffff
    4cdc:	ffffffff 	.word	0xffffffff
    4ce0:	ffffffff 	.word	0xffffffff
    4ce4:	ffffffff 	.word	0xffffffff
    4ce8:	ffffffff 	.word	0xffffffff
    4cec:	ffffffff 	.word	0xffffffff
    4cf0:	ffffffff 	.word	0xffffffff
    4cf4:	ffffffff 	.word	0xffffffff
    4cf8:	ffffffff 	.word	0xffffffff
    4cfc:	ffffffff 	.word	0xffffffff
    4d00:	ffffffff 	.word	0xffffffff
    4d04:	ffffffff 	.word	0xffffffff
    4d08:	ffffffff 	.word	0xffffffff
    4d0c:	ffffffff 	.word	0xffffffff
    4d10:	ffffffff 	.word	0xffffffff
    4d14:	ffffffff 	.word	0xffffffff
    4d18:	ffffffff 	.word	0xffffffff
    4d1c:	ffffffff 	.word	0xffffffff
    4d20:	ffffffff 	.word	0xffffffff
    4d24:	ffffffff 	.word	0xffffffff
    4d28:	ffffffff 	.word	0xffffffff
    4d2c:	ffffffff 	.word	0xffffffff
    4d30:	ffffffff 	.word	0xffffffff
    4d34:	ffffffff 	.word	0xffffffff
    4d38:	ffffffff 	.word	0xffffffff
    4d3c:	ffffffff 	.word	0xffffffff
    4d40:	ffffffff 	.word	0xffffffff
    4d44:	ffffffff 	.word	0xffffffff
    4d48:	ffffffff 	.word	0xffffffff
    4d4c:	ffffffff 	.word	0xffffffff
    4d50:	ffffffff 	.word	0xffffffff
    4d54:	ffffffff 	.word	0xffffffff
    4d58:	ffffffff 	.word	0xffffffff
    4d5c:	ffffffff 	.word	0xffffffff
    4d60:	ffffffff 	.word	0xffffffff
    4d64:	ffffffff 	.word	0xffffffff
    4d68:	ffffffff 	.word	0xffffffff
    4d6c:	ffffffff 	.word	0xffffffff
    4d70:	ffffffff 	.word	0xffffffff
    4d74:	ffffffff 	.word	0xffffffff
    4d78:	ffffffff 	.word	0xffffffff
    4d7c:	ffffffff 	.word	0xffffffff
    4d80:	ffffffff 	.word	0xffffffff
    4d84:	ffffffff 	.word	0xffffffff
    4d88:	ffffffff 	.word	0xffffffff
    4d8c:	ffffffff 	.word	0xffffffff
    4d90:	ffffffff 	.word	0xffffffff
    4d94:	ffffffff 	.word	0xffffffff
    4d98:	ffffffff 	.word	0xffffffff
    4d9c:	ffffffff 	.word	0xffffffff
    4da0:	ffffffff 	.word	0xffffffff
    4da4:	ffffffff 	.word	0xffffffff
    4da8:	ffffffff 	.word	0xffffffff
    4dac:	ffffffff 	.word	0xffffffff
    4db0:	ffffffff 	.word	0xffffffff
    4db4:	ffffffff 	.word	0xffffffff
    4db8:	ffffffff 	.word	0xffffffff
    4dbc:	ffffffff 	.word	0xffffffff
    4dc0:	ffffffff 	.word	0xffffffff
    4dc4:	ffffffff 	.word	0xffffffff
    4dc8:	ffffffff 	.word	0xffffffff
    4dcc:	ffffffff 	.word	0xffffffff
    4dd0:	ffffffff 	.word	0xffffffff
    4dd4:	ffffffff 	.word	0xffffffff
    4dd8:	ffffffff 	.word	0xffffffff
    4ddc:	ffffffff 	.word	0xffffffff
    4de0:	ffffffff 	.word	0xffffffff
    4de4:	ffffffff 	.word	0xffffffff
    4de8:	ffffffff 	.word	0xffffffff
    4dec:	ffffffff 	.word	0xffffffff
    4df0:	ffffffff 	.word	0xffffffff
    4df4:	ffffffff 	.word	0xffffffff
    4df8:	ffffffff 	.word	0xffffffff
    4dfc:	ffffffff 	.word	0xffffffff
    4e00:	ffffffff 	.word	0xffffffff
    4e04:	ffffffff 	.word	0xffffffff
    4e08:	ffffffff 	.word	0xffffffff
    4e0c:	ffffffff 	.word	0xffffffff
    4e10:	ffffffff 	.word	0xffffffff
    4e14:	ffffffff 	.word	0xffffffff
    4e18:	ffffffff 	.word	0xffffffff
    4e1c:	ffffffff 	.word	0xffffffff
    4e20:	ffffffff 	.word	0xffffffff
    4e24:	ffffffff 	.word	0xffffffff
    4e28:	ffffffff 	.word	0xffffffff
    4e2c:	ffffffff 	.word	0xffffffff
    4e30:	ffffffff 	.word	0xffffffff
    4e34:	ffffffff 	.word	0xffffffff
    4e38:	ffffffff 	.word	0xffffffff
    4e3c:	ffffffff 	.word	0xffffffff
    4e40:	ffffffff 	.word	0xffffffff
    4e44:	ffffffff 	.word	0xffffffff
    4e48:	ffffffff 	.word	0xffffffff
    4e4c:	ffffffff 	.word	0xffffffff
    4e50:	ffffffff 	.word	0xffffffff
    4e54:	ffffffff 	.word	0xffffffff
    4e58:	ffffffff 	.word	0xffffffff
    4e5c:	ffffffff 	.word	0xffffffff
    4e60:	ffffffff 	.word	0xffffffff
    4e64:	ffffffff 	.word	0xffffffff
    4e68:	ffffffff 	.word	0xffffffff
    4e6c:	ffffffff 	.word	0xffffffff
    4e70:	ffffffff 	.word	0xffffffff
    4e74:	ffffffff 	.word	0xffffffff
    4e78:	ffffffff 	.word	0xffffffff
    4e7c:	ffffffff 	.word	0xffffffff
    4e80:	ffffffff 	.word	0xffffffff
    4e84:	ffffffff 	.word	0xffffffff
    4e88:	ffffffff 	.word	0xffffffff
    4e8c:	ffffffff 	.word	0xffffffff
    4e90:	ffffffff 	.word	0xffffffff
    4e94:	ffffffff 	.word	0xffffffff
    4e98:	ffffffff 	.word	0xffffffff
    4e9c:	ffffffff 	.word	0xffffffff
    4ea0:	ffffffff 	.word	0xffffffff
    4ea4:	ffffffff 	.word	0xffffffff
    4ea8:	ffffffff 	.word	0xffffffff
    4eac:	ffffffff 	.word	0xffffffff
    4eb0:	ffffffff 	.word	0xffffffff
    4eb4:	ffffffff 	.word	0xffffffff
    4eb8:	ffffffff 	.word	0xffffffff
    4ebc:	ffffffff 	.word	0xffffffff
    4ec0:	ffffffff 	.word	0xffffffff
    4ec4:	ffffffff 	.word	0xffffffff
    4ec8:	ffffffff 	.word	0xffffffff
    4ecc:	ffffffff 	.word	0xffffffff
    4ed0:	ffffffff 	.word	0xffffffff
    4ed4:	ffffffff 	.word	0xffffffff
    4ed8:	ffffffff 	.word	0xffffffff
    4edc:	ffffffff 	.word	0xffffffff
    4ee0:	ffffffff 	.word	0xffffffff
    4ee4:	ffffffff 	.word	0xffffffff
    4ee8:	ffffffff 	.word	0xffffffff
    4eec:	ffffffff 	.word	0xffffffff
    4ef0:	ffffffff 	.word	0xffffffff
    4ef4:	ffffffff 	.word	0xffffffff
    4ef8:	ffffffff 	.word	0xffffffff
    4efc:	ffffffff 	.word	0xffffffff
    4f00:	ffffffff 	.word	0xffffffff
    4f04:	ffffffff 	.word	0xffffffff
    4f08:	ffffffff 	.word	0xffffffff
    4f0c:	ffffffff 	.word	0xffffffff
    4f10:	ffffffff 	.word	0xffffffff
    4f14:	ffffffff 	.word	0xffffffff
    4f18:	ffffffff 	.word	0xffffffff
    4f1c:	ffffffff 	.word	0xffffffff
    4f20:	ffffffff 	.word	0xffffffff
    4f24:	ffffffff 	.word	0xffffffff
    4f28:	ffffffff 	.word	0xffffffff
    4f2c:	ffffffff 	.word	0xffffffff
    4f30:	ffffffff 	.word	0xffffffff
    4f34:	ffffffff 	.word	0xffffffff
    4f38:	ffffffff 	.word	0xffffffff
    4f3c:	ffffffff 	.word	0xffffffff
    4f40:	ffffffff 	.word	0xffffffff
    4f44:	ffffffff 	.word	0xffffffff
    4f48:	ffffffff 	.word	0xffffffff
    4f4c:	ffffffff 	.word	0xffffffff
    4f50:	ffffffff 	.word	0xffffffff
    4f54:	ffffffff 	.word	0xffffffff
    4f58:	ffffffff 	.word	0xffffffff
    4f5c:	ffffffff 	.word	0xffffffff
    4f60:	ffffffff 	.word	0xffffffff
    4f64:	ffffffff 	.word	0xffffffff
    4f68:	ffffffff 	.word	0xffffffff
    4f6c:	ffffffff 	.word	0xffffffff
    4f70:	ffffffff 	.word	0xffffffff
    4f74:	ffffffff 	.word	0xffffffff
    4f78:	ffffffff 	.word	0xffffffff
    4f7c:	ffffffff 	.word	0xffffffff
    4f80:	ffffffff 	.word	0xffffffff
    4f84:	ffffffff 	.word	0xffffffff
    4f88:	ffffffff 	.word	0xffffffff
    4f8c:	ffffffff 	.word	0xffffffff
    4f90:	ffffffff 	.word	0xffffffff
    4f94:	ffffffff 	.word	0xffffffff
    4f98:	ffffffff 	.word	0xffffffff
    4f9c:	ffffffff 	.word	0xffffffff
    4fa0:	ffffffff 	.word	0xffffffff
    4fa4:	ffffffff 	.word	0xffffffff
    4fa8:	ffffffff 	.word	0xffffffff
    4fac:	ffffffff 	.word	0xffffffff
    4fb0:	ffffffff 	.word	0xffffffff
    4fb4:	ffffffff 	.word	0xffffffff
    4fb8:	ffffffff 	.word	0xffffffff
    4fbc:	ffffffff 	.word	0xffffffff
    4fc0:	ffffffff 	.word	0xffffffff
    4fc4:	ffffffff 	.word	0xffffffff
    4fc8:	ffffffff 	.word	0xffffffff
    4fcc:	ffffffff 	.word	0xffffffff
    4fd0:	ffffffff 	.word	0xffffffff
    4fd4:	ffffffff 	.word	0xffffffff
    4fd8:	ffffffff 	.word	0xffffffff
    4fdc:	ffffffff 	.word	0xffffffff
    4fe0:	ffffffff 	.word	0xffffffff
    4fe4:	ffffffff 	.word	0xffffffff
    4fe8:	ffffffff 	.word	0xffffffff
    4fec:	ffffffff 	.word	0xffffffff
    4ff0:	ffffffff 	.word	0xffffffff
    4ff4:	ffffffff 	.word	0xffffffff
    4ff8:	ffffffff 	.word	0xffffffff
    4ffc:	ffffffff 	.word	0xffffffff
    5000:	ffffffff 	.word	0xffffffff
    5004:	ffffffff 	.word	0xffffffff
    5008:	ffffffff 	.word	0xffffffff
    500c:	ffffffff 	.word	0xffffffff
    5010:	ffffffff 	.word	0xffffffff
    5014:	ffffffff 	.word	0xffffffff
    5018:	ffffffff 	.word	0xffffffff
    501c:	ffffffff 	.word	0xffffffff
    5020:	ffffffff 	.word	0xffffffff
    5024:	ffffffff 	.word	0xffffffff
    5028:	ffffffff 	.word	0xffffffff
    502c:	ffffffff 	.word	0xffffffff
    5030:	ffffffff 	.word	0xffffffff
    5034:	ffffffff 	.word	0xffffffff
    5038:	ffffffff 	.word	0xffffffff
    503c:	ffffffff 	.word	0xffffffff
    5040:	ffffffff 	.word	0xffffffff
    5044:	ffffffff 	.word	0xffffffff
    5048:	ffffffff 	.word	0xffffffff
    504c:	ffffffff 	.word	0xffffffff
    5050:	ffffffff 	.word	0xffffffff
    5054:	ffffffff 	.word	0xffffffff
    5058:	ffffffff 	.word	0xffffffff
    505c:	ffffffff 	.word	0xffffffff
    5060:	ffffffff 	.word	0xffffffff
    5064:	ffffffff 	.word	0xffffffff
    5068:	ffffffff 	.word	0xffffffff
    506c:	ffffffff 	.word	0xffffffff
    5070:	ffffffff 	.word	0xffffffff
    5074:	ffffffff 	.word	0xffffffff
    5078:	ffffffff 	.word	0xffffffff
    507c:	ffffffff 	.word	0xffffffff
    5080:	ffffffff 	.word	0xffffffff
    5084:	ffffffff 	.word	0xffffffff
    5088:	ffffffff 	.word	0xffffffff
    508c:	ffffffff 	.word	0xffffffff
    5090:	ffffffff 	.word	0xffffffff
    5094:	ffffffff 	.word	0xffffffff
    5098:	ffffffff 	.word	0xffffffff
    509c:	ffffffff 	.word	0xffffffff
    50a0:	ffffffff 	.word	0xffffffff
    50a4:	ffffffff 	.word	0xffffffff
    50a8:	ffffffff 	.word	0xffffffff
    50ac:	ffffffff 	.word	0xffffffff
    50b0:	ffffffff 	.word	0xffffffff
    50b4:	ffffffff 	.word	0xffffffff
    50b8:	ffffffff 	.word	0xffffffff
    50bc:	ffffffff 	.word	0xffffffff
    50c0:	ffffffff 	.word	0xffffffff
    50c4:	ffffffff 	.word	0xffffffff
    50c8:	ffffffff 	.word	0xffffffff
    50cc:	ffffffff 	.word	0xffffffff
    50d0:	ffffffff 	.word	0xffffffff
    50d4:	ffffffff 	.word	0xffffffff
    50d8:	ffffffff 	.word	0xffffffff
    50dc:	ffffffff 	.word	0xffffffff
    50e0:	ffffffff 	.word	0xffffffff
    50e4:	ffffffff 	.word	0xffffffff
    50e8:	ffffffff 	.word	0xffffffff
    50ec:	ffffffff 	.word	0xffffffff
    50f0:	ffffffff 	.word	0xffffffff
    50f4:	ffffffff 	.word	0xffffffff
    50f8:	ffffffff 	.word	0xffffffff
    50fc:	ffffffff 	.word	0xffffffff
    5100:	ffffffff 	.word	0xffffffff
    5104:	ffffffff 	.word	0xffffffff
    5108:	ffffffff 	.word	0xffffffff
    510c:	ffffffff 	.word	0xffffffff
    5110:	ffffffff 	.word	0xffffffff
    5114:	ffffffff 	.word	0xffffffff
    5118:	ffffffff 	.word	0xffffffff
    511c:	ffffffff 	.word	0xffffffff
    5120:	ffffffff 	.word	0xffffffff
    5124:	ffffffff 	.word	0xffffffff
    5128:	ffffffff 	.word	0xffffffff
    512c:	ffffffff 	.word	0xffffffff
    5130:	ffffffff 	.word	0xffffffff
    5134:	ffffffff 	.word	0xffffffff
    5138:	ffffffff 	.word	0xffffffff
    513c:	ffffffff 	.word	0xffffffff
    5140:	ffffffff 	.word	0xffffffff
    5144:	ffffffff 	.word	0xffffffff
    5148:	ffffffff 	.word	0xffffffff
    514c:	ffffffff 	.word	0xffffffff
    5150:	ffffffff 	.word	0xffffffff
    5154:	ffffffff 	.word	0xffffffff
    5158:	ffffffff 	.word	0xffffffff
    515c:	ffffffff 	.word	0xffffffff
    5160:	ffffffff 	.word	0xffffffff
    5164:	ffffffff 	.word	0xffffffff
    5168:	ffffffff 	.word	0xffffffff
    516c:	ffffffff 	.word	0xffffffff
    5170:	ffffffff 	.word	0xffffffff
    5174:	ffffffff 	.word	0xffffffff
    5178:	ffffffff 	.word	0xffffffff
    517c:	ffffffff 	.word	0xffffffff
    5180:	ffffffff 	.word	0xffffffff
    5184:	ffffffff 	.word	0xffffffff
    5188:	ffffffff 	.word	0xffffffff
    518c:	ffffffff 	.word	0xffffffff
    5190:	ffffffff 	.word	0xffffffff
    5194:	ffffffff 	.word	0xffffffff
    5198:	ffffffff 	.word	0xffffffff
    519c:	ffffffff 	.word	0xffffffff
    51a0:	ffffffff 	.word	0xffffffff
    51a4:	ffffffff 	.word	0xffffffff
    51a8:	ffffffff 	.word	0xffffffff
    51ac:	ffffffff 	.word	0xffffffff
    51b0:	ffffffff 	.word	0xffffffff
    51b4:	ffffffff 	.word	0xffffffff
    51b8:	ffffffff 	.word	0xffffffff
    51bc:	ffffffff 	.word	0xffffffff
    51c0:	ffffffff 	.word	0xffffffff
    51c4:	ffffffff 	.word	0xffffffff
    51c8:	ffffffff 	.word	0xffffffff
    51cc:	ffffffff 	.word	0xffffffff
    51d0:	ffffffff 	.word	0xffffffff
    51d4:	ffffffff 	.word	0xffffffff
    51d8:	ffffffff 	.word	0xffffffff
    51dc:	ffffffff 	.word	0xffffffff
    51e0:	ffffffff 	.word	0xffffffff
    51e4:	ffffffff 	.word	0xffffffff
    51e8:	ffffffff 	.word	0xffffffff
    51ec:	ffffffff 	.word	0xffffffff
    51f0:	ffffffff 	.word	0xffffffff
    51f4:	ffffffff 	.word	0xffffffff
    51f8:	ffffffff 	.word	0xffffffff
    51fc:	ffffffff 	.word	0xffffffff
    5200:	ffffffff 	.word	0xffffffff
    5204:	ffffffff 	.word	0xffffffff
    5208:	ffffffff 	.word	0xffffffff
    520c:	ffffffff 	.word	0xffffffff
    5210:	ffffffff 	.word	0xffffffff
    5214:	ffffffff 	.word	0xffffffff
    5218:	ffffffff 	.word	0xffffffff
    521c:	ffffffff 	.word	0xffffffff
    5220:	ffffffff 	.word	0xffffffff
    5224:	ffffffff 	.word	0xffffffff
    5228:	ffffffff 	.word	0xffffffff
    522c:	ffffffff 	.word	0xffffffff
    5230:	ffffffff 	.word	0xffffffff
    5234:	ffffffff 	.word	0xffffffff
    5238:	ffffffff 	.word	0xffffffff
    523c:	ffffffff 	.word	0xffffffff
    5240:	ffffffff 	.word	0xffffffff
    5244:	ffffffff 	.word	0xffffffff
    5248:	ffffffff 	.word	0xffffffff
    524c:	ffffffff 	.word	0xffffffff
    5250:	ffffffff 	.word	0xffffffff
    5254:	ffffffff 	.word	0xffffffff
    5258:	ffffffff 	.word	0xffffffff
    525c:	ffffffff 	.word	0xffffffff
    5260:	ffffffff 	.word	0xffffffff
    5264:	ffffffff 	.word	0xffffffff
    5268:	ffffffff 	.word	0xffffffff
    526c:	ffffffff 	.word	0xffffffff
    5270:	ffffffff 	.word	0xffffffff
    5274:	ffffffff 	.word	0xffffffff
    5278:	ffffffff 	.word	0xffffffff
    527c:	ffffffff 	.word	0xffffffff
    5280:	ffffffff 	.word	0xffffffff
    5284:	ffffffff 	.word	0xffffffff
    5288:	ffffffff 	.word	0xffffffff
    528c:	ffffffff 	.word	0xffffffff
    5290:	ffffffff 	.word	0xffffffff
    5294:	ffffffff 	.word	0xffffffff
    5298:	ffffffff 	.word	0xffffffff
    529c:	ffffffff 	.word	0xffffffff
    52a0:	ffffffff 	.word	0xffffffff
    52a4:	ffffffff 	.word	0xffffffff
    52a8:	ffffffff 	.word	0xffffffff
    52ac:	ffffffff 	.word	0xffffffff
    52b0:	ffffffff 	.word	0xffffffff
    52b4:	ffffffff 	.word	0xffffffff
    52b8:	ffffffff 	.word	0xffffffff
    52bc:	ffffffff 	.word	0xffffffff
    52c0:	ffffffff 	.word	0xffffffff
    52c4:	ffffffff 	.word	0xffffffff
    52c8:	ffffffff 	.word	0xffffffff
    52cc:	ffffffff 	.word	0xffffffff
    52d0:	ffffffff 	.word	0xffffffff
    52d4:	ffffffff 	.word	0xffffffff
    52d8:	ffffffff 	.word	0xffffffff
    52dc:	ffffffff 	.word	0xffffffff
    52e0:	ffffffff 	.word	0xffffffff
    52e4:	ffffffff 	.word	0xffffffff
    52e8:	ffffffff 	.word	0xffffffff
    52ec:	ffffffff 	.word	0xffffffff
    52f0:	ffffffff 	.word	0xffffffff
    52f4:	ffffffff 	.word	0xffffffff
    52f8:	ffffffff 	.word	0xffffffff
    52fc:	ffffffff 	.word	0xffffffff
    5300:	ffffffff 	.word	0xffffffff
    5304:	ffffffff 	.word	0xffffffff
    5308:	ffffffff 	.word	0xffffffff
    530c:	ffffffff 	.word	0xffffffff
    5310:	ffffffff 	.word	0xffffffff
    5314:	ffffffff 	.word	0xffffffff
    5318:	ffffffff 	.word	0xffffffff
    531c:	ffffffff 	.word	0xffffffff
    5320:	ffffffff 	.word	0xffffffff
    5324:	ffffffff 	.word	0xffffffff
    5328:	ffffffff 	.word	0xffffffff
    532c:	ffffffff 	.word	0xffffffff
    5330:	ffffffff 	.word	0xffffffff
    5334:	ffffffff 	.word	0xffffffff
    5338:	ffffffff 	.word	0xffffffff
    533c:	ffffffff 	.word	0xffffffff
    5340:	ffffffff 	.word	0xffffffff
    5344:	ffffffff 	.word	0xffffffff
    5348:	ffffffff 	.word	0xffffffff
    534c:	ffffffff 	.word	0xffffffff
    5350:	ffffffff 	.word	0xffffffff
    5354:	ffffffff 	.word	0xffffffff
    5358:	ffffffff 	.word	0xffffffff
    535c:	ffffffff 	.word	0xffffffff
    5360:	ffffffff 	.word	0xffffffff
    5364:	ffffffff 	.word	0xffffffff
    5368:	ffffffff 	.word	0xffffffff
    536c:	ffffffff 	.word	0xffffffff
    5370:	ffffffff 	.word	0xffffffff
    5374:	ffffffff 	.word	0xffffffff
    5378:	ffffffff 	.word	0xffffffff
    537c:	ffffffff 	.word	0xffffffff
    5380:	ffffffff 	.word	0xffffffff
    5384:	ffffffff 	.word	0xffffffff
    5388:	ffffffff 	.word	0xffffffff
    538c:	ffffffff 	.word	0xffffffff
    5390:	ffffffff 	.word	0xffffffff
    5394:	ffffffff 	.word	0xffffffff
    5398:	ffffffff 	.word	0xffffffff
    539c:	ffffffff 	.word	0xffffffff
    53a0:	ffffffff 	.word	0xffffffff
    53a4:	ffffffff 	.word	0xffffffff
    53a8:	ffffffff 	.word	0xffffffff
    53ac:	ffffffff 	.word	0xffffffff
    53b0:	ffffffff 	.word	0xffffffff
    53b4:	ffffffff 	.word	0xffffffff
    53b8:	ffffffff 	.word	0xffffffff
    53bc:	ffffffff 	.word	0xffffffff
    53c0:	ffffffff 	.word	0xffffffff
    53c4:	ffffffff 	.word	0xffffffff
    53c8:	ffffffff 	.word	0xffffffff
    53cc:	ffffffff 	.word	0xffffffff
    53d0:	ffffffff 	.word	0xffffffff
    53d4:	ffffffff 	.word	0xffffffff
    53d8:	ffffffff 	.word	0xffffffff
    53dc:	ffffffff 	.word	0xffffffff
    53e0:	ffffffff 	.word	0xffffffff
    53e4:	ffffffff 	.word	0xffffffff
    53e8:	ffffffff 	.word	0xffffffff
    53ec:	ffffffff 	.word	0xffffffff
    53f0:	ffffffff 	.word	0xffffffff
    53f4:	ffffffff 	.word	0xffffffff
    53f8:	ffffffff 	.word	0xffffffff
    53fc:	ffffffff 	.word	0xffffffff
    5400:	ffffffff 	.word	0xffffffff
    5404:	ffffffff 	.word	0xffffffff
    5408:	ffffffff 	.word	0xffffffff
    540c:	ffffffff 	.word	0xffffffff
    5410:	ffffffff 	.word	0xffffffff
    5414:	ffffffff 	.word	0xffffffff
    5418:	ffffffff 	.word	0xffffffff
    541c:	ffffffff 	.word	0xffffffff
    5420:	ffffffff 	.word	0xffffffff
    5424:	ffffffff 	.word	0xffffffff
    5428:	ffffffff 	.word	0xffffffff
    542c:	ffffffff 	.word	0xffffffff
    5430:	ffffffff 	.word	0xffffffff
    5434:	ffffffff 	.word	0xffffffff
    5438:	ffffffff 	.word	0xffffffff
    543c:	ffffffff 	.word	0xffffffff
    5440:	ffffffff 	.word	0xffffffff
    5444:	ffffffff 	.word	0xffffffff
    5448:	ffffffff 	.word	0xffffffff
    544c:	ffffffff 	.word	0xffffffff
    5450:	ffffffff 	.word	0xffffffff
    5454:	ffffffff 	.word	0xffffffff
    5458:	ffffffff 	.word	0xffffffff
    545c:	ffffffff 	.word	0xffffffff
    5460:	ffffffff 	.word	0xffffffff
    5464:	ffffffff 	.word	0xffffffff
    5468:	ffffffff 	.word	0xffffffff
    546c:	ffffffff 	.word	0xffffffff
    5470:	ffffffff 	.word	0xffffffff
    5474:	ffffffff 	.word	0xffffffff
    5478:	ffffffff 	.word	0xffffffff
    547c:	ffffffff 	.word	0xffffffff
    5480:	ffffffff 	.word	0xffffffff
    5484:	ffffffff 	.word	0xffffffff
    5488:	ffffffff 	.word	0xffffffff
    548c:	ffffffff 	.word	0xffffffff
    5490:	ffffffff 	.word	0xffffffff
    5494:	ffffffff 	.word	0xffffffff
    5498:	ffffffff 	.word	0xffffffff
    549c:	ffffffff 	.word	0xffffffff
    54a0:	ffffffff 	.word	0xffffffff
    54a4:	ffffffff 	.word	0xffffffff
    54a8:	ffffffff 	.word	0xffffffff
    54ac:	ffffffff 	.word	0xffffffff
    54b0:	ffffffff 	.word	0xffffffff
    54b4:	ffffffff 	.word	0xffffffff
    54b8:	ffffffff 	.word	0xffffffff
    54bc:	ffffffff 	.word	0xffffffff
    54c0:	ffffffff 	.word	0xffffffff
    54c4:	ffffffff 	.word	0xffffffff
    54c8:	ffffffff 	.word	0xffffffff
    54cc:	ffffffff 	.word	0xffffffff
    54d0:	ffffffff 	.word	0xffffffff
    54d4:	ffffffff 	.word	0xffffffff
    54d8:	ffffffff 	.word	0xffffffff
    54dc:	ffffffff 	.word	0xffffffff
    54e0:	ffffffff 	.word	0xffffffff
    54e4:	ffffffff 	.word	0xffffffff
    54e8:	ffffffff 	.word	0xffffffff
    54ec:	ffffffff 	.word	0xffffffff
    54f0:	ffffffff 	.word	0xffffffff
    54f4:	ffffffff 	.word	0xffffffff
    54f8:	ffffffff 	.word	0xffffffff
    54fc:	ffffffff 	.word	0xffffffff
    5500:	ffffffff 	.word	0xffffffff
    5504:	ffffffff 	.word	0xffffffff
    5508:	ffffffff 	.word	0xffffffff
    550c:	ffffffff 	.word	0xffffffff
    5510:	ffffffff 	.word	0xffffffff
    5514:	ffffffff 	.word	0xffffffff
    5518:	ffffffff 	.word	0xffffffff
    551c:	ffffffff 	.word	0xffffffff
    5520:	ffffffff 	.word	0xffffffff
    5524:	ffffffff 	.word	0xffffffff
    5528:	ffffffff 	.word	0xffffffff
    552c:	ffffffff 	.word	0xffffffff
    5530:	ffffffff 	.word	0xffffffff
    5534:	ffffffff 	.word	0xffffffff
    5538:	ffffffff 	.word	0xffffffff
    553c:	ffffffff 	.word	0xffffffff
    5540:	ffffffff 	.word	0xffffffff
    5544:	ffffffff 	.word	0xffffffff
    5548:	ffffffff 	.word	0xffffffff
    554c:	ffffffff 	.word	0xffffffff
    5550:	ffffffff 	.word	0xffffffff
    5554:	ffffffff 	.word	0xffffffff
    5558:	ffffffff 	.word	0xffffffff
    555c:	ffffffff 	.word	0xffffffff
    5560:	ffffffff 	.word	0xffffffff
    5564:	ffffffff 	.word	0xffffffff
    5568:	ffffffff 	.word	0xffffffff
    556c:	ffffffff 	.word	0xffffffff
    5570:	ffffffff 	.word	0xffffffff
    5574:	ffffffff 	.word	0xffffffff
    5578:	ffffffff 	.word	0xffffffff
    557c:	ffffffff 	.word	0xffffffff
    5580:	ffffffff 	.word	0xffffffff
    5584:	ffffffff 	.word	0xffffffff
    5588:	ffffffff 	.word	0xffffffff
    558c:	ffffffff 	.word	0xffffffff
    5590:	ffffffff 	.word	0xffffffff
    5594:	ffffffff 	.word	0xffffffff
    5598:	ffffffff 	.word	0xffffffff
    559c:	ffffffff 	.word	0xffffffff
    55a0:	ffffffff 	.word	0xffffffff
    55a4:	ffffffff 	.word	0xffffffff
    55a8:	ffffffff 	.word	0xffffffff
    55ac:	ffffffff 	.word	0xffffffff
    55b0:	ffffffff 	.word	0xffffffff
    55b4:	ffffffff 	.word	0xffffffff
    55b8:	ffffffff 	.word	0xffffffff
    55bc:	ffffffff 	.word	0xffffffff
    55c0:	ffffffff 	.word	0xffffffff
    55c4:	ffffffff 	.word	0xffffffff
    55c8:	ffffffff 	.word	0xffffffff
    55cc:	ffffffff 	.word	0xffffffff
    55d0:	ffffffff 	.word	0xffffffff
    55d4:	ffffffff 	.word	0xffffffff
    55d8:	ffffffff 	.word	0xffffffff
    55dc:	ffffffff 	.word	0xffffffff
    55e0:	ffffffff 	.word	0xffffffff
    55e4:	ffffffff 	.word	0xffffffff
    55e8:	ffffffff 	.word	0xffffffff
    55ec:	ffffffff 	.word	0xffffffff
    55f0:	ffffffff 	.word	0xffffffff
    55f4:	ffffffff 	.word	0xffffffff
    55f8:	ffffffff 	.word	0xffffffff
    55fc:	ffffffff 	.word	0xffffffff
    5600:	ffffffff 	.word	0xffffffff
    5604:	ffffffff 	.word	0xffffffff
    5608:	ffffffff 	.word	0xffffffff
    560c:	ffffffff 	.word	0xffffffff
    5610:	ffffffff 	.word	0xffffffff
    5614:	ffffffff 	.word	0xffffffff
    5618:	ffffffff 	.word	0xffffffff
    561c:	ffffffff 	.word	0xffffffff
    5620:	ffffffff 	.word	0xffffffff
    5624:	ffffffff 	.word	0xffffffff
    5628:	ffffffff 	.word	0xffffffff
    562c:	ffffffff 	.word	0xffffffff
    5630:	ffffffff 	.word	0xffffffff
    5634:	ffffffff 	.word	0xffffffff
    5638:	ffffffff 	.word	0xffffffff
    563c:	ffffffff 	.word	0xffffffff
    5640:	ffffffff 	.word	0xffffffff
    5644:	ffffffff 	.word	0xffffffff
    5648:	ffffffff 	.word	0xffffffff
    564c:	ffffffff 	.word	0xffffffff
    5650:	ffffffff 	.word	0xffffffff
    5654:	ffffffff 	.word	0xffffffff
    5658:	ffffffff 	.word	0xffffffff
    565c:	ffffffff 	.word	0xffffffff
    5660:	ffffffff 	.word	0xffffffff
    5664:	ffffffff 	.word	0xffffffff
    5668:	ffffffff 	.word	0xffffffff
    566c:	ffffffff 	.word	0xffffffff
    5670:	ffffffff 	.word	0xffffffff
    5674:	ffffffff 	.word	0xffffffff
    5678:	ffffffff 	.word	0xffffffff
    567c:	ffffffff 	.word	0xffffffff
    5680:	ffffffff 	.word	0xffffffff
    5684:	ffffffff 	.word	0xffffffff
    5688:	ffffffff 	.word	0xffffffff
    568c:	ffffffff 	.word	0xffffffff
    5690:	ffffffff 	.word	0xffffffff
    5694:	ffffffff 	.word	0xffffffff
    5698:	ffffffff 	.word	0xffffffff
    569c:	ffffffff 	.word	0xffffffff
    56a0:	ffffffff 	.word	0xffffffff
    56a4:	ffffffff 	.word	0xffffffff
    56a8:	ffffffff 	.word	0xffffffff
    56ac:	ffffffff 	.word	0xffffffff
    56b0:	ffffffff 	.word	0xffffffff
    56b4:	ffffffff 	.word	0xffffffff
    56b8:	ffffffff 	.word	0xffffffff
    56bc:	ffffffff 	.word	0xffffffff
    56c0:	ffffffff 	.word	0xffffffff
    56c4:	ffffffff 	.word	0xffffffff
    56c8:	ffffffff 	.word	0xffffffff
    56cc:	ffffffff 	.word	0xffffffff
    56d0:	ffffffff 	.word	0xffffffff
    56d4:	ffffffff 	.word	0xffffffff
    56d8:	ffffffff 	.word	0xffffffff
    56dc:	ffffffff 	.word	0xffffffff
    56e0:	ffffffff 	.word	0xffffffff
    56e4:	ffffffff 	.word	0xffffffff
    56e8:	ffffffff 	.word	0xffffffff
    56ec:	ffffffff 	.word	0xffffffff
    56f0:	ffffffff 	.word	0xffffffff
    56f4:	ffffffff 	.word	0xffffffff
    56f8:	ffffffff 	.word	0xffffffff
    56fc:	ffffffff 	.word	0xffffffff
    5700:	ffffffff 	.word	0xffffffff
    5704:	ffffffff 	.word	0xffffffff
    5708:	ffffffff 	.word	0xffffffff
    570c:	ffffffff 	.word	0xffffffff
    5710:	ffffffff 	.word	0xffffffff
    5714:	ffffffff 	.word	0xffffffff
    5718:	ffffffff 	.word	0xffffffff
    571c:	ffffffff 	.word	0xffffffff
    5720:	ffffffff 	.word	0xffffffff
    5724:	ffffffff 	.word	0xffffffff
    5728:	ffffffff 	.word	0xffffffff
    572c:	ffffffff 	.word	0xffffffff
    5730:	ffffffff 	.word	0xffffffff
    5734:	ffffffff 	.word	0xffffffff
    5738:	ffffffff 	.word	0xffffffff
    573c:	ffffffff 	.word	0xffffffff
    5740:	ffffffff 	.word	0xffffffff
    5744:	ffffffff 	.word	0xffffffff
    5748:	ffffffff 	.word	0xffffffff
    574c:	ffffffff 	.word	0xffffffff
    5750:	ffffffff 	.word	0xffffffff
    5754:	ffffffff 	.word	0xffffffff
    5758:	ffffffff 	.word	0xffffffff
    575c:	ffffffff 	.word	0xffffffff
    5760:	ffffffff 	.word	0xffffffff
    5764:	ffffffff 	.word	0xffffffff
    5768:	ffffffff 	.word	0xffffffff
    576c:	ffffffff 	.word	0xffffffff
    5770:	ffffffff 	.word	0xffffffff
    5774:	ffffffff 	.word	0xffffffff
    5778:	ffffffff 	.word	0xffffffff
    577c:	ffffffff 	.word	0xffffffff
    5780:	ffffffff 	.word	0xffffffff
    5784:	ffffffff 	.word	0xffffffff
    5788:	ffffffff 	.word	0xffffffff
    578c:	ffffffff 	.word	0xffffffff
    5790:	ffffffff 	.word	0xffffffff
    5794:	ffffffff 	.word	0xffffffff
    5798:	ffffffff 	.word	0xffffffff
    579c:	ffffffff 	.word	0xffffffff
    57a0:	ffffffff 	.word	0xffffffff
    57a4:	ffffffff 	.word	0xffffffff
    57a8:	ffffffff 	.word	0xffffffff
    57ac:	ffffffff 	.word	0xffffffff
    57b0:	ffffffff 	.word	0xffffffff
    57b4:	ffffffff 	.word	0xffffffff
    57b8:	ffffffff 	.word	0xffffffff
    57bc:	ffffffff 	.word	0xffffffff
    57c0:	ffffffff 	.word	0xffffffff
    57c4:	ffffffff 	.word	0xffffffff
    57c8:	ffffffff 	.word	0xffffffff
    57cc:	ffffffff 	.word	0xffffffff
    57d0:	ffffffff 	.word	0xffffffff
    57d4:	ffffffff 	.word	0xffffffff
    57d8:	ffffffff 	.word	0xffffffff
    57dc:	ffffffff 	.word	0xffffffff
    57e0:	ffffffff 	.word	0xffffffff
    57e4:	ffffffff 	.word	0xffffffff
    57e8:	ffffffff 	.word	0xffffffff
    57ec:	ffffffff 	.word	0xffffffff
    57f0:	ffffffff 	.word	0xffffffff
    57f4:	ffffffff 	.word	0xffffffff
    57f8:	ffffffff 	.word	0xffffffff
    57fc:	ffffffff 	.word	0xffffffff
    5800:	ffffffff 	.word	0xffffffff
    5804:	ffffffff 	.word	0xffffffff
    5808:	ffffffff 	.word	0xffffffff
    580c:	ffffffff 	.word	0xffffffff
    5810:	ffffffff 	.word	0xffffffff
    5814:	ffffffff 	.word	0xffffffff
    5818:	ffffffff 	.word	0xffffffff
    581c:	ffffffff 	.word	0xffffffff
    5820:	ffffffff 	.word	0xffffffff
    5824:	ffffffff 	.word	0xffffffff
    5828:	ffffffff 	.word	0xffffffff
    582c:	ffffffff 	.word	0xffffffff
    5830:	ffffffff 	.word	0xffffffff
    5834:	ffffffff 	.word	0xffffffff
    5838:	ffffffff 	.word	0xffffffff
    583c:	ffffffff 	.word	0xffffffff
    5840:	ffffffff 	.word	0xffffffff
    5844:	ffffffff 	.word	0xffffffff
    5848:	ffffffff 	.word	0xffffffff
    584c:	ffffffff 	.word	0xffffffff
    5850:	ffffffff 	.word	0xffffffff
    5854:	ffffffff 	.word	0xffffffff
    5858:	ffffffff 	.word	0xffffffff
    585c:	ffffffff 	.word	0xffffffff
    5860:	ffffffff 	.word	0xffffffff
    5864:	ffffffff 	.word	0xffffffff
    5868:	ffffffff 	.word	0xffffffff
    586c:	ffffffff 	.word	0xffffffff
    5870:	ffffffff 	.word	0xffffffff
    5874:	ffffffff 	.word	0xffffffff
    5878:	ffffffff 	.word	0xffffffff
    587c:	ffffffff 	.word	0xffffffff
    5880:	ffffffff 	.word	0xffffffff
    5884:	ffffffff 	.word	0xffffffff
    5888:	ffffffff 	.word	0xffffffff
    588c:	ffffffff 	.word	0xffffffff
    5890:	ffffffff 	.word	0xffffffff
    5894:	ffffffff 	.word	0xffffffff
    5898:	ffffffff 	.word	0xffffffff
    589c:	ffffffff 	.word	0xffffffff
    58a0:	ffffffff 	.word	0xffffffff
    58a4:	ffffffff 	.word	0xffffffff
    58a8:	ffffffff 	.word	0xffffffff
    58ac:	ffffffff 	.word	0xffffffff
    58b0:	ffffffff 	.word	0xffffffff
    58b4:	ffffffff 	.word	0xffffffff
    58b8:	ffffffff 	.word	0xffffffff
    58bc:	ffffffff 	.word	0xffffffff
    58c0:	ffffffff 	.word	0xffffffff
    58c4:	ffffffff 	.word	0xffffffff
    58c8:	ffffffff 	.word	0xffffffff
    58cc:	ffffffff 	.word	0xffffffff
    58d0:	ffffffff 	.word	0xffffffff
    58d4:	ffffffff 	.word	0xffffffff
    58d8:	ffffffff 	.word	0xffffffff
    58dc:	ffffffff 	.word	0xffffffff
    58e0:	ffffffff 	.word	0xffffffff
    58e4:	ffffffff 	.word	0xffffffff
    58e8:	ffffffff 	.word	0xffffffff
    58ec:	ffffffff 	.word	0xffffffff
    58f0:	ffffffff 	.word	0xffffffff
    58f4:	ffffffff 	.word	0xffffffff
    58f8:	ffffffff 	.word	0xffffffff
    58fc:	ffffffff 	.word	0xffffffff
    5900:	ffffffff 	.word	0xffffffff
    5904:	ffffffff 	.word	0xffffffff
    5908:	ffffffff 	.word	0xffffffff
    590c:	ffffffff 	.word	0xffffffff
    5910:	ffffffff 	.word	0xffffffff
    5914:	ffffffff 	.word	0xffffffff
    5918:	ffffffff 	.word	0xffffffff
    591c:	ffffffff 	.word	0xffffffff
    5920:	ffffffff 	.word	0xffffffff
    5924:	ffffffff 	.word	0xffffffff
    5928:	ffffffff 	.word	0xffffffff
    592c:	ffffffff 	.word	0xffffffff
    5930:	ffffffff 	.word	0xffffffff
    5934:	ffffffff 	.word	0xffffffff
    5938:	ffffffff 	.word	0xffffffff
    593c:	ffffffff 	.word	0xffffffff
    5940:	ffffffff 	.word	0xffffffff
    5944:	ffffffff 	.word	0xffffffff
    5948:	ffffffff 	.word	0xffffffff
    594c:	ffffffff 	.word	0xffffffff
    5950:	ffffffff 	.word	0xffffffff
    5954:	ffffffff 	.word	0xffffffff
    5958:	ffffffff 	.word	0xffffffff
    595c:	ffffffff 	.word	0xffffffff
    5960:	ffffffff 	.word	0xffffffff
    5964:	ffffffff 	.word	0xffffffff
    5968:	ffffffff 	.word	0xffffffff
    596c:	ffffffff 	.word	0xffffffff
    5970:	ffffffff 	.word	0xffffffff
    5974:	ffffffff 	.word	0xffffffff
    5978:	ffffffff 	.word	0xffffffff
    597c:	ffffffff 	.word	0xffffffff
    5980:	ffffffff 	.word	0xffffffff
    5984:	ffffffff 	.word	0xffffffff
    5988:	ffffffff 	.word	0xffffffff
    598c:	ffffffff 	.word	0xffffffff
    5990:	ffffffff 	.word	0xffffffff
    5994:	ffffffff 	.word	0xffffffff
    5998:	ffffffff 	.word	0xffffffff
    599c:	ffffffff 	.word	0xffffffff
    59a0:	ffffffff 	.word	0xffffffff
    59a4:	ffffffff 	.word	0xffffffff
    59a8:	ffffffff 	.word	0xffffffff
    59ac:	ffffffff 	.word	0xffffffff
    59b0:	ffffffff 	.word	0xffffffff
    59b4:	ffffffff 	.word	0xffffffff
    59b8:	ffffffff 	.word	0xffffffff
    59bc:	ffffffff 	.word	0xffffffff
    59c0:	ffffffff 	.word	0xffffffff
    59c4:	ffffffff 	.word	0xffffffff
    59c8:	ffffffff 	.word	0xffffffff
    59cc:	ffffffff 	.word	0xffffffff
    59d0:	ffffffff 	.word	0xffffffff
    59d4:	ffffffff 	.word	0xffffffff
    59d8:	ffffffff 	.word	0xffffffff
    59dc:	ffffffff 	.word	0xffffffff
    59e0:	ffffffff 	.word	0xffffffff
    59e4:	ffffffff 	.word	0xffffffff
    59e8:	ffffffff 	.word	0xffffffff
    59ec:	ffffffff 	.word	0xffffffff
    59f0:	ffffffff 	.word	0xffffffff
    59f4:	ffffffff 	.word	0xffffffff
    59f8:	ffffffff 	.word	0xffffffff
    59fc:	ffffffff 	.word	0xffffffff
    5a00:	ffffffff 	.word	0xffffffff
    5a04:	ffffffff 	.word	0xffffffff
    5a08:	ffffffff 	.word	0xffffffff
    5a0c:	ffffffff 	.word	0xffffffff
    5a10:	ffffffff 	.word	0xffffffff
    5a14:	ffffffff 	.word	0xffffffff
    5a18:	ffffffff 	.word	0xffffffff
    5a1c:	ffffffff 	.word	0xffffffff
    5a20:	ffffffff 	.word	0xffffffff
    5a24:	ffffffff 	.word	0xffffffff
    5a28:	ffffffff 	.word	0xffffffff
    5a2c:	ffffffff 	.word	0xffffffff
    5a30:	ffffffff 	.word	0xffffffff
    5a34:	ffffffff 	.word	0xffffffff
    5a38:	ffffffff 	.word	0xffffffff
    5a3c:	ffffffff 	.word	0xffffffff
    5a40:	ffffffff 	.word	0xffffffff
    5a44:	ffffffff 	.word	0xffffffff
    5a48:	ffffffff 	.word	0xffffffff
    5a4c:	ffffffff 	.word	0xffffffff
    5a50:	ffffffff 	.word	0xffffffff
    5a54:	ffffffff 	.word	0xffffffff
    5a58:	ffffffff 	.word	0xffffffff
    5a5c:	ffffffff 	.word	0xffffffff
    5a60:	ffffffff 	.word	0xffffffff
    5a64:	ffffffff 	.word	0xffffffff
    5a68:	ffffffff 	.word	0xffffffff
    5a6c:	ffffffff 	.word	0xffffffff
    5a70:	ffffffff 	.word	0xffffffff
    5a74:	ffffffff 	.word	0xffffffff
    5a78:	ffffffff 	.word	0xffffffff
    5a7c:	ffffffff 	.word	0xffffffff
    5a80:	ffffffff 	.word	0xffffffff
    5a84:	ffffffff 	.word	0xffffffff
    5a88:	ffffffff 	.word	0xffffffff
    5a8c:	ffffffff 	.word	0xffffffff
    5a90:	ffffffff 	.word	0xffffffff
    5a94:	ffffffff 	.word	0xffffffff
    5a98:	ffffffff 	.word	0xffffffff
    5a9c:	ffffffff 	.word	0xffffffff
    5aa0:	ffffffff 	.word	0xffffffff
    5aa4:	ffffffff 	.word	0xffffffff
    5aa8:	ffffffff 	.word	0xffffffff
    5aac:	ffffffff 	.word	0xffffffff
    5ab0:	ffffffff 	.word	0xffffffff
    5ab4:	ffffffff 	.word	0xffffffff
    5ab8:	ffffffff 	.word	0xffffffff
    5abc:	ffffffff 	.word	0xffffffff
    5ac0:	ffffffff 	.word	0xffffffff
    5ac4:	ffffffff 	.word	0xffffffff
    5ac8:	ffffffff 	.word	0xffffffff
    5acc:	ffffffff 	.word	0xffffffff
    5ad0:	ffffffff 	.word	0xffffffff
    5ad4:	ffffffff 	.word	0xffffffff
    5ad8:	ffffffff 	.word	0xffffffff
    5adc:	ffffffff 	.word	0xffffffff
    5ae0:	ffffffff 	.word	0xffffffff
    5ae4:	ffffffff 	.word	0xffffffff
    5ae8:	ffffffff 	.word	0xffffffff
    5aec:	ffffffff 	.word	0xffffffff
    5af0:	ffffffff 	.word	0xffffffff
    5af4:	ffffffff 	.word	0xffffffff
    5af8:	ffffffff 	.word	0xffffffff
    5afc:	ffffffff 	.word	0xffffffff
    5b00:	ffffffff 	.word	0xffffffff
    5b04:	ffffffff 	.word	0xffffffff
    5b08:	ffffffff 	.word	0xffffffff
    5b0c:	ffffffff 	.word	0xffffffff
    5b10:	ffffffff 	.word	0xffffffff
    5b14:	ffffffff 	.word	0xffffffff
    5b18:	ffffffff 	.word	0xffffffff
    5b1c:	ffffffff 	.word	0xffffffff
    5b20:	ffffffff 	.word	0xffffffff
    5b24:	ffffffff 	.word	0xffffffff
    5b28:	ffffffff 	.word	0xffffffff
    5b2c:	ffffffff 	.word	0xffffffff
    5b30:	ffffffff 	.word	0xffffffff
    5b34:	ffffffff 	.word	0xffffffff
    5b38:	ffffffff 	.word	0xffffffff
    5b3c:	ffffffff 	.word	0xffffffff
    5b40:	ffffffff 	.word	0xffffffff
    5b44:	ffffffff 	.word	0xffffffff
    5b48:	ffffffff 	.word	0xffffffff
    5b4c:	ffffffff 	.word	0xffffffff
    5b50:	ffffffff 	.word	0xffffffff
    5b54:	ffffffff 	.word	0xffffffff
    5b58:	ffffffff 	.word	0xffffffff
    5b5c:	ffffffff 	.word	0xffffffff
    5b60:	ffffffff 	.word	0xffffffff
    5b64:	ffffffff 	.word	0xffffffff
    5b68:	ffffffff 	.word	0xffffffff
    5b6c:	ffffffff 	.word	0xffffffff
    5b70:	ffffffff 	.word	0xffffffff
    5b74:	ffffffff 	.word	0xffffffff
    5b78:	ffffffff 	.word	0xffffffff
    5b7c:	ffffffff 	.word	0xffffffff
    5b80:	ffffffff 	.word	0xffffffff
    5b84:	ffffffff 	.word	0xffffffff
    5b88:	ffffffff 	.word	0xffffffff
    5b8c:	ffffffff 	.word	0xffffffff
    5b90:	ffffffff 	.word	0xffffffff
    5b94:	ffffffff 	.word	0xffffffff
    5b98:	ffffffff 	.word	0xffffffff
    5b9c:	ffffffff 	.word	0xffffffff
    5ba0:	ffffffff 	.word	0xffffffff
    5ba4:	ffffffff 	.word	0xffffffff
    5ba8:	ffffffff 	.word	0xffffffff
    5bac:	ffffffff 	.word	0xffffffff
    5bb0:	ffffffff 	.word	0xffffffff
    5bb4:	ffffffff 	.word	0xffffffff
    5bb8:	ffffffff 	.word	0xffffffff
    5bbc:	ffffffff 	.word	0xffffffff
    5bc0:	ffffffff 	.word	0xffffffff
    5bc4:	ffffffff 	.word	0xffffffff
    5bc8:	ffffffff 	.word	0xffffffff
    5bcc:	ffffffff 	.word	0xffffffff
    5bd0:	ffffffff 	.word	0xffffffff
    5bd4:	ffffffff 	.word	0xffffffff
    5bd8:	ffffffff 	.word	0xffffffff
    5bdc:	ffffffff 	.word	0xffffffff
    5be0:	ffffffff 	.word	0xffffffff
    5be4:	ffffffff 	.word	0xffffffff
    5be8:	ffffffff 	.word	0xffffffff
    5bec:	ffffffff 	.word	0xffffffff
    5bf0:	ffffffff 	.word	0xffffffff
    5bf4:	ffffffff 	.word	0xffffffff
    5bf8:	ffffffff 	.word	0xffffffff
    5bfc:	ffffffff 	.word	0xffffffff
    5c00:	ffffffff 	.word	0xffffffff
    5c04:	ffffffff 	.word	0xffffffff
    5c08:	ffffffff 	.word	0xffffffff
    5c0c:	ffffffff 	.word	0xffffffff
    5c10:	ffffffff 	.word	0xffffffff
    5c14:	ffffffff 	.word	0xffffffff
    5c18:	ffffffff 	.word	0xffffffff
    5c1c:	ffffffff 	.word	0xffffffff
    5c20:	ffffffff 	.word	0xffffffff
    5c24:	ffffffff 	.word	0xffffffff
    5c28:	ffffffff 	.word	0xffffffff
    5c2c:	ffffffff 	.word	0xffffffff
    5c30:	ffffffff 	.word	0xffffffff
    5c34:	ffffffff 	.word	0xffffffff
    5c38:	ffffffff 	.word	0xffffffff
    5c3c:	ffffffff 	.word	0xffffffff
    5c40:	ffffffff 	.word	0xffffffff
    5c44:	ffffffff 	.word	0xffffffff
    5c48:	ffffffff 	.word	0xffffffff
    5c4c:	ffffffff 	.word	0xffffffff
    5c50:	ffffffff 	.word	0xffffffff
    5c54:	ffffffff 	.word	0xffffffff
    5c58:	ffffffff 	.word	0xffffffff
    5c5c:	ffffffff 	.word	0xffffffff
    5c60:	ffffffff 	.word	0xffffffff
    5c64:	ffffffff 	.word	0xffffffff
    5c68:	ffffffff 	.word	0xffffffff
    5c6c:	ffffffff 	.word	0xffffffff
    5c70:	ffffffff 	.word	0xffffffff
    5c74:	ffffffff 	.word	0xffffffff
    5c78:	ffffffff 	.word	0xffffffff
    5c7c:	ffffffff 	.word	0xffffffff
    5c80:	ffffffff 	.word	0xffffffff
    5c84:	ffffffff 	.word	0xffffffff
    5c88:	ffffffff 	.word	0xffffffff
    5c8c:	ffffffff 	.word	0xffffffff
    5c90:	ffffffff 	.word	0xffffffff
    5c94:	ffffffff 	.word	0xffffffff
    5c98:	ffffffff 	.word	0xffffffff
    5c9c:	ffffffff 	.word	0xffffffff
    5ca0:	ffffffff 	.word	0xffffffff
    5ca4:	ffffffff 	.word	0xffffffff
    5ca8:	ffffffff 	.word	0xffffffff
    5cac:	ffffffff 	.word	0xffffffff
    5cb0:	ffffffff 	.word	0xffffffff
    5cb4:	ffffffff 	.word	0xffffffff
    5cb8:	ffffffff 	.word	0xffffffff
    5cbc:	ffffffff 	.word	0xffffffff
    5cc0:	ffffffff 	.word	0xffffffff
    5cc4:	ffffffff 	.word	0xffffffff
    5cc8:	ffffffff 	.word	0xffffffff
    5ccc:	ffffffff 	.word	0xffffffff
    5cd0:	ffffffff 	.word	0xffffffff
    5cd4:	ffffffff 	.word	0xffffffff
    5cd8:	ffffffff 	.word	0xffffffff
    5cdc:	ffffffff 	.word	0xffffffff
    5ce0:	ffffffff 	.word	0xffffffff
    5ce4:	ffffffff 	.word	0xffffffff
    5ce8:	ffffffff 	.word	0xffffffff
    5cec:	ffffffff 	.word	0xffffffff
    5cf0:	ffffffff 	.word	0xffffffff
    5cf4:	ffffffff 	.word	0xffffffff
    5cf8:	ffffffff 	.word	0xffffffff
    5cfc:	ffffffff 	.word	0xffffffff
    5d00:	ffffffff 	.word	0xffffffff
    5d04:	ffffffff 	.word	0xffffffff
    5d08:	ffffffff 	.word	0xffffffff
    5d0c:	ffffffff 	.word	0xffffffff
    5d10:	ffffffff 	.word	0xffffffff
    5d14:	ffffffff 	.word	0xffffffff
    5d18:	ffffffff 	.word	0xffffffff
    5d1c:	ffffffff 	.word	0xffffffff
    5d20:	ffffffff 	.word	0xffffffff
    5d24:	ffffffff 	.word	0xffffffff
    5d28:	ffffffff 	.word	0xffffffff
    5d2c:	ffffffff 	.word	0xffffffff
    5d30:	ffffffff 	.word	0xffffffff
    5d34:	ffffffff 	.word	0xffffffff
    5d38:	ffffffff 	.word	0xffffffff
    5d3c:	ffffffff 	.word	0xffffffff
    5d40:	ffffffff 	.word	0xffffffff
    5d44:	ffffffff 	.word	0xffffffff
    5d48:	ffffffff 	.word	0xffffffff
    5d4c:	ffffffff 	.word	0xffffffff
    5d50:	ffffffff 	.word	0xffffffff
    5d54:	ffffffff 	.word	0xffffffff
    5d58:	ffffffff 	.word	0xffffffff
    5d5c:	ffffffff 	.word	0xffffffff
    5d60:	ffffffff 	.word	0xffffffff
    5d64:	ffffffff 	.word	0xffffffff
    5d68:	ffffffff 	.word	0xffffffff
    5d6c:	ffffffff 	.word	0xffffffff
    5d70:	ffffffff 	.word	0xffffffff
    5d74:	ffffffff 	.word	0xffffffff
    5d78:	ffffffff 	.word	0xffffffff
    5d7c:	ffffffff 	.word	0xffffffff
    5d80:	ffffffff 	.word	0xffffffff
    5d84:	ffffffff 	.word	0xffffffff
    5d88:	ffffffff 	.word	0xffffffff
    5d8c:	ffffffff 	.word	0xffffffff
    5d90:	ffffffff 	.word	0xffffffff
    5d94:	ffffffff 	.word	0xffffffff
    5d98:	ffffffff 	.word	0xffffffff
    5d9c:	ffffffff 	.word	0xffffffff
    5da0:	ffffffff 	.word	0xffffffff
    5da4:	ffffffff 	.word	0xffffffff
    5da8:	ffffffff 	.word	0xffffffff
    5dac:	ffffffff 	.word	0xffffffff
    5db0:	ffffffff 	.word	0xffffffff
    5db4:	ffffffff 	.word	0xffffffff
    5db8:	ffffffff 	.word	0xffffffff
    5dbc:	ffffffff 	.word	0xffffffff
    5dc0:	ffffffff 	.word	0xffffffff
    5dc4:	ffffffff 	.word	0xffffffff
    5dc8:	ffffffff 	.word	0xffffffff
    5dcc:	ffffffff 	.word	0xffffffff
    5dd0:	ffffffff 	.word	0xffffffff
    5dd4:	ffffffff 	.word	0xffffffff
    5dd8:	ffffffff 	.word	0xffffffff
    5ddc:	ffffffff 	.word	0xffffffff
    5de0:	ffffffff 	.word	0xffffffff
    5de4:	ffffffff 	.word	0xffffffff
    5de8:	ffffffff 	.word	0xffffffff
    5dec:	ffffffff 	.word	0xffffffff
    5df0:	ffffffff 	.word	0xffffffff
    5df4:	ffffffff 	.word	0xffffffff
    5df8:	ffffffff 	.word	0xffffffff
    5dfc:	ffffffff 	.word	0xffffffff
    5e00:	ffffffff 	.word	0xffffffff
    5e04:	ffffffff 	.word	0xffffffff
    5e08:	ffffffff 	.word	0xffffffff
    5e0c:	ffffffff 	.word	0xffffffff
    5e10:	ffffffff 	.word	0xffffffff
    5e14:	ffffffff 	.word	0xffffffff
    5e18:	ffffffff 	.word	0xffffffff
    5e1c:	ffffffff 	.word	0xffffffff
    5e20:	ffffffff 	.word	0xffffffff
    5e24:	ffffffff 	.word	0xffffffff
    5e28:	ffffffff 	.word	0xffffffff
    5e2c:	ffffffff 	.word	0xffffffff
    5e30:	ffffffff 	.word	0xffffffff
    5e34:	ffffffff 	.word	0xffffffff
    5e38:	ffffffff 	.word	0xffffffff
    5e3c:	ffffffff 	.word	0xffffffff
    5e40:	ffffffff 	.word	0xffffffff
    5e44:	ffffffff 	.word	0xffffffff
    5e48:	ffffffff 	.word	0xffffffff
    5e4c:	ffffffff 	.word	0xffffffff
    5e50:	ffffffff 	.word	0xffffffff
    5e54:	ffffffff 	.word	0xffffffff
    5e58:	ffffffff 	.word	0xffffffff
    5e5c:	ffffffff 	.word	0xffffffff
    5e60:	ffffffff 	.word	0xffffffff
    5e64:	ffffffff 	.word	0xffffffff
    5e68:	ffffffff 	.word	0xffffffff
    5e6c:	ffffffff 	.word	0xffffffff
    5e70:	ffffffff 	.word	0xffffffff
    5e74:	ffffffff 	.word	0xffffffff
    5e78:	ffffffff 	.word	0xffffffff
    5e7c:	ffffffff 	.word	0xffffffff
    5e80:	ffffffff 	.word	0xffffffff
    5e84:	ffffffff 	.word	0xffffffff
    5e88:	ffffffff 	.word	0xffffffff
    5e8c:	ffffffff 	.word	0xffffffff
    5e90:	ffffffff 	.word	0xffffffff
    5e94:	ffffffff 	.word	0xffffffff
    5e98:	ffffffff 	.word	0xffffffff
    5e9c:	ffffffff 	.word	0xffffffff
    5ea0:	ffffffff 	.word	0xffffffff
    5ea4:	ffffffff 	.word	0xffffffff
    5ea8:	ffffffff 	.word	0xffffffff
    5eac:	ffffffff 	.word	0xffffffff
    5eb0:	ffffffff 	.word	0xffffffff
    5eb4:	ffffffff 	.word	0xffffffff
    5eb8:	ffffffff 	.word	0xffffffff
    5ebc:	ffffffff 	.word	0xffffffff
    5ec0:	ffffffff 	.word	0xffffffff
    5ec4:	ffffffff 	.word	0xffffffff
    5ec8:	ffffffff 	.word	0xffffffff
    5ecc:	ffffffff 	.word	0xffffffff
    5ed0:	ffffffff 	.word	0xffffffff
    5ed4:	ffffffff 	.word	0xffffffff
    5ed8:	ffffffff 	.word	0xffffffff
    5edc:	ffffffff 	.word	0xffffffff
    5ee0:	ffffffff 	.word	0xffffffff
    5ee4:	ffffffff 	.word	0xffffffff
    5ee8:	ffffffff 	.word	0xffffffff
    5eec:	ffffffff 	.word	0xffffffff
    5ef0:	ffffffff 	.word	0xffffffff
    5ef4:	ffffffff 	.word	0xffffffff
    5ef8:	ffffffff 	.word	0xffffffff
    5efc:	ffffffff 	.word	0xffffffff
    5f00:	ffffffff 	.word	0xffffffff
    5f04:	ffffffff 	.word	0xffffffff
    5f08:	ffffffff 	.word	0xffffffff
    5f0c:	ffffffff 	.word	0xffffffff
    5f10:	ffffffff 	.word	0xffffffff
    5f14:	ffffffff 	.word	0xffffffff
    5f18:	ffffffff 	.word	0xffffffff
    5f1c:	ffffffff 	.word	0xffffffff
    5f20:	ffffffff 	.word	0xffffffff
    5f24:	ffffffff 	.word	0xffffffff
    5f28:	ffffffff 	.word	0xffffffff
    5f2c:	ffffffff 	.word	0xffffffff
    5f30:	ffffffff 	.word	0xffffffff
    5f34:	ffffffff 	.word	0xffffffff
    5f38:	ffffffff 	.word	0xffffffff
    5f3c:	ffffffff 	.word	0xffffffff
    5f40:	ffffffff 	.word	0xffffffff
    5f44:	ffffffff 	.word	0xffffffff
    5f48:	ffffffff 	.word	0xffffffff
    5f4c:	ffffffff 	.word	0xffffffff
    5f50:	ffffffff 	.word	0xffffffff
    5f54:	ffffffff 	.word	0xffffffff
    5f58:	ffffffff 	.word	0xffffffff
    5f5c:	ffffffff 	.word	0xffffffff
    5f60:	ffffffff 	.word	0xffffffff
    5f64:	ffffffff 	.word	0xffffffff
    5f68:	ffffffff 	.word	0xffffffff
    5f6c:	ffffffff 	.word	0xffffffff
    5f70:	ffffffff 	.word	0xffffffff
    5f74:	ffffffff 	.word	0xffffffff
    5f78:	ffffffff 	.word	0xffffffff
    5f7c:	ffffffff 	.word	0xffffffff
    5f80:	ffffffff 	.word	0xffffffff
    5f84:	ffffffff 	.word	0xffffffff
    5f88:	ffffffff 	.word	0xffffffff
    5f8c:	ffffffff 	.word	0xffffffff
    5f90:	ffffffff 	.word	0xffffffff
    5f94:	ffffffff 	.word	0xffffffff
    5f98:	ffffffff 	.word	0xffffffff
    5f9c:	ffffffff 	.word	0xffffffff
    5fa0:	ffffffff 	.word	0xffffffff
    5fa4:	ffffffff 	.word	0xffffffff
    5fa8:	ffffffff 	.word	0xffffffff
    5fac:	ffffffff 	.word	0xffffffff
    5fb0:	ffffffff 	.word	0xffffffff
    5fb4:	ffffffff 	.word	0xffffffff
    5fb8:	ffffffff 	.word	0xffffffff
    5fbc:	ffffffff 	.word	0xffffffff
    5fc0:	ffffffff 	.word	0xffffffff
    5fc4:	ffffffff 	.word	0xffffffff
    5fc8:	ffffffff 	.word	0xffffffff
    5fcc:	ffffffff 	.word	0xffffffff
    5fd0:	ffffffff 	.word	0xffffffff
    5fd4:	ffffffff 	.word	0xffffffff
    5fd8:	ffffffff 	.word	0xffffffff
    5fdc:	ffffffff 	.word	0xffffffff
    5fe0:	ffffffff 	.word	0xffffffff
    5fe4:	ffffffff 	.word	0xffffffff
    5fe8:	ffffffff 	.word	0xffffffff
    5fec:	ffffffff 	.word	0xffffffff
    5ff0:	ffffffff 	.word	0xffffffff
    5ff4:	ffffffff 	.word	0xffffffff
    5ff8:	ffffffff 	.word	0xffffffff
    5ffc:	ffffffff 	.word	0xffffffff
    6000:	ffffffff 	.word	0xffffffff
    6004:	ffffffff 	.word	0xffffffff
    6008:	ffffffff 	.word	0xffffffff
    600c:	ffffffff 	.word	0xffffffff
    6010:	ffffffff 	.word	0xffffffff
    6014:	ffffffff 	.word	0xffffffff
    6018:	ffffffff 	.word	0xffffffff
    601c:	ffffffff 	.word	0xffffffff
    6020:	ffffffff 	.word	0xffffffff
    6024:	ffffffff 	.word	0xffffffff
    6028:	ffffffff 	.word	0xffffffff
    602c:	ffffffff 	.word	0xffffffff
    6030:	ffffffff 	.word	0xffffffff
    6034:	ffffffff 	.word	0xffffffff
    6038:	ffffffff 	.word	0xffffffff
    603c:	ffffffff 	.word	0xffffffff
    6040:	ffffffff 	.word	0xffffffff
    6044:	ffffffff 	.word	0xffffffff
    6048:	ffffffff 	.word	0xffffffff
    604c:	ffffffff 	.word	0xffffffff
    6050:	ffffffff 	.word	0xffffffff
    6054:	ffffffff 	.word	0xffffffff
    6058:	ffffffff 	.word	0xffffffff
    605c:	ffffffff 	.word	0xffffffff
    6060:	ffffffff 	.word	0xffffffff
    6064:	ffffffff 	.word	0xffffffff
    6068:	ffffffff 	.word	0xffffffff
    606c:	ffffffff 	.word	0xffffffff
    6070:	ffffffff 	.word	0xffffffff
    6074:	ffffffff 	.word	0xffffffff
    6078:	ffffffff 	.word	0xffffffff
    607c:	ffffffff 	.word	0xffffffff
    6080:	ffffffff 	.word	0xffffffff
    6084:	ffffffff 	.word	0xffffffff
    6088:	ffffffff 	.word	0xffffffff
    608c:	ffffffff 	.word	0xffffffff
    6090:	ffffffff 	.word	0xffffffff
    6094:	ffffffff 	.word	0xffffffff
    6098:	ffffffff 	.word	0xffffffff
    609c:	ffffffff 	.word	0xffffffff
    60a0:	ffffffff 	.word	0xffffffff
    60a4:	ffffffff 	.word	0xffffffff
    60a8:	ffffffff 	.word	0xffffffff
    60ac:	ffffffff 	.word	0xffffffff
    60b0:	ffffffff 	.word	0xffffffff
    60b4:	ffffffff 	.word	0xffffffff
    60b8:	ffffffff 	.word	0xffffffff
    60bc:	ffffffff 	.word	0xffffffff
    60c0:	ffffffff 	.word	0xffffffff
    60c4:	ffffffff 	.word	0xffffffff
    60c8:	ffffffff 	.word	0xffffffff
    60cc:	ffffffff 	.word	0xffffffff
    60d0:	ffffffff 	.word	0xffffffff
    60d4:	ffffffff 	.word	0xffffffff
    60d8:	ffffffff 	.word	0xffffffff
    60dc:	ffffffff 	.word	0xffffffff
    60e0:	ffffffff 	.word	0xffffffff
    60e4:	ffffffff 	.word	0xffffffff
    60e8:	ffffffff 	.word	0xffffffff
    60ec:	ffffffff 	.word	0xffffffff
    60f0:	ffffffff 	.word	0xffffffff
    60f4:	ffffffff 	.word	0xffffffff
    60f8:	ffffffff 	.word	0xffffffff
    60fc:	ffffffff 	.word	0xffffffff

00006100 <pds_ff_PDS_EDC_ID>:
    6100:	00010007 200003e6 00000000 00000000     ....... ........

00006110 <pds_ff_PDS_CONNECTION_TABLE_ID>:
    6110:	00320006 20002198 00000000 00000000     ..2..!. ........

00006120 <pds_ff_PDS_CONNECTION_MODE_ID>:
    6120:	00010005 2000000b 00000000 00000000     ....... ........

00006130 <pds_ff_PDS_CURRENT_CHANNEL_ID>:
    6130:	00010004 2000000d 00000000 00000000     ....... ........

00006140 <pds_ff_PDS_LONGADDR_ID>:
    6140:	00080003 20000010 00000000 00000000     ....... ........

00006150 <pds_ff_PDS_PANID_ID>:
    6150:	00020002 20001f6c 00000000 00000000     ....l.. ........

00006160 <pds_ff_PDS_OUTGOING_FRAME_COUNTER_ID>:
    6160:	00040001 20001dc0 00000000 00000000     ....... ........

00006170 <MiWiFullParamsDirDescr>:
    6170:	00012660 40010007                       `&.....@

00006178 <__do_global_dtors_aux>:
    6178:	b510      	push	{r4, lr}
    617a:	4c06      	ldr	r4, [pc, #24]	; (6194 <__do_global_dtors_aux+0x1c>)
    617c:	7823      	ldrb	r3, [r4, #0]
    617e:	2b00      	cmp	r3, #0
    6180:	d107      	bne.n	6192 <__do_global_dtors_aux+0x1a>
    6182:	4b05      	ldr	r3, [pc, #20]	; (6198 <__do_global_dtors_aux+0x20>)
    6184:	2b00      	cmp	r3, #0
    6186:	d002      	beq.n	618e <__do_global_dtors_aux+0x16>
    6188:	4804      	ldr	r0, [pc, #16]	; (619c <__do_global_dtors_aux+0x24>)
    618a:	e000      	b.n	618e <__do_global_dtors_aux+0x16>
    618c:	bf00      	nop
    618e:	2301      	movs	r3, #1
    6190:	7023      	strb	r3, [r4, #0]
    6192:	bd10      	pop	{r4, pc}
    6194:	2000009c 	.word	0x2000009c
    6198:	00000000 	.word	0x00000000
    619c:	00012d08 	.word	0x00012d08

000061a0 <frame_dummy>:
    61a0:	4b08      	ldr	r3, [pc, #32]	; (61c4 <frame_dummy+0x24>)
    61a2:	b510      	push	{r4, lr}
    61a4:	2b00      	cmp	r3, #0
    61a6:	d003      	beq.n	61b0 <frame_dummy+0x10>
    61a8:	4907      	ldr	r1, [pc, #28]	; (61c8 <frame_dummy+0x28>)
    61aa:	4808      	ldr	r0, [pc, #32]	; (61cc <frame_dummy+0x2c>)
    61ac:	e000      	b.n	61b0 <frame_dummy+0x10>
    61ae:	bf00      	nop
    61b0:	4807      	ldr	r0, [pc, #28]	; (61d0 <frame_dummy+0x30>)
    61b2:	6803      	ldr	r3, [r0, #0]
    61b4:	2b00      	cmp	r3, #0
    61b6:	d100      	bne.n	61ba <frame_dummy+0x1a>
    61b8:	bd10      	pop	{r4, pc}
    61ba:	4b06      	ldr	r3, [pc, #24]	; (61d4 <frame_dummy+0x34>)
    61bc:	2b00      	cmp	r3, #0
    61be:	d0fb      	beq.n	61b8 <frame_dummy+0x18>
    61c0:	4798      	blx	r3
    61c2:	e7f9      	b.n	61b8 <frame_dummy+0x18>
    61c4:	00000000 	.word	0x00000000
    61c8:	200000a0 	.word	0x200000a0
    61cc:	00012d08 	.word	0x00012d08
    61d0:	00012d08 	.word	0x00012d08
    61d4:	00000000 	.word	0x00000000

000061d8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    61d8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    61da:	2000      	movs	r0, #0
    61dc:	4b08      	ldr	r3, [pc, #32]	; (6200 <delay_init+0x28>)
    61de:	4798      	blx	r3
    61e0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    61e2:	4c08      	ldr	r4, [pc, #32]	; (6204 <delay_init+0x2c>)
    61e4:	21fa      	movs	r1, #250	; 0xfa
    61e6:	0089      	lsls	r1, r1, #2
    61e8:	47a0      	blx	r4
    61ea:	4b07      	ldr	r3, [pc, #28]	; (6208 <delay_init+0x30>)
    61ec:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    61ee:	4907      	ldr	r1, [pc, #28]	; (620c <delay_init+0x34>)
    61f0:	0028      	movs	r0, r5
    61f2:	47a0      	blx	r4
    61f4:	4b06      	ldr	r3, [pc, #24]	; (6210 <delay_init+0x38>)
    61f6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    61f8:	2205      	movs	r2, #5
    61fa:	4b06      	ldr	r3, [pc, #24]	; (6214 <delay_init+0x3c>)
    61fc:	601a      	str	r2, [r3, #0]
}
    61fe:	bd70      	pop	{r4, r5, r6, pc}
    6200:	00008349 	.word	0x00008349
    6204:	0000e439 	.word	0x0000e439
    6208:	20000000 	.word	0x20000000
    620c:	000f4240 	.word	0x000f4240
    6210:	20000004 	.word	0x20000004
    6214:	e000e010 	.word	0xe000e010

00006218 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    6218:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    621a:	4b08      	ldr	r3, [pc, #32]	; (623c <delay_cycles_us+0x24>)
    621c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    621e:	4a08      	ldr	r2, [pc, #32]	; (6240 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    6220:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6222:	2180      	movs	r1, #128	; 0x80
    6224:	0249      	lsls	r1, r1, #9
	while (n--) {
    6226:	3801      	subs	r0, #1
    6228:	d307      	bcc.n	623a <delay_cycles_us+0x22>
	if (n > 0) {
    622a:	2c00      	cmp	r4, #0
    622c:	d0fb      	beq.n	6226 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    622e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    6230:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6232:	6813      	ldr	r3, [r2, #0]
    6234:	420b      	tst	r3, r1
    6236:	d0fc      	beq.n	6232 <delay_cycles_us+0x1a>
    6238:	e7f5      	b.n	6226 <delay_cycles_us+0xe>
	}
}
    623a:	bd30      	pop	{r4, r5, pc}
    623c:	20000004 	.word	0x20000004
    6240:	e000e010 	.word	0xe000e010

00006244 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    6244:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    6246:	4b08      	ldr	r3, [pc, #32]	; (6268 <delay_cycles_ms+0x24>)
    6248:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    624a:	4a08      	ldr	r2, [pc, #32]	; (626c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    624c:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    624e:	2180      	movs	r1, #128	; 0x80
    6250:	0249      	lsls	r1, r1, #9
	while (n--) {
    6252:	3801      	subs	r0, #1
    6254:	d307      	bcc.n	6266 <delay_cycles_ms+0x22>
	if (n > 0) {
    6256:	2c00      	cmp	r4, #0
    6258:	d0fb      	beq.n	6252 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    625a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    625c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    625e:	6813      	ldr	r3, [r2, #0]
    6260:	420b      	tst	r3, r1
    6262:	d0fc      	beq.n	625e <delay_cycles_ms+0x1a>
    6264:	e7f5      	b.n	6252 <delay_cycles_ms+0xe>
	}
}
    6266:	bd30      	pop	{r4, r5, pc}
    6268:	20000000 	.word	0x20000000
    626c:	e000e010 	.word	0xe000e010

00006270 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    6270:	4b0c      	ldr	r3, [pc, #48]	; (62a4 <cpu_irq_enter_critical+0x34>)
    6272:	681b      	ldr	r3, [r3, #0]
    6274:	2b00      	cmp	r3, #0
    6276:	d106      	bne.n	6286 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    6278:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    627c:	2b00      	cmp	r3, #0
    627e:	d007      	beq.n	6290 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    6280:	2200      	movs	r2, #0
    6282:	4b09      	ldr	r3, [pc, #36]	; (62a8 <cpu_irq_enter_critical+0x38>)
    6284:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    6286:	4a07      	ldr	r2, [pc, #28]	; (62a4 <cpu_irq_enter_critical+0x34>)
    6288:	6813      	ldr	r3, [r2, #0]
    628a:	3301      	adds	r3, #1
    628c:	6013      	str	r3, [r2, #0]
}
    628e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    6290:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    6292:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    6296:	2200      	movs	r2, #0
    6298:	4b04      	ldr	r3, [pc, #16]	; (62ac <cpu_irq_enter_critical+0x3c>)
    629a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    629c:	3201      	adds	r2, #1
    629e:	4b02      	ldr	r3, [pc, #8]	; (62a8 <cpu_irq_enter_critical+0x38>)
    62a0:	701a      	strb	r2, [r3, #0]
    62a2:	e7f0      	b.n	6286 <cpu_irq_enter_critical+0x16>
    62a4:	200000b8 	.word	0x200000b8
    62a8:	200000bc 	.word	0x200000bc
    62ac:	20000008 	.word	0x20000008

000062b0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    62b0:	4b08      	ldr	r3, [pc, #32]	; (62d4 <cpu_irq_leave_critical+0x24>)
    62b2:	681a      	ldr	r2, [r3, #0]
    62b4:	3a01      	subs	r2, #1
    62b6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    62b8:	681b      	ldr	r3, [r3, #0]
    62ba:	2b00      	cmp	r3, #0
    62bc:	d109      	bne.n	62d2 <cpu_irq_leave_critical+0x22>
    62be:	4b06      	ldr	r3, [pc, #24]	; (62d8 <cpu_irq_leave_critical+0x28>)
    62c0:	781b      	ldrb	r3, [r3, #0]
    62c2:	2b00      	cmp	r3, #0
    62c4:	d005      	beq.n	62d2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    62c6:	2201      	movs	r2, #1
    62c8:	4b04      	ldr	r3, [pc, #16]	; (62dc <cpu_irq_leave_critical+0x2c>)
    62ca:	701a      	strb	r2, [r3, #0]
    62cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    62d0:	b662      	cpsie	i
	}
}
    62d2:	4770      	bx	lr
    62d4:	200000b8 	.word	0x200000b8
    62d8:	200000bc 	.word	0x200000bc
    62dc:	20000008 	.word	0x20000008

000062e0 <system_board_init>:




void system_board_init(void)
{
    62e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    62e2:	46c6      	mov	lr, r8
    62e4:	b500      	push	{lr}
    62e6:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    62e8:	ac01      	add	r4, sp, #4
    62ea:	2601      	movs	r6, #1
    62ec:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    62ee:	2700      	movs	r7, #0
    62f0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    62f2:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    62f4:	0021      	movs	r1, r4
    62f6:	2013      	movs	r0, #19
    62f8:	4d27      	ldr	r5, [pc, #156]	; (6398 <system_board_init+0xb8>)
    62fa:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    62fc:	4b27      	ldr	r3, [pc, #156]	; (639c <system_board_init+0xbc>)
    62fe:	4698      	mov	r8, r3
    6300:	2380      	movs	r3, #128	; 0x80
    6302:	031b      	lsls	r3, r3, #12
    6304:	4642      	mov	r2, r8
    6306:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6308:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    630a:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    630c:	0021      	movs	r1, r4
    630e:	201c      	movs	r0, #28
    6310:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
    6312:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    6314:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6316:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    6318:	0021      	movs	r1, r4
    631a:	2052      	movs	r0, #82	; 0x52
    631c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    631e:	0021      	movs	r1, r4
    6320:	203e      	movs	r0, #62	; 0x3e
    6322:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    6324:	0021      	movs	r1, r4
    6326:	203f      	movs	r0, #63	; 0x3f
    6328:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    632a:	0021      	movs	r1, r4
    632c:	202f      	movs	r0, #47	; 0x2f
    632e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    6330:	0021      	movs	r1, r4
    6332:	2014      	movs	r0, #20
    6334:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    6336:	2280      	movs	r2, #128	; 0x80
    6338:	02d2      	lsls	r2, r2, #11
    633a:	4b19      	ldr	r3, [pc, #100]	; (63a0 <system_board_init+0xc0>)
    633c:	619a      	str	r2, [r3, #24]
    633e:	4b19      	ldr	r3, [pc, #100]	; (63a4 <system_board_init+0xc4>)
    6340:	2280      	movs	r2, #128	; 0x80
    6342:	05d2      	lsls	r2, r2, #23
    6344:	619a      	str	r2, [r3, #24]
    6346:	2280      	movs	r2, #128	; 0x80
    6348:	0612      	lsls	r2, r2, #24
    634a:	619a      	str	r2, [r3, #24]
    634c:	2280      	movs	r2, #128	; 0x80
    634e:	0212      	lsls	r2, r2, #8
    6350:	619a      	str	r2, [r3, #24]
    6352:	2380      	movs	r3, #128	; 0x80
    6354:	035b      	lsls	r3, r3, #13
    6356:	4642      	mov	r2, r8
    6358:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    635a:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    635c:	0021      	movs	r1, r4
    635e:	2053      	movs	r0, #83	; 0x53
    6360:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
    6362:	4a11      	ldr	r2, [pc, #68]	; (63a8 <system_board_init+0xc8>)
    6364:	6a11      	ldr	r1, [r2, #32]
    6366:	2380      	movs	r3, #128	; 0x80
    6368:	039b      	lsls	r3, r3, #14
    636a:	430b      	orrs	r3, r1
    636c:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
    636e:	2204      	movs	r2, #4
    6370:	4b0e      	ldr	r3, [pc, #56]	; (63ac <system_board_init+0xcc>)
    6372:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6374:	466b      	mov	r3, sp
    6376:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    6378:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
    637a:	2305      	movs	r3, #5
    637c:	466a      	mov	r2, sp
    637e:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
    6380:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
    6382:	4669      	mov	r1, sp
    6384:	2009      	movs	r0, #9
    6386:	4c0a      	ldr	r4, [pc, #40]	; (63b0 <system_board_init+0xd0>)
    6388:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
    638a:	4669      	mov	r1, sp
    638c:	200c      	movs	r0, #12
    638e:	47a0      	blx	r4
#endif

}
    6390:	b002      	add	sp, #8
    6392:	bc04      	pop	{r2}
    6394:	4690      	mov	r8, r2
    6396:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6398:	000067b1 	.word	0x000067b1
    639c:	41004400 	.word	0x41004400
    63a0:	41004500 	.word	0x41004500
    63a4:	41004480 	.word	0x41004480
    63a8:	40000400 	.word	0x40000400
    63ac:	42005400 	.word	0x42005400
    63b0:	00008559 	.word	0x00008559

000063b4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    63b4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    63b6:	2a00      	cmp	r2, #0
    63b8:	d001      	beq.n	63be <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    63ba:	0018      	movs	r0, r3
    63bc:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    63be:	008b      	lsls	r3, r1, #2
    63c0:	4a06      	ldr	r2, [pc, #24]	; (63dc <extint_register_callback+0x28>)
    63c2:	589b      	ldr	r3, [r3, r2]
    63c4:	2b00      	cmp	r3, #0
    63c6:	d003      	beq.n	63d0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    63c8:	4283      	cmp	r3, r0
    63ca:	d005      	beq.n	63d8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    63cc:	231d      	movs	r3, #29
    63ce:	e7f4      	b.n	63ba <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    63d0:	0089      	lsls	r1, r1, #2
    63d2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    63d4:	2300      	movs	r3, #0
    63d6:	e7f0      	b.n	63ba <extint_register_callback+0x6>
		return STATUS_OK;
    63d8:	2300      	movs	r3, #0
    63da:	e7ee      	b.n	63ba <extint_register_callback+0x6>
    63dc:	20001c84 	.word	0x20001c84

000063e0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    63e0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    63e2:	2900      	cmp	r1, #0
    63e4:	d001      	beq.n	63ea <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    63e6:	0018      	movs	r0, r3
    63e8:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    63ea:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    63ec:	281f      	cmp	r0, #31
    63ee:	d800      	bhi.n	63f2 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    63f0:	4a02      	ldr	r2, [pc, #8]	; (63fc <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    63f2:	2301      	movs	r3, #1
    63f4:	4083      	lsls	r3, r0
    63f6:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    63f8:	2300      	movs	r3, #0
    63fa:	e7f4      	b.n	63e6 <extint_chan_enable_callback+0x6>
    63fc:	40001800 	.word	0x40001800

00006400 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6400:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    6402:	2900      	cmp	r1, #0
    6404:	d001      	beq.n	640a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    6406:	0018      	movs	r0, r3
    6408:	4770      	bx	lr
		return NULL;
    640a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    640c:	281f      	cmp	r0, #31
    640e:	d800      	bhi.n	6412 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    6410:	4a02      	ldr	r2, [pc, #8]	; (641c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    6412:	2301      	movs	r3, #1
    6414:	4083      	lsls	r3, r0
    6416:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    6418:	2300      	movs	r3, #0
    641a:	e7f4      	b.n	6406 <extint_chan_disable_callback+0x6>
    641c:	40001800 	.word	0x40001800

00006420 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    6420:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6422:	2200      	movs	r2, #0
    6424:	4b10      	ldr	r3, [pc, #64]	; (6468 <EIC_Handler+0x48>)
    6426:	701a      	strb	r2, [r3, #0]
    6428:	2300      	movs	r3, #0
    642a:	4910      	ldr	r1, [pc, #64]	; (646c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    642c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    642e:	4e10      	ldr	r6, [pc, #64]	; (6470 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6430:	4c0d      	ldr	r4, [pc, #52]	; (6468 <EIC_Handler+0x48>)
    6432:	e00a      	b.n	644a <EIC_Handler+0x2a>
		return eics[eic_index];
    6434:	490d      	ldr	r1, [pc, #52]	; (646c <EIC_Handler+0x4c>)
    6436:	e008      	b.n	644a <EIC_Handler+0x2a>
    6438:	7823      	ldrb	r3, [r4, #0]
    643a:	3301      	adds	r3, #1
    643c:	b2db      	uxtb	r3, r3
    643e:	7023      	strb	r3, [r4, #0]
    6440:	2b0f      	cmp	r3, #15
    6442:	d810      	bhi.n	6466 <EIC_Handler+0x46>
		return NULL;
    6444:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    6446:	2b1f      	cmp	r3, #31
    6448:	d9f4      	bls.n	6434 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    644a:	0028      	movs	r0, r5
    644c:	4018      	ands	r0, r3
    644e:	2201      	movs	r2, #1
    6450:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    6452:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    6454:	4210      	tst	r0, r2
    6456:	d0ef      	beq.n	6438 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    6458:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    645a:	009b      	lsls	r3, r3, #2
    645c:	599b      	ldr	r3, [r3, r6]
    645e:	2b00      	cmp	r3, #0
    6460:	d0ea      	beq.n	6438 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    6462:	4798      	blx	r3
    6464:	e7e8      	b.n	6438 <EIC_Handler+0x18>
			}
		}
	}
}
    6466:	bd70      	pop	{r4, r5, r6, pc}
    6468:	20001c80 	.word	0x20001c80
    646c:	40001800 	.word	0x40001800
    6470:	20001c84 	.word	0x20001c84

00006474 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    6474:	4a04      	ldr	r2, [pc, #16]	; (6488 <_extint_enable+0x14>)
    6476:	7813      	ldrb	r3, [r2, #0]
    6478:	2102      	movs	r1, #2
    647a:	430b      	orrs	r3, r1
    647c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    647e:	7853      	ldrb	r3, [r2, #1]
    6480:	b25b      	sxtb	r3, r3
    6482:	2b00      	cmp	r3, #0
    6484:	dbfb      	blt.n	647e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6486:	4770      	bx	lr
    6488:	40001800 	.word	0x40001800

0000648c <_system_extint_init>:
{
    648c:	b500      	push	{lr}
    648e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6490:	4a12      	ldr	r2, [pc, #72]	; (64dc <_system_extint_init+0x50>)
    6492:	6993      	ldr	r3, [r2, #24]
    6494:	2140      	movs	r1, #64	; 0x40
    6496:	430b      	orrs	r3, r1
    6498:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    649a:	a901      	add	r1, sp, #4
    649c:	2300      	movs	r3, #0
    649e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    64a0:	2005      	movs	r0, #5
    64a2:	4b0f      	ldr	r3, [pc, #60]	; (64e0 <_system_extint_init+0x54>)
    64a4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    64a6:	2005      	movs	r0, #5
    64a8:	4b0e      	ldr	r3, [pc, #56]	; (64e4 <_system_extint_init+0x58>)
    64aa:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    64ac:	4a0e      	ldr	r2, [pc, #56]	; (64e8 <_system_extint_init+0x5c>)
    64ae:	7813      	ldrb	r3, [r2, #0]
    64b0:	2101      	movs	r1, #1
    64b2:	430b      	orrs	r3, r1
    64b4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    64b6:	7853      	ldrb	r3, [r2, #1]
    64b8:	b25b      	sxtb	r3, r3
    64ba:	2b00      	cmp	r3, #0
    64bc:	dbfb      	blt.n	64b6 <_system_extint_init+0x2a>
    64be:	4b0b      	ldr	r3, [pc, #44]	; (64ec <_system_extint_init+0x60>)
    64c0:	0019      	movs	r1, r3
    64c2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    64c4:	2200      	movs	r2, #0
    64c6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    64c8:	4299      	cmp	r1, r3
    64ca:	d1fc      	bne.n	64c6 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    64cc:	2210      	movs	r2, #16
    64ce:	4b08      	ldr	r3, [pc, #32]	; (64f0 <_system_extint_init+0x64>)
    64d0:	601a      	str	r2, [r3, #0]
	_extint_enable();
    64d2:	4b08      	ldr	r3, [pc, #32]	; (64f4 <_system_extint_init+0x68>)
    64d4:	4798      	blx	r3
}
    64d6:	b003      	add	sp, #12
    64d8:	bd00      	pop	{pc}
    64da:	46c0      	nop			; (mov r8, r8)
    64dc:	40000400 	.word	0x40000400
    64e0:	00008461 	.word	0x00008461
    64e4:	000083d5 	.word	0x000083d5
    64e8:	40001800 	.word	0x40001800
    64ec:	20001c84 	.word	0x20001c84
    64f0:	e000e100 	.word	0xe000e100
    64f4:	00006475 	.word	0x00006475

000064f8 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    64f8:	2300      	movs	r3, #0
    64fa:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    64fc:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    64fe:	2201      	movs	r2, #1
    6500:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    6502:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    6504:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    6506:	3302      	adds	r3, #2
    6508:	72c3      	strb	r3, [r0, #11]
}
    650a:	4770      	bx	lr

0000650c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    650c:	b5f0      	push	{r4, r5, r6, r7, lr}
    650e:	b083      	sub	sp, #12
    6510:	0005      	movs	r5, r0
    6512:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6514:	a901      	add	r1, sp, #4
    6516:	2300      	movs	r3, #0
    6518:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    651a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    651c:	7923      	ldrb	r3, [r4, #4]
    651e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    6520:	7a23      	ldrb	r3, [r4, #8]
    6522:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    6524:	7820      	ldrb	r0, [r4, #0]
    6526:	4b15      	ldr	r3, [pc, #84]	; (657c <extint_chan_set_config+0x70>)
    6528:	4798      	blx	r3
		return NULL;
    652a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    652c:	2d1f      	cmp	r5, #31
    652e:	d800      	bhi.n	6532 <extint_chan_set_config+0x26>
		return eics[eic_index];
    6530:	4813      	ldr	r0, [pc, #76]	; (6580 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    6532:	2207      	movs	r2, #7
    6534:	402a      	ands	r2, r5
    6536:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    6538:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    653a:	7aa3      	ldrb	r3, [r4, #10]
    653c:	2b00      	cmp	r3, #0
    653e:	d001      	beq.n	6544 <extint_chan_set_config+0x38>
    6540:	2308      	movs	r3, #8
    6542:	431f      	orrs	r7, r3
    6544:	08eb      	lsrs	r3, r5, #3
    6546:	009b      	lsls	r3, r3, #2
    6548:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    654a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    654c:	260f      	movs	r6, #15
    654e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    6550:	43b1      	bics	r1, r6
			(new_config << config_pos);
    6552:	4097      	lsls	r7, r2
    6554:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6556:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    6558:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    655a:	7a63      	ldrb	r3, [r4, #9]
    655c:	2b00      	cmp	r3, #0
    655e:	d106      	bne.n	656e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    6560:	6943      	ldr	r3, [r0, #20]
    6562:	2201      	movs	r2, #1
    6564:	40aa      	lsls	r2, r5
    6566:	4393      	bics	r3, r2
    6568:	6143      	str	r3, [r0, #20]
	}
}
    656a:	b003      	add	sp, #12
    656c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    656e:	6942      	ldr	r2, [r0, #20]
    6570:	2301      	movs	r3, #1
    6572:	40ab      	lsls	r3, r5
    6574:	4313      	orrs	r3, r2
    6576:	6143      	str	r3, [r0, #20]
    6578:	e7f7      	b.n	656a <extint_chan_set_config+0x5e>
    657a:	46c0      	nop			; (mov r8, r8)
    657c:	00008559 	.word	0x00008559
    6580:	40001800 	.word	0x40001800

00006584 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    6584:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6586:	4a1e      	ldr	r2, [pc, #120]	; (6600 <nvm_set_config+0x7c>)
    6588:	69d3      	ldr	r3, [r2, #28]
    658a:	2104      	movs	r1, #4
    658c:	430b      	orrs	r3, r1
    658e:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6590:	4b1c      	ldr	r3, [pc, #112]	; (6604 <nvm_set_config+0x80>)
    6592:	2220      	movs	r2, #32
    6594:	32ff      	adds	r2, #255	; 0xff
    6596:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    6598:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    659a:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    659c:	07d2      	lsls	r2, r2, #31
    659e:	d401      	bmi.n	65a4 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    65a0:	0018      	movs	r0, r3
    65a2:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    65a4:	7803      	ldrb	r3, [r0, #0]
    65a6:	021b      	lsls	r3, r3, #8
    65a8:	22c0      	movs	r2, #192	; 0xc0
    65aa:	0092      	lsls	r2, r2, #2
    65ac:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    65ae:	7841      	ldrb	r1, [r0, #1]
    65b0:	01c9      	lsls	r1, r1, #7
    65b2:	22ff      	movs	r2, #255	; 0xff
    65b4:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    65b6:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    65b8:	7881      	ldrb	r1, [r0, #2]
    65ba:	0049      	lsls	r1, r1, #1
    65bc:	221e      	movs	r2, #30
    65be:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    65c0:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    65c2:	78c2      	ldrb	r2, [r0, #3]
    65c4:	0492      	lsls	r2, r2, #18
    65c6:	2180      	movs	r1, #128	; 0x80
    65c8:	02c9      	lsls	r1, r1, #11
    65ca:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    65cc:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    65ce:	7902      	ldrb	r2, [r0, #4]
    65d0:	0412      	lsls	r2, r2, #16
    65d2:	21c0      	movs	r1, #192	; 0xc0
    65d4:	0289      	lsls	r1, r1, #10
    65d6:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    65d8:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    65da:	4a0a      	ldr	r2, [pc, #40]	; (6604 <nvm_set_config+0x80>)
    65dc:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    65de:	6893      	ldr	r3, [r2, #8]
    65e0:	035b      	lsls	r3, r3, #13
    65e2:	0f5b      	lsrs	r3, r3, #29
    65e4:	4908      	ldr	r1, [pc, #32]	; (6608 <nvm_set_config+0x84>)
    65e6:	2408      	movs	r4, #8
    65e8:	409c      	lsls	r4, r3
    65ea:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    65ec:	6893      	ldr	r3, [r2, #8]
    65ee:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    65f0:	7843      	ldrb	r3, [r0, #1]
    65f2:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    65f4:	8b13      	ldrh	r3, [r2, #24]
    65f6:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    65f8:	0fdb      	lsrs	r3, r3, #31
    65fa:	011b      	lsls	r3, r3, #4
    65fc:	e7d0      	b.n	65a0 <nvm_set_config+0x1c>
    65fe:	46c0      	nop			; (mov r8, r8)
    6600:	40000400 	.word	0x40000400
    6604:	41004000 	.word	0x41004000
    6608:	200000c0 	.word	0x200000c0

0000660c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    660c:	b530      	push	{r4, r5, lr}
    660e:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    6610:	4a22      	ldr	r2, [pc, #136]	; (669c <nvm_execute_command+0x90>)
    6612:	8810      	ldrh	r0, [r2, #0]
    6614:	8853      	ldrh	r3, [r2, #2]
    6616:	4343      	muls	r3, r0
    6618:	428b      	cmp	r3, r1
    661a:	d206      	bcs.n	662a <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    661c:	2280      	movs	r2, #128	; 0x80
    661e:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    6620:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    6622:	4b1f      	ldr	r3, [pc, #124]	; (66a0 <nvm_execute_command+0x94>)
    6624:	18cb      	adds	r3, r1, r3
    6626:	4293      	cmp	r3, r2
    6628:	d80e      	bhi.n	6648 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    662a:	4b1e      	ldr	r3, [pc, #120]	; (66a4 <nvm_execute_command+0x98>)
    662c:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    662e:	2280      	movs	r2, #128	; 0x80
    6630:	02d2      	lsls	r2, r2, #11
    6632:	432a      	orrs	r2, r5
    6634:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6636:	2220      	movs	r2, #32
    6638:	32ff      	adds	r2, #255	; 0xff
    663a:	831a      	strh	r2, [r3, #24]
    663c:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    663e:	07db      	lsls	r3, r3, #31
    6640:	d403      	bmi.n	664a <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    6642:	4b18      	ldr	r3, [pc, #96]	; (66a4 <nvm_execute_command+0x98>)
    6644:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    6646:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    6648:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    664a:	2c45      	cmp	r4, #69	; 0x45
    664c:	d822      	bhi.n	6694 <nvm_execute_command+0x88>
    664e:	00a3      	lsls	r3, r4, #2
    6650:	4a15      	ldr	r2, [pc, #84]	; (66a8 <nvm_execute_command+0x9c>)
    6652:	58d3      	ldr	r3, [r2, r3]
    6654:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    6656:	4b13      	ldr	r3, [pc, #76]	; (66a4 <nvm_execute_command+0x98>)
    6658:	8b1b      	ldrh	r3, [r3, #24]
    665a:	05db      	lsls	r3, r3, #23
    665c:	d503      	bpl.n	6666 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    665e:	4b11      	ldr	r3, [pc, #68]	; (66a4 <nvm_execute_command+0x98>)
    6660:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    6662:	2010      	movs	r0, #16
    6664:	e7f0      	b.n	6648 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    6666:	0889      	lsrs	r1, r1, #2
    6668:	0049      	lsls	r1, r1, #1
    666a:	4b0e      	ldr	r3, [pc, #56]	; (66a4 <nvm_execute_command+0x98>)
    666c:	61d9      	str	r1, [r3, #28]
			break;
    666e:	e003      	b.n	6678 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    6670:	0889      	lsrs	r1, r1, #2
    6672:	0049      	lsls	r1, r1, #1
    6674:	4b0b      	ldr	r3, [pc, #44]	; (66a4 <nvm_execute_command+0x98>)
    6676:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    6678:	20a5      	movs	r0, #165	; 0xa5
    667a:	0200      	lsls	r0, r0, #8
    667c:	4304      	orrs	r4, r0
    667e:	4b09      	ldr	r3, [pc, #36]	; (66a4 <nvm_execute_command+0x98>)
    6680:	801c      	strh	r4, [r3, #0]
    6682:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    6684:	2201      	movs	r2, #1
    6686:	7d0b      	ldrb	r3, [r1, #20]
    6688:	4213      	tst	r3, r2
    668a:	d0fc      	beq.n	6686 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    668c:	4b05      	ldr	r3, [pc, #20]	; (66a4 <nvm_execute_command+0x98>)
    668e:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    6690:	2000      	movs	r0, #0
    6692:	e7d9      	b.n	6648 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    6694:	4b03      	ldr	r3, [pc, #12]	; (66a4 <nvm_execute_command+0x98>)
    6696:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    6698:	2017      	movs	r0, #23
    669a:	e7d5      	b.n	6648 <nvm_execute_command+0x3c>
    669c:	200000c0 	.word	0x200000c0
    66a0:	ff7fc000 	.word	0xff7fc000
    66a4:	41004000 	.word	0x41004000
    66a8:	00011f00 	.word	0x00011f00

000066ac <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    66ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    66ae:	4b25      	ldr	r3, [pc, #148]	; (6744 <nvm_write_buffer+0x98>)
    66b0:	881d      	ldrh	r5, [r3, #0]
    66b2:	885b      	ldrh	r3, [r3, #2]
    66b4:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    66b6:	2418      	movs	r4, #24
	if (destination_address >
    66b8:	4283      	cmp	r3, r0
    66ba:	d201      	bcs.n	66c0 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    66bc:	0020      	movs	r0, r4
    66be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    66c0:	1e6b      	subs	r3, r5, #1
    66c2:	4218      	tst	r0, r3
    66c4:	d1fa      	bne.n	66bc <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    66c6:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    66c8:	4295      	cmp	r5, r2
    66ca:	d3f7      	bcc.n	66bc <nvm_write_buffer+0x10>
    66cc:	4b1e      	ldr	r3, [pc, #120]	; (6748 <nvm_write_buffer+0x9c>)
    66ce:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    66d0:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    66d2:	07db      	lsls	r3, r3, #31
    66d4:	d5f2      	bpl.n	66bc <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    66d6:	4c1d      	ldr	r4, [pc, #116]	; (674c <nvm_write_buffer+0xa0>)
    66d8:	4b1b      	ldr	r3, [pc, #108]	; (6748 <nvm_write_buffer+0x9c>)
    66da:	801c      	strh	r4, [r3, #0]
    66dc:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    66de:	2401      	movs	r4, #1
    66e0:	7d2b      	ldrb	r3, [r5, #20]
    66e2:	4223      	tst	r3, r4
    66e4:	d0fc      	beq.n	66e0 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    66e6:	2420      	movs	r4, #32
    66e8:	34ff      	adds	r4, #255	; 0xff
    66ea:	4b17      	ldr	r3, [pc, #92]	; (6748 <nvm_write_buffer+0x9c>)
    66ec:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    66ee:	2a00      	cmp	r2, #0
    66f0:	d022      	beq.n	6738 <nvm_write_buffer+0x8c>
    66f2:	2301      	movs	r3, #1
    66f4:	0005      	movs	r5, r0
    66f6:	439d      	bics	r5, r3
    66f8:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    66fa:	1e57      	subs	r7, r2, #1
    66fc:	e009      	b.n	6712 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    66fe:	18ce      	adds	r6, r1, r3
    6700:	7876      	ldrb	r6, [r6, #1]
    6702:	0236      	lsls	r6, r6, #8
    6704:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    6706:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    6708:	3302      	adds	r3, #2
    670a:	b29b      	uxth	r3, r3
    670c:	3502      	adds	r5, #2
    670e:	429a      	cmp	r2, r3
    6710:	d904      	bls.n	671c <nvm_write_buffer+0x70>
		data = buffer[i];
    6712:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    6714:	42bb      	cmp	r3, r7
    6716:	dbf2      	blt.n	66fe <nvm_write_buffer+0x52>
		data = buffer[i];
    6718:	b2a4      	uxth	r4, r4
    671a:	e7f4      	b.n	6706 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    671c:	4b09      	ldr	r3, [pc, #36]	; (6744 <nvm_write_buffer+0x98>)
    671e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    6720:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    6722:	2b00      	cmp	r3, #0
    6724:	d1ca      	bne.n	66bc <nvm_write_buffer+0x10>
    6726:	2a3f      	cmp	r2, #63	; 0x3f
    6728:	d8c8      	bhi.n	66bc <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    672a:	2200      	movs	r2, #0
    672c:	0001      	movs	r1, r0
    672e:	2004      	movs	r0, #4
    6730:	4b07      	ldr	r3, [pc, #28]	; (6750 <nvm_write_buffer+0xa4>)
    6732:	4798      	blx	r3
    6734:	0004      	movs	r4, r0
    6736:	e7c1      	b.n	66bc <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    6738:	4b02      	ldr	r3, [pc, #8]	; (6744 <nvm_write_buffer+0x98>)
    673a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    673c:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    673e:	2b00      	cmp	r3, #0
    6740:	d0f3      	beq.n	672a <nvm_write_buffer+0x7e>
    6742:	e7bb      	b.n	66bc <nvm_write_buffer+0x10>
    6744:	200000c0 	.word	0x200000c0
    6748:	41004000 	.word	0x41004000
    674c:	ffffa544 	.word	0xffffa544
    6750:	0000660d 	.word	0x0000660d

00006754 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6754:	4b13      	ldr	r3, [pc, #76]	; (67a4 <nvm_erase_row+0x50>)
    6756:	881a      	ldrh	r2, [r3, #0]
    6758:	885b      	ldrh	r3, [r3, #2]
    675a:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    675c:	2118      	movs	r1, #24
	if (row_address >
    675e:	4283      	cmp	r3, r0
    6760:	d201      	bcs.n	6766 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    6762:	0008      	movs	r0, r1
    6764:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    6766:	0092      	lsls	r2, r2, #2
    6768:	3a01      	subs	r2, #1
    676a:	4210      	tst	r0, r2
    676c:	d1f9      	bne.n	6762 <nvm_erase_row+0xe>
    676e:	4b0e      	ldr	r3, [pc, #56]	; (67a8 <nvm_erase_row+0x54>)
    6770:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    6772:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    6774:	07db      	lsls	r3, r3, #31
    6776:	d5f4      	bpl.n	6762 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6778:	4b0b      	ldr	r3, [pc, #44]	; (67a8 <nvm_erase_row+0x54>)
    677a:	2220      	movs	r2, #32
    677c:	32ff      	adds	r2, #255	; 0xff
    677e:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    6780:	0880      	lsrs	r0, r0, #2
    6782:	0040      	lsls	r0, r0, #1
    6784:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    6786:	4a09      	ldr	r2, [pc, #36]	; (67ac <nvm_erase_row+0x58>)
    6788:	801a      	strh	r2, [r3, #0]
    678a:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    678c:	2201      	movs	r2, #1
    678e:	7d0b      	ldrb	r3, [r1, #20]
    6790:	4213      	tst	r3, r2
    6792:	d0fc      	beq.n	678e <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    6794:	4b04      	ldr	r3, [pc, #16]	; (67a8 <nvm_erase_row+0x54>)
    6796:	8b19      	ldrh	r1, [r3, #24]
    6798:	201c      	movs	r0, #28
    679a:	4001      	ands	r1, r0
	return STATUS_OK;
    679c:	1e48      	subs	r0, r1, #1
    679e:	4181      	sbcs	r1, r0
    67a0:	0089      	lsls	r1, r1, #2
    67a2:	e7de      	b.n	6762 <nvm_erase_row+0xe>
    67a4:	200000c0 	.word	0x200000c0
    67a8:	41004000 	.word	0x41004000
    67ac:	ffffa502 	.word	0xffffa502

000067b0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    67b0:	b500      	push	{lr}
    67b2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    67b4:	ab01      	add	r3, sp, #4
    67b6:	2280      	movs	r2, #128	; 0x80
    67b8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    67ba:	780a      	ldrb	r2, [r1, #0]
    67bc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    67be:	784a      	ldrb	r2, [r1, #1]
    67c0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    67c2:	788a      	ldrb	r2, [r1, #2]
    67c4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    67c6:	0019      	movs	r1, r3
    67c8:	4b01      	ldr	r3, [pc, #4]	; (67d0 <port_pin_set_config+0x20>)
    67ca:	4798      	blx	r3
}
    67cc:	b003      	add	sp, #12
    67ce:	bd00      	pop	{pc}
    67d0:	00008559 	.word	0x00008559

000067d4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    67d4:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    67d6:	4b14      	ldr	r3, [pc, #80]	; (6828 <RTC_Handler+0x54>)
    67d8:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    67da:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    67dc:	8ad1      	ldrh	r1, [r2, #22]
	callback_mask &= module->registered_callback;
    67de:	8a93      	ldrh	r3, [r2, #20]
    67e0:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    67e2:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    67e4:	79e3      	ldrb	r3, [r4, #7]
    67e6:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    67e8:	b258      	sxtb	r0, r3
    67ea:	2800      	cmp	r0, #0
    67ec:	db06      	blt.n	67fc <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    67ee:	07d8      	lsls	r0, r3, #31
    67f0:	d50f      	bpl.n	6812 <RTC_Handler+0x3e>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    67f2:	07cb      	lsls	r3, r1, #31
    67f4:	d40a      	bmi.n	680c <RTC_Handler+0x38>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    67f6:	2301      	movs	r3, #1
    67f8:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    67fa:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    67fc:	074b      	lsls	r3, r1, #29
    67fe:	d402      	bmi.n	6806 <RTC_Handler+0x32>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    6800:	2380      	movs	r3, #128	; 0x80
    6802:	7223      	strb	r3, [r4, #8]
    6804:	e7f9      	b.n	67fa <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    6806:	6913      	ldr	r3, [r2, #16]
    6808:	4798      	blx	r3
    680a:	e7f9      	b.n	6800 <RTC_Handler+0x2c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    680c:	6893      	ldr	r3, [r2, #8]
    680e:	4798      	blx	r3
    6810:	e7f1      	b.n	67f6 <RTC_Handler+0x22>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    6812:	079b      	lsls	r3, r3, #30
    6814:	d5f1      	bpl.n	67fa <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    6816:	078b      	lsls	r3, r1, #30
    6818:	d402      	bmi.n	6820 <RTC_Handler+0x4c>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    681a:	2302      	movs	r3, #2
    681c:	7223      	strb	r3, [r4, #8]
}
    681e:	e7ec      	b.n	67fa <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    6820:	68d3      	ldr	r3, [r2, #12]
    6822:	4798      	blx	r3
    6824:	e7f9      	b.n	681a <RTC_Handler+0x46>
    6826:	46c0      	nop			; (mov r8, r8)
    6828:	20001cc4 	.word	0x20001cc4

0000682c <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    682c:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    682e:	2207      	movs	r2, #7
    6830:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    6832:	421a      	tst	r2, r3
    6834:	d1fc      	bne.n	6830 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    6836:	4770      	bx	lr

00006838 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    6838:	b5f0      	push	{r4, r5, r6, r7, lr}
    683a:	46d6      	mov	lr, sl
    683c:	464f      	mov	r7, r9
    683e:	4646      	mov	r6, r8
    6840:	b5c0      	push	{r6, r7, lr}
    6842:	b08a      	sub	sp, #40	; 0x28
    6844:	0006      	movs	r6, r0
    6846:	000f      	movs	r7, r1
    6848:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    684a:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    684c:	0008      	movs	r0, r1
    684e:	4b97      	ldr	r3, [pc, #604]	; (6aac <i2c_master_init+0x274>)
    6850:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6852:	4a97      	ldr	r2, [pc, #604]	; (6ab0 <i2c_master_init+0x278>)
    6854:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6856:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6858:	2301      	movs	r3, #1
    685a:	40ab      	lsls	r3, r5
    685c:	430b      	orrs	r3, r1
    685e:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    6860:	a909      	add	r1, sp, #36	; 0x24
    6862:	7b23      	ldrb	r3, [r4, #12]
    6864:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6866:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6868:	b2c5      	uxtb	r5, r0
    686a:	0028      	movs	r0, r5
    686c:	4b91      	ldr	r3, [pc, #580]	; (6ab4 <i2c_master_init+0x27c>)
    686e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6870:	0028      	movs	r0, r5
    6872:	4b91      	ldr	r3, [pc, #580]	; (6ab8 <i2c_master_init+0x280>)
    6874:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6876:	7b20      	ldrb	r0, [r4, #12]
    6878:	2100      	movs	r1, #0
    687a:	4b90      	ldr	r3, [pc, #576]	; (6abc <i2c_master_init+0x284>)
    687c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    687e:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    6880:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    6882:	079b      	lsls	r3, r3, #30
    6884:	d505      	bpl.n	6892 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    6886:	b00a      	add	sp, #40	; 0x28
    6888:	bc1c      	pop	{r2, r3, r4}
    688a:	4690      	mov	r8, r2
    688c:	4699      	mov	r9, r3
    688e:	46a2      	mov	sl, r4
    6890:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    6892:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    6894:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    6896:	07db      	lsls	r3, r3, #31
    6898:	d4f5      	bmi.n	6886 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    689a:	2314      	movs	r3, #20
    689c:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    689e:	6833      	ldr	r3, [r6, #0]
    68a0:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    68a2:	0018      	movs	r0, r3
    68a4:	4b81      	ldr	r3, [pc, #516]	; (6aac <i2c_master_init+0x274>)
    68a6:	4798      	blx	r3
    68a8:	0005      	movs	r5, r0
    68aa:	2380      	movs	r3, #128	; 0x80
    68ac:	aa08      	add	r2, sp, #32
    68ae:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    68b0:	2300      	movs	r3, #0
    68b2:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    68b4:	2201      	movs	r2, #1
    68b6:	a908      	add	r1, sp, #32
    68b8:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    68ba:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    68bc:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    68be:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    68c0:	2800      	cmp	r0, #0
    68c2:	d100      	bne.n	68c6 <i2c_master_init+0x8e>
    68c4:	e0af      	b.n	6a26 <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
    68c6:	ab08      	add	r3, sp, #32
    68c8:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    68ca:	2302      	movs	r3, #2
    68cc:	aa08      	add	r2, sp, #32
    68ce:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    68d0:	0c00      	lsrs	r0, r0, #16
    68d2:	b2c0      	uxtb	r0, r0
    68d4:	0011      	movs	r1, r2
    68d6:	4b7a      	ldr	r3, [pc, #488]	; (6ac0 <i2c_master_init+0x288>)
    68d8:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    68da:	2f00      	cmp	r7, #0
    68dc:	d100      	bne.n	68e0 <i2c_master_init+0xa8>
    68de:	e0a7      	b.n	6a30 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
    68e0:	ab08      	add	r3, sp, #32
    68e2:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    68e4:	2302      	movs	r3, #2
    68e6:	aa08      	add	r2, sp, #32
    68e8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    68ea:	0c3f      	lsrs	r7, r7, #16
    68ec:	b2f8      	uxtb	r0, r7
    68ee:	0011      	movs	r1, r2
    68f0:	4b73      	ldr	r3, [pc, #460]	; (6ac0 <i2c_master_init+0x288>)
    68f2:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    68f4:	8aa3      	ldrh	r3, [r4, #20]
    68f6:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    68f8:	8ae3      	ldrh	r3, [r4, #22]
    68fa:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    68fc:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    68fe:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    6900:	2b00      	cmp	r3, #0
    6902:	d104      	bne.n	690e <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6904:	4b6f      	ldr	r3, [pc, #444]	; (6ac4 <i2c_master_init+0x28c>)
    6906:	789b      	ldrb	r3, [r3, #2]
    6908:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    690a:	0fdb      	lsrs	r3, r3, #31
    690c:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    690e:	68a1      	ldr	r1, [r4, #8]
    6910:	6923      	ldr	r3, [r4, #16]
    6912:	430b      	orrs	r3, r1
    6914:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    6916:	2224      	movs	r2, #36	; 0x24
    6918:	5ca2      	ldrb	r2, [r4, r2]
    691a:	2a00      	cmp	r2, #0
    691c:	d002      	beq.n	6924 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    691e:	2280      	movs	r2, #128	; 0x80
    6920:	05d2      	lsls	r2, r2, #23
    6922:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    6924:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6926:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    6928:	222c      	movs	r2, #44	; 0x2c
    692a:	5ca2      	ldrb	r2, [r4, r2]
    692c:	2a00      	cmp	r2, #0
    692e:	d103      	bne.n	6938 <i2c_master_init+0x100>
    6930:	2280      	movs	r2, #128	; 0x80
    6932:	0492      	lsls	r2, r2, #18
    6934:	4291      	cmp	r1, r2
    6936:	d102      	bne.n	693e <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    6938:	2280      	movs	r2, #128	; 0x80
    693a:	0512      	lsls	r2, r2, #20
    693c:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    693e:	222d      	movs	r2, #45	; 0x2d
    6940:	5ca2      	ldrb	r2, [r4, r2]
    6942:	2a00      	cmp	r2, #0
    6944:	d002      	beq.n	694c <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    6946:	2280      	movs	r2, #128	; 0x80
    6948:	0412      	lsls	r2, r2, #16
    694a:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    694c:	222e      	movs	r2, #46	; 0x2e
    694e:	5ca2      	ldrb	r2, [r4, r2]
    6950:	2a00      	cmp	r2, #0
    6952:	d002      	beq.n	695a <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    6954:	2280      	movs	r2, #128	; 0x80
    6956:	03d2      	lsls	r2, r2, #15
    6958:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    695a:	4642      	mov	r2, r8
    695c:	6812      	ldr	r2, [r2, #0]
    695e:	4313      	orrs	r3, r2
    6960:	4642      	mov	r2, r8
    6962:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    6964:	2380      	movs	r3, #128	; 0x80
    6966:	005b      	lsls	r3, r3, #1
    6968:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    696a:	0028      	movs	r0, r5
    696c:	3014      	adds	r0, #20
    696e:	b2c0      	uxtb	r0, r0
    6970:	4b55      	ldr	r3, [pc, #340]	; (6ac8 <i2c_master_init+0x290>)
    6972:	4798      	blx	r3
    6974:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    6976:	23fa      	movs	r3, #250	; 0xfa
    6978:	009b      	lsls	r3, r3, #2
    697a:	6822      	ldr	r2, [r4, #0]
    697c:	435a      	muls	r2, r3
    697e:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    6980:	6863      	ldr	r3, [r4, #4]
    6982:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    6984:	4d51      	ldr	r5, [pc, #324]	; (6acc <i2c_master_init+0x294>)
    6986:	47a8      	blx	r5
    6988:	9000      	str	r0, [sp, #0]
    698a:	9101      	str	r1, [sp, #4]
    698c:	464b      	mov	r3, r9
    698e:	0058      	lsls	r0, r3, #1
    6990:	47a8      	blx	r5
    6992:	9002      	str	r0, [sp, #8]
    6994:	9103      	str	r1, [sp, #12]
    6996:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    6998:	47a8      	blx	r5
    699a:	9004      	str	r0, [sp, #16]
    699c:	9105      	str	r1, [sp, #20]
    699e:	4f4c      	ldr	r7, [pc, #304]	; (6ad0 <i2c_master_init+0x298>)
    69a0:	4a4c      	ldr	r2, [pc, #304]	; (6ad4 <i2c_master_init+0x29c>)
    69a2:	4b4d      	ldr	r3, [pc, #308]	; (6ad8 <i2c_master_init+0x2a0>)
    69a4:	9800      	ldr	r0, [sp, #0]
    69a6:	9901      	ldr	r1, [sp, #4]
    69a8:	47b8      	blx	r7
    69aa:	0002      	movs	r2, r0
    69ac:	000b      	movs	r3, r1
    69ae:	9804      	ldr	r0, [sp, #16]
    69b0:	9905      	ldr	r1, [sp, #20]
    69b2:	47b8      	blx	r7
    69b4:	4e49      	ldr	r6, [pc, #292]	; (6adc <i2c_master_init+0x2a4>)
    69b6:	2200      	movs	r2, #0
    69b8:	4b49      	ldr	r3, [pc, #292]	; (6ae0 <i2c_master_init+0x2a8>)
    69ba:	47b0      	blx	r6
    69bc:	9004      	str	r0, [sp, #16]
    69be:	9105      	str	r1, [sp, #20]
    69c0:	4648      	mov	r0, r9
    69c2:	47a8      	blx	r5
    69c4:	0002      	movs	r2, r0
    69c6:	000b      	movs	r3, r1
    69c8:	9804      	ldr	r0, [sp, #16]
    69ca:	9905      	ldr	r1, [sp, #20]
    69cc:	47b8      	blx	r7
    69ce:	0002      	movs	r2, r0
    69d0:	000b      	movs	r3, r1
    69d2:	4d44      	ldr	r5, [pc, #272]	; (6ae4 <i2c_master_init+0x2ac>)
    69d4:	9800      	ldr	r0, [sp, #0]
    69d6:	9901      	ldr	r1, [sp, #4]
    69d8:	47a8      	blx	r5
    69da:	9a02      	ldr	r2, [sp, #8]
    69dc:	9b03      	ldr	r3, [sp, #12]
    69de:	47b0      	blx	r6
    69e0:	2200      	movs	r2, #0
    69e2:	4b41      	ldr	r3, [pc, #260]	; (6ae8 <i2c_master_init+0x2b0>)
    69e4:	47a8      	blx	r5
    69e6:	9a02      	ldr	r2, [sp, #8]
    69e8:	9b03      	ldr	r3, [sp, #12]
    69ea:	4d40      	ldr	r5, [pc, #256]	; (6aec <i2c_master_init+0x2b4>)
    69ec:	47a8      	blx	r5
    69ee:	4b40      	ldr	r3, [pc, #256]	; (6af0 <i2c_master_init+0x2b8>)
    69f0:	4798      	blx	r3
    69f2:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    69f4:	2380      	movs	r3, #128	; 0x80
    69f6:	049b      	lsls	r3, r3, #18
    69f8:	68a2      	ldr	r2, [r4, #8]
    69fa:	429a      	cmp	r2, r3
    69fc:	d01e      	beq.n	6a3c <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    69fe:	0003      	movs	r3, r0
    6a00:	2040      	movs	r0, #64	; 0x40
    6a02:	2dff      	cmp	r5, #255	; 0xff
    6a04:	d900      	bls.n	6a08 <i2c_master_init+0x1d0>
    6a06:	e73e      	b.n	6886 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    6a08:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    6a0a:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6a0c:	25ff      	movs	r5, #255	; 0xff
    6a0e:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    6a10:	0624      	lsls	r4, r4, #24
    6a12:	4325      	orrs	r5, r4
    6a14:	0400      	lsls	r0, r0, #16
    6a16:	23ff      	movs	r3, #255	; 0xff
    6a18:	041b      	lsls	r3, r3, #16
    6a1a:	4018      	ands	r0, r3
    6a1c:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6a1e:	4643      	mov	r3, r8
    6a20:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    6a22:	2000      	movs	r0, #0
    6a24:	e72f      	b.n	6886 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    6a26:	2100      	movs	r1, #0
    6a28:	4640      	mov	r0, r8
    6a2a:	4b32      	ldr	r3, [pc, #200]	; (6af4 <i2c_master_init+0x2bc>)
    6a2c:	4798      	blx	r3
    6a2e:	e74a      	b.n	68c6 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    6a30:	2101      	movs	r1, #1
    6a32:	4640      	mov	r0, r8
    6a34:	4b2f      	ldr	r3, [pc, #188]	; (6af4 <i2c_master_init+0x2bc>)
    6a36:	4798      	blx	r3
    6a38:	0007      	movs	r7, r0
    6a3a:	e751      	b.n	68e0 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    6a3c:	26fa      	movs	r6, #250	; 0xfa
    6a3e:	00b6      	lsls	r6, r6, #2
    6a40:	4653      	mov	r3, sl
    6a42:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    6a44:	9800      	ldr	r0, [sp, #0]
    6a46:	9901      	ldr	r1, [sp, #4]
    6a48:	0002      	movs	r2, r0
    6a4a:	000b      	movs	r3, r1
    6a4c:	4c23      	ldr	r4, [pc, #140]	; (6adc <i2c_master_init+0x2a4>)
    6a4e:	47a0      	blx	r4
    6a50:	9000      	str	r0, [sp, #0]
    6a52:	9101      	str	r1, [sp, #4]
    6a54:	0030      	movs	r0, r6
    6a56:	4b1d      	ldr	r3, [pc, #116]	; (6acc <i2c_master_init+0x294>)
    6a58:	4798      	blx	r3
    6a5a:	2200      	movs	r2, #0
    6a5c:	4b26      	ldr	r3, [pc, #152]	; (6af8 <i2c_master_init+0x2c0>)
    6a5e:	47b8      	blx	r7
    6a60:	0002      	movs	r2, r0
    6a62:	000b      	movs	r3, r1
    6a64:	9800      	ldr	r0, [sp, #0]
    6a66:	9901      	ldr	r1, [sp, #4]
    6a68:	4c20      	ldr	r4, [pc, #128]	; (6aec <i2c_master_init+0x2b4>)
    6a6a:	47a0      	blx	r4
    6a6c:	2200      	movs	r2, #0
    6a6e:	4b1e      	ldr	r3, [pc, #120]	; (6ae8 <i2c_master_init+0x2b0>)
    6a70:	4c1c      	ldr	r4, [pc, #112]	; (6ae4 <i2c_master_init+0x2ac>)
    6a72:	47a0      	blx	r4
    6a74:	4b1e      	ldr	r3, [pc, #120]	; (6af0 <i2c_master_init+0x2b8>)
    6a76:	4798      	blx	r3
    6a78:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    6a7a:	d00c      	beq.n	6a96 <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    6a7c:	0031      	movs	r1, r6
    6a7e:	9807      	ldr	r0, [sp, #28]
    6a80:	4b1e      	ldr	r3, [pc, #120]	; (6afc <i2c_master_init+0x2c4>)
    6a82:	4798      	blx	r3
    6a84:	3802      	subs	r0, #2
    6a86:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6a88:	002b      	movs	r3, r5
    6a8a:	2dff      	cmp	r5, #255	; 0xff
    6a8c:	d80c      	bhi.n	6aa8 <i2c_master_init+0x270>
    6a8e:	28ff      	cmp	r0, #255	; 0xff
    6a90:	d9bc      	bls.n	6a0c <i2c_master_init+0x1d4>
    6a92:	2040      	movs	r0, #64	; 0x40
    6a94:	e6f7      	b.n	6886 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    6a96:	0071      	lsls	r1, r6, #1
    6a98:	1e48      	subs	r0, r1, #1
    6a9a:	9b07      	ldr	r3, [sp, #28]
    6a9c:	469c      	mov	ip, r3
    6a9e:	4460      	add	r0, ip
    6aa0:	4b16      	ldr	r3, [pc, #88]	; (6afc <i2c_master_init+0x2c4>)
    6aa2:	4798      	blx	r3
    6aa4:	3801      	subs	r0, #1
    6aa6:	e7ef      	b.n	6a88 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6aa8:	2040      	movs	r0, #64	; 0x40
    6aaa:	e6ec      	b.n	6886 <i2c_master_init+0x4e>
    6aac:	000071a1 	.word	0x000071a1
    6ab0:	40000400 	.word	0x40000400
    6ab4:	00008461 	.word	0x00008461
    6ab8:	000083d5 	.word	0x000083d5
    6abc:	00006fdd 	.word	0x00006fdd
    6ac0:	00008559 	.word	0x00008559
    6ac4:	41002000 	.word	0x41002000
    6ac8:	0000847d 	.word	0x0000847d
    6acc:	00010b41 	.word	0x00010b41
    6ad0:	0000ffad 	.word	0x0000ffad
    6ad4:	e826d695 	.word	0xe826d695
    6ad8:	3e112e0b 	.word	0x3e112e0b
    6adc:	0000f325 	.word	0x0000f325
    6ae0:	40240000 	.word	0x40240000
    6ae4:	000104ad 	.word	0x000104ad
    6ae8:	3ff00000 	.word	0x3ff00000
    6aec:	0000f945 	.word	0x0000f945
    6af0:	00010ad9 	.word	0x00010ad9
    6af4:	00007029 	.word	0x00007029
    6af8:	40080000 	.word	0x40080000
    6afc:	0000e439 	.word	0x0000e439

00006b00 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    6b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b02:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6b04:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    6b06:	4e08      	ldr	r6, [pc, #32]	; (6b28 <i2c_master_reset+0x28>)
    6b08:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6b0a:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    6b0c:	0020      	movs	r0, r4
    6b0e:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    6b10:	2383      	movs	r3, #131	; 0x83
    6b12:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    6b14:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6b16:	682b      	ldr	r3, [r5, #0]
    6b18:	2202      	movs	r2, #2
    6b1a:	4393      	bics	r3, r2
    6b1c:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    6b1e:	0020      	movs	r0, r4
    6b20:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    6b22:	2301      	movs	r3, #1
    6b24:	603b      	str	r3, [r7, #0]
}
    6b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b28:	0000682d 	.word	0x0000682d

00006b2c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6b2c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    6b2e:	7e1a      	ldrb	r2, [r3, #24]
    6b30:	0792      	lsls	r2, r2, #30
    6b32:	d507      	bpl.n	6b44 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6b34:	2202      	movs	r2, #2
    6b36:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    6b38:	8b5b      	ldrh	r3, [r3, #26]
    6b3a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    6b3c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    6b3e:	17db      	asrs	r3, r3, #31
    6b40:	4018      	ands	r0, r3
}
    6b42:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    6b44:	8b5a      	ldrh	r2, [r3, #26]
    6b46:	0752      	lsls	r2, r2, #29
    6b48:	d506      	bpl.n	6b58 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6b4a:	6859      	ldr	r1, [r3, #4]
    6b4c:	22c0      	movs	r2, #192	; 0xc0
    6b4e:	0292      	lsls	r2, r2, #10
    6b50:	430a      	orrs	r2, r1
    6b52:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    6b54:	2018      	movs	r0, #24
    6b56:	e7f4      	b.n	6b42 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    6b58:	2000      	movs	r0, #0
    6b5a:	e7f2      	b.n	6b42 <_i2c_master_address_response+0x16>

00006b5c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    6b5c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6b5e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    6b60:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    6b62:	2401      	movs	r4, #1
    6b64:	2502      	movs	r5, #2
    6b66:	7e11      	ldrb	r1, [r2, #24]
    6b68:	4221      	tst	r1, r4
    6b6a:	d10b      	bne.n	6b84 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    6b6c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    6b6e:	4229      	tst	r1, r5
    6b70:	d106      	bne.n	6b80 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    6b72:	3301      	adds	r3, #1
    6b74:	b29b      	uxth	r3, r3
    6b76:	8901      	ldrh	r1, [r0, #8]
    6b78:	4299      	cmp	r1, r3
    6b7a:	d8f4      	bhi.n	6b66 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    6b7c:	2012      	movs	r0, #18
    6b7e:	e002      	b.n	6b86 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    6b80:	2000      	movs	r0, #0
    6b82:	e000      	b.n	6b86 <_i2c_master_wait_for_bus+0x2a>
    6b84:	2000      	movs	r0, #0
}
    6b86:	bd30      	pop	{r4, r5, pc}

00006b88 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    6b88:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6b8a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6b8c:	6862      	ldr	r2, [r4, #4]
    6b8e:	2380      	movs	r3, #128	; 0x80
    6b90:	02db      	lsls	r3, r3, #11
    6b92:	4313      	orrs	r3, r2
    6b94:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    6b96:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6b98:	4b02      	ldr	r3, [pc, #8]	; (6ba4 <_i2c_master_send_hs_master_code+0x1c>)
    6b9a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    6b9c:	2301      	movs	r3, #1
    6b9e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    6ba0:	bd10      	pop	{r4, pc}
    6ba2:	46c0      	nop			; (mov r8, r8)
    6ba4:	00006b5d 	.word	0x00006b5d

00006ba8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6baa:	46de      	mov	lr, fp
    6bac:	4657      	mov	r7, sl
    6bae:	464e      	mov	r6, r9
    6bb0:	4645      	mov	r5, r8
    6bb2:	b5e0      	push	{r5, r6, r7, lr}
    6bb4:	b083      	sub	sp, #12
    6bb6:	0006      	movs	r6, r0
    6bb8:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6bba:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    6bbc:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    6bbe:	682b      	ldr	r3, [r5, #0]
    6bc0:	011b      	lsls	r3, r3, #4
    6bc2:	0fdb      	lsrs	r3, r3, #31
    6bc4:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    6bc6:	7a4b      	ldrb	r3, [r1, #9]
    6bc8:	2b00      	cmp	r3, #0
    6bca:	d12b      	bne.n	6c24 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6bcc:	686b      	ldr	r3, [r5, #4]
    6bce:	4a58      	ldr	r2, [pc, #352]	; (6d30 <_i2c_master_read_packet+0x188>)
    6bd0:	4013      	ands	r3, r2
    6bd2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    6bd4:	464b      	mov	r3, r9
    6bd6:	7a1b      	ldrb	r3, [r3, #8]
    6bd8:	2b00      	cmp	r3, #0
    6bda:	d127      	bne.n	6c2c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    6bdc:	464b      	mov	r3, r9
    6bde:	881b      	ldrh	r3, [r3, #0]
    6be0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    6be2:	464a      	mov	r2, r9
    6be4:	7a52      	ldrb	r2, [r2, #9]
    6be6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    6be8:	4313      	orrs	r3, r2
    6bea:	2201      	movs	r2, #1
    6bec:	4313      	orrs	r3, r2
    6bee:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6bf0:	0030      	movs	r0, r6
    6bf2:	4b50      	ldr	r3, [pc, #320]	; (6d34 <_i2c_master_read_packet+0x18c>)
    6bf4:	4798      	blx	r3
    6bf6:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    6bf8:	4653      	mov	r3, sl
    6bfa:	2b00      	cmp	r3, #0
    6bfc:	d003      	beq.n	6c06 <_i2c_master_read_packet+0x5e>
    6bfe:	464b      	mov	r3, r9
    6c00:	885b      	ldrh	r3, [r3, #2]
    6c02:	2b01      	cmp	r3, #1
    6c04:	d03b      	beq.n	6c7e <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    6c06:	686b      	ldr	r3, [r5, #4]
    6c08:	4a49      	ldr	r2, [pc, #292]	; (6d30 <_i2c_master_read_packet+0x188>)
    6c0a:	4013      	ands	r3, r2
    6c0c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    6c0e:	9b01      	ldr	r3, [sp, #4]
    6c10:	2b00      	cmp	r3, #0
    6c12:	d03a      	beq.n	6c8a <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    6c14:	9801      	ldr	r0, [sp, #4]
    6c16:	b003      	add	sp, #12
    6c18:	bc3c      	pop	{r2, r3, r4, r5}
    6c1a:	4690      	mov	r8, r2
    6c1c:	4699      	mov	r9, r3
    6c1e:	46a2      	mov	sl, r4
    6c20:	46ab      	mov	fp, r5
    6c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    6c24:	7a89      	ldrb	r1, [r1, #10]
    6c26:	4b44      	ldr	r3, [pc, #272]	; (6d38 <_i2c_master_read_packet+0x190>)
    6c28:	4798      	blx	r3
    6c2a:	e7cf      	b.n	6bcc <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    6c2c:	464b      	mov	r3, r9
    6c2e:	881b      	ldrh	r3, [r3, #0]
    6c30:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6c32:	464a      	mov	r2, r9
    6c34:	7a52      	ldrb	r2, [r2, #9]
    6c36:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    6c38:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6c3a:	2280      	movs	r2, #128	; 0x80
    6c3c:	0212      	lsls	r2, r2, #8
    6c3e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    6c40:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    6c42:	0030      	movs	r0, r6
    6c44:	4b3b      	ldr	r3, [pc, #236]	; (6d34 <_i2c_master_read_packet+0x18c>)
    6c46:	4798      	blx	r3
    6c48:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6c4a:	686b      	ldr	r3, [r5, #4]
    6c4c:	4a38      	ldr	r2, [pc, #224]	; (6d30 <_i2c_master_read_packet+0x188>)
    6c4e:	4013      	ands	r3, r2
    6c50:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    6c52:	2800      	cmp	r0, #0
    6c54:	d1de      	bne.n	6c14 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    6c56:	0030      	movs	r0, r6
    6c58:	4b38      	ldr	r3, [pc, #224]	; (6d3c <_i2c_master_read_packet+0x194>)
    6c5a:	4798      	blx	r3
    6c5c:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    6c5e:	2800      	cmp	r0, #0
    6c60:	d1d8      	bne.n	6c14 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    6c62:	464b      	mov	r3, r9
    6c64:	881b      	ldrh	r3, [r3, #0]
    6c66:	0a1b      	lsrs	r3, r3, #8
    6c68:	2278      	movs	r2, #120	; 0x78
    6c6a:	4313      	orrs	r3, r2
    6c6c:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6c6e:	464a      	mov	r2, r9
    6c70:	7a52      	ldrb	r2, [r2, #9]
    6c72:	0392      	lsls	r2, r2, #14
    6c74:	2101      	movs	r1, #1
    6c76:	430a      	orrs	r2, r1
    6c78:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    6c7a:	626b      	str	r3, [r5, #36]	; 0x24
    6c7c:	e7b8      	b.n	6bf0 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6c7e:	686a      	ldr	r2, [r5, #4]
    6c80:	2380      	movs	r3, #128	; 0x80
    6c82:	02db      	lsls	r3, r3, #11
    6c84:	4313      	orrs	r3, r2
    6c86:	606b      	str	r3, [r5, #4]
    6c88:	e7c1      	b.n	6c0e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    6c8a:	0030      	movs	r0, r6
    6c8c:	4b2b      	ldr	r3, [pc, #172]	; (6d3c <_i2c_master_read_packet+0x194>)
    6c8e:	4798      	blx	r3
    6c90:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    6c92:	2800      	cmp	r0, #0
    6c94:	d1be      	bne.n	6c14 <_i2c_master_read_packet+0x6c>
    6c96:	3c01      	subs	r4, #1
    6c98:	b2a4      	uxth	r4, r4
    6c9a:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    6c9c:	4b28      	ldr	r3, [pc, #160]	; (6d40 <_i2c_master_read_packet+0x198>)
    6c9e:	469b      	mov	fp, r3
    6ca0:	e015      	b.n	6cce <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    6ca2:	2c01      	cmp	r4, #1
    6ca4:	d020      	beq.n	6ce8 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    6ca6:	0030      	movs	r0, r6
    6ca8:	4b26      	ldr	r3, [pc, #152]	; (6d44 <_i2c_master_read_packet+0x19c>)
    6caa:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    6cac:	4643      	mov	r3, r8
    6cae:	1c5f      	adds	r7, r3, #1
    6cb0:	b2bf      	uxth	r7, r7
    6cb2:	2328      	movs	r3, #40	; 0x28
    6cb4:	5ceb      	ldrb	r3, [r5, r3]
    6cb6:	464a      	mov	r2, r9
    6cb8:	6852      	ldr	r2, [r2, #4]
    6cba:	4641      	mov	r1, r8
    6cbc:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    6cbe:	0030      	movs	r0, r6
    6cc0:	4b1c      	ldr	r3, [pc, #112]	; (6d34 <_i2c_master_read_packet+0x18c>)
    6cc2:	4798      	blx	r3
    6cc4:	3c01      	subs	r4, #1
    6cc6:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    6cc8:	2800      	cmp	r0, #0
    6cca:	d115      	bne.n	6cf8 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    6ccc:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    6cce:	455c      	cmp	r4, fp
    6cd0:	d014      	beq.n	6cfc <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    6cd2:	8b6b      	ldrh	r3, [r5, #26]
    6cd4:	069b      	lsls	r3, r3, #26
    6cd6:	d527      	bpl.n	6d28 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    6cd8:	7af3      	ldrb	r3, [r6, #11]
    6cda:	2b00      	cmp	r3, #0
    6cdc:	d0e3      	beq.n	6ca6 <_i2c_master_read_packet+0xfe>
    6cde:	4653      	mov	r3, sl
    6ce0:	2b00      	cmp	r3, #0
    6ce2:	d1de      	bne.n	6ca2 <_i2c_master_read_packet+0xfa>
    6ce4:	2c00      	cmp	r4, #0
    6ce6:	d1de      	bne.n	6ca6 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6ce8:	686a      	ldr	r2, [r5, #4]
    6cea:	2380      	movs	r3, #128	; 0x80
    6cec:	02db      	lsls	r3, r3, #11
    6cee:	4313      	orrs	r3, r2
    6cf0:	606b      	str	r3, [r5, #4]
    6cf2:	3c01      	subs	r4, #1
    6cf4:	b2a4      	uxth	r4, r4
    6cf6:	e7ea      	b.n	6cce <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    6cf8:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    6cfa:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    6cfc:	7ab3      	ldrb	r3, [r6, #10]
    6cfe:	2b00      	cmp	r3, #0
    6d00:	d109      	bne.n	6d16 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    6d02:	0030      	movs	r0, r6
    6d04:	4b0f      	ldr	r3, [pc, #60]	; (6d44 <_i2c_master_read_packet+0x19c>)
    6d06:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    6d08:	2328      	movs	r3, #40	; 0x28
    6d0a:	5cea      	ldrb	r2, [r5, r3]
    6d0c:	464b      	mov	r3, r9
    6d0e:	685b      	ldr	r3, [r3, #4]
    6d10:	4641      	mov	r1, r8
    6d12:	545a      	strb	r2, [r3, r1]
    6d14:	e77e      	b.n	6c14 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    6d16:	0030      	movs	r0, r6
    6d18:	4b0a      	ldr	r3, [pc, #40]	; (6d44 <_i2c_master_read_packet+0x19c>)
    6d1a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6d1c:	686a      	ldr	r2, [r5, #4]
    6d1e:	23c0      	movs	r3, #192	; 0xc0
    6d20:	029b      	lsls	r3, r3, #10
    6d22:	4313      	orrs	r3, r2
    6d24:	606b      	str	r3, [r5, #4]
    6d26:	e7ec      	b.n	6d02 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    6d28:	2341      	movs	r3, #65	; 0x41
    6d2a:	9301      	str	r3, [sp, #4]
    6d2c:	e772      	b.n	6c14 <_i2c_master_read_packet+0x6c>
    6d2e:	46c0      	nop			; (mov r8, r8)
    6d30:	fffbffff 	.word	0xfffbffff
    6d34:	00006b5d 	.word	0x00006b5d
    6d38:	00006b89 	.word	0x00006b89
    6d3c:	00006b2d 	.word	0x00006b2d
    6d40:	0000ffff 	.word	0x0000ffff
    6d44:	0000682d 	.word	0x0000682d

00006d48 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d4a:	46de      	mov	lr, fp
    6d4c:	4657      	mov	r7, sl
    6d4e:	464e      	mov	r6, r9
    6d50:	4645      	mov	r5, r8
    6d52:	b5e0      	push	{r5, r6, r7, lr}
    6d54:	b083      	sub	sp, #12
    6d56:	0006      	movs	r6, r0
    6d58:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6d5a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    6d5c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    6d5e:	4b32      	ldr	r3, [pc, #200]	; (6e28 <_i2c_master_write_packet+0xe0>)
    6d60:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    6d62:	7a7b      	ldrb	r3, [r7, #9]
    6d64:	2b00      	cmp	r3, #0
    6d66:	d11d      	bne.n	6da4 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6d68:	686b      	ldr	r3, [r5, #4]
    6d6a:	4a30      	ldr	r2, [pc, #192]	; (6e2c <_i2c_master_write_packet+0xe4>)
    6d6c:	4013      	ands	r3, r2
    6d6e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    6d70:	7a3b      	ldrb	r3, [r7, #8]
    6d72:	2b00      	cmp	r3, #0
    6d74:	d01b      	beq.n	6dae <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6d76:	883b      	ldrh	r3, [r7, #0]
    6d78:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6d7a:	7a7a      	ldrb	r2, [r7, #9]
    6d7c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6d7e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6d80:	2280      	movs	r2, #128	; 0x80
    6d82:	0212      	lsls	r2, r2, #8
    6d84:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6d86:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6d88:	0030      	movs	r0, r6
    6d8a:	4b29      	ldr	r3, [pc, #164]	; (6e30 <_i2c_master_write_packet+0xe8>)
    6d8c:	4798      	blx	r3
    6d8e:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    6d90:	2800      	cmp	r0, #0
    6d92:	d013      	beq.n	6dbc <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    6d94:	9801      	ldr	r0, [sp, #4]
    6d96:	b003      	add	sp, #12
    6d98:	bc3c      	pop	{r2, r3, r4, r5}
    6d9a:	4690      	mov	r8, r2
    6d9c:	4699      	mov	r9, r3
    6d9e:	46a2      	mov	sl, r4
    6da0:	46ab      	mov	fp, r5
    6da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    6da4:	7ab9      	ldrb	r1, [r7, #10]
    6da6:	0030      	movs	r0, r6
    6da8:	4b22      	ldr	r3, [pc, #136]	; (6e34 <_i2c_master_write_packet+0xec>)
    6daa:	4798      	blx	r3
    6dac:	e7dc      	b.n	6d68 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6dae:	883b      	ldrh	r3, [r7, #0]
    6db0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    6db2:	7a7a      	ldrb	r2, [r7, #9]
    6db4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6db6:	4313      	orrs	r3, r2
    6db8:	626b      	str	r3, [r5, #36]	; 0x24
    6dba:	e7e5      	b.n	6d88 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    6dbc:	0030      	movs	r0, r6
    6dbe:	4b1e      	ldr	r3, [pc, #120]	; (6e38 <_i2c_master_write_packet+0xf0>)
    6dc0:	4798      	blx	r3
    6dc2:	1e03      	subs	r3, r0, #0
    6dc4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    6dc6:	d1e5      	bne.n	6d94 <_i2c_master_write_packet+0x4c>
    6dc8:	46a0      	mov	r8, r4
    6dca:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    6dcc:	3320      	adds	r3, #32
    6dce:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    6dd0:	4b15      	ldr	r3, [pc, #84]	; (6e28 <_i2c_master_write_packet+0xe0>)
    6dd2:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    6dd4:	4b16      	ldr	r3, [pc, #88]	; (6e30 <_i2c_master_write_packet+0xe8>)
    6dd6:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    6dd8:	4544      	cmp	r4, r8
    6dda:	d015      	beq.n	6e08 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    6ddc:	8b6b      	ldrh	r3, [r5, #26]
    6dde:	464a      	mov	r2, r9
    6de0:	4213      	tst	r3, r2
    6de2:	d01d      	beq.n	6e20 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    6de4:	0030      	movs	r0, r6
    6de6:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	5d1a      	ldrb	r2, [r3, r4]
    6dec:	2328      	movs	r3, #40	; 0x28
    6dee:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    6df0:	0030      	movs	r0, r6
    6df2:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    6df4:	2800      	cmp	r0, #0
    6df6:	d106      	bne.n	6e06 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    6df8:	8b6b      	ldrh	r3, [r5, #26]
    6dfa:	3401      	adds	r4, #1
    6dfc:	075b      	lsls	r3, r3, #29
    6dfe:	d5eb      	bpl.n	6dd8 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    6e00:	231e      	movs	r3, #30
    6e02:	9301      	str	r3, [sp, #4]
    6e04:	e000      	b.n	6e08 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    6e06:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    6e08:	7ab3      	ldrb	r3, [r6, #10]
    6e0a:	2b00      	cmp	r3, #0
    6e0c:	d0c2      	beq.n	6d94 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    6e0e:	0030      	movs	r0, r6
    6e10:	4b05      	ldr	r3, [pc, #20]	; (6e28 <_i2c_master_write_packet+0xe0>)
    6e12:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6e14:	686a      	ldr	r2, [r5, #4]
    6e16:	23c0      	movs	r3, #192	; 0xc0
    6e18:	029b      	lsls	r3, r3, #10
    6e1a:	4313      	orrs	r3, r2
    6e1c:	606b      	str	r3, [r5, #4]
    6e1e:	e7b9      	b.n	6d94 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    6e20:	2341      	movs	r3, #65	; 0x41
    6e22:	9301      	str	r3, [sp, #4]
    6e24:	e7b6      	b.n	6d94 <_i2c_master_write_packet+0x4c>
    6e26:	46c0      	nop			; (mov r8, r8)
    6e28:	0000682d 	.word	0x0000682d
    6e2c:	fffbffff 	.word	0xfffbffff
    6e30:	00006b5d 	.word	0x00006b5d
    6e34:	00006b89 	.word	0x00006b89
    6e38:	00006b2d 	.word	0x00006b2d

00006e3c <i2c_master_read_packet_wait>:
{
    6e3c:	b510      	push	{r4, lr}
	module->send_stop = true;
    6e3e:	2301      	movs	r3, #1
    6e40:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    6e42:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    6e44:	4b01      	ldr	r3, [pc, #4]	; (6e4c <i2c_master_read_packet_wait+0x10>)
    6e46:	4798      	blx	r3
}
    6e48:	bd10      	pop	{r4, pc}
    6e4a:	46c0      	nop			; (mov r8, r8)
    6e4c:	00006ba9 	.word	0x00006ba9

00006e50 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6e50:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    6e52:	2300      	movs	r3, #0
    6e54:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    6e56:	3301      	adds	r3, #1
    6e58:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    6e5a:	4b01      	ldr	r3, [pc, #4]	; (6e60 <i2c_master_write_packet_wait_no_stop+0x10>)
    6e5c:	4798      	blx	r3
}
    6e5e:	bd10      	pop	{r4, pc}
    6e60:	00006d49 	.word	0x00006d49

00006e64 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    6e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e66:	46de      	mov	lr, fp
    6e68:	4657      	mov	r7, sl
    6e6a:	464e      	mov	r6, r9
    6e6c:	4645      	mov	r5, r8
    6e6e:	b5e0      	push	{r5, r6, r7, lr}
    6e70:	b087      	sub	sp, #28
    6e72:	4680      	mov	r8, r0
    6e74:	9104      	str	r1, [sp, #16]
    6e76:	0016      	movs	r6, r2
    6e78:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    6e7a:	2200      	movs	r2, #0
    6e7c:	2300      	movs	r3, #0
    6e7e:	2100      	movs	r1, #0
    6e80:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    6e82:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    6e84:	2001      	movs	r0, #1
    6e86:	0021      	movs	r1, r4
    6e88:	9600      	str	r6, [sp, #0]
    6e8a:	9701      	str	r7, [sp, #4]
    6e8c:	465c      	mov	r4, fp
    6e8e:	9403      	str	r4, [sp, #12]
    6e90:	4644      	mov	r4, r8
    6e92:	9405      	str	r4, [sp, #20]
    6e94:	e013      	b.n	6ebe <long_division+0x5a>
    6e96:	2420      	movs	r4, #32
    6e98:	1a64      	subs	r4, r4, r1
    6e9a:	0005      	movs	r5, r0
    6e9c:	40e5      	lsrs	r5, r4
    6e9e:	46a8      	mov	r8, r5
    6ea0:	e014      	b.n	6ecc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    6ea2:	9c00      	ldr	r4, [sp, #0]
    6ea4:	9d01      	ldr	r5, [sp, #4]
    6ea6:	1b12      	subs	r2, r2, r4
    6ea8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    6eaa:	465c      	mov	r4, fp
    6eac:	464d      	mov	r5, r9
    6eae:	432c      	orrs	r4, r5
    6eb0:	46a3      	mov	fp, r4
    6eb2:	9c03      	ldr	r4, [sp, #12]
    6eb4:	4645      	mov	r5, r8
    6eb6:	432c      	orrs	r4, r5
    6eb8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    6eba:	3901      	subs	r1, #1
    6ebc:	d325      	bcc.n	6f0a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    6ebe:	2420      	movs	r4, #32
    6ec0:	4264      	negs	r4, r4
    6ec2:	190c      	adds	r4, r1, r4
    6ec4:	d4e7      	bmi.n	6e96 <long_division+0x32>
    6ec6:	0005      	movs	r5, r0
    6ec8:	40a5      	lsls	r5, r4
    6eca:	46a8      	mov	r8, r5
    6ecc:	0004      	movs	r4, r0
    6ece:	408c      	lsls	r4, r1
    6ed0:	46a1      	mov	r9, r4
		r = r << 1;
    6ed2:	1892      	adds	r2, r2, r2
    6ed4:	415b      	adcs	r3, r3
    6ed6:	0014      	movs	r4, r2
    6ed8:	001d      	movs	r5, r3
		if (n & bit_shift) {
    6eda:	9e05      	ldr	r6, [sp, #20]
    6edc:	464f      	mov	r7, r9
    6ede:	403e      	ands	r6, r7
    6ee0:	46b4      	mov	ip, r6
    6ee2:	9e04      	ldr	r6, [sp, #16]
    6ee4:	4647      	mov	r7, r8
    6ee6:	403e      	ands	r6, r7
    6ee8:	46b2      	mov	sl, r6
    6eea:	4666      	mov	r6, ip
    6eec:	4657      	mov	r7, sl
    6eee:	433e      	orrs	r6, r7
    6ef0:	d003      	beq.n	6efa <long_division+0x96>
			r |= 0x01;
    6ef2:	0006      	movs	r6, r0
    6ef4:	4326      	orrs	r6, r4
    6ef6:	0032      	movs	r2, r6
    6ef8:	002b      	movs	r3, r5
		if (r >= d) {
    6efa:	9c00      	ldr	r4, [sp, #0]
    6efc:	9d01      	ldr	r5, [sp, #4]
    6efe:	429d      	cmp	r5, r3
    6f00:	d8db      	bhi.n	6eba <long_division+0x56>
    6f02:	d1ce      	bne.n	6ea2 <long_division+0x3e>
    6f04:	4294      	cmp	r4, r2
    6f06:	d8d8      	bhi.n	6eba <long_division+0x56>
    6f08:	e7cb      	b.n	6ea2 <long_division+0x3e>
    6f0a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    6f0c:	4658      	mov	r0, fp
    6f0e:	0019      	movs	r1, r3
    6f10:	b007      	add	sp, #28
    6f12:	bc3c      	pop	{r2, r3, r4, r5}
    6f14:	4690      	mov	r8, r2
    6f16:	4699      	mov	r9, r3
    6f18:	46a2      	mov	sl, r4
    6f1a:	46ab      	mov	fp, r5
    6f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006f1e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    6f1e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    6f20:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6f22:	2340      	movs	r3, #64	; 0x40
    6f24:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    6f26:	4281      	cmp	r1, r0
    6f28:	d202      	bcs.n	6f30 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    6f2a:	0018      	movs	r0, r3
    6f2c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    6f2e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    6f30:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    6f32:	1c63      	adds	r3, r4, #1
    6f34:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    6f36:	4288      	cmp	r0, r1
    6f38:	d9f9      	bls.n	6f2e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6f3a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    6f3c:	2cff      	cmp	r4, #255	; 0xff
    6f3e:	d8f4      	bhi.n	6f2a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    6f40:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    6f42:	2300      	movs	r3, #0
    6f44:	e7f1      	b.n	6f2a <_sercom_get_sync_baud_val+0xc>
    6f46:	Address 0x00006f46 is out of bounds.


00006f48 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    6f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f4a:	b083      	sub	sp, #12
    6f4c:	000f      	movs	r7, r1
    6f4e:	0016      	movs	r6, r2
    6f50:	aa08      	add	r2, sp, #32
    6f52:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    6f54:	0004      	movs	r4, r0
    6f56:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6f58:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    6f5a:	42bc      	cmp	r4, r7
    6f5c:	d902      	bls.n	6f64 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    6f5e:	0010      	movs	r0, r2
    6f60:	b003      	add	sp, #12
    6f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    6f64:	2b00      	cmp	r3, #0
    6f66:	d114      	bne.n	6f92 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    6f68:	0002      	movs	r2, r0
    6f6a:	0008      	movs	r0, r1
    6f6c:	2100      	movs	r1, #0
    6f6e:	4c19      	ldr	r4, [pc, #100]	; (6fd4 <_sercom_get_async_baud_val+0x8c>)
    6f70:	47a0      	blx	r4
    6f72:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    6f74:	003a      	movs	r2, r7
    6f76:	2300      	movs	r3, #0
    6f78:	2000      	movs	r0, #0
    6f7a:	4c17      	ldr	r4, [pc, #92]	; (6fd8 <_sercom_get_async_baud_val+0x90>)
    6f7c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    6f7e:	2200      	movs	r2, #0
    6f80:	2301      	movs	r3, #1
    6f82:	1a12      	subs	r2, r2, r0
    6f84:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    6f86:	0c12      	lsrs	r2, r2, #16
    6f88:	041b      	lsls	r3, r3, #16
    6f8a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    6f8c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    6f8e:	2200      	movs	r2, #0
    6f90:	e7e5      	b.n	6f5e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    6f92:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    6f94:	2b01      	cmp	r3, #1
    6f96:	d1f9      	bne.n	6f8c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    6f98:	000a      	movs	r2, r1
    6f9a:	2300      	movs	r3, #0
    6f9c:	2100      	movs	r1, #0
    6f9e:	4c0d      	ldr	r4, [pc, #52]	; (6fd4 <_sercom_get_async_baud_val+0x8c>)
    6fa0:	47a0      	blx	r4
    6fa2:	0002      	movs	r2, r0
    6fa4:	000b      	movs	r3, r1
    6fa6:	9200      	str	r2, [sp, #0]
    6fa8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    6faa:	0038      	movs	r0, r7
    6fac:	2100      	movs	r1, #0
    6fae:	4c0a      	ldr	r4, [pc, #40]	; (6fd8 <_sercom_get_async_baud_val+0x90>)
    6fb0:	47a0      	blx	r4
    6fb2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    6fb4:	2380      	movs	r3, #128	; 0x80
    6fb6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6fb8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    6fba:	4298      	cmp	r0, r3
    6fbc:	d8cf      	bhi.n	6f5e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    6fbe:	0f79      	lsrs	r1, r7, #29
    6fc0:	00f8      	lsls	r0, r7, #3
    6fc2:	9a00      	ldr	r2, [sp, #0]
    6fc4:	9b01      	ldr	r3, [sp, #4]
    6fc6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    6fc8:	00ea      	lsls	r2, r5, #3
    6fca:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    6fcc:	b2d2      	uxtb	r2, r2
    6fce:	0352      	lsls	r2, r2, #13
    6fd0:	432a      	orrs	r2, r5
    6fd2:	e7db      	b.n	6f8c <_sercom_get_async_baud_val+0x44>
    6fd4:	0000e799 	.word	0x0000e799
    6fd8:	00006e65 	.word	0x00006e65

00006fdc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    6fdc:	b510      	push	{r4, lr}
    6fde:	b082      	sub	sp, #8
    6fe0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    6fe2:	4b0e      	ldr	r3, [pc, #56]	; (701c <sercom_set_gclk_generator+0x40>)
    6fe4:	781b      	ldrb	r3, [r3, #0]
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d007      	beq.n	6ffa <sercom_set_gclk_generator+0x1e>
    6fea:	2900      	cmp	r1, #0
    6fec:	d105      	bne.n	6ffa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    6fee:	4b0b      	ldr	r3, [pc, #44]	; (701c <sercom_set_gclk_generator+0x40>)
    6ff0:	785b      	ldrb	r3, [r3, #1]
    6ff2:	4283      	cmp	r3, r0
    6ff4:	d010      	beq.n	7018 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6ff6:	201d      	movs	r0, #29
    6ff8:	e00c      	b.n	7014 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    6ffa:	a901      	add	r1, sp, #4
    6ffc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6ffe:	2013      	movs	r0, #19
    7000:	4b07      	ldr	r3, [pc, #28]	; (7020 <sercom_set_gclk_generator+0x44>)
    7002:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7004:	2013      	movs	r0, #19
    7006:	4b07      	ldr	r3, [pc, #28]	; (7024 <sercom_set_gclk_generator+0x48>)
    7008:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    700a:	4b04      	ldr	r3, [pc, #16]	; (701c <sercom_set_gclk_generator+0x40>)
    700c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    700e:	2201      	movs	r2, #1
    7010:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    7012:	2000      	movs	r0, #0
}
    7014:	b002      	add	sp, #8
    7016:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    7018:	2000      	movs	r0, #0
    701a:	e7fb      	b.n	7014 <sercom_set_gclk_generator+0x38>
    701c:	200000c8 	.word	0x200000c8
    7020:	00008461 	.word	0x00008461
    7024:	000083d5 	.word	0x000083d5

00007028 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    7028:	4b40      	ldr	r3, [pc, #256]	; (712c <_sercom_get_default_pad+0x104>)
    702a:	4298      	cmp	r0, r3
    702c:	d031      	beq.n	7092 <_sercom_get_default_pad+0x6a>
    702e:	d90a      	bls.n	7046 <_sercom_get_default_pad+0x1e>
    7030:	4b3f      	ldr	r3, [pc, #252]	; (7130 <_sercom_get_default_pad+0x108>)
    7032:	4298      	cmp	r0, r3
    7034:	d04d      	beq.n	70d2 <_sercom_get_default_pad+0xaa>
    7036:	4b3f      	ldr	r3, [pc, #252]	; (7134 <_sercom_get_default_pad+0x10c>)
    7038:	4298      	cmp	r0, r3
    703a:	d05a      	beq.n	70f2 <_sercom_get_default_pad+0xca>
    703c:	4b3e      	ldr	r3, [pc, #248]	; (7138 <_sercom_get_default_pad+0x110>)
    703e:	4298      	cmp	r0, r3
    7040:	d037      	beq.n	70b2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    7042:	2000      	movs	r0, #0
}
    7044:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    7046:	4b3d      	ldr	r3, [pc, #244]	; (713c <_sercom_get_default_pad+0x114>)
    7048:	4298      	cmp	r0, r3
    704a:	d00c      	beq.n	7066 <_sercom_get_default_pad+0x3e>
    704c:	4b3c      	ldr	r3, [pc, #240]	; (7140 <_sercom_get_default_pad+0x118>)
    704e:	4298      	cmp	r0, r3
    7050:	d1f7      	bne.n	7042 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7052:	2901      	cmp	r1, #1
    7054:	d017      	beq.n	7086 <_sercom_get_default_pad+0x5e>
    7056:	2900      	cmp	r1, #0
    7058:	d05d      	beq.n	7116 <_sercom_get_default_pad+0xee>
    705a:	2902      	cmp	r1, #2
    705c:	d015      	beq.n	708a <_sercom_get_default_pad+0x62>
    705e:	2903      	cmp	r1, #3
    7060:	d015      	beq.n	708e <_sercom_get_default_pad+0x66>
	return 0;
    7062:	2000      	movs	r0, #0
    7064:	e7ee      	b.n	7044 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7066:	2901      	cmp	r1, #1
    7068:	d007      	beq.n	707a <_sercom_get_default_pad+0x52>
    706a:	2900      	cmp	r1, #0
    706c:	d051      	beq.n	7112 <_sercom_get_default_pad+0xea>
    706e:	2902      	cmp	r1, #2
    7070:	d005      	beq.n	707e <_sercom_get_default_pad+0x56>
    7072:	2903      	cmp	r1, #3
    7074:	d005      	beq.n	7082 <_sercom_get_default_pad+0x5a>
	return 0;
    7076:	2000      	movs	r0, #0
    7078:	e7e4      	b.n	7044 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    707a:	4832      	ldr	r0, [pc, #200]	; (7144 <_sercom_get_default_pad+0x11c>)
    707c:	e7e2      	b.n	7044 <_sercom_get_default_pad+0x1c>
    707e:	4832      	ldr	r0, [pc, #200]	; (7148 <_sercom_get_default_pad+0x120>)
    7080:	e7e0      	b.n	7044 <_sercom_get_default_pad+0x1c>
    7082:	4832      	ldr	r0, [pc, #200]	; (714c <_sercom_get_default_pad+0x124>)
    7084:	e7de      	b.n	7044 <_sercom_get_default_pad+0x1c>
    7086:	4832      	ldr	r0, [pc, #200]	; (7150 <_sercom_get_default_pad+0x128>)
    7088:	e7dc      	b.n	7044 <_sercom_get_default_pad+0x1c>
    708a:	4832      	ldr	r0, [pc, #200]	; (7154 <_sercom_get_default_pad+0x12c>)
    708c:	e7da      	b.n	7044 <_sercom_get_default_pad+0x1c>
    708e:	4832      	ldr	r0, [pc, #200]	; (7158 <_sercom_get_default_pad+0x130>)
    7090:	e7d8      	b.n	7044 <_sercom_get_default_pad+0x1c>
    7092:	2901      	cmp	r1, #1
    7094:	d007      	beq.n	70a6 <_sercom_get_default_pad+0x7e>
    7096:	2900      	cmp	r1, #0
    7098:	d03f      	beq.n	711a <_sercom_get_default_pad+0xf2>
    709a:	2902      	cmp	r1, #2
    709c:	d005      	beq.n	70aa <_sercom_get_default_pad+0x82>
    709e:	2903      	cmp	r1, #3
    70a0:	d005      	beq.n	70ae <_sercom_get_default_pad+0x86>
	return 0;
    70a2:	2000      	movs	r0, #0
    70a4:	e7ce      	b.n	7044 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    70a6:	482d      	ldr	r0, [pc, #180]	; (715c <_sercom_get_default_pad+0x134>)
    70a8:	e7cc      	b.n	7044 <_sercom_get_default_pad+0x1c>
    70aa:	482d      	ldr	r0, [pc, #180]	; (7160 <_sercom_get_default_pad+0x138>)
    70ac:	e7ca      	b.n	7044 <_sercom_get_default_pad+0x1c>
    70ae:	482d      	ldr	r0, [pc, #180]	; (7164 <_sercom_get_default_pad+0x13c>)
    70b0:	e7c8      	b.n	7044 <_sercom_get_default_pad+0x1c>
    70b2:	2901      	cmp	r1, #1
    70b4:	d007      	beq.n	70c6 <_sercom_get_default_pad+0x9e>
    70b6:	2900      	cmp	r1, #0
    70b8:	d031      	beq.n	711e <_sercom_get_default_pad+0xf6>
    70ba:	2902      	cmp	r1, #2
    70bc:	d005      	beq.n	70ca <_sercom_get_default_pad+0xa2>
    70be:	2903      	cmp	r1, #3
    70c0:	d005      	beq.n	70ce <_sercom_get_default_pad+0xa6>
	return 0;
    70c2:	2000      	movs	r0, #0
    70c4:	e7be      	b.n	7044 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    70c6:	4828      	ldr	r0, [pc, #160]	; (7168 <_sercom_get_default_pad+0x140>)
    70c8:	e7bc      	b.n	7044 <_sercom_get_default_pad+0x1c>
    70ca:	4828      	ldr	r0, [pc, #160]	; (716c <_sercom_get_default_pad+0x144>)
    70cc:	e7ba      	b.n	7044 <_sercom_get_default_pad+0x1c>
    70ce:	4828      	ldr	r0, [pc, #160]	; (7170 <_sercom_get_default_pad+0x148>)
    70d0:	e7b8      	b.n	7044 <_sercom_get_default_pad+0x1c>
    70d2:	2901      	cmp	r1, #1
    70d4:	d007      	beq.n	70e6 <_sercom_get_default_pad+0xbe>
    70d6:	2900      	cmp	r1, #0
    70d8:	d023      	beq.n	7122 <_sercom_get_default_pad+0xfa>
    70da:	2902      	cmp	r1, #2
    70dc:	d005      	beq.n	70ea <_sercom_get_default_pad+0xc2>
    70de:	2903      	cmp	r1, #3
    70e0:	d005      	beq.n	70ee <_sercom_get_default_pad+0xc6>
	return 0;
    70e2:	2000      	movs	r0, #0
    70e4:	e7ae      	b.n	7044 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    70e6:	4823      	ldr	r0, [pc, #140]	; (7174 <_sercom_get_default_pad+0x14c>)
    70e8:	e7ac      	b.n	7044 <_sercom_get_default_pad+0x1c>
    70ea:	4823      	ldr	r0, [pc, #140]	; (7178 <_sercom_get_default_pad+0x150>)
    70ec:	e7aa      	b.n	7044 <_sercom_get_default_pad+0x1c>
    70ee:	4823      	ldr	r0, [pc, #140]	; (717c <_sercom_get_default_pad+0x154>)
    70f0:	e7a8      	b.n	7044 <_sercom_get_default_pad+0x1c>
    70f2:	2901      	cmp	r1, #1
    70f4:	d007      	beq.n	7106 <_sercom_get_default_pad+0xde>
    70f6:	2900      	cmp	r1, #0
    70f8:	d015      	beq.n	7126 <_sercom_get_default_pad+0xfe>
    70fa:	2902      	cmp	r1, #2
    70fc:	d005      	beq.n	710a <_sercom_get_default_pad+0xe2>
    70fe:	2903      	cmp	r1, #3
    7100:	d005      	beq.n	710e <_sercom_get_default_pad+0xe6>
	return 0;
    7102:	2000      	movs	r0, #0
    7104:	e79e      	b.n	7044 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7106:	481e      	ldr	r0, [pc, #120]	; (7180 <_sercom_get_default_pad+0x158>)
    7108:	e79c      	b.n	7044 <_sercom_get_default_pad+0x1c>
    710a:	481e      	ldr	r0, [pc, #120]	; (7184 <_sercom_get_default_pad+0x15c>)
    710c:	e79a      	b.n	7044 <_sercom_get_default_pad+0x1c>
    710e:	481e      	ldr	r0, [pc, #120]	; (7188 <_sercom_get_default_pad+0x160>)
    7110:	e798      	b.n	7044 <_sercom_get_default_pad+0x1c>
    7112:	481e      	ldr	r0, [pc, #120]	; (718c <_sercom_get_default_pad+0x164>)
    7114:	e796      	b.n	7044 <_sercom_get_default_pad+0x1c>
    7116:	2003      	movs	r0, #3
    7118:	e794      	b.n	7044 <_sercom_get_default_pad+0x1c>
    711a:	481d      	ldr	r0, [pc, #116]	; (7190 <_sercom_get_default_pad+0x168>)
    711c:	e792      	b.n	7044 <_sercom_get_default_pad+0x1c>
    711e:	481d      	ldr	r0, [pc, #116]	; (7194 <_sercom_get_default_pad+0x16c>)
    7120:	e790      	b.n	7044 <_sercom_get_default_pad+0x1c>
    7122:	481d      	ldr	r0, [pc, #116]	; (7198 <_sercom_get_default_pad+0x170>)
    7124:	e78e      	b.n	7044 <_sercom_get_default_pad+0x1c>
    7126:	481d      	ldr	r0, [pc, #116]	; (719c <_sercom_get_default_pad+0x174>)
    7128:	e78c      	b.n	7044 <_sercom_get_default_pad+0x1c>
    712a:	46c0      	nop			; (mov r8, r8)
    712c:	42001000 	.word	0x42001000
    7130:	42001800 	.word	0x42001800
    7134:	42001c00 	.word	0x42001c00
    7138:	42001400 	.word	0x42001400
    713c:	42000800 	.word	0x42000800
    7140:	42000c00 	.word	0x42000c00
    7144:	00050003 	.word	0x00050003
    7148:	00060003 	.word	0x00060003
    714c:	00070003 	.word	0x00070003
    7150:	00010003 	.word	0x00010003
    7154:	001e0003 	.word	0x001e0003
    7158:	001f0003 	.word	0x001f0003
    715c:	000d0002 	.word	0x000d0002
    7160:	000e0002 	.word	0x000e0002
    7164:	000f0002 	.word	0x000f0002
    7168:	00110003 	.word	0x00110003
    716c:	00120003 	.word	0x00120003
    7170:	00130003 	.word	0x00130003
    7174:	003f0005 	.word	0x003f0005
    7178:	003e0005 	.word	0x003e0005
    717c:	00520005 	.word	0x00520005
    7180:	00170003 	.word	0x00170003
    7184:	00180003 	.word	0x00180003
    7188:	00190003 	.word	0x00190003
    718c:	00040003 	.word	0x00040003
    7190:	000c0002 	.word	0x000c0002
    7194:	00100003 	.word	0x00100003
    7198:	00530005 	.word	0x00530005
    719c:	00160003 	.word	0x00160003

000071a0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    71a0:	b530      	push	{r4, r5, lr}
    71a2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    71a4:	4b0b      	ldr	r3, [pc, #44]	; (71d4 <_sercom_get_sercom_inst_index+0x34>)
    71a6:	466a      	mov	r2, sp
    71a8:	cb32      	ldmia	r3!, {r1, r4, r5}
    71aa:	c232      	stmia	r2!, {r1, r4, r5}
    71ac:	cb32      	ldmia	r3!, {r1, r4, r5}
    71ae:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    71b0:	9b00      	ldr	r3, [sp, #0]
    71b2:	4283      	cmp	r3, r0
    71b4:	d00b      	beq.n	71ce <_sercom_get_sercom_inst_index+0x2e>
    71b6:	2301      	movs	r3, #1
    71b8:	009a      	lsls	r2, r3, #2
    71ba:	4669      	mov	r1, sp
    71bc:	5852      	ldr	r2, [r2, r1]
    71be:	4282      	cmp	r2, r0
    71c0:	d006      	beq.n	71d0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    71c2:	3301      	adds	r3, #1
    71c4:	2b06      	cmp	r3, #6
    71c6:	d1f7      	bne.n	71b8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    71c8:	2000      	movs	r0, #0
}
    71ca:	b007      	add	sp, #28
    71cc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    71ce:	2300      	movs	r3, #0
			return i;
    71d0:	b2d8      	uxtb	r0, r3
    71d2:	e7fa      	b.n	71ca <_sercom_get_sercom_inst_index+0x2a>
    71d4:	00012018 	.word	0x00012018

000071d8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    71d8:	4770      	bx	lr
    71da:	Address 0x000071da is out of bounds.


000071dc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    71dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    71de:	4b0a      	ldr	r3, [pc, #40]	; (7208 <_sercom_set_handler+0x2c>)
    71e0:	781b      	ldrb	r3, [r3, #0]
    71e2:	2b00      	cmp	r3, #0
    71e4:	d10c      	bne.n	7200 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    71e6:	4f09      	ldr	r7, [pc, #36]	; (720c <_sercom_set_handler+0x30>)
    71e8:	4e09      	ldr	r6, [pc, #36]	; (7210 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    71ea:	4d0a      	ldr	r5, [pc, #40]	; (7214 <_sercom_set_handler+0x38>)
    71ec:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    71ee:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    71f0:	195a      	adds	r2, r3, r5
    71f2:	6014      	str	r4, [r2, #0]
    71f4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    71f6:	2b18      	cmp	r3, #24
    71f8:	d1f9      	bne.n	71ee <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    71fa:	2201      	movs	r2, #1
    71fc:	4b02      	ldr	r3, [pc, #8]	; (7208 <_sercom_set_handler+0x2c>)
    71fe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    7200:	0080      	lsls	r0, r0, #2
    7202:	4b02      	ldr	r3, [pc, #8]	; (720c <_sercom_set_handler+0x30>)
    7204:	50c1      	str	r1, [r0, r3]
}
    7206:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7208:	200000ca 	.word	0x200000ca
    720c:	200000cc 	.word	0x200000cc
    7210:	000071d9 	.word	0x000071d9
    7214:	20001cc8 	.word	0x20001cc8

00007218 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    7218:	b500      	push	{lr}
    721a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    721c:	2309      	movs	r3, #9
    721e:	466a      	mov	r2, sp
    7220:	7013      	strb	r3, [r2, #0]
    7222:	3301      	adds	r3, #1
    7224:	7053      	strb	r3, [r2, #1]
    7226:	3301      	adds	r3, #1
    7228:	7093      	strb	r3, [r2, #2]
    722a:	3301      	adds	r3, #1
    722c:	70d3      	strb	r3, [r2, #3]
    722e:	3301      	adds	r3, #1
    7230:	7113      	strb	r3, [r2, #4]
    7232:	3301      	adds	r3, #1
    7234:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    7236:	4b03      	ldr	r3, [pc, #12]	; (7244 <_sercom_get_interrupt_vector+0x2c>)
    7238:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    723a:	466b      	mov	r3, sp
    723c:	5618      	ldrsb	r0, [r3, r0]
}
    723e:	b003      	add	sp, #12
    7240:	bd00      	pop	{pc}
    7242:	46c0      	nop			; (mov r8, r8)
    7244:	000071a1 	.word	0x000071a1

00007248 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    7248:	b510      	push	{r4, lr}
    724a:	4b02      	ldr	r3, [pc, #8]	; (7254 <SERCOM0_Handler+0xc>)
    724c:	681b      	ldr	r3, [r3, #0]
    724e:	2000      	movs	r0, #0
    7250:	4798      	blx	r3
    7252:	bd10      	pop	{r4, pc}
    7254:	200000cc 	.word	0x200000cc

00007258 <SERCOM1_Handler>:
    7258:	b510      	push	{r4, lr}
    725a:	4b02      	ldr	r3, [pc, #8]	; (7264 <SERCOM1_Handler+0xc>)
    725c:	685b      	ldr	r3, [r3, #4]
    725e:	2001      	movs	r0, #1
    7260:	4798      	blx	r3
    7262:	bd10      	pop	{r4, pc}
    7264:	200000cc 	.word	0x200000cc

00007268 <SERCOM2_Handler>:
    7268:	b510      	push	{r4, lr}
    726a:	4b02      	ldr	r3, [pc, #8]	; (7274 <SERCOM2_Handler+0xc>)
    726c:	689b      	ldr	r3, [r3, #8]
    726e:	2002      	movs	r0, #2
    7270:	4798      	blx	r3
    7272:	bd10      	pop	{r4, pc}
    7274:	200000cc 	.word	0x200000cc

00007278 <SERCOM3_Handler>:
    7278:	b510      	push	{r4, lr}
    727a:	4b02      	ldr	r3, [pc, #8]	; (7284 <SERCOM3_Handler+0xc>)
    727c:	68db      	ldr	r3, [r3, #12]
    727e:	2003      	movs	r0, #3
    7280:	4798      	blx	r3
    7282:	bd10      	pop	{r4, pc}
    7284:	200000cc 	.word	0x200000cc

00007288 <SERCOM4_Handler>:
    7288:	b510      	push	{r4, lr}
    728a:	4b02      	ldr	r3, [pc, #8]	; (7294 <SERCOM4_Handler+0xc>)
    728c:	691b      	ldr	r3, [r3, #16]
    728e:	2004      	movs	r0, #4
    7290:	4798      	blx	r3
    7292:	bd10      	pop	{r4, pc}
    7294:	200000cc 	.word	0x200000cc

00007298 <SERCOM5_Handler>:
    7298:	b510      	push	{r4, lr}
    729a:	4b02      	ldr	r3, [pc, #8]	; (72a4 <SERCOM5_Handler+0xc>)
    729c:	695b      	ldr	r3, [r3, #20]
    729e:	2005      	movs	r0, #5
    72a0:	4798      	blx	r3
    72a2:	bd10      	pop	{r4, pc}
    72a4:	200000cc 	.word	0x200000cc

000072a8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    72a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    72aa:	46d6      	mov	lr, sl
    72ac:	464f      	mov	r7, r9
    72ae:	b580      	push	{r7, lr}
    72b0:	b08b      	sub	sp, #44	; 0x2c
    72b2:	4681      	mov	r9, r0
    72b4:	000f      	movs	r7, r1
    72b6:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    72b8:	0003      	movs	r3, r0
    72ba:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    72bc:	680b      	ldr	r3, [r1, #0]
    72be:	079b      	lsls	r3, r3, #30
    72c0:	d409      	bmi.n	72d6 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    72c2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    72c4:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    72c6:	07db      	lsls	r3, r3, #31
    72c8:	d400      	bmi.n	72cc <spi_init+0x24>
    72ca:	e098      	b.n	73fe <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    72cc:	b00b      	add	sp, #44	; 0x2c
    72ce:	bc0c      	pop	{r2, r3}
    72d0:	4691      	mov	r9, r2
    72d2:	469a      	mov	sl, r3
    72d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    72d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    72d8:	9305      	str	r3, [sp, #20]
    72da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    72dc:	9306      	str	r3, [sp, #24]
    72de:	6b13      	ldr	r3, [r2, #48]	; 0x30
    72e0:	9307      	str	r3, [sp, #28]
    72e2:	6b53      	ldr	r3, [r2, #52]	; 0x34
    72e4:	9308      	str	r3, [sp, #32]
    72e6:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    72e8:	ab05      	add	r3, sp, #20
    72ea:	9301      	str	r3, [sp, #4]
    72ec:	e00a      	b.n	7304 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    72ee:	0038      	movs	r0, r7
    72f0:	4b93      	ldr	r3, [pc, #588]	; (7540 <spi_init+0x298>)
    72f2:	4798      	blx	r3
    72f4:	e00c      	b.n	7310 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    72f6:	230f      	movs	r3, #15
    72f8:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    72fa:	4281      	cmp	r1, r0
    72fc:	d12d      	bne.n	735a <spi_init+0xb2>
    72fe:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7300:	2e04      	cmp	r6, #4
    7302:	d02f      	beq.n	7364 <spi_init+0xbc>
    7304:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7306:	00b3      	lsls	r3, r6, #2
    7308:	9a01      	ldr	r2, [sp, #4]
    730a:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    730c:	2800      	cmp	r0, #0
    730e:	d0ee      	beq.n	72ee <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    7310:	1c43      	adds	r3, r0, #1
    7312:	d0f4      	beq.n	72fe <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    7314:	0401      	lsls	r1, r0, #16
    7316:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    7318:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    731a:	b2c3      	uxtb	r3, r0
    731c:	469c      	mov	ip, r3
		return NULL;
    731e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7320:	0602      	lsls	r2, r0, #24
    7322:	d405      	bmi.n	7330 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    7324:	4663      	mov	r3, ip
    7326:	095b      	lsrs	r3, r3, #5
    7328:	01db      	lsls	r3, r3, #7
    732a:	4a86      	ldr	r2, [pc, #536]	; (7544 <spi_init+0x29c>)
    732c:	4692      	mov	sl, r2
    732e:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    7330:	221f      	movs	r2, #31
    7332:	4660      	mov	r0, ip
    7334:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    7336:	1898      	adds	r0, r3, r2
    7338:	3040      	adds	r0, #64	; 0x40
    733a:	7800      	ldrb	r0, [r0, #0]
    733c:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    733e:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    7340:	4655      	mov	r5, sl
    7342:	07ed      	lsls	r5, r5, #31
    7344:	d5d9      	bpl.n	72fa <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    7346:	0852      	lsrs	r2, r2, #1
    7348:	189b      	adds	r3, r3, r2
    734a:	3330      	adds	r3, #48	; 0x30
    734c:	7818      	ldrb	r0, [r3, #0]
    734e:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    7350:	4663      	mov	r3, ip
    7352:	07db      	lsls	r3, r3, #31
    7354:	d5cf      	bpl.n	72f6 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    7356:	0900      	lsrs	r0, r0, #4
    7358:	e7cf      	b.n	72fa <spi_init+0x52>
			module->hw = NULL;
    735a:	2300      	movs	r3, #0
    735c:	464a      	mov	r2, r9
    735e:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    7360:	201c      	movs	r0, #28
    7362:	e7b3      	b.n	72cc <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    7364:	2013      	movs	r0, #19
    7366:	4b78      	ldr	r3, [pc, #480]	; (7548 <spi_init+0x2a0>)
    7368:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    736a:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    736c:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    736e:	2a01      	cmp	r2, #1
    7370:	d027      	beq.n	73c2 <spi_init+0x11a>
	ctrla |= config->mux_setting;
    7372:	6863      	ldr	r3, [r4, #4]
    7374:	68a2      	ldr	r2, [r4, #8]
    7376:	4313      	orrs	r3, r2
    7378:	68e2      	ldr	r2, [r4, #12]
    737a:	4313      	orrs	r3, r2
    737c:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    737e:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    7380:	7c61      	ldrb	r1, [r4, #17]
    7382:	2900      	cmp	r1, #0
    7384:	d001      	beq.n	738a <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7386:	2180      	movs	r1, #128	; 0x80
    7388:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    738a:	7ca1      	ldrb	r1, [r4, #18]
    738c:	2900      	cmp	r1, #0
    738e:	d002      	beq.n	7396 <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7390:	2180      	movs	r1, #128	; 0x80
    7392:	0289      	lsls	r1, r1, #10
    7394:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    7396:	7ce1      	ldrb	r1, [r4, #19]
    7398:	2900      	cmp	r1, #0
    739a:	d002      	beq.n	73a2 <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    739c:	2180      	movs	r1, #128	; 0x80
    739e:	0089      	lsls	r1, r1, #2
    73a0:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    73a2:	7d21      	ldrb	r1, [r4, #20]
    73a4:	2900      	cmp	r1, #0
    73a6:	d002      	beq.n	73ae <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    73a8:	2180      	movs	r1, #128	; 0x80
    73aa:	0189      	lsls	r1, r1, #6
    73ac:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    73ae:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    73b0:	2002      	movs	r0, #2
    73b2:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    73b4:	428b      	cmp	r3, r1
    73b6:	d018      	beq.n	73ea <spi_init+0x142>
	module->hw = NULL;
    73b8:	2300      	movs	r3, #0
    73ba:	464a      	mov	r2, r9
    73bc:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    73be:	201c      	movs	r0, #28
    73c0:	e784      	b.n	72cc <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    73c2:	aa04      	add	r2, sp, #16
    73c4:	0001      	movs	r1, r0
    73c6:	69a0      	ldr	r0, [r4, #24]
    73c8:	4b60      	ldr	r3, [pc, #384]	; (754c <spi_init+0x2a4>)
    73ca:	4798      	blx	r3
    73cc:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    73ce:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    73d0:	2b00      	cmp	r3, #0
    73d2:	d000      	beq.n	73d6 <spi_init+0x12e>
    73d4:	e77a      	b.n	72cc <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    73d6:	7b3b      	ldrb	r3, [r7, #12]
    73d8:	b2db      	uxtb	r3, r3
    73da:	aa04      	add	r2, sp, #16
    73dc:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    73de:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    73e0:	429a      	cmp	r2, r3
    73e2:	d000      	beq.n	73e6 <spi_init+0x13e>
    73e4:	e772      	b.n	72cc <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    73e6:	350c      	adds	r5, #12
    73e8:	e7c3      	b.n	7372 <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    73ea:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    73ec:	4293      	cmp	r3, r2
    73ee:	d1e3      	bne.n	73b8 <spi_init+0x110>
		module->mode           = config->mode;
    73f0:	7823      	ldrb	r3, [r4, #0]
    73f2:	464a      	mov	r2, r9
    73f4:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    73f6:	7c23      	ldrb	r3, [r4, #16]
    73f8:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    73fa:	2000      	movs	r0, #0
    73fc:	e766      	b.n	72cc <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    73fe:	0008      	movs	r0, r1
    7400:	4b53      	ldr	r3, [pc, #332]	; (7550 <spi_init+0x2a8>)
    7402:	4798      	blx	r3
    7404:	4a53      	ldr	r2, [pc, #332]	; (7554 <spi_init+0x2ac>)
    7406:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7408:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    740a:	2301      	movs	r3, #1
    740c:	40ab      	lsls	r3, r5
    740e:	430b      	orrs	r3, r1
    7410:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    7412:	a909      	add	r1, sp, #36	; 0x24
    7414:	2624      	movs	r6, #36	; 0x24
    7416:	5da3      	ldrb	r3, [r4, r6]
    7418:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    741a:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    741c:	b2c5      	uxtb	r5, r0
    741e:	0028      	movs	r0, r5
    7420:	4b4d      	ldr	r3, [pc, #308]	; (7558 <spi_init+0x2b0>)
    7422:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7424:	0028      	movs	r0, r5
    7426:	4b4d      	ldr	r3, [pc, #308]	; (755c <spi_init+0x2b4>)
    7428:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    742a:	5da0      	ldrb	r0, [r4, r6]
    742c:	2100      	movs	r1, #0
    742e:	4b4c      	ldr	r3, [pc, #304]	; (7560 <spi_init+0x2b8>)
    7430:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7432:	7823      	ldrb	r3, [r4, #0]
    7434:	2b01      	cmp	r3, #1
    7436:	d019      	beq.n	746c <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7438:	464b      	mov	r3, r9
    743a:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    743c:	ab04      	add	r3, sp, #16
    743e:	2280      	movs	r2, #128	; 0x80
    7440:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7442:	2200      	movs	r2, #0
    7444:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7446:	2101      	movs	r1, #1
    7448:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    744a:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    744c:	7823      	ldrb	r3, [r4, #0]
    744e:	2b00      	cmp	r3, #0
    7450:	d101      	bne.n	7456 <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7452:	ab04      	add	r3, sp, #16
    7454:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7456:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7458:	9305      	str	r3, [sp, #20]
    745a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    745c:	9306      	str	r3, [sp, #24]
    745e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7460:	9307      	str	r3, [sp, #28]
    7462:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7464:	9308      	str	r3, [sp, #32]
    7466:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7468:	ad05      	add	r5, sp, #20
    746a:	e011      	b.n	7490 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    746c:	683b      	ldr	r3, [r7, #0]
    746e:	220c      	movs	r2, #12
    7470:	4313      	orrs	r3, r2
    7472:	603b      	str	r3, [r7, #0]
    7474:	e7e0      	b.n	7438 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7476:	0030      	movs	r0, r6
    7478:	4b31      	ldr	r3, [pc, #196]	; (7540 <spi_init+0x298>)
    747a:	4798      	blx	r3
    747c:	e00d      	b.n	749a <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    747e:	a904      	add	r1, sp, #16
    7480:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7482:	0c00      	lsrs	r0, r0, #16
    7484:	b2c0      	uxtb	r0, r0
    7486:	4b37      	ldr	r3, [pc, #220]	; (7564 <spi_init+0x2bc>)
    7488:	4798      	blx	r3
    748a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    748c:	2f04      	cmp	r7, #4
    748e:	d007      	beq.n	74a0 <spi_init+0x1f8>
    7490:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7492:	00bb      	lsls	r3, r7, #2
    7494:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    7496:	2800      	cmp	r0, #0
    7498:	d0ed      	beq.n	7476 <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    749a:	1c43      	adds	r3, r0, #1
    749c:	d1ef      	bne.n	747e <spi_init+0x1d6>
    749e:	e7f4      	b.n	748a <spi_init+0x1e2>
	module->mode             = config->mode;
    74a0:	7823      	ldrb	r3, [r4, #0]
    74a2:	464a      	mov	r2, r9
    74a4:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    74a6:	7c23      	ldrb	r3, [r4, #16]
    74a8:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    74aa:	7ca3      	ldrb	r3, [r4, #18]
    74ac:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    74ae:	7d23      	ldrb	r3, [r4, #20]
    74b0:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    74b2:	2200      	movs	r2, #0
    74b4:	ab02      	add	r3, sp, #8
    74b6:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    74b8:	7823      	ldrb	r3, [r4, #0]
    74ba:	2b01      	cmp	r3, #1
    74bc:	d028      	beq.n	7510 <spi_init+0x268>
	ctrla |= config->transfer_mode;
    74be:	6863      	ldr	r3, [r4, #4]
    74c0:	68a2      	ldr	r2, [r4, #8]
    74c2:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    74c4:	68e2      	ldr	r2, [r4, #12]
    74c6:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    74c8:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    74ca:	7c62      	ldrb	r2, [r4, #17]
    74cc:	2a00      	cmp	r2, #0
    74ce:	d103      	bne.n	74d8 <spi_init+0x230>
    74d0:	4a25      	ldr	r2, [pc, #148]	; (7568 <spi_init+0x2c0>)
    74d2:	7892      	ldrb	r2, [r2, #2]
    74d4:	0792      	lsls	r2, r2, #30
    74d6:	d501      	bpl.n	74dc <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    74d8:	2280      	movs	r2, #128	; 0x80
    74da:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    74dc:	7ca2      	ldrb	r2, [r4, #18]
    74de:	2a00      	cmp	r2, #0
    74e0:	d002      	beq.n	74e8 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    74e2:	2280      	movs	r2, #128	; 0x80
    74e4:	0292      	lsls	r2, r2, #10
    74e6:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    74e8:	7ce2      	ldrb	r2, [r4, #19]
    74ea:	2a00      	cmp	r2, #0
    74ec:	d002      	beq.n	74f4 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    74ee:	2280      	movs	r2, #128	; 0x80
    74f0:	0092      	lsls	r2, r2, #2
    74f2:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    74f4:	7d22      	ldrb	r2, [r4, #20]
    74f6:	2a00      	cmp	r2, #0
    74f8:	d002      	beq.n	7500 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    74fa:	2280      	movs	r2, #128	; 0x80
    74fc:	0192      	lsls	r2, r2, #6
    74fe:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    7500:	6832      	ldr	r2, [r6, #0]
    7502:	4313      	orrs	r3, r2
    7504:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    7506:	6873      	ldr	r3, [r6, #4]
    7508:	430b      	orrs	r3, r1
    750a:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    750c:	2000      	movs	r0, #0
    750e:	e6dd      	b.n	72cc <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7510:	464b      	mov	r3, r9
    7512:	6818      	ldr	r0, [r3, #0]
    7514:	4b0e      	ldr	r3, [pc, #56]	; (7550 <spi_init+0x2a8>)
    7516:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7518:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    751a:	b2c0      	uxtb	r0, r0
    751c:	4b0a      	ldr	r3, [pc, #40]	; (7548 <spi_init+0x2a0>)
    751e:	4798      	blx	r3
    7520:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    7522:	ab02      	add	r3, sp, #8
    7524:	1d9a      	adds	r2, r3, #6
    7526:	69a0      	ldr	r0, [r4, #24]
    7528:	4b08      	ldr	r3, [pc, #32]	; (754c <spi_init+0x2a4>)
    752a:	4798      	blx	r3
    752c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    752e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    7530:	2b00      	cmp	r3, #0
    7532:	d000      	beq.n	7536 <spi_init+0x28e>
    7534:	e6ca      	b.n	72cc <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    7536:	ab02      	add	r3, sp, #8
    7538:	3306      	adds	r3, #6
    753a:	781b      	ldrb	r3, [r3, #0]
    753c:	7333      	strb	r3, [r6, #12]
    753e:	e7be      	b.n	74be <spi_init+0x216>
    7540:	00007029 	.word	0x00007029
    7544:	41004400 	.word	0x41004400
    7548:	0000847d 	.word	0x0000847d
    754c:	00006f1f 	.word	0x00006f1f
    7550:	000071a1 	.word	0x000071a1
    7554:	40000400 	.word	0x40000400
    7558:	00008461 	.word	0x00008461
    755c:	000083d5 	.word	0x000083d5
    7560:	00006fdd 	.word	0x00006fdd
    7564:	00008559 	.word	0x00008559
    7568:	41002000 	.word	0x41002000

0000756c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    756c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    756e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    7570:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    7572:	2c01      	cmp	r4, #1
    7574:	d001      	beq.n	757a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    7576:	0018      	movs	r0, r3
    7578:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    757a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    757c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    757e:	2c00      	cmp	r4, #0
    7580:	d1f9      	bne.n	7576 <spi_select_slave+0xa>
		if (select) {
    7582:	2a00      	cmp	r2, #0
    7584:	d058      	beq.n	7638 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    7586:	784b      	ldrb	r3, [r1, #1]
    7588:	2b00      	cmp	r3, #0
    758a:	d044      	beq.n	7616 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    758c:	6803      	ldr	r3, [r0, #0]
    758e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    7590:	07db      	lsls	r3, r3, #31
    7592:	d410      	bmi.n	75b6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    7594:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7596:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7598:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    759a:	2900      	cmp	r1, #0
    759c:	d104      	bne.n	75a8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    759e:	0953      	lsrs	r3, r2, #5
    75a0:	01db      	lsls	r3, r3, #7
    75a2:	492e      	ldr	r1, [pc, #184]	; (765c <spi_select_slave+0xf0>)
    75a4:	468c      	mov	ip, r1
    75a6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    75a8:	211f      	movs	r1, #31
    75aa:	4011      	ands	r1, r2
    75ac:	2201      	movs	r2, #1
    75ae:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    75b0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    75b2:	2305      	movs	r3, #5
    75b4:	e7df      	b.n	7576 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    75b6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    75b8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    75ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    75bc:	2c00      	cmp	r4, #0
    75be:	d104      	bne.n	75ca <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    75c0:	0953      	lsrs	r3, r2, #5
    75c2:	01db      	lsls	r3, r3, #7
    75c4:	4c25      	ldr	r4, [pc, #148]	; (765c <spi_select_slave+0xf0>)
    75c6:	46a4      	mov	ip, r4
    75c8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    75ca:	241f      	movs	r4, #31
    75cc:	4014      	ands	r4, r2
    75ce:	2201      	movs	r2, #1
    75d0:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    75d2:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    75d4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    75d6:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    75d8:	07d2      	lsls	r2, r2, #31
    75da:	d501      	bpl.n	75e0 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    75dc:	788a      	ldrb	r2, [r1, #2]
    75de:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    75e0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    75e2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    75e4:	2a00      	cmp	r2, #0
    75e6:	d1c6      	bne.n	7576 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    75e8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    75ea:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    75ec:	7e13      	ldrb	r3, [r2, #24]
    75ee:	420b      	tst	r3, r1
    75f0:	d0fc      	beq.n	75ec <spi_select_slave+0x80>
    75f2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    75f4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    75f6:	0749      	lsls	r1, r1, #29
    75f8:	d5bd      	bpl.n	7576 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    75fa:	8b53      	ldrh	r3, [r2, #26]
    75fc:	075b      	lsls	r3, r3, #29
    75fe:	d501      	bpl.n	7604 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7600:	2304      	movs	r3, #4
    7602:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7604:	7983      	ldrb	r3, [r0, #6]
    7606:	2b01      	cmp	r3, #1
    7608:	d002      	beq.n	7610 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    760a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    760c:	2300      	movs	r3, #0
    760e:	e7b2      	b.n	7576 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7610:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7612:	2300      	movs	r3, #0
    7614:	e7af      	b.n	7576 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7616:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7618:	09d1      	lsrs	r1, r2, #7
		return NULL;
    761a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    761c:	2900      	cmp	r1, #0
    761e:	d104      	bne.n	762a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    7620:	0953      	lsrs	r3, r2, #5
    7622:	01db      	lsls	r3, r3, #7
    7624:	490d      	ldr	r1, [pc, #52]	; (765c <spi_select_slave+0xf0>)
    7626:	468c      	mov	ip, r1
    7628:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    762a:	211f      	movs	r1, #31
    762c:	4011      	ands	r1, r2
    762e:	2201      	movs	r2, #1
    7630:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    7632:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    7634:	2300      	movs	r3, #0
    7636:	e79e      	b.n	7576 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    7638:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    763a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    763c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    763e:	2900      	cmp	r1, #0
    7640:	d104      	bne.n	764c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    7642:	0953      	lsrs	r3, r2, #5
    7644:	01db      	lsls	r3, r3, #7
    7646:	4905      	ldr	r1, [pc, #20]	; (765c <spi_select_slave+0xf0>)
    7648:	468c      	mov	ip, r1
    764a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    764c:	211f      	movs	r1, #31
    764e:	4011      	ands	r1, r2
    7650:	2201      	movs	r2, #1
    7652:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7654:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    7656:	2300      	movs	r3, #0
    7658:	e78d      	b.n	7576 <spi_select_slave+0xa>
    765a:	46c0      	nop			; (mov r8, r8)
    765c:	41004400 	.word	0x41004400

00007660 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    7660:	b5f0      	push	{r4, r5, r6, r7, lr}
    7662:	46de      	mov	lr, fp
    7664:	4657      	mov	r7, sl
    7666:	464e      	mov	r6, r9
    7668:	4645      	mov	r5, r8
    766a:	b5e0      	push	{r5, r6, r7, lr}
    766c:	b091      	sub	sp, #68	; 0x44
    766e:	0005      	movs	r5, r0
    7670:	000c      	movs	r4, r1
    7672:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    7674:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7676:	0008      	movs	r0, r1
    7678:	4bba      	ldr	r3, [pc, #744]	; (7964 <usart_init+0x304>)
    767a:	4798      	blx	r3
    767c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    767e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    7680:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    7682:	07db      	lsls	r3, r3, #31
    7684:	d506      	bpl.n	7694 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    7686:	b011      	add	sp, #68	; 0x44
    7688:	bc3c      	pop	{r2, r3, r4, r5}
    768a:	4690      	mov	r8, r2
    768c:	4699      	mov	r9, r3
    768e:	46a2      	mov	sl, r4
    7690:	46ab      	mov	fp, r5
    7692:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7694:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    7696:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7698:	079b      	lsls	r3, r3, #30
    769a:	d4f4      	bmi.n	7686 <usart_init+0x26>
    769c:	49b2      	ldr	r1, [pc, #712]	; (7968 <usart_init+0x308>)
    769e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    76a0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    76a2:	2301      	movs	r3, #1
    76a4:	40bb      	lsls	r3, r7
    76a6:	4303      	orrs	r3, r0
    76a8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    76aa:	a90f      	add	r1, sp, #60	; 0x3c
    76ac:	272d      	movs	r7, #45	; 0x2d
    76ae:	5df3      	ldrb	r3, [r6, r7]
    76b0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    76b2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    76b4:	b2d3      	uxtb	r3, r2
    76b6:	9302      	str	r3, [sp, #8]
    76b8:	0018      	movs	r0, r3
    76ba:	4bac      	ldr	r3, [pc, #688]	; (796c <usart_init+0x30c>)
    76bc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    76be:	9802      	ldr	r0, [sp, #8]
    76c0:	4bab      	ldr	r3, [pc, #684]	; (7970 <usart_init+0x310>)
    76c2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    76c4:	5df0      	ldrb	r0, [r6, r7]
    76c6:	2100      	movs	r1, #0
    76c8:	4baa      	ldr	r3, [pc, #680]	; (7974 <usart_init+0x314>)
    76ca:	4798      	blx	r3
	module->character_size = config->character_size;
    76cc:	7af3      	ldrb	r3, [r6, #11]
    76ce:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    76d0:	2324      	movs	r3, #36	; 0x24
    76d2:	5cf3      	ldrb	r3, [r6, r3]
    76d4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    76d6:	2325      	movs	r3, #37	; 0x25
    76d8:	5cf3      	ldrb	r3, [r6, r3]
    76da:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    76dc:	7ef3      	ldrb	r3, [r6, #27]
    76de:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    76e0:	7f33      	ldrb	r3, [r6, #28]
    76e2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    76e4:	682b      	ldr	r3, [r5, #0]
    76e6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    76e8:	0018      	movs	r0, r3
    76ea:	4b9e      	ldr	r3, [pc, #632]	; (7964 <usart_init+0x304>)
    76ec:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    76ee:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    76f0:	2200      	movs	r2, #0
    76f2:	230e      	movs	r3, #14
    76f4:	a906      	add	r1, sp, #24
    76f6:	468c      	mov	ip, r1
    76f8:	4463      	add	r3, ip
    76fa:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    76fc:	8a32      	ldrh	r2, [r6, #16]
    76fe:	9202      	str	r2, [sp, #8]
    7700:	2380      	movs	r3, #128	; 0x80
    7702:	01db      	lsls	r3, r3, #7
    7704:	429a      	cmp	r2, r3
    7706:	d100      	bne.n	770a <usart_init+0xaa>
    7708:	e09a      	b.n	7840 <usart_init+0x1e0>
    770a:	d90f      	bls.n	772c <usart_init+0xcc>
    770c:	23c0      	movs	r3, #192	; 0xc0
    770e:	01db      	lsls	r3, r3, #7
    7710:	9a02      	ldr	r2, [sp, #8]
    7712:	429a      	cmp	r2, r3
    7714:	d100      	bne.n	7718 <usart_init+0xb8>
    7716:	e08e      	b.n	7836 <usart_init+0x1d6>
    7718:	2380      	movs	r3, #128	; 0x80
    771a:	021b      	lsls	r3, r3, #8
    771c:	429a      	cmp	r2, r3
    771e:	d000      	beq.n	7722 <usart_init+0xc2>
    7720:	e11b      	b.n	795a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    7722:	2303      	movs	r3, #3
    7724:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7726:	2300      	movs	r3, #0
    7728:	9307      	str	r3, [sp, #28]
    772a:	e008      	b.n	773e <usart_init+0xde>
	switch (config->sample_rate) {
    772c:	2380      	movs	r3, #128	; 0x80
    772e:	019b      	lsls	r3, r3, #6
    7730:	429a      	cmp	r2, r3
    7732:	d000      	beq.n	7736 <usart_init+0xd6>
    7734:	e111      	b.n	795a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7736:	2310      	movs	r3, #16
    7738:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    773a:	3b0f      	subs	r3, #15
    773c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    773e:	6833      	ldr	r3, [r6, #0]
    7740:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    7742:	68f3      	ldr	r3, [r6, #12]
    7744:	469b      	mov	fp, r3
		config->sample_adjustment |
    7746:	6973      	ldr	r3, [r6, #20]
    7748:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    774a:	7e33      	ldrb	r3, [r6, #24]
    774c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    774e:	2326      	movs	r3, #38	; 0x26
    7750:	5cf3      	ldrb	r3, [r6, r3]
    7752:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    7754:	6873      	ldr	r3, [r6, #4]
    7756:	4699      	mov	r9, r3
	switch (transfer_mode)
    7758:	2b00      	cmp	r3, #0
    775a:	d100      	bne.n	775e <usart_init+0xfe>
    775c:	e09c      	b.n	7898 <usart_init+0x238>
    775e:	2380      	movs	r3, #128	; 0x80
    7760:	055b      	lsls	r3, r3, #21
    7762:	4599      	cmp	r9, r3
    7764:	d100      	bne.n	7768 <usart_init+0x108>
    7766:	e080      	b.n	786a <usart_init+0x20a>
	if(config->encoding_format_enable) {
    7768:	7e73      	ldrb	r3, [r6, #25]
    776a:	2b00      	cmp	r3, #0
    776c:	d002      	beq.n	7774 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    776e:	7eb3      	ldrb	r3, [r6, #26]
    7770:	4642      	mov	r2, r8
    7772:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    7774:	230e      	movs	r3, #14
    7776:	aa06      	add	r2, sp, #24
    7778:	4694      	mov	ip, r2
    777a:	4463      	add	r3, ip
    777c:	881b      	ldrh	r3, [r3, #0]
    777e:	4642      	mov	r2, r8
    7780:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    7782:	9b05      	ldr	r3, [sp, #20]
    7784:	465a      	mov	r2, fp
    7786:	4313      	orrs	r3, r2
    7788:	9a03      	ldr	r2, [sp, #12]
    778a:	4313      	orrs	r3, r2
    778c:	464a      	mov	r2, r9
    778e:	4313      	orrs	r3, r2
    7790:	9f02      	ldr	r7, [sp, #8]
    7792:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7794:	9b04      	ldr	r3, [sp, #16]
    7796:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    7798:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    779a:	4653      	mov	r3, sl
    779c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    779e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    77a0:	2327      	movs	r3, #39	; 0x27
    77a2:	5cf3      	ldrb	r3, [r6, r3]
    77a4:	2b00      	cmp	r3, #0
    77a6:	d101      	bne.n	77ac <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    77a8:	3304      	adds	r3, #4
    77aa:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    77ac:	7e73      	ldrb	r3, [r6, #25]
    77ae:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    77b0:	7f32      	ldrb	r2, [r6, #28]
    77b2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    77b4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    77b6:	7f72      	ldrb	r2, [r6, #29]
    77b8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    77ba:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    77bc:	2224      	movs	r2, #36	; 0x24
    77be:	5cb2      	ldrb	r2, [r6, r2]
    77c0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    77c2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    77c4:	2225      	movs	r2, #37	; 0x25
    77c6:	5cb2      	ldrb	r2, [r6, r2]
    77c8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    77ca:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    77cc:	7ab1      	ldrb	r1, [r6, #10]
    77ce:	7af2      	ldrb	r2, [r6, #11]
    77d0:	4311      	orrs	r1, r2
    77d2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    77d4:	8933      	ldrh	r3, [r6, #8]
    77d6:	2bff      	cmp	r3, #255	; 0xff
    77d8:	d100      	bne.n	77dc <usart_init+0x17c>
    77da:	e081      	b.n	78e0 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    77dc:	2280      	movs	r2, #128	; 0x80
    77de:	0452      	lsls	r2, r2, #17
    77e0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    77e2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    77e4:	232c      	movs	r3, #44	; 0x2c
    77e6:	5cf3      	ldrb	r3, [r6, r3]
    77e8:	2b00      	cmp	r3, #0
    77ea:	d103      	bne.n	77f4 <usart_init+0x194>
    77ec:	4b62      	ldr	r3, [pc, #392]	; (7978 <usart_init+0x318>)
    77ee:	789b      	ldrb	r3, [r3, #2]
    77f0:	079b      	lsls	r3, r3, #30
    77f2:	d501      	bpl.n	77f8 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    77f4:	2380      	movs	r3, #128	; 0x80
    77f6:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    77f8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    77fa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    77fc:	2b00      	cmp	r3, #0
    77fe:	d1fc      	bne.n	77fa <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    7800:	4643      	mov	r3, r8
    7802:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7804:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7806:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7808:	2b00      	cmp	r3, #0
    780a:	d1fc      	bne.n	7806 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    780c:	4643      	mov	r3, r8
    780e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7810:	ab0e      	add	r3, sp, #56	; 0x38
    7812:	2280      	movs	r2, #128	; 0x80
    7814:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7816:	2200      	movs	r2, #0
    7818:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    781a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    781c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    781e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    7820:	930a      	str	r3, [sp, #40]	; 0x28
    7822:	6b73      	ldr	r3, [r6, #52]	; 0x34
    7824:	930b      	str	r3, [sp, #44]	; 0x2c
    7826:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7828:	930c      	str	r3, [sp, #48]	; 0x30
    782a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    782c:	9302      	str	r3, [sp, #8]
    782e:	930d      	str	r3, [sp, #52]	; 0x34
    7830:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7832:	ae0a      	add	r6, sp, #40	; 0x28
    7834:	e063      	b.n	78fe <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7836:	2308      	movs	r3, #8
    7838:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    783a:	3b07      	subs	r3, #7
    783c:	9307      	str	r3, [sp, #28]
    783e:	e77e      	b.n	773e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    7840:	6833      	ldr	r3, [r6, #0]
    7842:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    7844:	68f3      	ldr	r3, [r6, #12]
    7846:	469b      	mov	fp, r3
		config->sample_adjustment |
    7848:	6973      	ldr	r3, [r6, #20]
    784a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    784c:	7e33      	ldrb	r3, [r6, #24]
    784e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7850:	2326      	movs	r3, #38	; 0x26
    7852:	5cf3      	ldrb	r3, [r6, r3]
    7854:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    7856:	6873      	ldr	r3, [r6, #4]
    7858:	4699      	mov	r9, r3
	switch (transfer_mode)
    785a:	2b00      	cmp	r3, #0
    785c:	d018      	beq.n	7890 <usart_init+0x230>
    785e:	2380      	movs	r3, #128	; 0x80
    7860:	055b      	lsls	r3, r3, #21
    7862:	4599      	cmp	r9, r3
    7864:	d001      	beq.n	786a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    7866:	2000      	movs	r0, #0
    7868:	e025      	b.n	78b6 <usart_init+0x256>
			if (!config->use_external_clock) {
    786a:	2327      	movs	r3, #39	; 0x27
    786c:	5cf3      	ldrb	r3, [r6, r3]
    786e:	2b00      	cmp	r3, #0
    7870:	d000      	beq.n	7874 <usart_init+0x214>
    7872:	e779      	b.n	7768 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    7874:	6a33      	ldr	r3, [r6, #32]
    7876:	001f      	movs	r7, r3
    7878:	b2c0      	uxtb	r0, r0
    787a:	4b40      	ldr	r3, [pc, #256]	; (797c <usart_init+0x31c>)
    787c:	4798      	blx	r3
    787e:	0001      	movs	r1, r0
    7880:	220e      	movs	r2, #14
    7882:	ab06      	add	r3, sp, #24
    7884:	469c      	mov	ip, r3
    7886:	4462      	add	r2, ip
    7888:	0038      	movs	r0, r7
    788a:	4b3d      	ldr	r3, [pc, #244]	; (7980 <usart_init+0x320>)
    788c:	4798      	blx	r3
    788e:	e012      	b.n	78b6 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7890:	2308      	movs	r3, #8
    7892:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7894:	2300      	movs	r3, #0
    7896:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    7898:	2327      	movs	r3, #39	; 0x27
    789a:	5cf3      	ldrb	r3, [r6, r3]
    789c:	2b00      	cmp	r3, #0
    789e:	d00e      	beq.n	78be <usart_init+0x25e>
				status_code =
    78a0:	9b06      	ldr	r3, [sp, #24]
    78a2:	9300      	str	r3, [sp, #0]
    78a4:	9b07      	ldr	r3, [sp, #28]
    78a6:	220e      	movs	r2, #14
    78a8:	a906      	add	r1, sp, #24
    78aa:	468c      	mov	ip, r1
    78ac:	4462      	add	r2, ip
    78ae:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    78b0:	6a30      	ldr	r0, [r6, #32]
    78b2:	4f34      	ldr	r7, [pc, #208]	; (7984 <usart_init+0x324>)
    78b4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    78b6:	2800      	cmp	r0, #0
    78b8:	d000      	beq.n	78bc <usart_init+0x25c>
    78ba:	e6e4      	b.n	7686 <usart_init+0x26>
    78bc:	e754      	b.n	7768 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    78be:	6a33      	ldr	r3, [r6, #32]
    78c0:	001f      	movs	r7, r3
    78c2:	b2c0      	uxtb	r0, r0
    78c4:	4b2d      	ldr	r3, [pc, #180]	; (797c <usart_init+0x31c>)
    78c6:	4798      	blx	r3
    78c8:	0001      	movs	r1, r0
				status_code =
    78ca:	9b06      	ldr	r3, [sp, #24]
    78cc:	9300      	str	r3, [sp, #0]
    78ce:	9b07      	ldr	r3, [sp, #28]
    78d0:	220e      	movs	r2, #14
    78d2:	a806      	add	r0, sp, #24
    78d4:	4684      	mov	ip, r0
    78d6:	4462      	add	r2, ip
    78d8:	0038      	movs	r0, r7
    78da:	4f2a      	ldr	r7, [pc, #168]	; (7984 <usart_init+0x324>)
    78dc:	47b8      	blx	r7
    78de:	e7ea      	b.n	78b6 <usart_init+0x256>
		if(config->lin_slave_enable) {
    78e0:	7ef3      	ldrb	r3, [r6, #27]
    78e2:	2b00      	cmp	r3, #0
    78e4:	d100      	bne.n	78e8 <usart_init+0x288>
    78e6:	e77d      	b.n	77e4 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    78e8:	2380      	movs	r3, #128	; 0x80
    78ea:	04db      	lsls	r3, r3, #19
    78ec:	431f      	orrs	r7, r3
    78ee:	e779      	b.n	77e4 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    78f0:	0020      	movs	r0, r4
    78f2:	4b25      	ldr	r3, [pc, #148]	; (7988 <usart_init+0x328>)
    78f4:	4798      	blx	r3
    78f6:	e007      	b.n	7908 <usart_init+0x2a8>
    78f8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    78fa:	2f04      	cmp	r7, #4
    78fc:	d00d      	beq.n	791a <usart_init+0x2ba>
    78fe:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7900:	00bb      	lsls	r3, r7, #2
    7902:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    7904:	2800      	cmp	r0, #0
    7906:	d0f3      	beq.n	78f0 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    7908:	1c43      	adds	r3, r0, #1
    790a:	d0f5      	beq.n	78f8 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    790c:	a90e      	add	r1, sp, #56	; 0x38
    790e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7910:	0c00      	lsrs	r0, r0, #16
    7912:	b2c0      	uxtb	r0, r0
    7914:	4b1d      	ldr	r3, [pc, #116]	; (798c <usart_init+0x32c>)
    7916:	4798      	blx	r3
    7918:	e7ee      	b.n	78f8 <usart_init+0x298>
		module->callback[i]            = NULL;
    791a:	2300      	movs	r3, #0
    791c:	60eb      	str	r3, [r5, #12]
    791e:	612b      	str	r3, [r5, #16]
    7920:	616b      	str	r3, [r5, #20]
    7922:	61ab      	str	r3, [r5, #24]
    7924:	61eb      	str	r3, [r5, #28]
    7926:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    7928:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    792a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    792c:	2200      	movs	r2, #0
    792e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    7930:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    7932:	3330      	adds	r3, #48	; 0x30
    7934:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    7936:	3301      	adds	r3, #1
    7938:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    793a:	3301      	adds	r3, #1
    793c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    793e:	3301      	adds	r3, #1
    7940:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    7942:	6828      	ldr	r0, [r5, #0]
    7944:	4b07      	ldr	r3, [pc, #28]	; (7964 <usart_init+0x304>)
    7946:	4798      	blx	r3
    7948:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    794a:	4911      	ldr	r1, [pc, #68]	; (7990 <usart_init+0x330>)
    794c:	4b11      	ldr	r3, [pc, #68]	; (7994 <usart_init+0x334>)
    794e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7950:	00a4      	lsls	r4, r4, #2
    7952:	4b11      	ldr	r3, [pc, #68]	; (7998 <usart_init+0x338>)
    7954:	50e5      	str	r5, [r4, r3]
	return status_code;
    7956:	2000      	movs	r0, #0
    7958:	e695      	b.n	7686 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    795a:	2310      	movs	r3, #16
    795c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    795e:	2300      	movs	r3, #0
    7960:	9307      	str	r3, [sp, #28]
    7962:	e6ec      	b.n	773e <usart_init+0xde>
    7964:	000071a1 	.word	0x000071a1
    7968:	40000400 	.word	0x40000400
    796c:	00008461 	.word	0x00008461
    7970:	000083d5 	.word	0x000083d5
    7974:	00006fdd 	.word	0x00006fdd
    7978:	41002000 	.word	0x41002000
    797c:	0000847d 	.word	0x0000847d
    7980:	00006f1f 	.word	0x00006f1f
    7984:	00006f49 	.word	0x00006f49
    7988:	00007029 	.word	0x00007029
    798c:	00008559 	.word	0x00008559
    7990:	00007b81 	.word	0x00007b81
    7994:	000071dd 	.word	0x000071dd
    7998:	20001cc8 	.word	0x20001cc8

0000799c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    799c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    799e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    79a0:	2a00      	cmp	r2, #0
    79a2:	d101      	bne.n	79a8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    79a4:	0018      	movs	r0, r3
    79a6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    79a8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    79aa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    79ac:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    79ae:	2a00      	cmp	r2, #0
    79b0:	d1f8      	bne.n	79a4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    79b2:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    79b4:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    79b6:	2102      	movs	r1, #2
    79b8:	7e13      	ldrb	r3, [r2, #24]
    79ba:	420b      	tst	r3, r1
    79bc:	d0fc      	beq.n	79b8 <usart_write_wait+0x1c>
	return STATUS_OK;
    79be:	2300      	movs	r3, #0
    79c0:	e7f0      	b.n	79a4 <usart_write_wait+0x8>

000079c2 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    79c2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    79c4:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    79c6:	2a00      	cmp	r2, #0
    79c8:	d101      	bne.n	79ce <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    79ca:	0018      	movs	r0, r3
    79cc:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    79ce:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    79d0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    79d2:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    79d4:	2a00      	cmp	r2, #0
    79d6:	d1f8      	bne.n	79ca <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    79d8:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    79da:	7e10      	ldrb	r0, [r2, #24]
    79dc:	0740      	lsls	r0, r0, #29
    79de:	d5f4      	bpl.n	79ca <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    79e0:	8b53      	ldrh	r3, [r2, #26]
    79e2:	b2db      	uxtb	r3, r3
	if (error_code) {
    79e4:	0698      	lsls	r0, r3, #26
    79e6:	d01d      	beq.n	7a24 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    79e8:	0798      	lsls	r0, r3, #30
    79ea:	d503      	bpl.n	79f4 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    79ec:	2302      	movs	r3, #2
    79ee:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    79f0:	3318      	adds	r3, #24
    79f2:	e7ea      	b.n	79ca <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    79f4:	0758      	lsls	r0, r3, #29
    79f6:	d503      	bpl.n	7a00 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    79f8:	2304      	movs	r3, #4
    79fa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    79fc:	331a      	adds	r3, #26
    79fe:	e7e4      	b.n	79ca <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7a00:	07d8      	lsls	r0, r3, #31
    7a02:	d503      	bpl.n	7a0c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7a04:	2301      	movs	r3, #1
    7a06:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    7a08:	3312      	adds	r3, #18
    7a0a:	e7de      	b.n	79ca <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    7a0c:	06d8      	lsls	r0, r3, #27
    7a0e:	d503      	bpl.n	7a18 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7a10:	2310      	movs	r3, #16
    7a12:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    7a14:	3332      	adds	r3, #50	; 0x32
    7a16:	e7d8      	b.n	79ca <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    7a18:	069b      	lsls	r3, r3, #26
    7a1a:	d503      	bpl.n	7a24 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7a1c:	2320      	movs	r3, #32
    7a1e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    7a20:	3321      	adds	r3, #33	; 0x21
    7a22:	e7d2      	b.n	79ca <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    7a24:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    7a26:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    7a28:	2300      	movs	r3, #0
    7a2a:	e7ce      	b.n	79ca <usart_read_wait+0x8>

00007a2c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    7a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a2e:	46ce      	mov	lr, r9
    7a30:	4647      	mov	r7, r8
    7a32:	b580      	push	{r7, lr}
    7a34:	b083      	sub	sp, #12
    7a36:	0005      	movs	r5, r0
    7a38:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7a3a:	2017      	movs	r0, #23
	if (length == 0) {
    7a3c:	2a00      	cmp	r2, #0
    7a3e:	d104      	bne.n	7a4a <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    7a40:	b003      	add	sp, #12
    7a42:	bc0c      	pop	{r2, r3}
    7a44:	4690      	mov	r8, r2
    7a46:	4699      	mov	r9, r3
    7a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    7a4a:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    7a4c:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    7a4e:	2b00      	cmp	r3, #0
    7a50:	d0f6      	beq.n	7a40 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7a52:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    7a54:	3a01      	subs	r2, #1
    7a56:	b293      	uxth	r3, r2
    7a58:	4699      	mov	r9, r3
    7a5a:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    7a5c:	2701      	movs	r7, #1
	while (length--) {
    7a5e:	4b20      	ldr	r3, [pc, #128]	; (7ae0 <usart_write_buffer_wait+0xb4>)
    7a60:	4698      	mov	r8, r3
    7a62:	e011      	b.n	7a88 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    7a64:	1c73      	adds	r3, r6, #1
    7a66:	b29b      	uxth	r3, r3
    7a68:	9a01      	ldr	r2, [sp, #4]
    7a6a:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7a6c:	796a      	ldrb	r2, [r5, #5]
    7a6e:	2a01      	cmp	r2, #1
    7a70:	d017      	beq.n	7aa2 <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    7a72:	b289      	uxth	r1, r1
    7a74:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    7a76:	0028      	movs	r0, r5
    7a78:	4b1a      	ldr	r3, [pc, #104]	; (7ae4 <usart_write_buffer_wait+0xb8>)
    7a7a:	4798      	blx	r3
	while (length--) {
    7a7c:	464b      	mov	r3, r9
    7a7e:	3b01      	subs	r3, #1
    7a80:	b29b      	uxth	r3, r3
    7a82:	4699      	mov	r9, r3
    7a84:	4543      	cmp	r3, r8
    7a86:	d013      	beq.n	7ab0 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    7a88:	7e23      	ldrb	r3, [r4, #24]
    7a8a:	423b      	tst	r3, r7
    7a8c:	d1ea      	bne.n	7a64 <usart_write_buffer_wait+0x38>
    7a8e:	4b14      	ldr	r3, [pc, #80]	; (7ae0 <usart_write_buffer_wait+0xb4>)
    7a90:	7e22      	ldrb	r2, [r4, #24]
    7a92:	423a      	tst	r2, r7
    7a94:	d1e6      	bne.n	7a64 <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    7a96:	2b01      	cmp	r3, #1
    7a98:	d019      	beq.n	7ace <usart_write_buffer_wait+0xa2>
    7a9a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    7a9c:	2b00      	cmp	r3, #0
    7a9e:	d1f7      	bne.n	7a90 <usart_write_buffer_wait+0x64>
    7aa0:	e7e0      	b.n	7a64 <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    7aa2:	3602      	adds	r6, #2
    7aa4:	b2b6      	uxth	r6, r6
    7aa6:	9a01      	ldr	r2, [sp, #4]
    7aa8:	5cd3      	ldrb	r3, [r2, r3]
    7aaa:	021b      	lsls	r3, r3, #8
    7aac:	4319      	orrs	r1, r3
    7aae:	e7e2      	b.n	7a76 <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    7ab0:	7e23      	ldrb	r3, [r4, #24]
    7ab2:	079b      	lsls	r3, r3, #30
    7ab4:	d40d      	bmi.n	7ad2 <usart_write_buffer_wait+0xa6>
    7ab6:	4b0a      	ldr	r3, [pc, #40]	; (7ae0 <usart_write_buffer_wait+0xb4>)
    7ab8:	2102      	movs	r1, #2
    7aba:	7e22      	ldrb	r2, [r4, #24]
    7abc:	420a      	tst	r2, r1
    7abe:	d10a      	bne.n	7ad6 <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    7ac0:	2b01      	cmp	r3, #1
    7ac2:	d00a      	beq.n	7ada <usart_write_buffer_wait+0xae>
    7ac4:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    7ac6:	2b00      	cmp	r3, #0
    7ac8:	d1f7      	bne.n	7aba <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    7aca:	2000      	movs	r0, #0
    7acc:	e7b8      	b.n	7a40 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    7ace:	2012      	movs	r0, #18
    7ad0:	e7b6      	b.n	7a40 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    7ad2:	2000      	movs	r0, #0
    7ad4:	e7b4      	b.n	7a40 <usart_write_buffer_wait+0x14>
    7ad6:	2000      	movs	r0, #0
    7ad8:	e7b2      	b.n	7a40 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    7ada:	2012      	movs	r0, #18
    7adc:	e7b0      	b.n	7a40 <usart_write_buffer_wait+0x14>
    7ade:	46c0      	nop			; (mov r8, r8)
    7ae0:	0000ffff 	.word	0x0000ffff
    7ae4:	0000799d 	.word	0x0000799d

00007ae8 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    7ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7aea:	46d6      	mov	lr, sl
    7aec:	b500      	push	{lr}
    7aee:	b084      	sub	sp, #16
    7af0:	0004      	movs	r4, r0
    7af2:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7af4:	2017      	movs	r0, #23
	if (length == 0) {
    7af6:	2a00      	cmp	r2, #0
    7af8:	d103      	bne.n	7b02 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    7afa:	b004      	add	sp, #16
    7afc:	bc04      	pop	{r2}
    7afe:	4692      	mov	sl, r2
    7b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    7b02:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    7b04:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    7b06:	2b00      	cmp	r3, #0
    7b08:	d0f7      	beq.n	7afa <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7b0a:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    7b0c:	3a01      	subs	r2, #1
    7b0e:	b293      	uxth	r3, r2
    7b10:	469a      	mov	sl, r3
    7b12:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    7b14:	2704      	movs	r7, #4
    7b16:	e019      	b.n	7b4c <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    7b18:	2300      	movs	r3, #0
    7b1a:	aa02      	add	r2, sp, #8
    7b1c:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    7b1e:	1d91      	adds	r1, r2, #6
    7b20:	0020      	movs	r0, r4
    7b22:	4b15      	ldr	r3, [pc, #84]	; (7b78 <usart_read_buffer_wait+0x90>)
    7b24:	4798      	blx	r3
		if (retval != STATUS_OK) {
    7b26:	2800      	cmp	r0, #0
    7b28:	d1e7      	bne.n	7afa <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    7b2a:	1c69      	adds	r1, r5, #1
    7b2c:	b289      	uxth	r1, r1
    7b2e:	ab02      	add	r3, sp, #8
    7b30:	88db      	ldrh	r3, [r3, #6]
    7b32:	9a01      	ldr	r2, [sp, #4]
    7b34:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7b36:	7962      	ldrb	r2, [r4, #5]
    7b38:	2a01      	cmp	r2, #1
    7b3a:	d014      	beq.n	7b66 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    7b3c:	000d      	movs	r5, r1
	while (length--) {
    7b3e:	4653      	mov	r3, sl
    7b40:	3b01      	subs	r3, #1
    7b42:	b29b      	uxth	r3, r3
    7b44:	469a      	mov	sl, r3
    7b46:	4b0d      	ldr	r3, [pc, #52]	; (7b7c <usart_read_buffer_wait+0x94>)
    7b48:	459a      	cmp	sl, r3
    7b4a:	d0d6      	beq.n	7afa <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    7b4c:	7e33      	ldrb	r3, [r6, #24]
    7b4e:	423b      	tst	r3, r7
    7b50:	d1e2      	bne.n	7b18 <usart_read_buffer_wait+0x30>
    7b52:	4b0a      	ldr	r3, [pc, #40]	; (7b7c <usart_read_buffer_wait+0x94>)
    7b54:	7e32      	ldrb	r2, [r6, #24]
    7b56:	423a      	tst	r2, r7
    7b58:	d1de      	bne.n	7b18 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    7b5a:	2b01      	cmp	r3, #1
    7b5c:	d009      	beq.n	7b72 <usart_read_buffer_wait+0x8a>
    7b5e:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    7b60:	2b00      	cmp	r3, #0
    7b62:	d1f7      	bne.n	7b54 <usart_read_buffer_wait+0x6c>
    7b64:	e7d8      	b.n	7b18 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    7b66:	3502      	adds	r5, #2
    7b68:	b2ad      	uxth	r5, r5
    7b6a:	0a1b      	lsrs	r3, r3, #8
    7b6c:	9a01      	ldr	r2, [sp, #4]
    7b6e:	5453      	strb	r3, [r2, r1]
    7b70:	e7e5      	b.n	7b3e <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    7b72:	2012      	movs	r0, #18
    7b74:	e7c1      	b.n	7afa <usart_read_buffer_wait+0x12>
    7b76:	46c0      	nop			; (mov r8, r8)
    7b78:	000079c3 	.word	0x000079c3
    7b7c:	0000ffff 	.word	0x0000ffff

00007b80 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    7b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    7b82:	0080      	lsls	r0, r0, #2
    7b84:	4b62      	ldr	r3, [pc, #392]	; (7d10 <_usart_interrupt_handler+0x190>)
    7b86:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    7b88:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7b8a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d1fc      	bne.n	7b8a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    7b90:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    7b92:	7da6      	ldrb	r6, [r4, #22]
    7b94:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    7b96:	2330      	movs	r3, #48	; 0x30
    7b98:	5ceb      	ldrb	r3, [r5, r3]
    7b9a:	2231      	movs	r2, #49	; 0x31
    7b9c:	5caf      	ldrb	r7, [r5, r2]
    7b9e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    7ba0:	07f3      	lsls	r3, r6, #31
    7ba2:	d522      	bpl.n	7bea <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    7ba4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    7ba6:	b29b      	uxth	r3, r3
    7ba8:	2b00      	cmp	r3, #0
    7baa:	d01c      	beq.n	7be6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7bac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7bae:	7813      	ldrb	r3, [r2, #0]
    7bb0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    7bb2:	1c51      	adds	r1, r2, #1
    7bb4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7bb6:	7969      	ldrb	r1, [r5, #5]
    7bb8:	2901      	cmp	r1, #1
    7bba:	d00e      	beq.n	7bda <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7bbc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    7bbe:	05db      	lsls	r3, r3, #23
    7bc0:	0ddb      	lsrs	r3, r3, #23
    7bc2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    7bc4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    7bc6:	3b01      	subs	r3, #1
    7bc8:	b29b      	uxth	r3, r3
    7bca:	85eb      	strh	r3, [r5, #46]	; 0x2e
    7bcc:	2b00      	cmp	r3, #0
    7bce:	d10c      	bne.n	7bea <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7bd0:	3301      	adds	r3, #1
    7bd2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    7bd4:	3301      	adds	r3, #1
    7bd6:	75a3      	strb	r3, [r4, #22]
    7bd8:	e007      	b.n	7bea <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    7bda:	7851      	ldrb	r1, [r2, #1]
    7bdc:	0209      	lsls	r1, r1, #8
    7bde:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    7be0:	3202      	adds	r2, #2
    7be2:	62aa      	str	r2, [r5, #40]	; 0x28
    7be4:	e7eb      	b.n	7bbe <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7be6:	2301      	movs	r3, #1
    7be8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    7bea:	07b3      	lsls	r3, r6, #30
    7bec:	d506      	bpl.n	7bfc <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    7bee:	2302      	movs	r3, #2
    7bf0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    7bf2:	2200      	movs	r2, #0
    7bf4:	3331      	adds	r3, #49	; 0x31
    7bf6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    7bf8:	07fb      	lsls	r3, r7, #31
    7bfa:	d41a      	bmi.n	7c32 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    7bfc:	0773      	lsls	r3, r6, #29
    7bfe:	d565      	bpl.n	7ccc <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    7c00:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7c02:	b29b      	uxth	r3, r3
    7c04:	2b00      	cmp	r3, #0
    7c06:	d05f      	beq.n	7cc8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7c08:	8b63      	ldrh	r3, [r4, #26]
    7c0a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    7c0c:	071a      	lsls	r2, r3, #28
    7c0e:	d414      	bmi.n	7c3a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7c10:	223f      	movs	r2, #63	; 0x3f
    7c12:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    7c14:	2b00      	cmp	r3, #0
    7c16:	d034      	beq.n	7c82 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    7c18:	079a      	lsls	r2, r3, #30
    7c1a:	d511      	bpl.n	7c40 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    7c1c:	221a      	movs	r2, #26
    7c1e:	2332      	movs	r3, #50	; 0x32
    7c20:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7c22:	3b30      	subs	r3, #48	; 0x30
    7c24:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    7c26:	077b      	lsls	r3, r7, #29
    7c28:	d550      	bpl.n	7ccc <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    7c2a:	0028      	movs	r0, r5
    7c2c:	696b      	ldr	r3, [r5, #20]
    7c2e:	4798      	blx	r3
    7c30:	e04c      	b.n	7ccc <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    7c32:	0028      	movs	r0, r5
    7c34:	68eb      	ldr	r3, [r5, #12]
    7c36:	4798      	blx	r3
    7c38:	e7e0      	b.n	7bfc <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    7c3a:	2237      	movs	r2, #55	; 0x37
    7c3c:	4013      	ands	r3, r2
    7c3e:	e7e9      	b.n	7c14 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7c40:	075a      	lsls	r2, r3, #29
    7c42:	d505      	bpl.n	7c50 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    7c44:	221e      	movs	r2, #30
    7c46:	2332      	movs	r3, #50	; 0x32
    7c48:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7c4a:	3b2e      	subs	r3, #46	; 0x2e
    7c4c:	8363      	strh	r3, [r4, #26]
    7c4e:	e7ea      	b.n	7c26 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7c50:	07da      	lsls	r2, r3, #31
    7c52:	d505      	bpl.n	7c60 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    7c54:	2213      	movs	r2, #19
    7c56:	2332      	movs	r3, #50	; 0x32
    7c58:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7c5a:	3b31      	subs	r3, #49	; 0x31
    7c5c:	8363      	strh	r3, [r4, #26]
    7c5e:	e7e2      	b.n	7c26 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    7c60:	06da      	lsls	r2, r3, #27
    7c62:	d505      	bpl.n	7c70 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    7c64:	2242      	movs	r2, #66	; 0x42
    7c66:	2332      	movs	r3, #50	; 0x32
    7c68:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7c6a:	3b22      	subs	r3, #34	; 0x22
    7c6c:	8363      	strh	r3, [r4, #26]
    7c6e:	e7da      	b.n	7c26 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    7c70:	2220      	movs	r2, #32
    7c72:	421a      	tst	r2, r3
    7c74:	d0d7      	beq.n	7c26 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    7c76:	3221      	adds	r2, #33	; 0x21
    7c78:	2332      	movs	r3, #50	; 0x32
    7c7a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7c7c:	3b12      	subs	r3, #18
    7c7e:	8363      	strh	r3, [r4, #26]
    7c80:	e7d1      	b.n	7c26 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    7c82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7c84:	05db      	lsls	r3, r3, #23
    7c86:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    7c88:	b2da      	uxtb	r2, r3
    7c8a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7c8c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    7c8e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7c90:	1c51      	adds	r1, r2, #1
    7c92:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7c94:	7969      	ldrb	r1, [r5, #5]
    7c96:	2901      	cmp	r1, #1
    7c98:	d010      	beq.n	7cbc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    7c9a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7c9c:	3b01      	subs	r3, #1
    7c9e:	b29b      	uxth	r3, r3
    7ca0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    7ca2:	2b00      	cmp	r3, #0
    7ca4:	d112      	bne.n	7ccc <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7ca6:	3304      	adds	r3, #4
    7ca8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    7caa:	2200      	movs	r2, #0
    7cac:	332e      	adds	r3, #46	; 0x2e
    7cae:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    7cb0:	07bb      	lsls	r3, r7, #30
    7cb2:	d50b      	bpl.n	7ccc <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    7cb4:	0028      	movs	r0, r5
    7cb6:	692b      	ldr	r3, [r5, #16]
    7cb8:	4798      	blx	r3
    7cba:	e007      	b.n	7ccc <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    7cbc:	0a1b      	lsrs	r3, r3, #8
    7cbe:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    7cc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7cc2:	3301      	adds	r3, #1
    7cc4:	626b      	str	r3, [r5, #36]	; 0x24
    7cc6:	e7e8      	b.n	7c9a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7cc8:	2304      	movs	r3, #4
    7cca:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    7ccc:	06f3      	lsls	r3, r6, #27
    7cce:	d504      	bpl.n	7cda <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    7cd0:	2310      	movs	r3, #16
    7cd2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    7cd4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    7cd6:	06fb      	lsls	r3, r7, #27
    7cd8:	d40e      	bmi.n	7cf8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    7cda:	06b3      	lsls	r3, r6, #26
    7cdc:	d504      	bpl.n	7ce8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    7cde:	2320      	movs	r3, #32
    7ce0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    7ce2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    7ce4:	073b      	lsls	r3, r7, #28
    7ce6:	d40b      	bmi.n	7d00 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    7ce8:	0733      	lsls	r3, r6, #28
    7cea:	d504      	bpl.n	7cf6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    7cec:	2308      	movs	r3, #8
    7cee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    7cf0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    7cf2:	06bb      	lsls	r3, r7, #26
    7cf4:	d408      	bmi.n	7d08 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    7cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    7cf8:	0028      	movs	r0, r5
    7cfa:	69eb      	ldr	r3, [r5, #28]
    7cfc:	4798      	blx	r3
    7cfe:	e7ec      	b.n	7cda <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    7d00:	0028      	movs	r0, r5
    7d02:	69ab      	ldr	r3, [r5, #24]
    7d04:	4798      	blx	r3
    7d06:	e7ef      	b.n	7ce8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    7d08:	6a2b      	ldr	r3, [r5, #32]
    7d0a:	0028      	movs	r0, r5
    7d0c:	4798      	blx	r3
}
    7d0e:	e7f2      	b.n	7cf6 <_usart_interrupt_handler+0x176>
    7d10:	20001cc8 	.word	0x20001cc8

00007d14 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    7d14:	b510      	push	{r4, lr}
	switch (clock_source) {
    7d16:	2808      	cmp	r0, #8
    7d18:	d803      	bhi.n	7d22 <system_clock_source_get_hz+0xe>
    7d1a:	0080      	lsls	r0, r0, #2
    7d1c:	4b1c      	ldr	r3, [pc, #112]	; (7d90 <system_clock_source_get_hz+0x7c>)
    7d1e:	581b      	ldr	r3, [r3, r0]
    7d20:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    7d22:	2000      	movs	r0, #0
    7d24:	e032      	b.n	7d8c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    7d26:	4b1b      	ldr	r3, [pc, #108]	; (7d94 <system_clock_source_get_hz+0x80>)
    7d28:	6918      	ldr	r0, [r3, #16]
    7d2a:	e02f      	b.n	7d8c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    7d2c:	4b1a      	ldr	r3, [pc, #104]	; (7d98 <system_clock_source_get_hz+0x84>)
    7d2e:	6a1b      	ldr	r3, [r3, #32]
    7d30:	059b      	lsls	r3, r3, #22
    7d32:	0f9b      	lsrs	r3, r3, #30
    7d34:	4819      	ldr	r0, [pc, #100]	; (7d9c <system_clock_source_get_hz+0x88>)
    7d36:	40d8      	lsrs	r0, r3
    7d38:	e028      	b.n	7d8c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    7d3a:	4b16      	ldr	r3, [pc, #88]	; (7d94 <system_clock_source_get_hz+0x80>)
    7d3c:	6958      	ldr	r0, [r3, #20]
    7d3e:	e025      	b.n	7d8c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7d40:	4b14      	ldr	r3, [pc, #80]	; (7d94 <system_clock_source_get_hz+0x80>)
    7d42:	681b      	ldr	r3, [r3, #0]
			return 0;
    7d44:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7d46:	079b      	lsls	r3, r3, #30
    7d48:	d520      	bpl.n	7d8c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7d4a:	4913      	ldr	r1, [pc, #76]	; (7d98 <system_clock_source_get_hz+0x84>)
    7d4c:	2210      	movs	r2, #16
    7d4e:	68cb      	ldr	r3, [r1, #12]
    7d50:	421a      	tst	r2, r3
    7d52:	d0fc      	beq.n	7d4e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    7d54:	4b0f      	ldr	r3, [pc, #60]	; (7d94 <system_clock_source_get_hz+0x80>)
    7d56:	681a      	ldr	r2, [r3, #0]
    7d58:	2324      	movs	r3, #36	; 0x24
    7d5a:	4013      	ands	r3, r2
    7d5c:	2b04      	cmp	r3, #4
    7d5e:	d001      	beq.n	7d64 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    7d60:	480f      	ldr	r0, [pc, #60]	; (7da0 <system_clock_source_get_hz+0x8c>)
    7d62:	e013      	b.n	7d8c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7d64:	2000      	movs	r0, #0
    7d66:	4b0f      	ldr	r3, [pc, #60]	; (7da4 <system_clock_source_get_hz+0x90>)
    7d68:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    7d6a:	4b0a      	ldr	r3, [pc, #40]	; (7d94 <system_clock_source_get_hz+0x80>)
    7d6c:	689b      	ldr	r3, [r3, #8]
    7d6e:	041b      	lsls	r3, r3, #16
    7d70:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7d72:	4358      	muls	r0, r3
    7d74:	e00a      	b.n	7d8c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7d76:	2350      	movs	r3, #80	; 0x50
    7d78:	4a07      	ldr	r2, [pc, #28]	; (7d98 <system_clock_source_get_hz+0x84>)
    7d7a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    7d7c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7d7e:	075b      	lsls	r3, r3, #29
    7d80:	d504      	bpl.n	7d8c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    7d82:	4b04      	ldr	r3, [pc, #16]	; (7d94 <system_clock_source_get_hz+0x80>)
    7d84:	68d8      	ldr	r0, [r3, #12]
    7d86:	e001      	b.n	7d8c <system_clock_source_get_hz+0x78>
		return 32768UL;
    7d88:	2080      	movs	r0, #128	; 0x80
    7d8a:	0200      	lsls	r0, r0, #8
	}
}
    7d8c:	bd10      	pop	{r4, pc}
    7d8e:	46c0      	nop			; (mov r8, r8)
    7d90:	00012030 	.word	0x00012030
    7d94:	200000e4 	.word	0x200000e4
    7d98:	40000800 	.word	0x40000800
    7d9c:	007a1200 	.word	0x007a1200
    7da0:	02dc6c00 	.word	0x02dc6c00
    7da4:	0000847d 	.word	0x0000847d

00007da8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    7da8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    7daa:	490c      	ldr	r1, [pc, #48]	; (7ddc <system_clock_source_osc8m_set_config+0x34>)
    7dac:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    7dae:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7db0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    7db2:	7840      	ldrb	r0, [r0, #1]
    7db4:	2201      	movs	r2, #1
    7db6:	4010      	ands	r0, r2
    7db8:	0180      	lsls	r0, r0, #6
    7dba:	2640      	movs	r6, #64	; 0x40
    7dbc:	43b3      	bics	r3, r6
    7dbe:	4303      	orrs	r3, r0
    7dc0:	402a      	ands	r2, r5
    7dc2:	01d2      	lsls	r2, r2, #7
    7dc4:	2080      	movs	r0, #128	; 0x80
    7dc6:	4383      	bics	r3, r0
    7dc8:	4313      	orrs	r3, r2
    7dca:	2203      	movs	r2, #3
    7dcc:	4022      	ands	r2, r4
    7dce:	0212      	lsls	r2, r2, #8
    7dd0:	4803      	ldr	r0, [pc, #12]	; (7de0 <system_clock_source_osc8m_set_config+0x38>)
    7dd2:	4003      	ands	r3, r0
    7dd4:	4313      	orrs	r3, r2
    7dd6:	620b      	str	r3, [r1, #32]
}
    7dd8:	bd70      	pop	{r4, r5, r6, pc}
    7dda:	46c0      	nop			; (mov r8, r8)
    7ddc:	40000800 	.word	0x40000800
    7de0:	fffffcff 	.word	0xfffffcff

00007de4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    7de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7de6:	46ce      	mov	lr, r9
    7de8:	4647      	mov	r7, r8
    7dea:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    7dec:	4b19      	ldr	r3, [pc, #100]	; (7e54 <system_clock_source_osc32k_set_config+0x70>)
    7dee:	4699      	mov	r9, r3
    7df0:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    7df2:	7841      	ldrb	r1, [r0, #1]
    7df4:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    7df6:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7df8:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7dfa:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    7dfc:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    7dfe:	7880      	ldrb	r0, [r0, #2]
    7e00:	2101      	movs	r1, #1
    7e02:	4008      	ands	r0, r1
    7e04:	0080      	lsls	r0, r0, #2
    7e06:	2204      	movs	r2, #4
    7e08:	4393      	bics	r3, r2
    7e0a:	4303      	orrs	r3, r0
    7e0c:	4660      	mov	r0, ip
    7e0e:	4008      	ands	r0, r1
    7e10:	00c0      	lsls	r0, r0, #3
    7e12:	3204      	adds	r2, #4
    7e14:	4393      	bics	r3, r2
    7e16:	4303      	orrs	r3, r0
    7e18:	0038      	movs	r0, r7
    7e1a:	4008      	ands	r0, r1
    7e1c:	0180      	lsls	r0, r0, #6
    7e1e:	2740      	movs	r7, #64	; 0x40
    7e20:	43bb      	bics	r3, r7
    7e22:	4303      	orrs	r3, r0
    7e24:	0030      	movs	r0, r6
    7e26:	4008      	ands	r0, r1
    7e28:	01c0      	lsls	r0, r0, #7
    7e2a:	2680      	movs	r6, #128	; 0x80
    7e2c:	43b3      	bics	r3, r6
    7e2e:	4303      	orrs	r3, r0
    7e30:	2007      	movs	r0, #7
    7e32:	4005      	ands	r5, r0
    7e34:	022d      	lsls	r5, r5, #8
    7e36:	4808      	ldr	r0, [pc, #32]	; (7e58 <system_clock_source_osc32k_set_config+0x74>)
    7e38:	4003      	ands	r3, r0
    7e3a:	432b      	orrs	r3, r5
    7e3c:	4021      	ands	r1, r4
    7e3e:	0309      	lsls	r1, r1, #12
    7e40:	4806      	ldr	r0, [pc, #24]	; (7e5c <system_clock_source_osc32k_set_config+0x78>)
    7e42:	4003      	ands	r3, r0
    7e44:	430b      	orrs	r3, r1
    7e46:	464a      	mov	r2, r9
    7e48:	6193      	str	r3, [r2, #24]
}
    7e4a:	bc0c      	pop	{r2, r3}
    7e4c:	4690      	mov	r8, r2
    7e4e:	4699      	mov	r9, r3
    7e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e52:	46c0      	nop			; (mov r8, r8)
    7e54:	40000800 	.word	0x40000800
    7e58:	fffff8ff 	.word	0xfffff8ff
    7e5c:	ffffefff 	.word	0xffffefff

00007e60 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    7e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e62:	46de      	mov	lr, fp
    7e64:	4657      	mov	r7, sl
    7e66:	464e      	mov	r6, r9
    7e68:	4645      	mov	r5, r8
    7e6a:	b5e0      	push	{r5, r6, r7, lr}
    7e6c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    7e6e:	4b26      	ldr	r3, [pc, #152]	; (7f08 <system_clock_source_xosc32k_set_config+0xa8>)
    7e70:	469b      	mov	fp, r3
    7e72:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    7e74:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    7e76:	7800      	ldrb	r0, [r0, #0]
    7e78:	4242      	negs	r2, r0
    7e7a:	4142      	adcs	r2, r0
    7e7c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    7e7e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    7e80:	78ca      	ldrb	r2, [r1, #3]
    7e82:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    7e84:	790a      	ldrb	r2, [r1, #4]
    7e86:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    7e88:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7e8a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    7e8c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    7e8e:	688a      	ldr	r2, [r1, #8]
    7e90:	491e      	ldr	r1, [pc, #120]	; (7f0c <system_clock_source_xosc32k_set_config+0xac>)
    7e92:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    7e94:	2101      	movs	r1, #1
    7e96:	464a      	mov	r2, r9
    7e98:	0092      	lsls	r2, r2, #2
    7e9a:	4691      	mov	r9, r2
    7e9c:	2204      	movs	r2, #4
    7e9e:	4393      	bics	r3, r2
    7ea0:	464a      	mov	r2, r9
    7ea2:	4313      	orrs	r3, r2
    7ea4:	4642      	mov	r2, r8
    7ea6:	400a      	ands	r2, r1
    7ea8:	00d2      	lsls	r2, r2, #3
    7eaa:	4690      	mov	r8, r2
    7eac:	2208      	movs	r2, #8
    7eae:	4393      	bics	r3, r2
    7eb0:	4642      	mov	r2, r8
    7eb2:	4313      	orrs	r3, r2
    7eb4:	4662      	mov	r2, ip
    7eb6:	400a      	ands	r2, r1
    7eb8:	0112      	lsls	r2, r2, #4
    7eba:	4694      	mov	ip, r2
    7ebc:	2210      	movs	r2, #16
    7ebe:	4393      	bics	r3, r2
    7ec0:	4662      	mov	r2, ip
    7ec2:	4313      	orrs	r3, r2
    7ec4:	4008      	ands	r0, r1
    7ec6:	0140      	lsls	r0, r0, #5
    7ec8:	2220      	movs	r2, #32
    7eca:	4393      	bics	r3, r2
    7ecc:	4303      	orrs	r3, r0
    7ece:	400f      	ands	r7, r1
    7ed0:	01bf      	lsls	r7, r7, #6
    7ed2:	2040      	movs	r0, #64	; 0x40
    7ed4:	4383      	bics	r3, r0
    7ed6:	433b      	orrs	r3, r7
    7ed8:	400e      	ands	r6, r1
    7eda:	01f6      	lsls	r6, r6, #7
    7edc:	3040      	adds	r0, #64	; 0x40
    7ede:	4383      	bics	r3, r0
    7ee0:	4333      	orrs	r3, r6
    7ee2:	3879      	subs	r0, #121	; 0x79
    7ee4:	4005      	ands	r5, r0
    7ee6:	022d      	lsls	r5, r5, #8
    7ee8:	4809      	ldr	r0, [pc, #36]	; (7f10 <system_clock_source_xosc32k_set_config+0xb0>)
    7eea:	4003      	ands	r3, r0
    7eec:	432b      	orrs	r3, r5
    7eee:	4021      	ands	r1, r4
    7ef0:	0309      	lsls	r1, r1, #12
    7ef2:	4808      	ldr	r0, [pc, #32]	; (7f14 <system_clock_source_xosc32k_set_config+0xb4>)
    7ef4:	4003      	ands	r3, r0
    7ef6:	430b      	orrs	r3, r1
    7ef8:	465a      	mov	r2, fp
    7efa:	8293      	strh	r3, [r2, #20]
}
    7efc:	bc3c      	pop	{r2, r3, r4, r5}
    7efe:	4690      	mov	r8, r2
    7f00:	4699      	mov	r9, r3
    7f02:	46a2      	mov	sl, r4
    7f04:	46ab      	mov	fp, r5
    7f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f08:	40000800 	.word	0x40000800
    7f0c:	200000e4 	.word	0x200000e4
    7f10:	fffff8ff 	.word	0xfffff8ff
    7f14:	ffffefff 	.word	0xffffefff

00007f18 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    7f18:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    7f1a:	7a03      	ldrb	r3, [r0, #8]
    7f1c:	069b      	lsls	r3, r3, #26
    7f1e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    7f20:	8942      	ldrh	r2, [r0, #10]
    7f22:	0592      	lsls	r2, r2, #22
    7f24:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    7f26:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    7f28:	4918      	ldr	r1, [pc, #96]	; (7f8c <system_clock_source_dfll_set_config+0x74>)
    7f2a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    7f2c:	7983      	ldrb	r3, [r0, #6]
    7f2e:	79c2      	ldrb	r2, [r0, #7]
    7f30:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    7f32:	8842      	ldrh	r2, [r0, #2]
    7f34:	8884      	ldrh	r4, [r0, #4]
    7f36:	4322      	orrs	r2, r4
    7f38:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    7f3a:	7842      	ldrb	r2, [r0, #1]
    7f3c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    7f3e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    7f40:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    7f42:	7803      	ldrb	r3, [r0, #0]
    7f44:	2b04      	cmp	r3, #4
    7f46:	d011      	beq.n	7f6c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    7f48:	2b20      	cmp	r3, #32
    7f4a:	d10e      	bne.n	7f6a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    7f4c:	7b03      	ldrb	r3, [r0, #12]
    7f4e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    7f50:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    7f52:	4313      	orrs	r3, r2
    7f54:	89c2      	ldrh	r2, [r0, #14]
    7f56:	0412      	lsls	r2, r2, #16
    7f58:	490d      	ldr	r1, [pc, #52]	; (7f90 <system_clock_source_dfll_set_config+0x78>)
    7f5a:	400a      	ands	r2, r1
    7f5c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    7f5e:	4a0b      	ldr	r2, [pc, #44]	; (7f8c <system_clock_source_dfll_set_config+0x74>)
    7f60:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    7f62:	6811      	ldr	r1, [r2, #0]
    7f64:	4b0b      	ldr	r3, [pc, #44]	; (7f94 <system_clock_source_dfll_set_config+0x7c>)
    7f66:	430b      	orrs	r3, r1
    7f68:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    7f6a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    7f6c:	7b03      	ldrb	r3, [r0, #12]
    7f6e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    7f70:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    7f72:	4313      	orrs	r3, r2
    7f74:	89c2      	ldrh	r2, [r0, #14]
    7f76:	0412      	lsls	r2, r2, #16
    7f78:	4905      	ldr	r1, [pc, #20]	; (7f90 <system_clock_source_dfll_set_config+0x78>)
    7f7a:	400a      	ands	r2, r1
    7f7c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    7f7e:	4a03      	ldr	r2, [pc, #12]	; (7f8c <system_clock_source_dfll_set_config+0x74>)
    7f80:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    7f82:	6813      	ldr	r3, [r2, #0]
    7f84:	2104      	movs	r1, #4
    7f86:	430b      	orrs	r3, r1
    7f88:	6013      	str	r3, [r2, #0]
    7f8a:	e7ee      	b.n	7f6a <system_clock_source_dfll_set_config+0x52>
    7f8c:	200000e4 	.word	0x200000e4
    7f90:	03ff0000 	.word	0x03ff0000
    7f94:	00000424 	.word	0x00000424

00007f98 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    7f98:	2808      	cmp	r0, #8
    7f9a:	d803      	bhi.n	7fa4 <system_clock_source_enable+0xc>
    7f9c:	0080      	lsls	r0, r0, #2
    7f9e:	4b25      	ldr	r3, [pc, #148]	; (8034 <system_clock_source_enable+0x9c>)
    7fa0:	581b      	ldr	r3, [r3, r0]
    7fa2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7fa4:	2017      	movs	r0, #23
    7fa6:	e044      	b.n	8032 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    7fa8:	4a23      	ldr	r2, [pc, #140]	; (8038 <system_clock_source_enable+0xa0>)
    7faa:	6a13      	ldr	r3, [r2, #32]
    7fac:	2102      	movs	r1, #2
    7fae:	430b      	orrs	r3, r1
    7fb0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    7fb2:	2000      	movs	r0, #0
    7fb4:	e03d      	b.n	8032 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    7fb6:	4a20      	ldr	r2, [pc, #128]	; (8038 <system_clock_source_enable+0xa0>)
    7fb8:	6993      	ldr	r3, [r2, #24]
    7fba:	2102      	movs	r1, #2
    7fbc:	430b      	orrs	r3, r1
    7fbe:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    7fc0:	2000      	movs	r0, #0
		break;
    7fc2:	e036      	b.n	8032 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    7fc4:	4a1c      	ldr	r2, [pc, #112]	; (8038 <system_clock_source_enable+0xa0>)
    7fc6:	8a13      	ldrh	r3, [r2, #16]
    7fc8:	2102      	movs	r1, #2
    7fca:	430b      	orrs	r3, r1
    7fcc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    7fce:	2000      	movs	r0, #0
		break;
    7fd0:	e02f      	b.n	8032 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    7fd2:	4a19      	ldr	r2, [pc, #100]	; (8038 <system_clock_source_enable+0xa0>)
    7fd4:	8a93      	ldrh	r3, [r2, #20]
    7fd6:	2102      	movs	r1, #2
    7fd8:	430b      	orrs	r3, r1
    7fda:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    7fdc:	2000      	movs	r0, #0
		break;
    7fde:	e028      	b.n	8032 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    7fe0:	4916      	ldr	r1, [pc, #88]	; (803c <system_clock_source_enable+0xa4>)
    7fe2:	680b      	ldr	r3, [r1, #0]
    7fe4:	2202      	movs	r2, #2
    7fe6:	4313      	orrs	r3, r2
    7fe8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    7fea:	4b13      	ldr	r3, [pc, #76]	; (8038 <system_clock_source_enable+0xa0>)
    7fec:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7fee:	0019      	movs	r1, r3
    7ff0:	320e      	adds	r2, #14
    7ff2:	68cb      	ldr	r3, [r1, #12]
    7ff4:	421a      	tst	r2, r3
    7ff6:	d0fc      	beq.n	7ff2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    7ff8:	4a10      	ldr	r2, [pc, #64]	; (803c <system_clock_source_enable+0xa4>)
    7ffa:	6891      	ldr	r1, [r2, #8]
    7ffc:	4b0e      	ldr	r3, [pc, #56]	; (8038 <system_clock_source_enable+0xa0>)
    7ffe:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    8000:	6852      	ldr	r2, [r2, #4]
    8002:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    8004:	2200      	movs	r2, #0
    8006:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    8008:	0019      	movs	r1, r3
    800a:	3210      	adds	r2, #16
    800c:	68cb      	ldr	r3, [r1, #12]
    800e:	421a      	tst	r2, r3
    8010:	d0fc      	beq.n	800c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    8012:	4b0a      	ldr	r3, [pc, #40]	; (803c <system_clock_source_enable+0xa4>)
    8014:	681b      	ldr	r3, [r3, #0]
    8016:	b29b      	uxth	r3, r3
    8018:	4a07      	ldr	r2, [pc, #28]	; (8038 <system_clock_source_enable+0xa0>)
    801a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    801c:	2000      	movs	r0, #0
    801e:	e008      	b.n	8032 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    8020:	4905      	ldr	r1, [pc, #20]	; (8038 <system_clock_source_enable+0xa0>)
    8022:	2244      	movs	r2, #68	; 0x44
    8024:	5c8b      	ldrb	r3, [r1, r2]
    8026:	2002      	movs	r0, #2
    8028:	4303      	orrs	r3, r0
    802a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    802c:	2000      	movs	r0, #0
		break;
    802e:	e000      	b.n	8032 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    8030:	2000      	movs	r0, #0
}
    8032:	4770      	bx	lr
    8034:	00012054 	.word	0x00012054
    8038:	40000800 	.word	0x40000800
    803c:	200000e4 	.word	0x200000e4

00008040 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    8040:	b5f0      	push	{r4, r5, r6, r7, lr}
    8042:	46de      	mov	lr, fp
    8044:	4657      	mov	r7, sl
    8046:	464e      	mov	r6, r9
    8048:	4645      	mov	r5, r8
    804a:	b5e0      	push	{r5, r6, r7, lr}
    804c:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    804e:	22c2      	movs	r2, #194	; 0xc2
    8050:	00d2      	lsls	r2, r2, #3
    8052:	4b65      	ldr	r3, [pc, #404]	; (81e8 <system_clock_init+0x1a8>)
    8054:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    8056:	4a65      	ldr	r2, [pc, #404]	; (81ec <system_clock_init+0x1ac>)
    8058:	6853      	ldr	r3, [r2, #4]
    805a:	211e      	movs	r1, #30
    805c:	438b      	bics	r3, r1
    805e:	391a      	subs	r1, #26
    8060:	430b      	orrs	r3, r1
    8062:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    8064:	2203      	movs	r2, #3
    8066:	ab01      	add	r3, sp, #4
    8068:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    806a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    806c:	4d60      	ldr	r5, [pc, #384]	; (81f0 <system_clock_init+0x1b0>)
    806e:	b2e0      	uxtb	r0, r4
    8070:	a901      	add	r1, sp, #4
    8072:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8074:	3401      	adds	r4, #1
    8076:	2c25      	cmp	r4, #37	; 0x25
    8078:	d1f9      	bne.n	806e <system_clock_init+0x2e>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    807a:	a80c      	add	r0, sp, #48	; 0x30
    807c:	2300      	movs	r3, #0
    807e:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    8080:	2280      	movs	r2, #128	; 0x80
    8082:	0212      	lsls	r2, r2, #8
    8084:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    8086:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    8088:	2201      	movs	r2, #1
    808a:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    808c:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    808e:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    8090:	2106      	movs	r1, #6
    8092:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    8094:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    8096:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    8098:	4b56      	ldr	r3, [pc, #344]	; (81f4 <system_clock_init+0x1b4>)
    809a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    809c:	2005      	movs	r0, #5
    809e:	4b56      	ldr	r3, [pc, #344]	; (81f8 <system_clock_init+0x1b8>)
    80a0:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    80a2:	4951      	ldr	r1, [pc, #324]	; (81e8 <system_clock_init+0x1a8>)
    80a4:	2202      	movs	r2, #2
    80a6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    80a8:	421a      	tst	r2, r3
    80aa:	d0fc      	beq.n	80a6 <system_clock_init+0x66>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    80ac:	494e      	ldr	r1, [pc, #312]	; (81e8 <system_clock_init+0x1a8>)
    80ae:	8a8b      	ldrh	r3, [r1, #20]
    80b0:	2280      	movs	r2, #128	; 0x80
    80b2:	4313      	orrs	r3, r2
    80b4:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    80b6:	4c51      	ldr	r4, [pc, #324]	; (81fc <system_clock_init+0x1bc>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    80b8:	6823      	ldr	r3, [r4, #0]
    80ba:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    80bc:	698a      	ldr	r2, [r1, #24]
    80be:	0e5b      	lsrs	r3, r3, #25
    80c0:	041b      	lsls	r3, r3, #16
    80c2:	484f      	ldr	r0, [pc, #316]	; (8200 <system_clock_init+0x1c0>)
    80c4:	4002      	ands	r2, r0
    80c6:	4313      	orrs	r3, r2
    80c8:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    80ca:	a80a      	add	r0, sp, #40	; 0x28
    80cc:	2301      	movs	r3, #1
    80ce:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    80d0:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    80d2:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    80d4:	2207      	movs	r2, #7
    80d6:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    80d8:	2500      	movs	r5, #0
    80da:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    80dc:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    80de:	4b49      	ldr	r3, [pc, #292]	; (8204 <system_clock_init+0x1c4>)
    80e0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    80e2:	2004      	movs	r0, #4
    80e4:	4b44      	ldr	r3, [pc, #272]	; (81f8 <system_clock_init+0x1b8>)
    80e6:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    80e8:	ab05      	add	r3, sp, #20
    80ea:	2200      	movs	r2, #0
    80ec:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    80ee:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    80f0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    80f2:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    80f4:	213f      	movs	r1, #63	; 0x3f
    80f6:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    80f8:	393b      	subs	r1, #59	; 0x3b
    80fa:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    80fc:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    80fe:	6823      	ldr	r3, [r4, #0]
    8100:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    8102:	2b3f      	cmp	r3, #63	; 0x3f
    8104:	d06d      	beq.n	81e2 <system_clock_init+0x1a2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    8106:	a805      	add	r0, sp, #20
    8108:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    810a:	4b3f      	ldr	r3, [pc, #252]	; (8208 <system_clock_init+0x1c8>)
    810c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    810e:	2303      	movs	r3, #3
    8110:	4699      	mov	r9, r3
    8112:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    8114:	231f      	movs	r3, #31
    8116:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    8118:	4b3c      	ldr	r3, [pc, #240]	; (820c <system_clock_init+0x1cc>)
    811a:	4798      	blx	r3
	config->run_in_standby  = false;
    811c:	a804      	add	r0, sp, #16
    811e:	2500      	movs	r5, #0
    8120:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    8122:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    8124:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    8126:	4b3a      	ldr	r3, [pc, #232]	; (8210 <system_clock_init+0x1d0>)
    8128:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    812a:	2006      	movs	r0, #6
    812c:	4b32      	ldr	r3, [pc, #200]	; (81f8 <system_clock_init+0x1b8>)
    812e:	469a      	mov	sl, r3
    8130:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    8132:	4b38      	ldr	r3, [pc, #224]	; (8214 <system_clock_init+0x1d4>)
    8134:	4798      	blx	r3
	config->high_when_disabled = false;
    8136:	ac01      	add	r4, sp, #4
    8138:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    813a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    813c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    813e:	2305      	movs	r3, #5
    8140:	7023      	strb	r3, [r4, #0]
    8142:	331b      	adds	r3, #27
    8144:	4698      	mov	r8, r3
    8146:	6063      	str	r3, [r4, #4]
    8148:	0021      	movs	r1, r4
    814a:	2001      	movs	r0, #1
    814c:	4f32      	ldr	r7, [pc, #200]	; (8218 <system_clock_init+0x1d8>)
    814e:	47b8      	blx	r7
    8150:	2001      	movs	r0, #1
    8152:	4e32      	ldr	r6, [pc, #200]	; (821c <system_clock_init+0x1dc>)
    8154:	47b0      	blx	r6
	config->high_when_disabled = false;
    8156:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    8158:	7265      	strb	r5, [r4, #9]
    815a:	2304      	movs	r3, #4
    815c:	7023      	strb	r3, [r4, #0]
    815e:	4643      	mov	r3, r8
    8160:	6063      	str	r3, [r4, #4]
    8162:	3b1f      	subs	r3, #31
    8164:	469b      	mov	fp, r3
    8166:	7223      	strb	r3, [r4, #8]
    8168:	0021      	movs	r1, r4
    816a:	2002      	movs	r0, #2
    816c:	47b8      	blx	r7
    816e:	2002      	movs	r0, #2
    8170:	47b0      	blx	r6
	config->high_when_disabled = false;
    8172:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    8174:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    8176:	7265      	strb	r5, [r4, #9]
    8178:	464b      	mov	r3, r9
    817a:	7023      	strb	r3, [r4, #0]
    817c:	4643      	mov	r3, r8
    817e:	6063      	str	r3, [r4, #4]
    8180:	0021      	movs	r1, r4
    8182:	2004      	movs	r0, #4
    8184:	47b8      	blx	r7
    8186:	2004      	movs	r0, #4
    8188:	47b0      	blx	r6
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    818a:	465b      	mov	r3, fp
    818c:	7023      	strb	r3, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    818e:	0021      	movs	r1, r4
    8190:	2000      	movs	r0, #0
    8192:	4b17      	ldr	r3, [pc, #92]	; (81f0 <system_clock_init+0x1b0>)
    8194:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    8196:	2000      	movs	r0, #0
    8198:	4b21      	ldr	r3, [pc, #132]	; (8220 <system_clock_init+0x1e0>)
    819a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    819c:	2007      	movs	r0, #7
    819e:	47d0      	blx	sl
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    81a0:	4911      	ldr	r1, [pc, #68]	; (81e8 <system_clock_init+0x1a8>)
    81a2:	22d0      	movs	r2, #208	; 0xd0
    81a4:	68cb      	ldr	r3, [r1, #12]
    81a6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    81a8:	2bd0      	cmp	r3, #208	; 0xd0
    81aa:	d1fb      	bne.n	81a4 <system_clock_init+0x164>
	PM->CPUSEL.reg = (uint32_t)divider;
    81ac:	4a1d      	ldr	r2, [pc, #116]	; (8224 <system_clock_init+0x1e4>)
    81ae:	2300      	movs	r3, #0
    81b0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    81b2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    81b4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    81b6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    81b8:	a901      	add	r1, sp, #4
    81ba:	2201      	movs	r2, #1
    81bc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    81be:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    81c0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    81c2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    81c4:	3307      	adds	r3, #7
    81c6:	700b      	strb	r3, [r1, #0]
    81c8:	2000      	movs	r0, #0
    81ca:	4b13      	ldr	r3, [pc, #76]	; (8218 <system_clock_init+0x1d8>)
    81cc:	4798      	blx	r3
    81ce:	2000      	movs	r0, #0
    81d0:	4b12      	ldr	r3, [pc, #72]	; (821c <system_clock_init+0x1dc>)
    81d2:	4798      	blx	r3
#endif
}
    81d4:	b011      	add	sp, #68	; 0x44
    81d6:	bc3c      	pop	{r2, r3, r4, r5}
    81d8:	4690      	mov	r8, r2
    81da:	4699      	mov	r9, r3
    81dc:	46a2      	mov	sl, r4
    81de:	46ab      	mov	fp, r5
    81e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    81e2:	3b20      	subs	r3, #32
    81e4:	e78f      	b.n	8106 <system_clock_init+0xc6>
    81e6:	46c0      	nop			; (mov r8, r8)
    81e8:	40000800 	.word	0x40000800
    81ec:	41004000 	.word	0x41004000
    81f0:	00008461 	.word	0x00008461
    81f4:	00007e61 	.word	0x00007e61
    81f8:	00007f99 	.word	0x00007f99
    81fc:	00806024 	.word	0x00806024
    8200:	ff80ffff 	.word	0xff80ffff
    8204:	00007de5 	.word	0x00007de5
    8208:	ffffb71b 	.word	0xffffb71b
    820c:	00007f19 	.word	0x00007f19
    8210:	00007da9 	.word	0x00007da9
    8214:	00008229 	.word	0x00008229
    8218:	0000824d 	.word	0x0000824d
    821c:	00008305 	.word	0x00008305
    8220:	000083d5 	.word	0x000083d5
    8224:	40000400 	.word	0x40000400

00008228 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    8228:	4a06      	ldr	r2, [pc, #24]	; (8244 <system_gclk_init+0x1c>)
    822a:	6993      	ldr	r3, [r2, #24]
    822c:	2108      	movs	r1, #8
    822e:	430b      	orrs	r3, r1
    8230:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    8232:	2201      	movs	r2, #1
    8234:	4b04      	ldr	r3, [pc, #16]	; (8248 <system_gclk_init+0x20>)
    8236:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8238:	0019      	movs	r1, r3
    823a:	780b      	ldrb	r3, [r1, #0]
    823c:	4213      	tst	r3, r2
    823e:	d1fc      	bne.n	823a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    8240:	4770      	bx	lr
    8242:	46c0      	nop			; (mov r8, r8)
    8244:	40000400 	.word	0x40000400
    8248:	40000c00 	.word	0x40000c00

0000824c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    824c:	b570      	push	{r4, r5, r6, lr}
    824e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    8250:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    8252:	780d      	ldrb	r5, [r1, #0]
    8254:	022d      	lsls	r5, r5, #8
    8256:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    8258:	784b      	ldrb	r3, [r1, #1]
    825a:	2b00      	cmp	r3, #0
    825c:	d002      	beq.n	8264 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    825e:	2380      	movs	r3, #128	; 0x80
    8260:	02db      	lsls	r3, r3, #11
    8262:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    8264:	7a4b      	ldrb	r3, [r1, #9]
    8266:	2b00      	cmp	r3, #0
    8268:	d002      	beq.n	8270 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    826a:	2380      	movs	r3, #128	; 0x80
    826c:	031b      	lsls	r3, r3, #12
    826e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    8270:	6848      	ldr	r0, [r1, #4]
    8272:	2801      	cmp	r0, #1
    8274:	d910      	bls.n	8298 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    8276:	1e43      	subs	r3, r0, #1
    8278:	4218      	tst	r0, r3
    827a:	d134      	bne.n	82e6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    827c:	2802      	cmp	r0, #2
    827e:	d930      	bls.n	82e2 <system_gclk_gen_set_config+0x96>
    8280:	2302      	movs	r3, #2
    8282:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    8284:	3201      	adds	r2, #1
						mask <<= 1) {
    8286:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    8288:	4298      	cmp	r0, r3
    828a:	d8fb      	bhi.n	8284 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    828c:	0212      	lsls	r2, r2, #8
    828e:	4332      	orrs	r2, r6
    8290:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    8292:	2380      	movs	r3, #128	; 0x80
    8294:	035b      	lsls	r3, r3, #13
    8296:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8298:	7a0b      	ldrb	r3, [r1, #8]
    829a:	2b00      	cmp	r3, #0
    829c:	d002      	beq.n	82a4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    829e:	2380      	movs	r3, #128	; 0x80
    82a0:	039b      	lsls	r3, r3, #14
    82a2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    82a4:	4a13      	ldr	r2, [pc, #76]	; (82f4 <system_gclk_gen_set_config+0xa8>)
    82a6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    82a8:	b25b      	sxtb	r3, r3
    82aa:	2b00      	cmp	r3, #0
    82ac:	dbfb      	blt.n	82a6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    82ae:	4b12      	ldr	r3, [pc, #72]	; (82f8 <system_gclk_gen_set_config+0xac>)
    82b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    82b2:	4b12      	ldr	r3, [pc, #72]	; (82fc <system_gclk_gen_set_config+0xb0>)
    82b4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    82b6:	4a0f      	ldr	r2, [pc, #60]	; (82f4 <system_gclk_gen_set_config+0xa8>)
    82b8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    82ba:	b25b      	sxtb	r3, r3
    82bc:	2b00      	cmp	r3, #0
    82be:	dbfb      	blt.n	82b8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    82c0:	4b0c      	ldr	r3, [pc, #48]	; (82f4 <system_gclk_gen_set_config+0xa8>)
    82c2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    82c4:	001a      	movs	r2, r3
    82c6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    82c8:	b25b      	sxtb	r3, r3
    82ca:	2b00      	cmp	r3, #0
    82cc:	dbfb      	blt.n	82c6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    82ce:	4a09      	ldr	r2, [pc, #36]	; (82f4 <system_gclk_gen_set_config+0xa8>)
    82d0:	6853      	ldr	r3, [r2, #4]
    82d2:	2180      	movs	r1, #128	; 0x80
    82d4:	0249      	lsls	r1, r1, #9
    82d6:	400b      	ands	r3, r1
    82d8:	431d      	orrs	r5, r3
    82da:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    82dc:	4b08      	ldr	r3, [pc, #32]	; (8300 <system_gclk_gen_set_config+0xb4>)
    82de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    82e0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    82e2:	2200      	movs	r2, #0
    82e4:	e7d2      	b.n	828c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    82e6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    82e8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    82ea:	2380      	movs	r3, #128	; 0x80
    82ec:	029b      	lsls	r3, r3, #10
    82ee:	431d      	orrs	r5, r3
    82f0:	e7d2      	b.n	8298 <system_gclk_gen_set_config+0x4c>
    82f2:	46c0      	nop			; (mov r8, r8)
    82f4:	40000c00 	.word	0x40000c00
    82f8:	00006271 	.word	0x00006271
    82fc:	40000c08 	.word	0x40000c08
    8300:	000062b1 	.word	0x000062b1

00008304 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    8304:	b510      	push	{r4, lr}
    8306:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8308:	4a0b      	ldr	r2, [pc, #44]	; (8338 <system_gclk_gen_enable+0x34>)
    830a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    830c:	b25b      	sxtb	r3, r3
    830e:	2b00      	cmp	r3, #0
    8310:	dbfb      	blt.n	830a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    8312:	4b0a      	ldr	r3, [pc, #40]	; (833c <system_gclk_gen_enable+0x38>)
    8314:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8316:	4b0a      	ldr	r3, [pc, #40]	; (8340 <system_gclk_gen_enable+0x3c>)
    8318:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    831a:	4a07      	ldr	r2, [pc, #28]	; (8338 <system_gclk_gen_enable+0x34>)
    831c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    831e:	b25b      	sxtb	r3, r3
    8320:	2b00      	cmp	r3, #0
    8322:	dbfb      	blt.n	831c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    8324:	4a04      	ldr	r2, [pc, #16]	; (8338 <system_gclk_gen_enable+0x34>)
    8326:	6851      	ldr	r1, [r2, #4]
    8328:	2380      	movs	r3, #128	; 0x80
    832a:	025b      	lsls	r3, r3, #9
    832c:	430b      	orrs	r3, r1
    832e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    8330:	4b04      	ldr	r3, [pc, #16]	; (8344 <system_gclk_gen_enable+0x40>)
    8332:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8334:	bd10      	pop	{r4, pc}
    8336:	46c0      	nop			; (mov r8, r8)
    8338:	40000c00 	.word	0x40000c00
    833c:	00006271 	.word	0x00006271
    8340:	40000c04 	.word	0x40000c04
    8344:	000062b1 	.word	0x000062b1

00008348 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8348:	b570      	push	{r4, r5, r6, lr}
    834a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    834c:	4a1a      	ldr	r2, [pc, #104]	; (83b8 <system_gclk_gen_get_hz+0x70>)
    834e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8350:	b25b      	sxtb	r3, r3
    8352:	2b00      	cmp	r3, #0
    8354:	dbfb      	blt.n	834e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    8356:	4b19      	ldr	r3, [pc, #100]	; (83bc <system_gclk_gen_get_hz+0x74>)
    8358:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    835a:	4b19      	ldr	r3, [pc, #100]	; (83c0 <system_gclk_gen_get_hz+0x78>)
    835c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    835e:	4a16      	ldr	r2, [pc, #88]	; (83b8 <system_gclk_gen_get_hz+0x70>)
    8360:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8362:	b25b      	sxtb	r3, r3
    8364:	2b00      	cmp	r3, #0
    8366:	dbfb      	blt.n	8360 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    8368:	4e13      	ldr	r6, [pc, #76]	; (83b8 <system_gclk_gen_get_hz+0x70>)
    836a:	6870      	ldr	r0, [r6, #4]
    836c:	04c0      	lsls	r0, r0, #19
    836e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    8370:	4b14      	ldr	r3, [pc, #80]	; (83c4 <system_gclk_gen_get_hz+0x7c>)
    8372:	4798      	blx	r3
    8374:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8376:	4b12      	ldr	r3, [pc, #72]	; (83c0 <system_gclk_gen_get_hz+0x78>)
    8378:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    837a:	6876      	ldr	r6, [r6, #4]
    837c:	02f6      	lsls	r6, r6, #11
    837e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8380:	4b11      	ldr	r3, [pc, #68]	; (83c8 <system_gclk_gen_get_hz+0x80>)
    8382:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8384:	4a0c      	ldr	r2, [pc, #48]	; (83b8 <system_gclk_gen_get_hz+0x70>)
    8386:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8388:	b25b      	sxtb	r3, r3
    838a:	2b00      	cmp	r3, #0
    838c:	dbfb      	blt.n	8386 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    838e:	4b0a      	ldr	r3, [pc, #40]	; (83b8 <system_gclk_gen_get_hz+0x70>)
    8390:	689c      	ldr	r4, [r3, #8]
    8392:	0224      	lsls	r4, r4, #8
    8394:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    8396:	4b0d      	ldr	r3, [pc, #52]	; (83cc <system_gclk_gen_get_hz+0x84>)
    8398:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    839a:	2e00      	cmp	r6, #0
    839c:	d107      	bne.n	83ae <system_gclk_gen_get_hz+0x66>
    839e:	2c01      	cmp	r4, #1
    83a0:	d907      	bls.n	83b2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    83a2:	0021      	movs	r1, r4
    83a4:	0028      	movs	r0, r5
    83a6:	4b0a      	ldr	r3, [pc, #40]	; (83d0 <system_gclk_gen_get_hz+0x88>)
    83a8:	4798      	blx	r3
    83aa:	0005      	movs	r5, r0
    83ac:	e001      	b.n	83b2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    83ae:	3401      	adds	r4, #1
    83b0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    83b2:	0028      	movs	r0, r5
    83b4:	bd70      	pop	{r4, r5, r6, pc}
    83b6:	46c0      	nop			; (mov r8, r8)
    83b8:	40000c00 	.word	0x40000c00
    83bc:	00006271 	.word	0x00006271
    83c0:	40000c04 	.word	0x40000c04
    83c4:	00007d15 	.word	0x00007d15
    83c8:	40000c08 	.word	0x40000c08
    83cc:	000062b1 	.word	0x000062b1
    83d0:	0000e439 	.word	0x0000e439

000083d4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    83d4:	b510      	push	{r4, lr}
    83d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    83d8:	4b06      	ldr	r3, [pc, #24]	; (83f4 <system_gclk_chan_enable+0x20>)
    83da:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    83dc:	4b06      	ldr	r3, [pc, #24]	; (83f8 <system_gclk_chan_enable+0x24>)
    83de:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    83e0:	4a06      	ldr	r2, [pc, #24]	; (83fc <system_gclk_chan_enable+0x28>)
    83e2:	8853      	ldrh	r3, [r2, #2]
    83e4:	2180      	movs	r1, #128	; 0x80
    83e6:	01c9      	lsls	r1, r1, #7
    83e8:	430b      	orrs	r3, r1
    83ea:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    83ec:	4b04      	ldr	r3, [pc, #16]	; (8400 <system_gclk_chan_enable+0x2c>)
    83ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    83f0:	bd10      	pop	{r4, pc}
    83f2:	46c0      	nop			; (mov r8, r8)
    83f4:	00006271 	.word	0x00006271
    83f8:	40000c02 	.word	0x40000c02
    83fc:	40000c00 	.word	0x40000c00
    8400:	000062b1 	.word	0x000062b1

00008404 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8404:	b510      	push	{r4, lr}
    8406:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8408:	4b0f      	ldr	r3, [pc, #60]	; (8448 <system_gclk_chan_disable+0x44>)
    840a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    840c:	4b0f      	ldr	r3, [pc, #60]	; (844c <system_gclk_chan_disable+0x48>)
    840e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8410:	4a0f      	ldr	r2, [pc, #60]	; (8450 <system_gclk_chan_disable+0x4c>)
    8412:	8853      	ldrh	r3, [r2, #2]
    8414:	051b      	lsls	r3, r3, #20
    8416:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    8418:	8853      	ldrh	r3, [r2, #2]
    841a:	490e      	ldr	r1, [pc, #56]	; (8454 <system_gclk_chan_disable+0x50>)
    841c:	400b      	ands	r3, r1
    841e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8420:	8853      	ldrh	r3, [r2, #2]
    8422:	490d      	ldr	r1, [pc, #52]	; (8458 <system_gclk_chan_disable+0x54>)
    8424:	400b      	ands	r3, r1
    8426:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8428:	0011      	movs	r1, r2
    842a:	2280      	movs	r2, #128	; 0x80
    842c:	01d2      	lsls	r2, r2, #7
    842e:	884b      	ldrh	r3, [r1, #2]
    8430:	4213      	tst	r3, r2
    8432:	d1fc      	bne.n	842e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8434:	4906      	ldr	r1, [pc, #24]	; (8450 <system_gclk_chan_disable+0x4c>)
    8436:	884a      	ldrh	r2, [r1, #2]
    8438:	0203      	lsls	r3, r0, #8
    843a:	4806      	ldr	r0, [pc, #24]	; (8454 <system_gclk_chan_disable+0x50>)
    843c:	4002      	ands	r2, r0
    843e:	4313      	orrs	r3, r2
    8440:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    8442:	4b06      	ldr	r3, [pc, #24]	; (845c <system_gclk_chan_disable+0x58>)
    8444:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8446:	bd10      	pop	{r4, pc}
    8448:	00006271 	.word	0x00006271
    844c:	40000c02 	.word	0x40000c02
    8450:	40000c00 	.word	0x40000c00
    8454:	fffff0ff 	.word	0xfffff0ff
    8458:	ffffbfff 	.word	0xffffbfff
    845c:	000062b1 	.word	0x000062b1

00008460 <system_gclk_chan_set_config>:
{
    8460:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8462:	780c      	ldrb	r4, [r1, #0]
    8464:	0224      	lsls	r4, r4, #8
    8466:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    8468:	4b02      	ldr	r3, [pc, #8]	; (8474 <system_gclk_chan_set_config+0x14>)
    846a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    846c:	b2a4      	uxth	r4, r4
    846e:	4b02      	ldr	r3, [pc, #8]	; (8478 <system_gclk_chan_set_config+0x18>)
    8470:	805c      	strh	r4, [r3, #2]
}
    8472:	bd10      	pop	{r4, pc}
    8474:	00008405 	.word	0x00008405
    8478:	40000c00 	.word	0x40000c00

0000847c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    847c:	b510      	push	{r4, lr}
    847e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8480:	4b06      	ldr	r3, [pc, #24]	; (849c <system_gclk_chan_get_hz+0x20>)
    8482:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8484:	4b06      	ldr	r3, [pc, #24]	; (84a0 <system_gclk_chan_get_hz+0x24>)
    8486:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8488:	4b06      	ldr	r3, [pc, #24]	; (84a4 <system_gclk_chan_get_hz+0x28>)
    848a:	885c      	ldrh	r4, [r3, #2]
    848c:	0524      	lsls	r4, r4, #20
    848e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8490:	4b05      	ldr	r3, [pc, #20]	; (84a8 <system_gclk_chan_get_hz+0x2c>)
    8492:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8494:	0020      	movs	r0, r4
    8496:	4b05      	ldr	r3, [pc, #20]	; (84ac <system_gclk_chan_get_hz+0x30>)
    8498:	4798      	blx	r3
}
    849a:	bd10      	pop	{r4, pc}
    849c:	00006271 	.word	0x00006271
    84a0:	40000c02 	.word	0x40000c02
    84a4:	40000c00 	.word	0x40000c00
    84a8:	000062b1 	.word	0x000062b1
    84ac:	00008349 	.word	0x00008349

000084b0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    84b0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    84b2:	78d3      	ldrb	r3, [r2, #3]
    84b4:	2b00      	cmp	r3, #0
    84b6:	d135      	bne.n	8524 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    84b8:	7813      	ldrb	r3, [r2, #0]
    84ba:	2b80      	cmp	r3, #128	; 0x80
    84bc:	d029      	beq.n	8512 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    84be:	061b      	lsls	r3, r3, #24
    84c0:	2480      	movs	r4, #128	; 0x80
    84c2:	0264      	lsls	r4, r4, #9
    84c4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    84c6:	7854      	ldrb	r4, [r2, #1]
    84c8:	2502      	movs	r5, #2
    84ca:	43ac      	bics	r4, r5
    84cc:	d106      	bne.n	84dc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    84ce:	7894      	ldrb	r4, [r2, #2]
    84d0:	2c00      	cmp	r4, #0
    84d2:	d120      	bne.n	8516 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    84d4:	2480      	movs	r4, #128	; 0x80
    84d6:	02a4      	lsls	r4, r4, #10
    84d8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    84da:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    84dc:	7854      	ldrb	r4, [r2, #1]
    84de:	3c01      	subs	r4, #1
    84e0:	2c01      	cmp	r4, #1
    84e2:	d91c      	bls.n	851e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    84e4:	040d      	lsls	r5, r1, #16
    84e6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    84e8:	24a0      	movs	r4, #160	; 0xa0
    84ea:	05e4      	lsls	r4, r4, #23
    84ec:	432c      	orrs	r4, r5
    84ee:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    84f0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    84f2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    84f4:	24d0      	movs	r4, #208	; 0xd0
    84f6:	0624      	lsls	r4, r4, #24
    84f8:	432c      	orrs	r4, r5
    84fa:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    84fc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    84fe:	78d4      	ldrb	r4, [r2, #3]
    8500:	2c00      	cmp	r4, #0
    8502:	d122      	bne.n	854a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8504:	035b      	lsls	r3, r3, #13
    8506:	d51c      	bpl.n	8542 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    8508:	7893      	ldrb	r3, [r2, #2]
    850a:	2b01      	cmp	r3, #1
    850c:	d01e      	beq.n	854c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    850e:	6141      	str	r1, [r0, #20]
    8510:	e017      	b.n	8542 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    8512:	2300      	movs	r3, #0
    8514:	e7d7      	b.n	84c6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8516:	24c0      	movs	r4, #192	; 0xc0
    8518:	02e4      	lsls	r4, r4, #11
    851a:	4323      	orrs	r3, r4
    851c:	e7dd      	b.n	84da <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    851e:	4c0d      	ldr	r4, [pc, #52]	; (8554 <_system_pinmux_config+0xa4>)
    8520:	4023      	ands	r3, r4
    8522:	e7df      	b.n	84e4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    8524:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8526:	040c      	lsls	r4, r1, #16
    8528:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    852a:	23a0      	movs	r3, #160	; 0xa0
    852c:	05db      	lsls	r3, r3, #23
    852e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8530:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8532:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8534:	23d0      	movs	r3, #208	; 0xd0
    8536:	061b      	lsls	r3, r3, #24
    8538:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    853a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    853c:	78d3      	ldrb	r3, [r2, #3]
    853e:	2b00      	cmp	r3, #0
    8540:	d103      	bne.n	854a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8542:	7853      	ldrb	r3, [r2, #1]
    8544:	3b01      	subs	r3, #1
    8546:	2b01      	cmp	r3, #1
    8548:	d902      	bls.n	8550 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    854a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    854c:	6181      	str	r1, [r0, #24]
    854e:	e7f8      	b.n	8542 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    8550:	6081      	str	r1, [r0, #8]
}
    8552:	e7fa      	b.n	854a <_system_pinmux_config+0x9a>
    8554:	fffbffff 	.word	0xfffbffff

00008558 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8558:	b510      	push	{r4, lr}
    855a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    855c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    855e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8560:	2900      	cmp	r1, #0
    8562:	d104      	bne.n	856e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    8564:	0943      	lsrs	r3, r0, #5
    8566:	01db      	lsls	r3, r3, #7
    8568:	4905      	ldr	r1, [pc, #20]	; (8580 <system_pinmux_pin_set_config+0x28>)
    856a:	468c      	mov	ip, r1
    856c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    856e:	241f      	movs	r4, #31
    8570:	4020      	ands	r0, r4
    8572:	2101      	movs	r1, #1
    8574:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    8576:	0018      	movs	r0, r3
    8578:	4b02      	ldr	r3, [pc, #8]	; (8584 <system_pinmux_pin_set_config+0x2c>)
    857a:	4798      	blx	r3
}
    857c:	bd10      	pop	{r4, pc}
    857e:	46c0      	nop			; (mov r8, r8)
    8580:	41004400 	.word	0x41004400
    8584:	000084b1 	.word	0x000084b1

00008588 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    8588:	4770      	bx	lr
    858a:	Address 0x0000858a is out of bounds.


0000858c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    858c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    858e:	4b05      	ldr	r3, [pc, #20]	; (85a4 <system_init+0x18>)
    8590:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8592:	4b05      	ldr	r3, [pc, #20]	; (85a8 <system_init+0x1c>)
    8594:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8596:	4b05      	ldr	r3, [pc, #20]	; (85ac <system_init+0x20>)
    8598:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    859a:	4b05      	ldr	r3, [pc, #20]	; (85b0 <system_init+0x24>)
    859c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    859e:	4b05      	ldr	r3, [pc, #20]	; (85b4 <system_init+0x28>)
    85a0:	4798      	blx	r3
}
    85a2:	bd10      	pop	{r4, pc}
    85a4:	00008041 	.word	0x00008041
    85a8:	000062e1 	.word	0x000062e1
    85ac:	00008589 	.word	0x00008589
    85b0:	0000648d 	.word	0x0000648d
    85b4:	00008589 	.word	0x00008589

000085b8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    85b8:	1c93      	adds	r3, r2, #2
    85ba:	009b      	lsls	r3, r3, #2
    85bc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    85be:	2a02      	cmp	r2, #2
    85c0:	d009      	beq.n	85d6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    85c2:	2a03      	cmp	r2, #3
    85c4:	d00c      	beq.n	85e0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    85c6:	2301      	movs	r3, #1
    85c8:	4093      	lsls	r3, r2
    85ca:	001a      	movs	r2, r3
    85cc:	7e03      	ldrb	r3, [r0, #24]
    85ce:	4313      	orrs	r3, r2
    85d0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    85d2:	2000      	movs	r0, #0
    85d4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    85d6:	7e03      	ldrb	r3, [r0, #24]
    85d8:	2210      	movs	r2, #16
    85da:	4313      	orrs	r3, r2
    85dc:	7603      	strb	r3, [r0, #24]
    85de:	e7f8      	b.n	85d2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    85e0:	7e03      	ldrb	r3, [r0, #24]
    85e2:	2220      	movs	r2, #32
    85e4:	4313      	orrs	r3, r2
    85e6:	7603      	strb	r3, [r0, #24]
    85e8:	e7f3      	b.n	85d2 <tc_register_callback+0x1a>
    85ea:	Address 0x000085ea is out of bounds.


000085ec <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    85ec:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    85ee:	0080      	lsls	r0, r0, #2
    85f0:	4b16      	ldr	r3, [pc, #88]	; (864c <_tc_interrupt_handler+0x60>)
    85f2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    85f4:	6823      	ldr	r3, [r4, #0]
    85f6:	7b9d      	ldrb	r5, [r3, #14]
    85f8:	7e22      	ldrb	r2, [r4, #24]
    85fa:	7e63      	ldrb	r3, [r4, #25]
    85fc:	4013      	ands	r3, r2
    85fe:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    8600:	07eb      	lsls	r3, r5, #31
    8602:	d406      	bmi.n	8612 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    8604:	07ab      	lsls	r3, r5, #30
    8606:	d40b      	bmi.n	8620 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    8608:	06eb      	lsls	r3, r5, #27
    860a:	d410      	bmi.n	862e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    860c:	06ab      	lsls	r3, r5, #26
    860e:	d415      	bmi.n	863c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    8610:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    8612:	0020      	movs	r0, r4
    8614:	68a3      	ldr	r3, [r4, #8]
    8616:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    8618:	2301      	movs	r3, #1
    861a:	6822      	ldr	r2, [r4, #0]
    861c:	7393      	strb	r3, [r2, #14]
    861e:	e7f1      	b.n	8604 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    8620:	0020      	movs	r0, r4
    8622:	68e3      	ldr	r3, [r4, #12]
    8624:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    8626:	2302      	movs	r3, #2
    8628:	6822      	ldr	r2, [r4, #0]
    862a:	7393      	strb	r3, [r2, #14]
    862c:	e7ec      	b.n	8608 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    862e:	0020      	movs	r0, r4
    8630:	6923      	ldr	r3, [r4, #16]
    8632:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    8634:	2310      	movs	r3, #16
    8636:	6822      	ldr	r2, [r4, #0]
    8638:	7393      	strb	r3, [r2, #14]
    863a:	e7e7      	b.n	860c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    863c:	0020      	movs	r0, r4
    863e:	6963      	ldr	r3, [r4, #20]
    8640:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    8642:	6823      	ldr	r3, [r4, #0]
    8644:	2220      	movs	r2, #32
    8646:	739a      	strb	r2, [r3, #14]
}
    8648:	e7e2      	b.n	8610 <_tc_interrupt_handler+0x24>
    864a:	46c0      	nop			; (mov r8, r8)
    864c:	20001ce0 	.word	0x20001ce0

00008650 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    8650:	b510      	push	{r4, lr}
    8652:	2000      	movs	r0, #0
    8654:	4b01      	ldr	r3, [pc, #4]	; (865c <TC3_Handler+0xc>)
    8656:	4798      	blx	r3
    8658:	bd10      	pop	{r4, pc}
    865a:	46c0      	nop			; (mov r8, r8)
    865c:	000085ed 	.word	0x000085ed

00008660 <TC4_Handler>:
    8660:	b510      	push	{r4, lr}
    8662:	2001      	movs	r0, #1
    8664:	4b01      	ldr	r3, [pc, #4]	; (866c <TC4_Handler+0xc>)
    8666:	4798      	blx	r3
    8668:	bd10      	pop	{r4, pc}
    866a:	46c0      	nop			; (mov r8, r8)
    866c:	000085ed 	.word	0x000085ed

00008670 <TC5_Handler>:
    8670:	b510      	push	{r4, lr}
    8672:	2002      	movs	r0, #2
    8674:	4b01      	ldr	r3, [pc, #4]	; (867c <TC5_Handler+0xc>)
    8676:	4798      	blx	r3
    8678:	bd10      	pop	{r4, pc}
    867a:	46c0      	nop			; (mov r8, r8)
    867c:	000085ed 	.word	0x000085ed

00008680 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    8680:	b530      	push	{r4, r5, lr}
    8682:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8684:	aa01      	add	r2, sp, #4
    8686:	4b0b      	ldr	r3, [pc, #44]	; (86b4 <_tc_get_inst_index+0x34>)
    8688:	cb32      	ldmia	r3!, {r1, r4, r5}
    868a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    868c:	9b01      	ldr	r3, [sp, #4]
    868e:	4298      	cmp	r0, r3
    8690:	d00d      	beq.n	86ae <_tc_get_inst_index+0x2e>
    8692:	9b02      	ldr	r3, [sp, #8]
    8694:	4298      	cmp	r0, r3
    8696:	d008      	beq.n	86aa <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    8698:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    869a:	9a03      	ldr	r2, [sp, #12]
    869c:	4282      	cmp	r2, r0
    869e:	d002      	beq.n	86a6 <_tc_get_inst_index+0x26>
}
    86a0:	0018      	movs	r0, r3
    86a2:	b005      	add	sp, #20
    86a4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    86a6:	3302      	adds	r3, #2
    86a8:	e002      	b.n	86b0 <_tc_get_inst_index+0x30>
    86aa:	2301      	movs	r3, #1
    86ac:	e000      	b.n	86b0 <_tc_get_inst_index+0x30>
    86ae:	2300      	movs	r3, #0
			return i;
    86b0:	b2db      	uxtb	r3, r3
    86b2:	e7f5      	b.n	86a0 <_tc_get_inst_index+0x20>
    86b4:	00012078 	.word	0x00012078

000086b8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    86b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    86ba:	b087      	sub	sp, #28
    86bc:	0004      	movs	r4, r0
    86be:	000d      	movs	r5, r1
    86c0:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    86c2:	0008      	movs	r0, r1
    86c4:	4b85      	ldr	r3, [pc, #532]	; (88dc <tc_init+0x224>)
    86c6:	4798      	blx	r3
    86c8:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    86ca:	ab05      	add	r3, sp, #20
    86cc:	221b      	movs	r2, #27
    86ce:	701a      	strb	r2, [r3, #0]
    86d0:	3201      	adds	r2, #1
    86d2:	705a      	strb	r2, [r3, #1]
    86d4:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    86d6:	ab03      	add	r3, sp, #12
    86d8:	2280      	movs	r2, #128	; 0x80
    86da:	0112      	lsls	r2, r2, #4
    86dc:	801a      	strh	r2, [r3, #0]
    86de:	2280      	movs	r2, #128	; 0x80
    86e0:	0152      	lsls	r2, r2, #5
    86e2:	805a      	strh	r2, [r3, #2]
    86e4:	2280      	movs	r2, #128	; 0x80
    86e6:	0192      	lsls	r2, r2, #6
    86e8:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    86ea:	2300      	movs	r3, #0
    86ec:	60a3      	str	r3, [r4, #8]
    86ee:	60e3      	str	r3, [r4, #12]
    86f0:	6123      	str	r3, [r4, #16]
    86f2:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    86f4:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    86f6:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    86f8:	0082      	lsls	r2, r0, #2
    86fa:	4b79      	ldr	r3, [pc, #484]	; (88e0 <tc_init+0x228>)
    86fc:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    86fe:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    8700:	78b3      	ldrb	r3, [r6, #2]
    8702:	2b08      	cmp	r3, #8
    8704:	d006      	beq.n	8714 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    8706:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    8708:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    870a:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    870c:	07db      	lsls	r3, r3, #31
    870e:	d505      	bpl.n	871c <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    8710:	b007      	add	sp, #28
    8712:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    8714:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    8716:	07fa      	lsls	r2, r7, #31
    8718:	d5fa      	bpl.n	8710 <tc_init+0x58>
    871a:	e7f4      	b.n	8706 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    871c:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    871e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    8720:	06db      	lsls	r3, r3, #27
    8722:	d4f5      	bmi.n	8710 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    8724:	882b      	ldrh	r3, [r5, #0]
    8726:	079b      	lsls	r3, r3, #30
    8728:	d4f2      	bmi.n	8710 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    872a:	7c33      	ldrb	r3, [r6, #16]
    872c:	2b00      	cmp	r3, #0
    872e:	d179      	bne.n	8824 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    8730:	7f33      	ldrb	r3, [r6, #28]
    8732:	2b00      	cmp	r3, #0
    8734:	d000      	beq.n	8738 <tc_init+0x80>
    8736:	e081      	b.n	883c <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    8738:	496a      	ldr	r1, [pc, #424]	; (88e4 <tc_init+0x22c>)
    873a:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    873c:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    873e:	ab03      	add	r3, sp, #12
    8740:	5ad3      	ldrh	r3, [r2, r3]
    8742:	4303      	orrs	r3, r0
    8744:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    8746:	78b3      	ldrb	r3, [r6, #2]
    8748:	2b08      	cmp	r3, #8
    874a:	d100      	bne.n	874e <tc_init+0x96>
    874c:	e086      	b.n	885c <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    874e:	a901      	add	r1, sp, #4
    8750:	7833      	ldrb	r3, [r6, #0]
    8752:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    8754:	ab05      	add	r3, sp, #20
    8756:	5ddf      	ldrb	r7, [r3, r7]
    8758:	0038      	movs	r0, r7
    875a:	4b63      	ldr	r3, [pc, #396]	; (88e8 <tc_init+0x230>)
    875c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    875e:	0038      	movs	r0, r7
    8760:	4b62      	ldr	r3, [pc, #392]	; (88ec <tc_init+0x234>)
    8762:	4798      	blx	r3
	ctrla_tmp =
    8764:	8931      	ldrh	r1, [r6, #8]
    8766:	88b3      	ldrh	r3, [r6, #4]
    8768:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    876a:	78b1      	ldrb	r1, [r6, #2]
    876c:	79b2      	ldrb	r2, [r6, #6]
    876e:	4311      	orrs	r1, r2
	ctrla_tmp =
    8770:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    8772:	7873      	ldrb	r3, [r6, #1]
    8774:	2b00      	cmp	r3, #0
    8776:	d002      	beq.n	877e <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    8778:	2380      	movs	r3, #128	; 0x80
    877a:	011b      	lsls	r3, r3, #4
    877c:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    877e:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8780:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    8782:	b25b      	sxtb	r3, r3
    8784:	2b00      	cmp	r3, #0
    8786:	dbfb      	blt.n	8780 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    8788:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    878a:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    878c:	1e4b      	subs	r3, r1, #1
    878e:	4199      	sbcs	r1, r3
    8790:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    8792:	7bb3      	ldrb	r3, [r6, #14]
    8794:	2b00      	cmp	r3, #0
    8796:	d001      	beq.n	879c <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    8798:	2301      	movs	r3, #1
    879a:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    879c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    879e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    87a0:	b25b      	sxtb	r3, r3
    87a2:	2b00      	cmp	r3, #0
    87a4:	dbfb      	blt.n	879e <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    87a6:	23ff      	movs	r3, #255	; 0xff
    87a8:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    87aa:	2900      	cmp	r1, #0
    87ac:	d005      	beq.n	87ba <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    87ae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    87b0:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    87b2:	b25b      	sxtb	r3, r3
    87b4:	2b00      	cmp	r3, #0
    87b6:	dbfb      	blt.n	87b0 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    87b8:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    87ba:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    87bc:	7af3      	ldrb	r3, [r6, #11]
    87be:	2b00      	cmp	r3, #0
    87c0:	d001      	beq.n	87c6 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    87c2:	2310      	movs	r3, #16
    87c4:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    87c6:	7b33      	ldrb	r3, [r6, #12]
    87c8:	2b00      	cmp	r3, #0
    87ca:	d001      	beq.n	87d0 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    87cc:	2320      	movs	r3, #32
    87ce:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    87d0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    87d2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    87d4:	b25b      	sxtb	r3, r3
    87d6:	2b00      	cmp	r3, #0
    87d8:	dbfb      	blt.n	87d2 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    87da:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    87dc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    87de:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    87e0:	b25b      	sxtb	r3, r3
    87e2:	2b00      	cmp	r3, #0
    87e4:	dbfb      	blt.n	87de <tc_init+0x126>
	switch (module_inst->counter_size) {
    87e6:	7923      	ldrb	r3, [r4, #4]
    87e8:	2b04      	cmp	r3, #4
    87ea:	d03f      	beq.n	886c <tc_init+0x1b4>
    87ec:	2b08      	cmp	r3, #8
    87ee:	d05e      	beq.n	88ae <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    87f0:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    87f2:	2b00      	cmp	r3, #0
    87f4:	d000      	beq.n	87f8 <tc_init+0x140>
    87f6:	e78b      	b.n	8710 <tc_init+0x58>
    87f8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    87fa:	b25b      	sxtb	r3, r3
    87fc:	2b00      	cmp	r3, #0
    87fe:	dbfb      	blt.n	87f8 <tc_init+0x140>
				= config->counter_16_bit.value;
    8800:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    8802:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8804:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8806:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8808:	b25b      	sxtb	r3, r3
    880a:	2b00      	cmp	r3, #0
    880c:	dbfb      	blt.n	8806 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    880e:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    8810:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8812:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8814:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8816:	b25b      	sxtb	r3, r3
    8818:	2b00      	cmp	r3, #0
    881a:	dbfb      	blt.n	8814 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    881c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    881e:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    8820:	2000      	movs	r0, #0
    8822:	e775      	b.n	8710 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8824:	a902      	add	r1, sp, #8
    8826:	2301      	movs	r3, #1
    8828:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    882a:	2200      	movs	r2, #0
    882c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    882e:	7e32      	ldrb	r2, [r6, #24]
    8830:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    8832:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    8834:	7d30      	ldrb	r0, [r6, #20]
    8836:	4b2e      	ldr	r3, [pc, #184]	; (88f0 <tc_init+0x238>)
    8838:	4798      	blx	r3
    883a:	e779      	b.n	8730 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    883c:	a902      	add	r1, sp, #8
    883e:	2301      	movs	r3, #1
    8840:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    8842:	2200      	movs	r2, #0
    8844:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    8846:	3224      	adds	r2, #36	; 0x24
    8848:	18b2      	adds	r2, r6, r2
    884a:	7812      	ldrb	r2, [r2, #0]
    884c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    884e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    8850:	331f      	adds	r3, #31
    8852:	18f3      	adds	r3, r6, r3
    8854:	7818      	ldrb	r0, [r3, #0]
    8856:	4b26      	ldr	r3, [pc, #152]	; (88f0 <tc_init+0x238>)
    8858:	4798      	blx	r3
    885a:	e76d      	b.n	8738 <tc_init+0x80>
    885c:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    885e:	1c7a      	adds	r2, r7, #1
    8860:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    8862:	ab03      	add	r3, sp, #12
    8864:	5ad3      	ldrh	r3, [r2, r3]
    8866:	4303      	orrs	r3, r0
    8868:	620b      	str	r3, [r1, #32]
    886a:	e770      	b.n	874e <tc_init+0x96>
    886c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    886e:	b25b      	sxtb	r3, r3
    8870:	2b00      	cmp	r3, #0
    8872:	dbfb      	blt.n	886c <tc_init+0x1b4>
					config->counter_8_bit.value;
    8874:	2328      	movs	r3, #40	; 0x28
    8876:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    8878:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    887a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    887c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    887e:	b25b      	sxtb	r3, r3
    8880:	2b00      	cmp	r3, #0
    8882:	dbfb      	blt.n	887c <tc_init+0x1c4>
					config->counter_8_bit.period;
    8884:	2329      	movs	r3, #41	; 0x29
    8886:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    8888:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    888a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    888c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    888e:	b25b      	sxtb	r3, r3
    8890:	2b00      	cmp	r3, #0
    8892:	dbfb      	blt.n	888c <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    8894:	232a      	movs	r3, #42	; 0x2a
    8896:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    8898:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    889a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    889c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    889e:	b25b      	sxtb	r3, r3
    88a0:	2b00      	cmp	r3, #0
    88a2:	dbfb      	blt.n	889c <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    88a4:	232b      	movs	r3, #43	; 0x2b
    88a6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    88a8:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    88aa:	2000      	movs	r0, #0
    88ac:	e730      	b.n	8710 <tc_init+0x58>
    88ae:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    88b0:	b25b      	sxtb	r3, r3
    88b2:	2b00      	cmp	r3, #0
    88b4:	dbfb      	blt.n	88ae <tc_init+0x1f6>
				= config->counter_32_bit.value;
    88b6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    88b8:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    88ba:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    88bc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    88be:	b25b      	sxtb	r3, r3
    88c0:	2b00      	cmp	r3, #0
    88c2:	dbfb      	blt.n	88bc <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    88c4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    88c6:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    88c8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    88ca:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    88cc:	b25b      	sxtb	r3, r3
    88ce:	2b00      	cmp	r3, #0
    88d0:	dbfb      	blt.n	88ca <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    88d2:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    88d4:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    88d6:	2000      	movs	r0, #0
    88d8:	e71a      	b.n	8710 <tc_init+0x58>
    88da:	46c0      	nop			; (mov r8, r8)
    88dc:	00008681 	.word	0x00008681
    88e0:	20001ce0 	.word	0x20001ce0
    88e4:	40000400 	.word	0x40000400
    88e8:	00008461 	.word	0x00008461
    88ec:	000083d5 	.word	0x000083d5
    88f0:	00008559 	.word	0x00008559

000088f4 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    88f4:	6802      	ldr	r2, [r0, #0]
    88f6:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    88f8:	b25b      	sxtb	r3, r3
    88fa:	2b00      	cmp	r3, #0
    88fc:	dbfb      	blt.n	88f6 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    88fe:	7903      	ldrb	r3, [r0, #4]
    8900:	2b04      	cmp	r3, #4
    8902:	d005      	beq.n	8910 <tc_get_count_value+0x1c>
    8904:	2b08      	cmp	r3, #8
    8906:	d009      	beq.n	891c <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    8908:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    890a:	2b00      	cmp	r3, #0
    890c:	d003      	beq.n	8916 <tc_get_count_value+0x22>
}
    890e:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    8910:	7c10      	ldrb	r0, [r2, #16]
    8912:	b2c0      	uxtb	r0, r0
    8914:	e7fb      	b.n	890e <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    8916:	8a10      	ldrh	r0, [r2, #16]
    8918:	b280      	uxth	r0, r0
    891a:	e7f8      	b.n	890e <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    891c:	6910      	ldr	r0, [r2, #16]
    891e:	e7f6      	b.n	890e <tc_get_count_value+0x1a>

00008920 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    8920:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    8922:	6804      	ldr	r4, [r0, #0]
    8924:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    8926:	b25b      	sxtb	r3, r3
    8928:	2b00      	cmp	r3, #0
    892a:	dbfb      	blt.n	8924 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    892c:	7903      	ldrb	r3, [r0, #4]
    892e:	2b04      	cmp	r3, #4
    8930:	d005      	beq.n	893e <tc_set_compare_value+0x1e>
    8932:	2b08      	cmp	r3, #8
    8934:	d014      	beq.n	8960 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    8936:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    8938:	2b00      	cmp	r3, #0
    893a:	d008      	beq.n	894e <tc_set_compare_value+0x2e>
}
    893c:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    893e:	2017      	movs	r0, #23
			if (channel_index <
    8940:	2901      	cmp	r1, #1
    8942:	d8fb      	bhi.n	893c <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    8944:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    8946:	1861      	adds	r1, r4, r1
    8948:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    894a:	2000      	movs	r0, #0
    894c:	e7f6      	b.n	893c <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    894e:	2017      	movs	r0, #23
			if (channel_index <
    8950:	2901      	cmp	r1, #1
    8952:	d8f3      	bhi.n	893c <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    8954:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    8956:	310c      	adds	r1, #12
    8958:	0049      	lsls	r1, r1, #1
    895a:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    895c:	2000      	movs	r0, #0
    895e:	e7ed      	b.n	893c <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    8960:	2017      	movs	r0, #23
			if (channel_index <
    8962:	2901      	cmp	r1, #1
    8964:	d8ea      	bhi.n	893c <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    8966:	3106      	adds	r1, #6
    8968:	0089      	lsls	r1, r1, #2
    896a:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    896c:	2000      	movs	r0, #0
    896e:	e7e5      	b.n	893c <tc_set_compare_value+0x1c>

00008970 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8970:	e7fe      	b.n	8970 <Dummy_Handler>
    8972:	Address 0x00008972 is out of bounds.


00008974 <Reset_Handler>:
{
    8974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    8976:	4a2a      	ldr	r2, [pc, #168]	; (8a20 <Reset_Handler+0xac>)
    8978:	4b2a      	ldr	r3, [pc, #168]	; (8a24 <Reset_Handler+0xb0>)
    897a:	429a      	cmp	r2, r3
    897c:	d011      	beq.n	89a2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    897e:	001a      	movs	r2, r3
    8980:	4b29      	ldr	r3, [pc, #164]	; (8a28 <Reset_Handler+0xb4>)
    8982:	429a      	cmp	r2, r3
    8984:	d20d      	bcs.n	89a2 <Reset_Handler+0x2e>
    8986:	4a29      	ldr	r2, [pc, #164]	; (8a2c <Reset_Handler+0xb8>)
    8988:	3303      	adds	r3, #3
    898a:	1a9b      	subs	r3, r3, r2
    898c:	089b      	lsrs	r3, r3, #2
    898e:	3301      	adds	r3, #1
    8990:	009b      	lsls	r3, r3, #2
    8992:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8994:	4823      	ldr	r0, [pc, #140]	; (8a24 <Reset_Handler+0xb0>)
    8996:	4922      	ldr	r1, [pc, #136]	; (8a20 <Reset_Handler+0xac>)
    8998:	588c      	ldr	r4, [r1, r2]
    899a:	5084      	str	r4, [r0, r2]
    899c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    899e:	429a      	cmp	r2, r3
    89a0:	d1fa      	bne.n	8998 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    89a2:	4a23      	ldr	r2, [pc, #140]	; (8a30 <Reset_Handler+0xbc>)
    89a4:	4b23      	ldr	r3, [pc, #140]	; (8a34 <Reset_Handler+0xc0>)
    89a6:	429a      	cmp	r2, r3
    89a8:	d20a      	bcs.n	89c0 <Reset_Handler+0x4c>
    89aa:	43d3      	mvns	r3, r2
    89ac:	4921      	ldr	r1, [pc, #132]	; (8a34 <Reset_Handler+0xc0>)
    89ae:	185b      	adds	r3, r3, r1
    89b0:	2103      	movs	r1, #3
    89b2:	438b      	bics	r3, r1
    89b4:	3304      	adds	r3, #4
    89b6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    89b8:	2100      	movs	r1, #0
    89ba:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    89bc:	4293      	cmp	r3, r2
    89be:	d1fc      	bne.n	89ba <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    89c0:	4a1d      	ldr	r2, [pc, #116]	; (8a38 <Reset_Handler+0xc4>)
    89c2:	21ff      	movs	r1, #255	; 0xff
    89c4:	4b1d      	ldr	r3, [pc, #116]	; (8a3c <Reset_Handler+0xc8>)
    89c6:	438b      	bics	r3, r1
    89c8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    89ca:	39fd      	subs	r1, #253	; 0xfd
    89cc:	2390      	movs	r3, #144	; 0x90
    89ce:	005b      	lsls	r3, r3, #1
    89d0:	4a1b      	ldr	r2, [pc, #108]	; (8a40 <Reset_Handler+0xcc>)
    89d2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    89d4:	4a1b      	ldr	r2, [pc, #108]	; (8a44 <Reset_Handler+0xd0>)
    89d6:	78d3      	ldrb	r3, [r2, #3]
    89d8:	2503      	movs	r5, #3
    89da:	43ab      	bics	r3, r5
    89dc:	2402      	movs	r4, #2
    89de:	4323      	orrs	r3, r4
    89e0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    89e2:	78d3      	ldrb	r3, [r2, #3]
    89e4:	270c      	movs	r7, #12
    89e6:	43bb      	bics	r3, r7
    89e8:	2608      	movs	r6, #8
    89ea:	4333      	orrs	r3, r6
    89ec:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    89ee:	4b16      	ldr	r3, [pc, #88]	; (8a48 <Reset_Handler+0xd4>)
    89f0:	7b98      	ldrb	r0, [r3, #14]
    89f2:	2230      	movs	r2, #48	; 0x30
    89f4:	4390      	bics	r0, r2
    89f6:	2220      	movs	r2, #32
    89f8:	4310      	orrs	r0, r2
    89fa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    89fc:	7b99      	ldrb	r1, [r3, #14]
    89fe:	43b9      	bics	r1, r7
    8a00:	4331      	orrs	r1, r6
    8a02:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8a04:	7b9a      	ldrb	r2, [r3, #14]
    8a06:	43aa      	bics	r2, r5
    8a08:	4322      	orrs	r2, r4
    8a0a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    8a0c:	4a0f      	ldr	r2, [pc, #60]	; (8a4c <Reset_Handler+0xd8>)
    8a0e:	6853      	ldr	r3, [r2, #4]
    8a10:	2180      	movs	r1, #128	; 0x80
    8a12:	430b      	orrs	r3, r1
    8a14:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8a16:	4b0e      	ldr	r3, [pc, #56]	; (8a50 <Reset_Handler+0xdc>)
    8a18:	4798      	blx	r3
        main();
    8a1a:	4b0e      	ldr	r3, [pc, #56]	; (8a54 <Reset_Handler+0xe0>)
    8a1c:	4798      	blx	r3
    8a1e:	e7fe      	b.n	8a1e <Reset_Handler+0xaa>
    8a20:	00012d08 	.word	0x00012d08
    8a24:	20000000 	.word	0x20000000
    8a28:	2000009c 	.word	0x2000009c
    8a2c:	20000004 	.word	0x20000004
    8a30:	2000009c 	.word	0x2000009c
    8a34:	200021d0 	.word	0x200021d0
    8a38:	e000ed00 	.word	0xe000ed00
    8a3c:	00000000 	.word	0x00000000
    8a40:	41007000 	.word	0x41007000
    8a44:	41005000 	.word	0x41005000
    8a48:	41004800 	.word	0x41004800
    8a4c:	41004000 	.word	0x41004000
    8a50:	00010c49 	.word	0x00010c49
    8a54:	0000dccd 	.word	0x0000dccd

00008a58 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    8a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a5a:	46c6      	mov	lr, r8
    8a5c:	b500      	push	{lr}
    8a5e:	000c      	movs	r4, r1
    8a60:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    8a62:	2800      	cmp	r0, #0
    8a64:	d10f      	bne.n	8a86 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    8a66:	2a00      	cmp	r2, #0
    8a68:	dd11      	ble.n	8a8e <_read+0x36>
    8a6a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    8a6c:	4e09      	ldr	r6, [pc, #36]	; (8a94 <_read+0x3c>)
    8a6e:	4d0a      	ldr	r5, [pc, #40]	; (8a98 <_read+0x40>)
    8a70:	6830      	ldr	r0, [r6, #0]
    8a72:	0021      	movs	r1, r4
    8a74:	682b      	ldr	r3, [r5, #0]
    8a76:	4798      	blx	r3
		ptr++;
    8a78:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    8a7a:	42bc      	cmp	r4, r7
    8a7c:	d1f8      	bne.n	8a70 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    8a7e:	4640      	mov	r0, r8
    8a80:	bc04      	pop	{r2}
    8a82:	4690      	mov	r8, r2
    8a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    8a86:	2301      	movs	r3, #1
    8a88:	425b      	negs	r3, r3
    8a8a:	4698      	mov	r8, r3
    8a8c:	e7f7      	b.n	8a7e <_read+0x26>
	for (; len > 0; --len) {
    8a8e:	4680      	mov	r8, r0
    8a90:	e7f5      	b.n	8a7e <_read+0x26>
    8a92:	46c0      	nop			; (mov r8, r8)
    8a94:	20001cf4 	.word	0x20001cf4
    8a98:	20001cec 	.word	0x20001cec

00008a9c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    8a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a9e:	46c6      	mov	lr, r8
    8aa0:	b500      	push	{lr}
    8aa2:	000e      	movs	r6, r1
    8aa4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    8aa6:	3801      	subs	r0, #1
    8aa8:	2802      	cmp	r0, #2
    8aaa:	d810      	bhi.n	8ace <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    8aac:	2a00      	cmp	r2, #0
    8aae:	d011      	beq.n	8ad4 <_write+0x38>
    8ab0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    8ab2:	4b0c      	ldr	r3, [pc, #48]	; (8ae4 <_write+0x48>)
    8ab4:	4698      	mov	r8, r3
    8ab6:	4f0c      	ldr	r7, [pc, #48]	; (8ae8 <_write+0x4c>)
    8ab8:	4643      	mov	r3, r8
    8aba:	6818      	ldr	r0, [r3, #0]
    8abc:	5d31      	ldrb	r1, [r6, r4]
    8abe:	683b      	ldr	r3, [r7, #0]
    8ac0:	4798      	blx	r3
    8ac2:	2800      	cmp	r0, #0
    8ac4:	db08      	blt.n	8ad8 <_write+0x3c>
			return -1;
		}
		++nChars;
    8ac6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    8ac8:	42a5      	cmp	r5, r4
    8aca:	d1f5      	bne.n	8ab8 <_write+0x1c>
    8acc:	e006      	b.n	8adc <_write+0x40>
		return -1;
    8ace:	2401      	movs	r4, #1
    8ad0:	4264      	negs	r4, r4
    8ad2:	e003      	b.n	8adc <_write+0x40>
	for (; len != 0; --len) {
    8ad4:	0014      	movs	r4, r2
    8ad6:	e001      	b.n	8adc <_write+0x40>
			return -1;
    8ad8:	2401      	movs	r4, #1
    8ada:	4264      	negs	r4, r4
	}
	return nChars;
}
    8adc:	0020      	movs	r0, r4
    8ade:	bc04      	pop	{r2}
    8ae0:	4690      	mov	r8, r2
    8ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ae4:	20001cf4 	.word	0x20001cf4
    8ae8:	20001cf0 	.word	0x20001cf0

00008aec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8aec:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8aee:	4a06      	ldr	r2, [pc, #24]	; (8b08 <_sbrk+0x1c>)
    8af0:	6812      	ldr	r2, [r2, #0]
    8af2:	2a00      	cmp	r2, #0
    8af4:	d004      	beq.n	8b00 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8af6:	4a04      	ldr	r2, [pc, #16]	; (8b08 <_sbrk+0x1c>)
    8af8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    8afa:	18c3      	adds	r3, r0, r3
    8afc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    8afe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8b00:	4902      	ldr	r1, [pc, #8]	; (8b0c <_sbrk+0x20>)
    8b02:	4a01      	ldr	r2, [pc, #4]	; (8b08 <_sbrk+0x1c>)
    8b04:	6011      	str	r1, [r2, #0]
    8b06:	e7f6      	b.n	8af6 <_sbrk+0xa>
    8b08:	200000fc 	.word	0x200000fc
    8b0c:	20002fd0 	.word	0x20002fd0

00008b10 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    8b10:	2001      	movs	r0, #1
    8b12:	4240      	negs	r0, r0
    8b14:	4770      	bx	lr

00008b16 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    8b16:	2380      	movs	r3, #128	; 0x80
    8b18:	019b      	lsls	r3, r3, #6
    8b1a:	604b      	str	r3, [r1, #4]

	return 0;
}
    8b1c:	2000      	movs	r0, #0
    8b1e:	4770      	bx	lr

00008b20 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    8b20:	2001      	movs	r0, #1
    8b22:	4770      	bx	lr

00008b24 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    8b24:	2000      	movs	r0, #0
    8b26:	4770      	bx	lr

00008b28 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    8b28:	be00      	bkpt	0x0000
    8b2a:	e7fe      	b.n	8b2a <_exit+0x2>

00008b2c <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    8b2c:	4770      	bx	lr

00008b2e <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    8b2e:	2001      	movs	r0, #1
    8b30:	4240      	negs	r0, r0
    8b32:	4770      	bx	lr

00008b34 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    8b34:	b570      	push	{r4, r5, r6, lr}
    8b36:	b082      	sub	sp, #8
    8b38:	0005      	movs	r5, r0
    8b3a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    8b3c:	2200      	movs	r2, #0
    8b3e:	466b      	mov	r3, sp
    8b40:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    8b42:	4c06      	ldr	r4, [pc, #24]	; (8b5c <usart_serial_getchar+0x28>)
    8b44:	466b      	mov	r3, sp
    8b46:	1d99      	adds	r1, r3, #6
    8b48:	0028      	movs	r0, r5
    8b4a:	47a0      	blx	r4
    8b4c:	2800      	cmp	r0, #0
    8b4e:	d1f9      	bne.n	8b44 <usart_serial_getchar+0x10>

	*c = temp;
    8b50:	466b      	mov	r3, sp
    8b52:	3306      	adds	r3, #6
    8b54:	881b      	ldrh	r3, [r3, #0]
    8b56:	7033      	strb	r3, [r6, #0]
}
    8b58:	b002      	add	sp, #8
    8b5a:	bd70      	pop	{r4, r5, r6, pc}
    8b5c:	000079c3 	.word	0x000079c3

00008b60 <usart_serial_putchar>:
{
    8b60:	b570      	push	{r4, r5, r6, lr}
    8b62:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    8b64:	b28c      	uxth	r4, r1
    8b66:	4e03      	ldr	r6, [pc, #12]	; (8b74 <usart_serial_putchar+0x14>)
    8b68:	0021      	movs	r1, r4
    8b6a:	0028      	movs	r0, r5
    8b6c:	47b0      	blx	r6
    8b6e:	2800      	cmp	r0, #0
    8b70:	d1fa      	bne.n	8b68 <usart_serial_putchar+0x8>
}
    8b72:	bd70      	pop	{r4, r5, r6, pc}
    8b74:	0000799d 	.word	0x0000799d

00008b78 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    8b78:	b510      	push	{r4, lr}
    8b7a:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    8b7c:	466b      	mov	r3, sp
    8b7e:	1ddc      	adds	r4, r3, #7
    8b80:	2201      	movs	r2, #1
    8b82:	0021      	movs	r1, r4
    8b84:	480f      	ldr	r0, [pc, #60]	; (8bc4 <USART_HOST_ISR_VECT+0x4c>)
    8b86:	4b10      	ldr	r3, [pc, #64]	; (8bc8 <USART_HOST_ISR_VECT+0x50>)
    8b88:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    8b8a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8b8c:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    8b90:	2200      	movs	r2, #0
    8b92:	4b0e      	ldr	r3, [pc, #56]	; (8bcc <USART_HOST_ISR_VECT+0x54>)
    8b94:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    8b96:	4b0e      	ldr	r3, [pc, #56]	; (8bd0 <USART_HOST_ISR_VECT+0x58>)
    8b98:	781b      	ldrb	r3, [r3, #0]
    8b9a:	7821      	ldrb	r1, [r4, #0]
    8b9c:	4a0d      	ldr	r2, [pc, #52]	; (8bd4 <USART_HOST_ISR_VECT+0x5c>)
    8b9e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    8ba0:	2b9b      	cmp	r3, #155	; 0x9b
    8ba2:	d00a      	beq.n	8bba <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    8ba4:	3301      	adds	r3, #1
    8ba6:	4a0a      	ldr	r2, [pc, #40]	; (8bd0 <USART_HOST_ISR_VECT+0x58>)
    8ba8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    8baa:	2201      	movs	r2, #1
    8bac:	4b07      	ldr	r3, [pc, #28]	; (8bcc <USART_HOST_ISR_VECT+0x54>)
    8bae:	701a      	strb	r2, [r3, #0]
    8bb0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8bb4:	b662      	cpsie	i
}
    8bb6:	b002      	add	sp, #8
    8bb8:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    8bba:	2200      	movs	r2, #0
    8bbc:	4b04      	ldr	r3, [pc, #16]	; (8bd0 <USART_HOST_ISR_VECT+0x58>)
    8bbe:	701a      	strb	r2, [r3, #0]
    8bc0:	e7f3      	b.n	8baa <USART_HOST_ISR_VECT+0x32>
    8bc2:	46c0      	nop			; (mov r8, r8)
    8bc4:	20000100 	.word	0x20000100
    8bc8:	00007ae9 	.word	0x00007ae9
    8bcc:	20000008 	.word	0x20000008
    8bd0:	200001d0 	.word	0x200001d0
    8bd4:	20000134 	.word	0x20000134

00008bd8 <sio2host_init>:
{
    8bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8bda:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    8bdc:	2380      	movs	r3, #128	; 0x80
    8bde:	05db      	lsls	r3, r3, #23
    8be0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    8be2:	2300      	movs	r3, #0
    8be4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    8be6:	22ff      	movs	r2, #255	; 0xff
    8be8:	4669      	mov	r1, sp
    8bea:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    8bec:	2200      	movs	r2, #0
    8bee:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    8bf0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    8bf2:	2401      	movs	r4, #1
    8bf4:	2124      	movs	r1, #36	; 0x24
    8bf6:	4668      	mov	r0, sp
    8bf8:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    8bfa:	3101      	adds	r1, #1
    8bfc:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    8bfe:	3101      	adds	r1, #1
    8c00:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    8c02:	3101      	adds	r1, #1
    8c04:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    8c06:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    8c08:	3105      	adds	r1, #5
    8c0a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    8c0c:	3101      	adds	r1, #1
    8c0e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    8c10:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    8c12:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    8c14:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    8c16:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    8c18:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    8c1a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    8c1c:	2313      	movs	r3, #19
    8c1e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    8c20:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    8c22:	2380      	movs	r3, #128	; 0x80
    8c24:	035b      	lsls	r3, r3, #13
    8c26:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    8c28:	4b2f      	ldr	r3, [pc, #188]	; (8ce8 <sio2host_init+0x110>)
    8c2a:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    8c2c:	4b2f      	ldr	r3, [pc, #188]	; (8cec <sio2host_init+0x114>)
    8c2e:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    8c30:	2301      	movs	r3, #1
    8c32:	425b      	negs	r3, r3
    8c34:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    8c36:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    8c38:	2396      	movs	r3, #150	; 0x96
    8c3a:	021b      	lsls	r3, r3, #8
    8c3c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    8c3e:	4d2c      	ldr	r5, [pc, #176]	; (8cf0 <sio2host_init+0x118>)
    8c40:	4b2c      	ldr	r3, [pc, #176]	; (8cf4 <sio2host_init+0x11c>)
    8c42:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    8c44:	4a2c      	ldr	r2, [pc, #176]	; (8cf8 <sio2host_init+0x120>)
    8c46:	4b2d      	ldr	r3, [pc, #180]	; (8cfc <sio2host_init+0x124>)
    8c48:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    8c4a:	4a2d      	ldr	r2, [pc, #180]	; (8d00 <sio2host_init+0x128>)
    8c4c:	4b2d      	ldr	r3, [pc, #180]	; (8d04 <sio2host_init+0x12c>)
    8c4e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    8c50:	466a      	mov	r2, sp
    8c52:	492d      	ldr	r1, [pc, #180]	; (8d08 <sio2host_init+0x130>)
    8c54:	0028      	movs	r0, r5
    8c56:	4b2d      	ldr	r3, [pc, #180]	; (8d0c <sio2host_init+0x134>)
    8c58:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    8c5a:	4f2d      	ldr	r7, [pc, #180]	; (8d10 <sio2host_init+0x138>)
    8c5c:	683b      	ldr	r3, [r7, #0]
    8c5e:	6898      	ldr	r0, [r3, #8]
    8c60:	2100      	movs	r1, #0
    8c62:	4e2c      	ldr	r6, [pc, #176]	; (8d14 <sio2host_init+0x13c>)
    8c64:	47b0      	blx	r6
	setbuf(stdin, NULL);
    8c66:	683b      	ldr	r3, [r7, #0]
    8c68:	6858      	ldr	r0, [r3, #4]
    8c6a:	2100      	movs	r1, #0
    8c6c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8c6e:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8c70:	0030      	movs	r0, r6
    8c72:	4b29      	ldr	r3, [pc, #164]	; (8d18 <sio2host_init+0x140>)
    8c74:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8c76:	231f      	movs	r3, #31
    8c78:	4018      	ands	r0, r3
    8c7a:	4084      	lsls	r4, r0
    8c7c:	4b27      	ldr	r3, [pc, #156]	; (8d1c <sio2host_init+0x144>)
    8c7e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8c80:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    8c82:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    8c84:	2b00      	cmp	r3, #0
    8c86:	d1fc      	bne.n	8c82 <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    8c88:	6833      	ldr	r3, [r6, #0]
    8c8a:	2202      	movs	r2, #2
    8c8c:	4313      	orrs	r3, r2
    8c8e:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8c90:	4b17      	ldr	r3, [pc, #92]	; (8cf0 <sio2host_init+0x118>)
    8c92:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    8c94:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8c96:	2a00      	cmp	r2, #0
    8c98:	d1fc      	bne.n	8c94 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    8c9a:	6859      	ldr	r1, [r3, #4]
    8c9c:	2280      	movs	r2, #128	; 0x80
    8c9e:	0252      	lsls	r2, r2, #9
    8ca0:	430a      	orrs	r2, r1
    8ca2:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    8ca4:	2101      	movs	r1, #1
    8ca6:	4a12      	ldr	r2, [pc, #72]	; (8cf0 <sio2host_init+0x118>)
    8ca8:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    8caa:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8cac:	2a00      	cmp	r2, #0
    8cae:	d1fc      	bne.n	8caa <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    8cb0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8cb2:	2a00      	cmp	r2, #0
    8cb4:	d1fc      	bne.n	8cb0 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    8cb6:	6859      	ldr	r1, [r3, #4]
    8cb8:	2280      	movs	r2, #128	; 0x80
    8cba:	0292      	lsls	r2, r2, #10
    8cbc:	430a      	orrs	r2, r1
    8cbe:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    8cc0:	2101      	movs	r1, #1
    8cc2:	4a0b      	ldr	r2, [pc, #44]	; (8cf0 <sio2host_init+0x118>)
    8cc4:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    8cc6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8cc8:	2a00      	cmp	r2, #0
    8cca:	d1fc      	bne.n	8cc6 <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    8ccc:	4914      	ldr	r1, [pc, #80]	; (8d20 <sio2host_init+0x148>)
    8cce:	2000      	movs	r0, #0
    8cd0:	4b14      	ldr	r3, [pc, #80]	; (8d24 <sio2host_init+0x14c>)
    8cd2:	4798      	blx	r3
    8cd4:	2204      	movs	r2, #4
    8cd6:	4b0c      	ldr	r3, [pc, #48]	; (8d08 <sio2host_init+0x130>)
    8cd8:	759a      	strb	r2, [r3, #22]
    8cda:	32fd      	adds	r2, #253	; 0xfd
    8cdc:	32ff      	adds	r2, #255	; 0xff
    8cde:	4b0f      	ldr	r3, [pc, #60]	; (8d1c <sio2host_init+0x144>)
    8ce0:	601a      	str	r2, [r3, #0]
}
    8ce2:	b011      	add	sp, #68	; 0x44
    8ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ce6:	46c0      	nop			; (mov r8, r8)
    8ce8:	00040003 	.word	0x00040003
    8cec:	00050003 	.word	0x00050003
    8cf0:	20000100 	.word	0x20000100
    8cf4:	20001cf4 	.word	0x20001cf4
    8cf8:	00008b61 	.word	0x00008b61
    8cfc:	20001cf0 	.word	0x20001cf0
    8d00:	00008b35 	.word	0x00008b35
    8d04:	20001cec 	.word	0x20001cec
    8d08:	42000800 	.word	0x42000800
    8d0c:	00007661 	.word	0x00007661
    8d10:	20000038 	.word	0x20000038
    8d14:	00011445 	.word	0x00011445
    8d18:	00007219 	.word	0x00007219
    8d1c:	e000e100 	.word	0xe000e100
    8d20:	00008b79 	.word	0x00008b79
    8d24:	000071dd 	.word	0x000071dd

00008d28 <sio2host_tx>:
{
    8d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d2a:	b083      	sub	sp, #12
    8d2c:	0006      	movs	r6, r0
    8d2e:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    8d30:	466b      	mov	r3, sp
    8d32:	889d      	ldrh	r5, [r3, #4]
    8d34:	4c05      	ldr	r4, [pc, #20]	; (8d4c <sio2host_tx+0x24>)
    8d36:	4f06      	ldr	r7, [pc, #24]	; (8d50 <sio2host_tx+0x28>)
    8d38:	002a      	movs	r2, r5
    8d3a:	0031      	movs	r1, r6
    8d3c:	0020      	movs	r0, r4
    8d3e:	47b8      	blx	r7
	} while (status != STATUS_OK);
    8d40:	2800      	cmp	r0, #0
    8d42:	d1f9      	bne.n	8d38 <sio2host_tx+0x10>
}
    8d44:	9801      	ldr	r0, [sp, #4]
    8d46:	b003      	add	sp, #12
    8d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d4a:	46c0      	nop			; (mov r8, r8)
    8d4c:	20000100 	.word	0x20000100
    8d50:	00007a2d 	.word	0x00007a2d

00008d54 <sio2host_putchar>:
{
    8d54:	b500      	push	{lr}
    8d56:	b083      	sub	sp, #12
    8d58:	466b      	mov	r3, sp
    8d5a:	71d8      	strb	r0, [r3, #7]
    8d5c:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    8d5e:	2101      	movs	r1, #1
    8d60:	0018      	movs	r0, r3
    8d62:	4b02      	ldr	r3, [pc, #8]	; (8d6c <sio2host_putchar+0x18>)
    8d64:	4798      	blx	r3
}
    8d66:	b003      	add	sp, #12
    8d68:	bd00      	pop	{pc}
    8d6a:	46c0      	nop			; (mov r8, r8)
    8d6c:	00008d29 	.word	0x00008d29

00008d70 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    8d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d72:	46c6      	mov	lr, r8
    8d74:	b500      	push	{lr}
    8d76:	b084      	sub	sp, #16
    8d78:	0014      	movs	r4, r2
    8d7a:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8d7c:	4b29      	ldr	r3, [pc, #164]	; (8e24 <CompareData+0xb4>)
    8d7e:	18cb      	adds	r3, r1, r3
    8d80:	0340      	lsls	r0, r0, #13
    8d82:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    8d84:	2f00      	cmp	r7, #0
    8d86:	d01a      	beq.n	8dbe <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    8d88:	4b27      	ldr	r3, [pc, #156]	; (8e28 <CompareData+0xb8>)
    8d8a:	1e5a      	subs	r2, r3, #1
    8d8c:	4295      	cmp	r5, r2
    8d8e:	d81c      	bhi.n	8dca <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8d90:	197a      	adds	r2, r7, r5
    8d92:	4293      	cmp	r3, r2
    8d94:	d31f      	bcc.n	8dd6 <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8d96:	19c9      	adds	r1, r1, r7
    8d98:	2380      	movs	r3, #128	; 0x80
    8d9a:	019b      	lsls	r3, r3, #6
    8d9c:	4299      	cmp	r1, r3
    8d9e:	d820      	bhi.n	8de2 <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    8da0:	4b22      	ldr	r3, [pc, #136]	; (8e2c <CompareData+0xbc>)
    8da2:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    8da4:	1c3e      	adds	r6, r7, #0
    8da6:	2f10      	cmp	r7, #16
    8da8:	d900      	bls.n	8dac <CompareData+0x3c>
    8daa:	2610      	movs	r6, #16
    8dac:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    8dae:	0032      	movs	r2, r6
    8db0:	0029      	movs	r1, r5
    8db2:	4668      	mov	r0, sp
    8db4:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    8db6:	2e00      	cmp	r6, #0
    8db8:	d028      	beq.n	8e0c <CompareData+0x9c>
    8dba:	2300      	movs	r3, #0
    8dbc:	e01f      	b.n	8dfe <CompareData+0x8e>
  assert(numberOfBytes);
    8dbe:	4b1c      	ldr	r3, [pc, #112]	; (8e30 <CompareData+0xc0>)
    8dc0:	4a1c      	ldr	r2, [pc, #112]	; (8e34 <CompareData+0xc4>)
    8dc2:	21d9      	movs	r1, #217	; 0xd9
    8dc4:	481c      	ldr	r0, [pc, #112]	; (8e38 <CompareData+0xc8>)
    8dc6:	4c1d      	ldr	r4, [pc, #116]	; (8e3c <CompareData+0xcc>)
    8dc8:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    8dca:	4b1d      	ldr	r3, [pc, #116]	; (8e40 <CompareData+0xd0>)
    8dcc:	4a19      	ldr	r2, [pc, #100]	; (8e34 <CompareData+0xc4>)
    8dce:	21da      	movs	r1, #218	; 0xda
    8dd0:	4819      	ldr	r0, [pc, #100]	; (8e38 <CompareData+0xc8>)
    8dd2:	4c1a      	ldr	r4, [pc, #104]	; (8e3c <CompareData+0xcc>)
    8dd4:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8dd6:	4b1b      	ldr	r3, [pc, #108]	; (8e44 <CompareData+0xd4>)
    8dd8:	4a16      	ldr	r2, [pc, #88]	; (8e34 <CompareData+0xc4>)
    8dda:	21db      	movs	r1, #219	; 0xdb
    8ddc:	4816      	ldr	r0, [pc, #88]	; (8e38 <CompareData+0xc8>)
    8dde:	4c17      	ldr	r4, [pc, #92]	; (8e3c <CompareData+0xcc>)
    8de0:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8de2:	4b19      	ldr	r3, [pc, #100]	; (8e48 <CompareData+0xd8>)
    8de4:	4a13      	ldr	r2, [pc, #76]	; (8e34 <CompareData+0xc4>)
    8de6:	21dc      	movs	r1, #220	; 0xdc
    8de8:	4813      	ldr	r0, [pc, #76]	; (8e38 <CompareData+0xc8>)
    8dea:	4c14      	ldr	r4, [pc, #80]	; (8e3c <CompareData+0xcc>)
    8dec:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    8dee:	21ff      	movs	r1, #255	; 0xff
    8df0:	4291      	cmp	r1, r2
    8df2:	d112      	bne.n	8e1a <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    8df4:	3301      	adds	r3, #1
    8df6:	b2db      	uxtb	r3, r3
    8df8:	b29a      	uxth	r2, r3
    8dfa:	4296      	cmp	r6, r2
    8dfc:	d906      	bls.n	8e0c <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    8dfe:	466a      	mov	r2, sp
    8e00:	5cd2      	ldrb	r2, [r2, r3]
    8e02:	2c00      	cmp	r4, #0
    8e04:	d0f3      	beq.n	8dee <CompareData+0x7e>
    8e06:	7821      	ldrb	r1, [r4, #0]
    8e08:	3401      	adds	r4, #1
    8e0a:	e7f1      	b.n	8df0 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    8e0c:	1bbf      	subs	r7, r7, r6
    8e0e:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    8e10:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    8e12:	2f00      	cmp	r7, #0
    8e14:	d1c6      	bne.n	8da4 <CompareData+0x34>
  }

  return true;
    8e16:	2001      	movs	r0, #1
    8e18:	e000      	b.n	8e1c <CompareData+0xac>
        return false;
    8e1a:	2000      	movs	r0, #0
}
    8e1c:	b004      	add	sp, #16
    8e1e:	bc04      	pop	{r2}
    8e20:	4690      	mov	r8, r2
    8e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e24:	00002100 	.word	0x00002100
    8e28:	00006100 	.word	0x00006100
    8e2c:	00010caf 	.word	0x00010caf
    8e30:	00012084 	.word	0x00012084
    8e34:	00012208 	.word	0x00012208
    8e38:	00012094 	.word	0x00012094
    8e3c:	00010bed 	.word	0x00010bed
    8e40:	000120d4 	.word	0x000120d4
    8e44:	000120f0 	.word	0x000120f0
    8e48:	00012124 	.word	0x00012124

00008e4c <D_Nv_Init>:
{
    8e4c:	b510      	push	{r4, lr}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    8e4e:	4a0b      	ldr	r2, [pc, #44]	; (8e7c <D_Nv_Init+0x30>)
    8e50:	23ff      	movs	r3, #255	; 0xff
    8e52:	421a      	tst	r2, r3
    8e54:	d106      	bne.n	8e64 <D_Nv_Init+0x18>
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    8e56:	4b0a      	ldr	r3, [pc, #40]	; (8e80 <D_Nv_Init+0x34>)
    8e58:	490a      	ldr	r1, [pc, #40]	; (8e84 <D_Nv_Init+0x38>)
    8e5a:	468c      	mov	ip, r1
    8e5c:	4463      	add	r3, ip
    8e5e:	4293      	cmp	r3, r2
    8e60:	d106      	bne.n	8e70 <D_Nv_Init+0x24>
}
    8e62:	bd10      	pop	{r4, pc}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    8e64:	4b08      	ldr	r3, [pc, #32]	; (8e88 <D_Nv_Init+0x3c>)
    8e66:	4a09      	ldr	r2, [pc, #36]	; (8e8c <D_Nv_Init+0x40>)
    8e68:	2159      	movs	r1, #89	; 0x59
    8e6a:	4809      	ldr	r0, [pc, #36]	; (8e90 <D_Nv_Init+0x44>)
    8e6c:	4c09      	ldr	r4, [pc, #36]	; (8e94 <D_Nv_Init+0x48>)
    8e6e:	47a0      	blx	r4
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    8e70:	4b09      	ldr	r3, [pc, #36]	; (8e98 <D_Nv_Init+0x4c>)
    8e72:	4a06      	ldr	r2, [pc, #24]	; (8e8c <D_Nv_Init+0x40>)
    8e74:	215d      	movs	r1, #93	; 0x5d
    8e76:	4806      	ldr	r0, [pc, #24]	; (8e90 <D_Nv_Init+0x44>)
    8e78:	4c06      	ldr	r4, [pc, #24]	; (8e94 <D_Nv_Init+0x48>)
    8e7a:	47a0      	blx	r4
    8e7c:	00002100 	.word	0x00002100
    8e80:	00006100 	.word	0x00006100
    8e84:	ffffc000 	.word	0xffffc000
    8e88:	00012154 	.word	0x00012154
    8e8c:	000121c4 	.word	0x000121c4
    8e90:	00012094 	.word	0x00012094
    8e94:	00010bed 	.word	0x00010bed
    8e98:	00012184 	.word	0x00012184

00008e9c <D_Nv_Read_Impl>:
{
    8e9c:	b570      	push	{r4, r5, r6, lr}
    8e9e:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8ea0:	0344      	lsls	r4, r0, #13
    8ea2:	4813      	ldr	r0, [pc, #76]	; (8ef0 <D_Nv_Read_Impl+0x54>)
    8ea4:	1808      	adds	r0, r1, r0
    8ea6:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    8ea8:	4a12      	ldr	r2, [pc, #72]	; (8ef4 <D_Nv_Read_Impl+0x58>)
    8eaa:	1e50      	subs	r0, r2, #1
    8eac:	4284      	cmp	r4, r0
    8eae:	d80d      	bhi.n	8ecc <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8eb0:	18e0      	adds	r0, r4, r3
    8eb2:	4282      	cmp	r2, r0
    8eb4:	d310      	bcc.n	8ed8 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8eb6:	18c9      	adds	r1, r1, r3
    8eb8:	2280      	movs	r2, #128	; 0x80
    8eba:	0192      	lsls	r2, r2, #6
    8ebc:	4291      	cmp	r1, r2
    8ebe:	d811      	bhi.n	8ee4 <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    8ec0:	001a      	movs	r2, r3
    8ec2:	0021      	movs	r1, r4
    8ec4:	0028      	movs	r0, r5
    8ec6:	4b0c      	ldr	r3, [pc, #48]	; (8ef8 <D_Nv_Read_Impl+0x5c>)
    8ec8:	4798      	blx	r3
}
    8eca:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    8ecc:	4b0b      	ldr	r3, [pc, #44]	; (8efc <D_Nv_Read_Impl+0x60>)
    8ece:	4a0c      	ldr	r2, [pc, #48]	; (8f00 <D_Nv_Read_Impl+0x64>)
    8ed0:	2172      	movs	r1, #114	; 0x72
    8ed2:	480c      	ldr	r0, [pc, #48]	; (8f04 <D_Nv_Read_Impl+0x68>)
    8ed4:	4c0c      	ldr	r4, [pc, #48]	; (8f08 <D_Nv_Read_Impl+0x6c>)
    8ed6:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8ed8:	4b0c      	ldr	r3, [pc, #48]	; (8f0c <D_Nv_Read_Impl+0x70>)
    8eda:	4a09      	ldr	r2, [pc, #36]	; (8f00 <D_Nv_Read_Impl+0x64>)
    8edc:	2173      	movs	r1, #115	; 0x73
    8ede:	4809      	ldr	r0, [pc, #36]	; (8f04 <D_Nv_Read_Impl+0x68>)
    8ee0:	4c09      	ldr	r4, [pc, #36]	; (8f08 <D_Nv_Read_Impl+0x6c>)
    8ee2:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8ee4:	4b0a      	ldr	r3, [pc, #40]	; (8f10 <D_Nv_Read_Impl+0x74>)
    8ee6:	4a06      	ldr	r2, [pc, #24]	; (8f00 <D_Nv_Read_Impl+0x64>)
    8ee8:	2174      	movs	r1, #116	; 0x74
    8eea:	4806      	ldr	r0, [pc, #24]	; (8f04 <D_Nv_Read_Impl+0x68>)
    8eec:	4c06      	ldr	r4, [pc, #24]	; (8f08 <D_Nv_Read_Impl+0x6c>)
    8eee:	47a0      	blx	r4
    8ef0:	00002100 	.word	0x00002100
    8ef4:	00006100 	.word	0x00006100
    8ef8:	00010caf 	.word	0x00010caf
    8efc:	000120d4 	.word	0x000120d4
    8f00:	000121d0 	.word	0x000121d0
    8f04:	00012094 	.word	0x00012094
    8f08:	00010bed 	.word	0x00010bed
    8f0c:	000120f0 	.word	0x000120f0
    8f10:	00012124 	.word	0x00012124

00008f14 <D_Nv_Write_Impl>:
{
    8f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f16:	46de      	mov	lr, fp
    8f18:	4657      	mov	r7, sl
    8f1a:	464e      	mov	r6, r9
    8f1c:	4645      	mov	r5, r8
    8f1e:	b5e0      	push	{r5, r6, r7, lr}
    8f20:	b093      	sub	sp, #76	; 0x4c
    8f22:	9201      	str	r2, [sp, #4]
    8f24:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8f26:	4c46      	ldr	r4, [pc, #280]	; (9040 <D_Nv_Write_Impl+0x12c>)
    8f28:	190c      	adds	r4, r1, r4
    8f2a:	0340      	lsls	r0, r0, #13
    8f2c:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    8f2e:	2b00      	cmp	r3, #0
    8f30:	d047      	beq.n	8fc2 <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    8f32:	4b44      	ldr	r3, [pc, #272]	; (9044 <D_Nv_Write_Impl+0x130>)
    8f34:	1e5a      	subs	r2, r3, #1
    8f36:	4295      	cmp	r5, r2
    8f38:	d849      	bhi.n	8fce <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8f3a:	4652      	mov	r2, sl
    8f3c:	1952      	adds	r2, r2, r5
    8f3e:	4293      	cmp	r3, r2
    8f40:	d34b      	bcc.n	8fda <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8f42:	46d3      	mov	fp, sl
    8f44:	4451      	add	r1, sl
    8f46:	2380      	movs	r3, #128	; 0x80
    8f48:	019b      	lsls	r3, r3, #6
    8f4a:	4299      	cmp	r1, r3
    8f4c:	d84b      	bhi.n	8fe6 <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    8f4e:	4b3e      	ldr	r3, [pc, #248]	; (9048 <D_Nv_Write_Impl+0x134>)
    8f50:	681b      	ldr	r3, [r3, #0]
    8f52:	2b00      	cmp	r3, #0
    8f54:	d000      	beq.n	8f58 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    8f56:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    8f58:	273f      	movs	r7, #63	; 0x3f
    8f5a:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    8f5c:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    8f5e:	2640      	movs	r6, #64	; 0x40
    8f60:	1bf6      	subs	r6, r6, r7
    8f62:	455e      	cmp	r6, fp
    8f64:	dd00      	ble.n	8f68 <D_Nv_Write_Impl+0x54>
    8f66:	4656      	mov	r6, sl
    8f68:	b2b3      	uxth	r3, r6
    8f6a:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    8f6c:	2240      	movs	r2, #64	; 0x40
    8f6e:	21ff      	movs	r1, #255	; 0xff
    8f70:	a802      	add	r0, sp, #8
    8f72:	4b36      	ldr	r3, [pc, #216]	; (904c <D_Nv_Write_Impl+0x138>)
    8f74:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    8f76:	003b      	movs	r3, r7
    8f78:	aa02      	add	r2, sp, #8
    8f7a:	4694      	mov	ip, r2
    8f7c:	4463      	add	r3, ip
    8f7e:	9300      	str	r3, [sp, #0]
    8f80:	0436      	lsls	r6, r6, #16
    8f82:	0c37      	lsrs	r7, r6, #16
    8f84:	003a      	movs	r2, r7
    8f86:	9901      	ldr	r1, [sp, #4]
    8f88:	0018      	movs	r0, r3
    8f8a:	4b31      	ldr	r3, [pc, #196]	; (9050 <D_Nv_Write_Impl+0x13c>)
    8f8c:	4798      	blx	r3
	cpu_irq_enter_critical();
    8f8e:	4b31      	ldr	r3, [pc, #196]	; (9054 <D_Nv_Write_Impl+0x140>)
    8f90:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    8f92:	4e31      	ldr	r6, [pc, #196]	; (9058 <D_Nv_Write_Impl+0x144>)
    8f94:	2240      	movs	r2, #64	; 0x40
    8f96:	a902      	add	r1, sp, #8
    8f98:	0020      	movs	r0, r4
    8f9a:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    8f9c:	2805      	cmp	r0, #5
    8f9e:	d0f9      	beq.n	8f94 <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    8fa0:	4b2e      	ldr	r3, [pc, #184]	; (905c <D_Nv_Write_Impl+0x148>)
    8fa2:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    8fa4:	4653      	mov	r3, sl
    8fa6:	465a      	mov	r2, fp
    8fa8:	1a9e      	subs	r6, r3, r2
    8faa:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    8fac:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    8fae:	9b01      	ldr	r3, [sp, #4]
    8fb0:	4699      	mov	r9, r3
    8fb2:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    8fb4:	2e00      	cmp	r6, #0
    8fb6:	d03b      	beq.n	9030 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    8fb8:	4b24      	ldr	r3, [pc, #144]	; (904c <D_Nv_Write_Impl+0x138>)
    8fba:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    8fbc:	4b24      	ldr	r3, [pc, #144]	; (9050 <D_Nv_Write_Impl+0x13c>)
    8fbe:	4698      	mov	r8, r3
    8fc0:	e031      	b.n	9026 <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    8fc2:	4b27      	ldr	r3, [pc, #156]	; (9060 <D_Nv_Write_Impl+0x14c>)
    8fc4:	4a27      	ldr	r2, [pc, #156]	; (9064 <D_Nv_Write_Impl+0x150>)
    8fc6:	218a      	movs	r1, #138	; 0x8a
    8fc8:	4827      	ldr	r0, [pc, #156]	; (9068 <D_Nv_Write_Impl+0x154>)
    8fca:	4c28      	ldr	r4, [pc, #160]	; (906c <D_Nv_Write_Impl+0x158>)
    8fcc:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    8fce:	4b28      	ldr	r3, [pc, #160]	; (9070 <D_Nv_Write_Impl+0x15c>)
    8fd0:	4a24      	ldr	r2, [pc, #144]	; (9064 <D_Nv_Write_Impl+0x150>)
    8fd2:	218b      	movs	r1, #139	; 0x8b
    8fd4:	4824      	ldr	r0, [pc, #144]	; (9068 <D_Nv_Write_Impl+0x154>)
    8fd6:	4c25      	ldr	r4, [pc, #148]	; (906c <D_Nv_Write_Impl+0x158>)
    8fd8:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8fda:	4b26      	ldr	r3, [pc, #152]	; (9074 <D_Nv_Write_Impl+0x160>)
    8fdc:	4a21      	ldr	r2, [pc, #132]	; (9064 <D_Nv_Write_Impl+0x150>)
    8fde:	218c      	movs	r1, #140	; 0x8c
    8fe0:	4821      	ldr	r0, [pc, #132]	; (9068 <D_Nv_Write_Impl+0x154>)
    8fe2:	4c22      	ldr	r4, [pc, #136]	; (906c <D_Nv_Write_Impl+0x158>)
    8fe4:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8fe6:	4b24      	ldr	r3, [pc, #144]	; (9078 <D_Nv_Write_Impl+0x164>)
    8fe8:	4a1e      	ldr	r2, [pc, #120]	; (9064 <D_Nv_Write_Impl+0x150>)
    8fea:	218d      	movs	r1, #141	; 0x8d
    8fec:	481e      	ldr	r0, [pc, #120]	; (9068 <D_Nv_Write_Impl+0x154>)
    8fee:	4c1f      	ldr	r4, [pc, #124]	; (906c <D_Nv_Write_Impl+0x158>)
    8ff0:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    8ff2:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    8ff4:	2240      	movs	r2, #64	; 0x40
    8ff6:	21ff      	movs	r1, #255	; 0xff
    8ff8:	a802      	add	r0, sp, #8
    8ffa:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    8ffc:	003a      	movs	r2, r7
    8ffe:	4649      	mov	r1, r9
    9000:	9800      	ldr	r0, [sp, #0]
    9002:	47c0      	blx	r8
	cpu_irq_enter_critical();
    9004:	4b13      	ldr	r3, [pc, #76]	; (9054 <D_Nv_Write_Impl+0x140>)
    9006:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    9008:	4d13      	ldr	r5, [pc, #76]	; (9058 <D_Nv_Write_Impl+0x144>)
    900a:	2240      	movs	r2, #64	; 0x40
    900c:	a902      	add	r1, sp, #8
    900e:	0020      	movs	r0, r4
    9010:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    9012:	2805      	cmp	r0, #5
    9014:	d0f9      	beq.n	900a <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    9016:	4b11      	ldr	r3, [pc, #68]	; (905c <D_Nv_Write_Impl+0x148>)
    9018:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    901a:	1bf6      	subs	r6, r6, r7
    901c:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    901e:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    9020:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    9022:	2e00      	cmp	r6, #0
    9024:	d004      	beq.n	9030 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    9026:	1c33      	adds	r3, r6, #0
    9028:	2e40      	cmp	r6, #64	; 0x40
    902a:	d9e2      	bls.n	8ff2 <D_Nv_Write_Impl+0xde>
    902c:	2340      	movs	r3, #64	; 0x40
    902e:	e7e0      	b.n	8ff2 <D_Nv_Write_Impl+0xde>
}
    9030:	b013      	add	sp, #76	; 0x4c
    9032:	bc3c      	pop	{r2, r3, r4, r5}
    9034:	4690      	mov	r8, r2
    9036:	4699      	mov	r9, r3
    9038:	46a2      	mov	sl, r4
    903a:	46ab      	mov	fp, r5
    903c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    903e:	46c0      	nop			; (mov r8, r8)
    9040:	00002100 	.word	0x00002100
    9044:	00006100 	.word	0x00006100
    9048:	200001d4 	.word	0x200001d4
    904c:	00010cc1 	.word	0x00010cc1
    9050:	00010caf 	.word	0x00010caf
    9054:	00006271 	.word	0x00006271
    9058:	000066ad 	.word	0x000066ad
    905c:	000062b1 	.word	0x000062b1
    9060:	00012084 	.word	0x00012084
    9064:	000121e0 	.word	0x000121e0
    9068:	00012094 	.word	0x00012094
    906c:	00010bed 	.word	0x00010bed
    9070:	000120d4 	.word	0x000120d4
    9074:	000120f0 	.word	0x000120f0
    9078:	00012124 	.word	0x00012124

0000907c <D_Nv_EraseSector_Impl>:
{
    907c:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    907e:	0344      	lsls	r4, r0, #13
    9080:	480c      	ldr	r0, [pc, #48]	; (90b4 <D_Nv_EraseSector_Impl+0x38>)
    9082:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    9084:	23ff      	movs	r3, #255	; 0xff
    9086:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    9088:	4b0b      	ldr	r3, [pc, #44]	; (90b8 <D_Nv_EraseSector_Impl+0x3c>)
    908a:	3b01      	subs	r3, #1
    908c:	2280      	movs	r2, #128	; 0x80
    908e:	0192      	lsls	r2, r2, #6
    9090:	18a6      	adds	r6, r4, r2
    9092:	429c      	cmp	r4, r3
    9094:	d807      	bhi.n	90a6 <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    9096:	4d09      	ldr	r5, [pc, #36]	; (90bc <D_Nv_EraseSector_Impl+0x40>)
    9098:	0020      	movs	r0, r4
    909a:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    909c:	3401      	adds	r4, #1
    909e:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    90a0:	42b4      	cmp	r4, r6
    90a2:	d1f9      	bne.n	9098 <D_Nv_EraseSector_Impl+0x1c>
}
    90a4:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    90a6:	4b06      	ldr	r3, [pc, #24]	; (90c0 <D_Nv_EraseSector_Impl+0x44>)
    90a8:	4a06      	ldr	r2, [pc, #24]	; (90c4 <D_Nv_EraseSector_Impl+0x48>)
    90aa:	21c2      	movs	r1, #194	; 0xc2
    90ac:	4806      	ldr	r0, [pc, #24]	; (90c8 <D_Nv_EraseSector_Impl+0x4c>)
    90ae:	4c07      	ldr	r4, [pc, #28]	; (90cc <D_Nv_EraseSector_Impl+0x50>)
    90b0:	47a0      	blx	r4
    90b2:	46c0      	nop			; (mov r8, r8)
    90b4:	00002100 	.word	0x00002100
    90b8:	00006100 	.word	0x00006100
    90bc:	00006755 	.word	0x00006755
    90c0:	000120d4 	.word	0x000120d4
    90c4:	000121f0 	.word	0x000121f0
    90c8:	00012094 	.word	0x00012094
    90cc:	00010bed 	.word	0x00010bed

000090d0 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    90d0:	b510      	push	{r4, lr}
    90d2:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    90d4:	2200      	movs	r2, #0
    90d6:	4c01      	ldr	r4, [pc, #4]	; (90dc <D_Nv_IsEmpty_Impl+0xc>)
    90d8:	47a0      	blx	r4
}
    90da:	bd10      	pop	{r4, pc}
    90dc:	00008d71 	.word	0x00008d71

000090e0 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    90e0:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    90e2:	4c01      	ldr	r4, [pc, #4]	; (90e8 <D_Nv_IsEqual_Impl+0x8>)
    90e4:	47a0      	blx	r4
}
    90e6:	bd10      	pop	{r4, pc}
    90e8:	00008d71 	.word	0x00008d71

000090ec <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    90ec:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    90ee:	4b05      	ldr	r3, [pc, #20]	; (9104 <PowerSupplyTooLow+0x18>)
    90f0:	681b      	ldr	r3, [r3, #0]
    90f2:	2b00      	cmp	r3, #0
    90f4:	d004      	beq.n	9100 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    90f6:	4798      	blx	r3
    90f8:	2301      	movs	r3, #1
    90fa:	4058      	eors	r0, r3
    90fc:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    90fe:	bd10      	pop	{r4, pc}
    bool result = false;
    9100:	2000      	movs	r0, #0
    9102:	e7fc      	b.n	90fe <PowerSupplyTooLow+0x12>
    9104:	20000348 	.word	0x20000348

00009108 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    9108:	2901      	cmp	r1, #1
    910a:	d009      	beq.n	9120 <UpdateSectorHead+0x18>
    910c:	2900      	cmp	r1, #0
    910e:	d002      	beq.n	9116 <UpdateSectorHead+0xe>
    9110:	2902      	cmp	r1, #2
    9112:	d00d      	beq.n	9130 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    9114:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    9116:	4b0a      	ldr	r3, [pc, #40]	; (9140 <UpdateSectorHead+0x38>)
    9118:	881a      	ldrh	r2, [r3, #0]
    911a:	1880      	adds	r0, r0, r2
    911c:	8018      	strh	r0, [r3, #0]
           break;
    911e:	e7f9      	b.n	9114 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    9120:	4a07      	ldr	r2, [pc, #28]	; (9140 <UpdateSectorHead+0x38>)
    9122:	8813      	ldrh	r3, [r2, #0]
    9124:	330f      	adds	r3, #15
    9126:	18c0      	adds	r0, r0, r3
    9128:	230f      	movs	r3, #15
    912a:	4398      	bics	r0, r3
    912c:	8010      	strh	r0, [r2, #0]
           break;
    912e:	e7f1      	b.n	9114 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    9130:	4a03      	ldr	r2, [pc, #12]	; (9140 <UpdateSectorHead+0x38>)
    9132:	8813      	ldrh	r3, [r2, #0]
    9134:	333f      	adds	r3, #63	; 0x3f
    9136:	18c0      	adds	r0, r0, r3
    9138:	233f      	movs	r3, #63	; 0x3f
    913a:	4398      	bics	r0, r3
    913c:	8010      	strh	r0, [r2, #0]
}
    913e:	e7e9      	b.n	9114 <UpdateSectorHead+0xc>
    9140:	2000034e 	.word	0x2000034e

00009144 <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    9144:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    9146:	2900      	cmp	r1, #0
    9148:	d019      	beq.n	917e <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    914a:	24ff      	movs	r4, #255	; 0xff
    914c:	e013      	b.n	9176 <ComputeCrc+0x32>
    914e:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    9150:	0a15      	lsrs	r5, r2, #8
    9152:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    9154:	091d      	lsrs	r5, r3, #4
    9156:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    9158:	0212      	lsls	r2, r2, #8
    915a:	405a      	eors	r2, r3
    915c:	031d      	lsls	r5, r3, #12
    915e:	406a      	eors	r2, r5
    9160:	015b      	lsls	r3, r3, #5
    9162:	405a      	eors	r2, r3
    9164:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    9166:	0003      	movs	r3, r0
    9168:	1e5d      	subs	r5, r3, #1
    916a:	41ab      	sbcs	r3, r5
    916c:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    916e:	3901      	subs	r1, #1
    9170:	b289      	uxth	r1, r1
    9172:	2900      	cmp	r1, #0
    9174:	d003      	beq.n	917e <ComputeCrc+0x3a>
        if (pData == NULL)
    9176:	2800      	cmp	r0, #0
    9178:	d0e9      	beq.n	914e <ComputeCrc+0xa>
            data = *pData;
    917a:	7803      	ldrb	r3, [r0, #0]
    917c:	e7e8      	b.n	9150 <ComputeCrc+0xc>
    }

    return crc;
}
    917e:	0010      	movs	r0, r2
    9180:	bd30      	pop	{r4, r5, pc}
    9182:	Address 0x00009182 is out of bounds.


00009184 <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    9184:	b5f0      	push	{r4, r5, r6, r7, lr}
    9186:	46de      	mov	lr, fp
    9188:	4657      	mov	r7, sl
    918a:	b580      	push	{r7, lr}
    918c:	b089      	sub	sp, #36	; 0x24
    918e:	9001      	str	r0, [sp, #4]
    9190:	9102      	str	r1, [sp, #8]
    9192:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    9194:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9196:	2a00      	cmp	r2, #0
    9198:	d00d      	beq.n	91b6 <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    919a:	4692      	mov	sl, r2
    919c:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    919e:	445b      	add	r3, fp
    91a0:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    91a2:	465e      	mov	r6, fp
    91a4:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    91a6:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    91a8:	45ab      	cmp	fp, r5
    91aa:	d03e      	beq.n	922a <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    91ac:	4f22      	ldr	r7, [pc, #136]	; (9238 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    91ae:	2c00      	cmp	r4, #0
    91b0:	d108      	bne.n	91c4 <GatherData+0x40>
                return false;
    91b2:	2000      	movs	r0, #0
    91b4:	e039      	b.n	922a <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    91b6:	2200      	movs	r2, #0
    91b8:	4692      	mov	sl, r2
    91ba:	e7f0      	b.n	919e <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    91bc:	ab04      	add	r3, sp, #16
    91be:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    91c0:	2c00      	cmp	r4, #0
    91c2:	d031      	beq.n	9228 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    91c4:	2310      	movs	r3, #16
    91c6:	aa04      	add	r2, sp, #16
    91c8:	0021      	movs	r1, r4
    91ca:	9801      	ldr	r0, [sp, #4]
    91cc:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    91ce:	ab04      	add	r3, sp, #16
    91d0:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    91d2:	42aa      	cmp	r2, r5
    91d4:	d2f2      	bcs.n	91bc <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    91d6:	88db      	ldrh	r3, [r3, #6]
    91d8:	18d3      	adds	r3, r2, r3
    91da:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    91dc:	42b3      	cmp	r3, r6
    91de:	d9ed      	bls.n	91bc <GatherData+0x38>
            else if ( readEnd > blockEnd )
    91e0:	42ab      	cmp	r3, r5
    91e2:	d201      	bcs.n	91e8 <GatherData+0x64>
                readStart = blockEnd;
    91e4:	001e      	movs	r6, r3
    91e6:	e7e9      	b.n	91bc <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    91e8:	1aa9      	subs	r1, r5, r2
    91ea:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    91ec:	42b2      	cmp	r2, r6
    91ee:	d915      	bls.n	921c <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    91f0:	ab04      	add	r3, sp, #16
    91f2:	895b      	ldrh	r3, [r3, #10]
    91f4:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    91f6:	000b      	movs	r3, r1
        readEnd -= count;
    91f8:	1aed      	subs	r5, r5, r3
    91fa:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    91fc:	4652      	mov	r2, sl
    91fe:	2a00      	cmp	r2, #0
    9200:	d008      	beq.n	9214 <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    9202:	3410      	adds	r4, #16
    9204:	1909      	adds	r1, r1, r4
            pDestination -= count;
    9206:	1ad2      	subs	r2, r2, r3
    9208:	4692      	mov	sl, r2
            sourcePointer -= count;
    920a:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    920c:	b289      	uxth	r1, r1
    920e:	9801      	ldr	r0, [sp, #4]
    9210:	4c09      	ldr	r4, [pc, #36]	; (9238 <GatherData+0xb4>)
    9212:	47a0      	blx	r4
    while ( readStart != readEnd )
    9214:	42ae      	cmp	r6, r5
    9216:	d00d      	beq.n	9234 <GatherData+0xb0>
    9218:	9c03      	ldr	r4, [sp, #12]
    921a:	e7c8      	b.n	91ae <GatherData+0x2a>
            count = readEnd - readStart;
    921c:	1bab      	subs	r3, r5, r6
    921e:	b29b      	uxth	r3, r3
            readStart = offset;
    9220:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    9222:	9a02      	ldr	r2, [sp, #8]
    9224:	9203      	str	r2, [sp, #12]
    9226:	e7e7      	b.n	91f8 <GatherData+0x74>
                return false;
    9228:	2000      	movs	r0, #0
}
    922a:	b009      	add	sp, #36	; 0x24
    922c:	bc0c      	pop	{r2, r3}
    922e:	4692      	mov	sl, r2
    9230:	469b      	mov	fp, r3
    9232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    9234:	2001      	movs	r0, #1
    9236:	e7f8      	b.n	922a <GatherData+0xa6>
    9238:	00008e9d 	.word	0x00008e9d

0000923c <ComputeDataCrc>:
{
    923c:	b5f0      	push	{r4, r5, r6, r7, lr}
    923e:	46de      	mov	lr, fp
    9240:	4647      	mov	r7, r8
    9242:	b580      	push	{r7, lr}
    9244:	b087      	sub	sp, #28
    9246:	9004      	str	r0, [sp, #16]
    9248:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    924a:	7995      	ldrb	r5, [r2, #6]
    924c:	79d3      	ldrb	r3, [r2, #7]
    924e:	021b      	lsls	r3, r3, #8
    9250:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    9252:	7917      	ldrb	r7, [r2, #4]
    9254:	7953      	ldrb	r3, [r2, #5]
    9256:	021b      	lsls	r3, r3, #8
    9258:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    925a:	0a2c      	lsrs	r4, r5, #8
    925c:	b264      	sxtb	r4, r4
    925e:	2c00      	cmp	r4, #0
    9260:	db2f      	blt.n	92c2 <ComputeDataCrc+0x86>
    9262:	4b1c      	ldr	r3, [pc, #112]	; (92d4 <ComputeDataCrc+0x98>)
    9264:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    9266:	4b1c      	ldr	r3, [pc, #112]	; (92d8 <ComputeDataCrc+0x9c>)
    9268:	4698      	mov	r8, r3
    926a:	e011      	b.n	9290 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    926c:	2d00      	cmp	r5, #0
    926e:	d02a      	beq.n	92c6 <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    9270:	4b1a      	ldr	r3, [pc, #104]	; (92dc <ComputeDataCrc+0xa0>)
    9272:	9300      	str	r3, [sp, #0]
    9274:	002b      	movs	r3, r5
    9276:	003a      	movs	r2, r7
    9278:	9905      	ldr	r1, [sp, #20]
    927a:	9804      	ldr	r0, [sp, #16]
    927c:	4e18      	ldr	r6, [pc, #96]	; (92e0 <ComputeDataCrc+0xa4>)
    927e:	47b0      	blx	r6
    9280:	2800      	cmp	r0, #0
    9282:	d020      	beq.n	92c6 <ComputeDataCrc+0x8a>
    9284:	0029      	movs	r1, r5
    9286:	e015      	b.n	92b4 <ComputeDataCrc+0x78>
    9288:	3c01      	subs	r4, #1
    928a:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    928c:	1c63      	adds	r3, r4, #1
    928e:	d01a      	beq.n	92c6 <ComputeDataCrc+0x8a>
        if (i)
    9290:	2c00      	cmp	r4, #0
    9292:	d0eb      	beq.n	926c <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    9294:	3d01      	subs	r5, #1
    9296:	3dff      	subs	r5, #255	; 0xff
    9298:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    929a:	4b10      	ldr	r3, [pc, #64]	; (92dc <ComputeDataCrc+0xa0>)
    929c:	9300      	str	r3, [sp, #0]
    929e:	2380      	movs	r3, #128	; 0x80
    92a0:	005b      	lsls	r3, r3, #1
    92a2:	003a      	movs	r2, r7
    92a4:	9905      	ldr	r1, [sp, #20]
    92a6:	9804      	ldr	r0, [sp, #16]
    92a8:	4e0d      	ldr	r6, [pc, #52]	; (92e0 <ComputeDataCrc+0xa4>)
    92aa:	47b0      	blx	r6
    92ac:	2800      	cmp	r0, #0
    92ae:	d0eb      	beq.n	9288 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    92b0:	2180      	movs	r1, #128	; 0x80
    92b2:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    92b4:	187f      	adds	r7, r7, r1
    92b6:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    92b8:	9a03      	ldr	r2, [sp, #12]
    92ba:	4808      	ldr	r0, [pc, #32]	; (92dc <ComputeDataCrc+0xa0>)
    92bc:	47c0      	blx	r8
    92be:	9003      	str	r0, [sp, #12]
    92c0:	e7e2      	b.n	9288 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    92c2:	4b04      	ldr	r3, [pc, #16]	; (92d4 <ComputeDataCrc+0x98>)
    92c4:	9303      	str	r3, [sp, #12]
}
    92c6:	9803      	ldr	r0, [sp, #12]
    92c8:	b007      	add	sp, #28
    92ca:	bc0c      	pop	{r2, r3}
    92cc:	4690      	mov	r8, r2
    92ce:	469b      	mov	fp, r3
    92d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92d2:	46c0      	nop			; (mov r8, r8)
    92d4:	0000ffff 	.word	0x0000ffff
    92d8:	00009145 	.word	0x00009145
    92dc:	20000208 	.word	0x20000208
    92e0:	00009185 	.word	0x00009185

000092e4 <FindItemCache>:
{
    92e4:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    92e6:	4b16      	ldr	r3, [pc, #88]	; (9340 <FindItemCache+0x5c>)
    92e8:	781c      	ldrb	r4, [r3, #0]
    92ea:	2c00      	cmp	r4, #0
    92ec:	d026      	beq.n	933c <FindItemCache+0x58>
        if ( cache->id == id )
    92ee:	4b15      	ldr	r3, [pc, #84]	; (9344 <FindItemCache+0x60>)
    92f0:	881b      	ldrh	r3, [r3, #0]
    92f2:	4283      	cmp	r3, r0
    92f4:	d016      	beq.n	9324 <FindItemCache+0x40>
    92f6:	2301      	movs	r3, #1
    92f8:	4e12      	ldr	r6, [pc, #72]	; (9344 <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    92fa:	b2da      	uxtb	r2, r3
    92fc:	4294      	cmp	r4, r2
    92fe:	d91b      	bls.n	9338 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    9300:	001d      	movs	r5, r3
        if ( cache->id == id )
    9302:	1c59      	adds	r1, r3, #1
    9304:	009a      	lsls	r2, r3, #2
    9306:	5ab2      	ldrh	r2, [r6, r2]
    9308:	4282      	cmp	r2, r0
    930a:	d001      	beq.n	9310 <FindItemCache+0x2c>
    930c:	000b      	movs	r3, r1
    930e:	e7f4      	b.n	92fa <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    9310:	009b      	lsls	r3, r3, #2
    9312:	480c      	ldr	r0, [pc, #48]	; (9344 <FindItemCache+0x60>)
    9314:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    9316:	00ad      	lsls	r5, r5, #2
    9318:	4b0a      	ldr	r3, [pc, #40]	; (9344 <FindItemCache+0x60>)
    931a:	195d      	adds	r5, r3, r5
    931c:	886b      	ldrh	r3, [r5, #2]
    931e:	2b00      	cmp	r3, #0
    9320:	d003      	beq.n	932a <FindItemCache+0x46>
}
    9322:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    9324:	4807      	ldr	r0, [pc, #28]	; (9344 <FindItemCache+0x60>)
    9326:	2500      	movs	r5, #0
    9328:	e7f5      	b.n	9316 <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    932a:	4b07      	ldr	r3, [pc, #28]	; (9348 <FindItemCache+0x64>)
    932c:	4a07      	ldr	r2, [pc, #28]	; (934c <FindItemCache+0x68>)
    932e:	218c      	movs	r1, #140	; 0x8c
    9330:	31ff      	adds	r1, #255	; 0xff
    9332:	4807      	ldr	r0, [pc, #28]	; (9350 <FindItemCache+0x6c>)
    9334:	4c07      	ldr	r4, [pc, #28]	; (9354 <FindItemCache+0x70>)
    9336:	47a0      	blx	r4
    return NULL;
    9338:	2000      	movs	r0, #0
    933a:	e7f2      	b.n	9322 <FindItemCache+0x3e>
    933c:	2000      	movs	r0, #0
    933e:	e7f0      	b.n	9322 <FindItemCache+0x3e>
    9340:	20000344 	.word	0x20000344
    9344:	20000324 	.word	0x20000324
    9348:	00012284 	.word	0x00012284
    934c:	0001236c 	.word	0x0001236c
    9350:	000122a0 	.word	0x000122a0
    9354:	00010bed 	.word	0x00010bed

00009358 <FindItem>:
{
    9358:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    935a:	4b05      	ldr	r3, [pc, #20]	; (9370 <FindItem+0x18>)
    935c:	4798      	blx	r3
    if (cache)
    935e:	2800      	cmp	r0, #0
    9360:	d004      	beq.n	936c <FindItem+0x14>
        return cache->lastBlock;
    9362:	7883      	ldrb	r3, [r0, #2]
    9364:	78c0      	ldrb	r0, [r0, #3]
    9366:	0200      	lsls	r0, r0, #8
    9368:	4318      	orrs	r0, r3
}
    936a:	bd10      	pop	{r4, pc}
    return 0x0000u;
    936c:	2000      	movs	r0, #0
    936e:	e7fc      	b.n	936a <FindItem+0x12>
    9370:	000092e5 	.word	0x000092e5

00009374 <CreateItemCache>:
{
    9374:	b510      	push	{r4, lr}
    9376:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    9378:	4b0e      	ldr	r3, [pc, #56]	; (93b4 <CreateItemCache+0x40>)
    937a:	4798      	blx	r3
    937c:	2800      	cmp	r0, #0
    937e:	d10b      	bne.n	9398 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    9380:	4b0d      	ldr	r3, [pc, #52]	; (93b8 <CreateItemCache+0x44>)
    9382:	781b      	ldrb	r3, [r3, #0]
    9384:	2b07      	cmp	r3, #7
    9386:	d80e      	bhi.n	93a6 <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    9388:	1c59      	adds	r1, r3, #1
    938a:	4a0b      	ldr	r2, [pc, #44]	; (93b8 <CreateItemCache+0x44>)
    938c:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    938e:	480b      	ldr	r0, [pc, #44]	; (93bc <CreateItemCache+0x48>)
    9390:	009b      	lsls	r3, r3, #2
    9392:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    9394:	18c0      	adds	r0, r0, r3
}
    9396:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    9398:	4b09      	ldr	r3, [pc, #36]	; (93c0 <CreateItemCache+0x4c>)
    939a:	4a0a      	ldr	r2, [pc, #40]	; (93c4 <CreateItemCache+0x50>)
    939c:	21cc      	movs	r1, #204	; 0xcc
    939e:	0049      	lsls	r1, r1, #1
    93a0:	4809      	ldr	r0, [pc, #36]	; (93c8 <CreateItemCache+0x54>)
    93a2:	4c0a      	ldr	r4, [pc, #40]	; (93cc <CreateItemCache+0x58>)
    93a4:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    93a6:	4b0a      	ldr	r3, [pc, #40]	; (93d0 <CreateItemCache+0x5c>)
    93a8:	4a06      	ldr	r2, [pc, #24]	; (93c4 <CreateItemCache+0x50>)
    93aa:	219a      	movs	r1, #154	; 0x9a
    93ac:	31ff      	adds	r1, #255	; 0xff
    93ae:	4806      	ldr	r0, [pc, #24]	; (93c8 <CreateItemCache+0x54>)
    93b0:	4c06      	ldr	r4, [pc, #24]	; (93cc <CreateItemCache+0x58>)
    93b2:	47a0      	blx	r4
    93b4:	000092e5 	.word	0x000092e5
    93b8:	20000344 	.word	0x20000344
    93bc:	20000324 	.word	0x20000324
    93c0:	0001222c 	.word	0x0001222c
    93c4:	0001237c 	.word	0x0001237c
    93c8:	000122a0 	.word	0x000122a0
    93cc:	00010bed 	.word	0x00010bed
    93d0:	00012248 	.word	0x00012248

000093d4 <DeleteItemCache>:
{
    93d4:	b510      	push	{r4, lr}
    assert(FindItemCache(id) != NULL);
    93d6:	4b0b      	ldr	r3, [pc, #44]	; (9404 <DeleteItemCache+0x30>)
    93d8:	4798      	blx	r3
    93da:	2800      	cmp	r0, #0
    93dc:	d00b      	beq.n	93f6 <DeleteItemCache+0x22>
    *cache = s_itemCache[--s_itemCount];
    93de:	4b0a      	ldr	r3, [pc, #40]	; (9408 <DeleteItemCache+0x34>)
    93e0:	7819      	ldrb	r1, [r3, #0]
    93e2:	3901      	subs	r1, #1
    93e4:	b2c9      	uxtb	r1, r1
    93e6:	7019      	strb	r1, [r3, #0]
    93e8:	0089      	lsls	r1, r1, #2
    93ea:	4b08      	ldr	r3, [pc, #32]	; (940c <DeleteItemCache+0x38>)
    93ec:	1859      	adds	r1, r3, r1
    93ee:	2204      	movs	r2, #4
    93f0:	4b07      	ldr	r3, [pc, #28]	; (9410 <DeleteItemCache+0x3c>)
    93f2:	4798      	blx	r3
}
    93f4:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) != NULL);
    93f6:	4b07      	ldr	r3, [pc, #28]	; (9414 <DeleteItemCache+0x40>)
    93f8:	4a07      	ldr	r2, [pc, #28]	; (9418 <DeleteItemCache+0x44>)
    93fa:	21d3      	movs	r1, #211	; 0xd3
    93fc:	0049      	lsls	r1, r1, #1
    93fe:	4807      	ldr	r0, [pc, #28]	; (941c <DeleteItemCache+0x48>)
    9400:	4c07      	ldr	r4, [pc, #28]	; (9420 <DeleteItemCache+0x4c>)
    9402:	47a0      	blx	r4
    9404:	000092e5 	.word	0x000092e5
    9408:	20000344 	.word	0x20000344
    940c:	20000324 	.word	0x20000324
    9410:	00010caf 	.word	0x00010caf
    9414:	00012268 	.word	0x00012268
    9418:	0001238c 	.word	0x0001238c
    941c:	000122a0 	.word	0x000122a0
    9420:	00010bed 	.word	0x00010bed

00009424 <eraseSectorTimerFired>:
{
    9424:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow())
    9426:	4b05      	ldr	r3, [pc, #20]	; (943c <eraseSectorTimerFired+0x18>)
    9428:	4798      	blx	r3
    942a:	2800      	cmp	r0, #0
    942c:	d000      	beq.n	9430 <eraseSectorTimerFired+0xc>
}
    942e:	bd10      	pop	{r4, pc}
        D_Nv_EraseSector(s_sectorToErase);
    9430:	4b03      	ldr	r3, [pc, #12]	; (9440 <eraseSectorTimerFired+0x1c>)
    9432:	7818      	ldrb	r0, [r3, #0]
    9434:	4b03      	ldr	r3, [pc, #12]	; (9444 <eraseSectorTimerFired+0x20>)
    9436:	4798      	blx	r3
}
    9438:	e7f9      	b.n	942e <eraseSectorTimerFired+0xa>
    943a:	46c0      	nop			; (mov r8, r8)
    943c:	000090ed 	.word	0x000090ed
    9440:	20000009 	.word	0x20000009
    9444:	0000907d 	.word	0x0000907d

00009448 <EraseSector>:

static bool EraseSector(void)
{
    9448:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    944a:	4c08      	ldr	r4, [pc, #32]	; (946c <EraseSector+0x24>)
    944c:	7820      	ldrb	r0, [r4, #0]
    944e:	4b08      	ldr	r3, [pc, #32]	; (9470 <EraseSector+0x28>)
    9450:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    9452:	7820      	ldrb	r0, [r4, #0]
    9454:	2280      	movs	r2, #128	; 0x80
    9456:	0192      	lsls	r2, r2, #6
    9458:	2100      	movs	r1, #0
    945a:	4b06      	ldr	r3, [pc, #24]	; (9474 <EraseSector+0x2c>)
    945c:	4798      	blx	r3
    945e:	2800      	cmp	r0, #0
    9460:	d003      	beq.n	946a <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    9462:	2280      	movs	r2, #128	; 0x80
    9464:	0052      	lsls	r2, r2, #1
    9466:	4b04      	ldr	r3, [pc, #16]	; (9478 <EraseSector+0x30>)
    9468:	801a      	strh	r2, [r3, #0]

    return true;
}
    946a:	bd10      	pop	{r4, pc}
    946c:	2000034c 	.word	0x2000034c
    9470:	0000907d 	.word	0x0000907d
    9474:	000090d1 	.word	0x000090d1
    9478:	2000034e 	.word	0x2000034e

0000947c <WriteAndCheck>:
{
    947c:	b5f0      	push	{r4, r5, r6, r7, lr}
    947e:	b083      	sub	sp, #12
    9480:	9001      	str	r0, [sp, #4]
    9482:	000d      	movs	r5, r1
    9484:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    9486:	4f07      	ldr	r7, [pc, #28]	; (94a4 <WriteAndCheck+0x28>)
    9488:	7838      	ldrb	r0, [r7, #0]
    948a:	0013      	movs	r3, r2
    948c:	000a      	movs	r2, r1
    948e:	9901      	ldr	r1, [sp, #4]
    9490:	4c05      	ldr	r4, [pc, #20]	; (94a8 <WriteAndCheck+0x2c>)
    9492:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    9494:	7838      	ldrb	r0, [r7, #0]
    9496:	0033      	movs	r3, r6
    9498:	002a      	movs	r2, r5
    949a:	9901      	ldr	r1, [sp, #4]
    949c:	4c03      	ldr	r4, [pc, #12]	; (94ac <WriteAndCheck+0x30>)
    949e:	47a0      	blx	r4
}
    94a0:	b003      	add	sp, #12
    94a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94a4:	2000034c 	.word	0x2000034c
    94a8:	00008f15 	.word	0x00008f15
    94ac:	000090e1 	.word	0x000090e1

000094b0 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    94b0:	b510      	push	{r4, lr}
    94b2:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    94b4:	ac01      	add	r4, sp, #4
    94b6:	2341      	movs	r3, #65	; 0x41
    94b8:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    94ba:	3313      	adds	r3, #19
    94bc:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    94be:	3b01      	subs	r3, #1
    94c0:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    94c2:	3b05      	subs	r3, #5
    94c4:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    94c6:	3328      	adds	r3, #40	; 0x28
    94c8:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    94ca:	3b44      	subs	r3, #68	; 0x44
    94cc:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    94ce:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    94d0:	43c0      	mvns	r0, r0
    94d2:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    94d4:	4b08      	ldr	r3, [pc, #32]	; (94f8 <WriteSectorHeader+0x48>)
    94d6:	881b      	ldrh	r3, [r3, #0]
    94d8:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    94da:	4a08      	ldr	r2, [pc, #32]	; (94fc <WriteSectorHeader+0x4c>)
    94dc:	2110      	movs	r1, #16
    94de:	466b      	mov	r3, sp
    94e0:	1d98      	adds	r0, r3, #6
    94e2:	4b07      	ldr	r3, [pc, #28]	; (9500 <WriteSectorHeader+0x50>)
    94e4:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    94e6:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    94e8:	2212      	movs	r2, #18
    94ea:	0021      	movs	r1, r4
    94ec:	2000      	movs	r0, #0
    94ee:	4b05      	ldr	r3, [pc, #20]	; (9504 <WriteSectorHeader+0x54>)
    94f0:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    94f2:	b006      	add	sp, #24
    94f4:	bd10      	pop	{r4, pc}
    94f6:	46c0      	nop			; (mov r8, r8)
    94f8:	20000346 	.word	0x20000346
    94fc:	0000ffff 	.word	0x0000ffff
    9500:	00009145 	.word	0x00009145
    9504:	0000947d 	.word	0x0000947d

00009508 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    9508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    950a:	0004      	movs	r4, r0
    950c:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    950e:	4a21      	ldr	r2, [pc, #132]	; (9594 <SmartCompacting+0x8c>)
    9510:	8813      	ldrh	r3, [r2, #0]
    9512:	18cb      	adds	r3, r1, r3
    9514:	b29b      	uxth	r3, r3
    9516:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    9518:	2bff      	cmp	r3, #255	; 0xff
    951a:	d92e      	bls.n	957a <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    951c:	4b1e      	ldr	r3, [pc, #120]	; (9598 <SmartCompacting+0x90>)
    951e:	881a      	ldrh	r2, [r3, #0]
    9520:	1880      	adds	r0, r0, r2
    9522:	2580      	movs	r5, #128	; 0x80
    9524:	006d      	lsls	r5, r5, #1
    9526:	1aaa      	subs	r2, r5, r2
    9528:	491c      	ldr	r1, [pc, #112]	; (959c <SmartCompacting+0x94>)
    952a:	4b1d      	ldr	r3, [pc, #116]	; (95a0 <SmartCompacting+0x98>)
    952c:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    952e:	4b1d      	ldr	r3, [pc, #116]	; (95a4 <SmartCompacting+0x9c>)
    9530:	8818      	ldrh	r0, [r3, #0]
    9532:	002a      	movs	r2, r5
    9534:	0021      	movs	r1, r4
    9536:	4b1c      	ldr	r3, [pc, #112]	; (95a8 <SmartCompacting+0xa0>)
    9538:	4798      	blx	r3
    953a:	1e05      	subs	r5, r0, #0
    953c:	d027      	beq.n	958e <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    953e:	2100      	movs	r1, #0
    9540:	2080      	movs	r0, #128	; 0x80
    9542:	0040      	lsls	r0, r0, #1
    9544:	4b19      	ldr	r3, [pc, #100]	; (95ac <SmartCompacting+0xa4>)
    9546:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    9548:	4b13      	ldr	r3, [pc, #76]	; (9598 <SmartCompacting+0x90>)
    954a:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    954c:	2200      	movs	r2, #0
    954e:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    9550:	4b10      	ldr	r3, [pc, #64]	; (9594 <SmartCompacting+0x8c>)
    9552:	881e      	ldrh	r6, [r3, #0]
    9554:	3e01      	subs	r6, #1
    9556:	3eff      	subs	r6, #255	; 0xff
    9558:	b2b6      	uxth	r6, r6
    955a:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    955c:	2e00      	cmp	r6, #0
    955e:	d016      	beq.n	958e <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    9560:	2180      	movs	r1, #128	; 0x80
    9562:	0049      	lsls	r1, r1, #1
    9564:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    9566:	b289      	uxth	r1, r1
    9568:	4b0c      	ldr	r3, [pc, #48]	; (959c <SmartCompacting+0x94>)
    956a:	1859      	adds	r1, r3, r1
    956c:	0032      	movs	r2, r6
    956e:	0020      	movs	r0, r4
    9570:	4b0b      	ldr	r3, [pc, #44]	; (95a0 <SmartCompacting+0x98>)
    9572:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    9574:	4b08      	ldr	r3, [pc, #32]	; (9598 <SmartCompacting+0x90>)
    9576:	801e      	strh	r6, [r3, #0]
    9578:	e009      	b.n	958e <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    957a:	4e07      	ldr	r6, [pc, #28]	; (9598 <SmartCompacting+0x90>)
    957c:	8837      	ldrh	r7, [r6, #0]
    957e:	19c0      	adds	r0, r0, r7
    9580:	000a      	movs	r2, r1
    9582:	4906      	ldr	r1, [pc, #24]	; (959c <SmartCompacting+0x94>)
    9584:	4b06      	ldr	r3, [pc, #24]	; (95a0 <SmartCompacting+0x98>)
    9586:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    9588:	19ed      	adds	r5, r5, r7
    958a:	8035      	strh	r5, [r6, #0]
        return true;
    958c:	2501      	movs	r5, #1
        }
    }

    return true;

}
    958e:	0028      	movs	r0, r5
    9590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9592:	46c0      	nop			; (mov r8, r8)
    9594:	20000204 	.word	0x20000204
    9598:	200001d8 	.word	0x200001d8
    959c:	20000208 	.word	0x20000208
    95a0:	00010caf 	.word	0x00010caf
    95a4:	2000034e 	.word	0x2000034e
    95a8:	0000947d 	.word	0x0000947d
    95ac:	00009109 	.word	0x00009109

000095b0 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    95b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    95b2:	46de      	mov	lr, fp
    95b4:	4657      	mov	r7, sl
    95b6:	464e      	mov	r6, r9
    95b8:	4645      	mov	r5, r8
    95ba:	b5e0      	push	{r5, r6, r7, lr}
    95bc:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    95be:	487b      	ldr	r0, [pc, #492]	; (97ac <CompactSector+0x1fc>)
    95c0:	4b7b      	ldr	r3, [pc, #492]	; (97b0 <CompactSector+0x200>)
    95c2:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    95c4:	2300      	movs	r3, #0
    95c6:	4a7b      	ldr	r2, [pc, #492]	; (97b4 <CompactSector+0x204>)
    95c8:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    95ca:	4a7b      	ldr	r2, [pc, #492]	; (97b8 <CompactSector+0x208>)
    95cc:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    95ce:	4a7b      	ldr	r2, [pc, #492]	; (97bc <CompactSector+0x20c>)
    95d0:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    95d2:	4a7b      	ldr	r2, [pc, #492]	; (97c0 <CompactSector+0x210>)
    95d4:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    95d6:	4b7b      	ldr	r3, [pc, #492]	; (97c4 <CompactSector+0x214>)
    95d8:	781b      	ldrb	r3, [r3, #0]
    95da:	001f      	movs	r7, r3
    95dc:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    95de:	2312      	movs	r3, #18
    95e0:	aa0f      	add	r2, sp, #60	; 0x3c
    95e2:	2100      	movs	r1, #0
    95e4:	0038      	movs	r0, r7
    95e6:	4c78      	ldr	r4, [pc, #480]	; (97c8 <CompactSector+0x218>)
    95e8:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    95ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    95ec:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    95ee:	4c75      	ldr	r4, [pc, #468]	; (97c4 <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    95f0:	0025      	movs	r5, r4
        s_sector++;
    95f2:	0026      	movs	r6, r4
    95f4:	e008      	b.n	9608 <CompactSector+0x58>
    95f6:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    95f8:	4b72      	ldr	r3, [pc, #456]	; (97c4 <CompactSector+0x214>)
    95fa:	781b      	ldrb	r3, [r3, #0]
    95fc:	42bb      	cmp	r3, r7
    95fe:	d00b      	beq.n	9618 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    9600:	4b72      	ldr	r3, [pc, #456]	; (97cc <CompactSector+0x21c>)
    9602:	4798      	blx	r3
    9604:	2800      	cmp	r0, #0
    9606:	d10d      	bne.n	9624 <CompactSector+0x74>
        s_sector++;
    9608:	7823      	ldrb	r3, [r4, #0]
    960a:	3301      	adds	r3, #1
    960c:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    960e:	2b01      	cmp	r3, #1
    9610:	d9f1      	bls.n	95f6 <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    9612:	2300      	movs	r3, #0
    9614:	702b      	strb	r3, [r5, #0]
    9616:	e7ef      	b.n	95f8 <CompactSector+0x48>
            assert(false);
    9618:	4b6d      	ldr	r3, [pc, #436]	; (97d0 <CompactSector+0x220>)
    961a:	4a6e      	ldr	r2, [pc, #440]	; (97d4 <CompactSector+0x224>)
    961c:	496e      	ldr	r1, [pc, #440]	; (97d8 <CompactSector+0x228>)
    961e:	486f      	ldr	r0, [pc, #444]	; (97dc <CompactSector+0x22c>)
    9620:	4c6f      	ldr	r4, [pc, #444]	; (97e0 <CompactSector+0x230>)
    9622:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    9624:	4b6f      	ldr	r3, [pc, #444]	; (97e4 <CompactSector+0x234>)
    9626:	781b      	ldrb	r3, [r3, #0]
    9628:	2b00      	cmp	r3, #0
    962a:	d06a      	beq.n	9702 <CompactSector+0x152>
    962c:	2300      	movs	r3, #0
    962e:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    9630:	3301      	adds	r3, #1
    9632:	33ff      	adds	r3, #255	; 0xff
    9634:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    9636:	466a      	mov	r2, sp
    9638:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    963a:	4b6b      	ldr	r3, [pc, #428]	; (97e8 <CompactSector+0x238>)
    963c:	3310      	adds	r3, #16
    963e:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    9640:	9b06      	ldr	r3, [sp, #24]
    9642:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    9644:	009f      	lsls	r7, r3, #2
    9646:	4b69      	ldr	r3, [pc, #420]	; (97ec <CompactSector+0x23c>)
    9648:	469c      	mov	ip, r3
    964a:	4467      	add	r7, ip
    964c:	887b      	ldrh	r3, [r7, #2]
    964e:	001d      	movs	r5, r3
    9650:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9652:	2310      	movs	r3, #16
    9654:	aa0b      	add	r2, sp, #44	; 0x2c
    9656:	0029      	movs	r1, r5
    9658:	9803      	ldr	r0, [sp, #12]
    965a:	4680      	mov	r8, r0
    965c:	4c5a      	ldr	r4, [pc, #360]	; (97c8 <CompactSector+0x218>)
    965e:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    9660:	ae0b      	add	r6, sp, #44	; 0x2c
    9662:	2300      	movs	r3, #0
    9664:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    9666:	8934      	ldrh	r4, [r6, #8]
    9668:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    966a:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    966c:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    966e:	3410      	adds	r4, #16
    9670:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    9672:	0032      	movs	r2, r6
    9674:	0029      	movs	r1, r5
    9676:	4640      	mov	r0, r8
    9678:	4b5d      	ldr	r3, [pc, #372]	; (97f0 <CompactSector+0x240>)
    967a:	4798      	blx	r3
    967c:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    967e:	4a5d      	ldr	r2, [pc, #372]	; (97f4 <CompactSector+0x244>)
    9680:	210e      	movs	r1, #14
    9682:	a80b      	add	r0, sp, #44	; 0x2c
    9684:	4b5c      	ldr	r3, [pc, #368]	; (97f8 <CompactSector+0x248>)
    9686:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    9688:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    968a:	4d57      	ldr	r5, [pc, #348]	; (97e8 <CompactSector+0x238>)
    968c:	464a      	mov	r2, r9
    968e:	21ff      	movs	r1, #255	; 0xff
    9690:	0028      	movs	r0, r5
    9692:	4b5a      	ldr	r3, [pc, #360]	; (97fc <CompactSector+0x24c>)
    9694:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9696:	002b      	movs	r3, r5
    9698:	ce07      	ldmia	r6!, {r0, r1, r2}
    969a:	c307      	stmia	r3!, {r0, r1, r2}
    969c:	6832      	ldr	r2, [r6, #0]
    969e:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    96a0:	4b57      	ldr	r3, [pc, #348]	; (9800 <CompactSector+0x250>)
    96a2:	881b      	ldrh	r3, [r3, #0]
    96a4:	4a45      	ldr	r2, [pc, #276]	; (97bc <CompactSector+0x20c>)
    96a6:	8812      	ldrh	r2, [r2, #0]
    96a8:	189b      	adds	r3, r3, r2
    96aa:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    96ac:	454c      	cmp	r4, r9
    96ae:	d904      	bls.n	96ba <CompactSector+0x10a>
    96b0:	2600      	movs	r6, #0
    96b2:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    96b4:	4a4c      	ldr	r2, [pc, #304]	; (97e8 <CompactSector+0x238>)
    96b6:	4690      	mov	r8, r2
    96b8:	e068      	b.n	978c <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    96ba:	ab0b      	add	r3, sp, #44	; 0x2c
    96bc:	891b      	ldrh	r3, [r3, #8]
    96be:	9a08      	ldr	r2, [sp, #32]
    96c0:	9200      	str	r2, [sp, #0]
    96c2:	2200      	movs	r2, #0
    96c4:	9904      	ldr	r1, [sp, #16]
    96c6:	9803      	ldr	r0, [sp, #12]
    96c8:	4e4e      	ldr	r6, [pc, #312]	; (9804 <CompactSector+0x254>)
    96ca:	47b0      	blx	r6
    96cc:	2800      	cmp	r0, #0
    96ce:	d063      	beq.n	9798 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    96d0:	9b07      	ldr	r3, [sp, #28]
    96d2:	009d      	lsls	r5, r3, #2
    96d4:	4b45      	ldr	r3, [pc, #276]	; (97ec <CompactSector+0x23c>)
    96d6:	195d      	adds	r5, r3, r5
    96d8:	4b49      	ldr	r3, [pc, #292]	; (9800 <CompactSector+0x250>)
    96da:	881b      	ldrh	r3, [r3, #0]
    96dc:	4a37      	ldr	r2, [pc, #220]	; (97bc <CompactSector+0x20c>)
    96de:	8812      	ldrh	r2, [r2, #0]
    96e0:	189b      	adds	r3, r3, r2
    96e2:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    96e4:	0021      	movs	r1, r4
    96e6:	a814      	add	r0, sp, #80	; 0x50
    96e8:	4b47      	ldr	r3, [pc, #284]	; (9808 <CompactSector+0x258>)
    96ea:	4798      	blx	r3
    96ec:	2800      	cmp	r0, #0
    96ee:	d053      	beq.n	9798 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    96f0:	9b06      	ldr	r3, [sp, #24]
    96f2:	3301      	adds	r3, #1
    96f4:	b2db      	uxtb	r3, r3
    96f6:	001a      	movs	r2, r3
    96f8:	9306      	str	r3, [sp, #24]
    96fa:	4b3a      	ldr	r3, [pc, #232]	; (97e4 <CompactSector+0x234>)
    96fc:	781b      	ldrb	r3, [r3, #0]
    96fe:	4293      	cmp	r3, r2
    9700:	d89e      	bhi.n	9640 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    9702:	4b2f      	ldr	r3, [pc, #188]	; (97c0 <CompactSector+0x210>)
    9704:	881a      	ldrh	r2, [r3, #0]
    9706:	2a00      	cmp	r2, #0
    9708:	d006      	beq.n	9718 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    970a:	4b3d      	ldr	r3, [pc, #244]	; (9800 <CompactSector+0x250>)
    970c:	8818      	ldrh	r0, [r3, #0]
    970e:	a914      	add	r1, sp, #80	; 0x50
    9710:	4b3e      	ldr	r3, [pc, #248]	; (980c <CompactSector+0x25c>)
    9712:	4798      	blx	r3
    9714:	1e04      	subs	r4, r0, #0
    9716:	d040      	beq.n	979a <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    9718:	4b29      	ldr	r3, [pc, #164]	; (97c0 <CompactSector+0x210>)
    971a:	8818      	ldrh	r0, [r3, #0]
    971c:	2100      	movs	r1, #0
    971e:	4b3c      	ldr	r3, [pc, #240]	; (9810 <CompactSector+0x260>)
    9720:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    9722:	4b37      	ldr	r3, [pc, #220]	; (9800 <CompactSector+0x250>)
    9724:	881a      	ldrh	r2, [r3, #0]
    9726:	4b3b      	ldr	r3, [pc, #236]	; (9814 <CompactSector+0x264>)
    9728:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    972a:	9809      	ldr	r0, [sp, #36]	; 0x24
    972c:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    972e:	4b3a      	ldr	r3, [pc, #232]	; (9818 <CompactSector+0x268>)
    9730:	4798      	blx	r3
    9732:	1e04      	subs	r4, r0, #0
    9734:	d031      	beq.n	979a <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    9736:	2102      	movs	r1, #2
    9738:	2000      	movs	r0, #0
    973a:	4b35      	ldr	r3, [pc, #212]	; (9810 <CompactSector+0x260>)
    973c:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    973e:	4b37      	ldr	r3, [pc, #220]	; (981c <CompactSector+0x26c>)
    9740:	466a      	mov	r2, sp
    9742:	7b12      	ldrb	r2, [r2, #12]
    9744:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    9746:	4d36      	ldr	r5, [pc, #216]	; (9820 <CompactSector+0x270>)
    9748:	0028      	movs	r0, r5
    974a:	4b19      	ldr	r3, [pc, #100]	; (97b0 <CompactSector+0x200>)
    974c:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    974e:	0028      	movs	r0, r5
    9750:	4b34      	ldr	r3, [pc, #208]	; (9824 <CompactSector+0x274>)
    9752:	4798      	blx	r3

    return true;
    9754:	e021      	b.n	979a <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    9756:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    9758:	1aef      	subs	r7, r5, r3
    975a:	b2ba      	uxth	r2, r7
    975c:	4693      	mov	fp, r2
    975e:	4443      	add	r3, r8
    9760:	9300      	str	r3, [sp, #0]
    9762:	0013      	movs	r3, r2
    9764:	0032      	movs	r2, r6
    9766:	9904      	ldr	r1, [sp, #16]
    9768:	9803      	ldr	r0, [sp, #12]
    976a:	4f26      	ldr	r7, [pc, #152]	; (9804 <CompactSector+0x254>)
    976c:	47b8      	blx	r7
    976e:	2800      	cmp	r0, #0
    9770:	d012      	beq.n	9798 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    9772:	0029      	movs	r1, r5
    9774:	a814      	add	r0, sp, #80	; 0x50
    9776:	4b24      	ldr	r3, [pc, #144]	; (9808 <CompactSector+0x258>)
    9778:	4798      	blx	r3
    977a:	2800      	cmp	r0, #0
    977c:	d00c      	beq.n	9798 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    977e:	1b64      	subs	r4, r4, r5
    9780:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    9782:	445e      	add	r6, fp
    9784:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    9786:	2300      	movs	r3, #0
            } while(currLength > 0);
    9788:	2c00      	cmp	r4, #0
    978a:	d0b1      	beq.n	96f0 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    978c:	1c25      	adds	r5, r4, #0
    978e:	454c      	cmp	r4, r9
    9790:	d9e1      	bls.n	9756 <CompactSector+0x1a6>
    9792:	466a      	mov	r2, sp
    9794:	8ad5      	ldrh	r5, [r2, #22]
    9796:	e7de      	b.n	9756 <CompactSector+0x1a6>
                return false;
    9798:	2400      	movs	r4, #0
}
    979a:	0020      	movs	r0, r4
    979c:	b055      	add	sp, #340	; 0x154
    979e:	bc3c      	pop	{r2, r3, r4, r5}
    97a0:	4690      	mov	r8, r2
    97a2:	4699      	mov	r9, r3
    97a4:	46a2      	mov	sl, r4
    97a6:	46ab      	mov	fp, r5
    97a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97aa:	46c0      	nop			; (mov r8, r8)
    97ac:	200001f0 	.word	0x200001f0
    97b0:	0000c95d 	.word	0x0000c95d
    97b4:	2000031c 	.word	0x2000031c
    97b8:	2000031e 	.word	0x2000031e
    97bc:	200001d8 	.word	0x200001d8
    97c0:	20000204 	.word	0x20000204
    97c4:	2000034c 	.word	0x2000034c
    97c8:	00008e9d 	.word	0x00008e9d
    97cc:	00009449 	.word	0x00009449
    97d0:	00012224 	.word	0x00012224
    97d4:	000123a8 	.word	0x000123a8
    97d8:	000003d5 	.word	0x000003d5
    97dc:	000122a0 	.word	0x000122a0
    97e0:	00010bed 	.word	0x00010bed
    97e4:	20000344 	.word	0x20000344
    97e8:	20000208 	.word	0x20000208
    97ec:	20000324 	.word	0x20000324
    97f0:	0000923d 	.word	0x0000923d
    97f4:	0000ffff 	.word	0x0000ffff
    97f8:	00009145 	.word	0x00009145
    97fc:	00010cc1 	.word	0x00010cc1
    9800:	2000034e 	.word	0x2000034e
    9804:	00009185 	.word	0x00009185
    9808:	00009509 	.word	0x00009509
    980c:	0000947d 	.word	0x0000947d
    9810:	00009109 	.word	0x00009109
    9814:	20000346 	.word	0x20000346
    9818:	000094b1 	.word	0x000094b1
    981c:	20000009 	.word	0x20000009
    9820:	20000308 	.word	0x20000308
    9824:	0000c9c9 	.word	0x0000c9c9

00009828 <compactSectorTimerFired>:
{
    9828:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    982a:	4b07      	ldr	r3, [pc, #28]	; (9848 <compactSectorTimerFired+0x20>)
    982c:	4798      	blx	r3
    982e:	2800      	cmp	r0, #0
    9830:	d000      	beq.n	9834 <compactSectorTimerFired+0xc>
}
    9832:	bd10      	pop	{r4, pc}
      status = CompactSector();
    9834:	4b05      	ldr	r3, [pc, #20]	; (984c <compactSectorTimerFired+0x24>)
    9836:	4798      	blx	r3
      assert(false);
    9838:	4b05      	ldr	r3, [pc, #20]	; (9850 <compactSectorTimerFired+0x28>)
    983a:	4a06      	ldr	r2, [pc, #24]	; (9854 <compactSectorTimerFired+0x2c>)
    983c:	212c      	movs	r1, #44	; 0x2c
    983e:	31ff      	adds	r1, #255	; 0xff
    9840:	4805      	ldr	r0, [pc, #20]	; (9858 <compactSectorTimerFired+0x30>)
    9842:	4c06      	ldr	r4, [pc, #24]	; (985c <compactSectorTimerFired+0x34>)
    9844:	47a0      	blx	r4
    9846:	46c0      	nop			; (mov r8, r8)
    9848:	000090ed 	.word	0x000090ed
    984c:	000095b1 	.word	0x000095b1
    9850:	00012224 	.word	0x00012224
    9854:	00012354 	.word	0x00012354
    9858:	000122a0 	.word	0x000122a0
    985c:	00010bed 	.word	0x00010bed

00009860 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    9860:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    9862:	4b12      	ldr	r3, [pc, #72]	; (98ac <CompactSectorIfNeeded+0x4c>)
    9864:	881a      	ldrh	r2, [r3, #0]
    9866:	2380      	movs	r3, #128	; 0x80
    9868:	019b      	lsls	r3, r3, #6
    986a:	1a9b      	subs	r3, r3, r2
    986c:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    986e:	4283      	cmp	r3, r0
    9870:	d303      	bcc.n	987a <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    9872:	4a0f      	ldr	r2, [pc, #60]	; (98b0 <CompactSectorIfNeeded+0x50>)
    9874:	4293      	cmp	r3, r2
    9876:	d90a      	bls.n	988e <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    9878:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    987a:	4b0e      	ldr	r3, [pc, #56]	; (98b4 <CompactSectorIfNeeded+0x54>)
    987c:	4798      	blx	r3
    987e:	2800      	cmp	r0, #0
    9880:	d1fa      	bne.n	9878 <CompactSectorIfNeeded+0x18>
            assert(false);
    9882:	4b0d      	ldr	r3, [pc, #52]	; (98b8 <CompactSectorIfNeeded+0x58>)
    9884:	4a0d      	ldr	r2, [pc, #52]	; (98bc <CompactSectorIfNeeded+0x5c>)
    9886:	490e      	ldr	r1, [pc, #56]	; (98c0 <CompactSectorIfNeeded+0x60>)
    9888:	480e      	ldr	r0, [pc, #56]	; (98c4 <CompactSectorIfNeeded+0x64>)
    988a:	4c0f      	ldr	r4, [pc, #60]	; (98c8 <CompactSectorIfNeeded+0x68>)
    988c:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    988e:	480f      	ldr	r0, [pc, #60]	; (98cc <CompactSectorIfNeeded+0x6c>)
    9890:	4b0f      	ldr	r3, [pc, #60]	; (98d0 <CompactSectorIfNeeded+0x70>)
    9892:	4798      	blx	r3
    9894:	2800      	cmp	r0, #0
    9896:	d1ef      	bne.n	9878 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    9898:	4b0c      	ldr	r3, [pc, #48]	; (98cc <CompactSectorIfNeeded+0x6c>)
    989a:	4a0e      	ldr	r2, [pc, #56]	; (98d4 <CompactSectorIfNeeded+0x74>)
    989c:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    989e:	4a0e      	ldr	r2, [pc, #56]	; (98d8 <CompactSectorIfNeeded+0x78>)
    98a0:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    98a2:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    98a4:	2200      	movs	r2, #0
    98a6:	731a      	strb	r2, [r3, #12]
    98a8:	e7e6      	b.n	9878 <CompactSectorIfNeeded+0x18>
    98aa:	46c0      	nop			; (mov r8, r8)
    98ac:	2000034e 	.word	0x2000034e
    98b0:	0000080f 	.word	0x0000080f
    98b4:	000095b1 	.word	0x000095b1
    98b8:	00012224 	.word	0x00012224
    98bc:	000123b8 	.word	0x000123b8
    98c0:	0000044e 	.word	0x0000044e
    98c4:	000122a0 	.word	0x000122a0
    98c8:	00010bed 	.word	0x00010bed
    98cc:	200001f0 	.word	0x200001f0
    98d0:	0000c99d 	.word	0x0000c99d
    98d4:	00009829 	.word	0x00009829
    98d8:	00002710 	.word	0x00002710

000098dc <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    98dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    98de:	46de      	mov	lr, fp
    98e0:	4657      	mov	r7, sl
    98e2:	464e      	mov	r6, r9
    98e4:	4645      	mov	r5, r8
    98e6:	b5e0      	push	{r5, r6, r7, lr}
    98e8:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    98ea:	4b77      	ldr	r3, [pc, #476]	; (9ac8 <CompactItem+0x1ec>)
    98ec:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    98ee:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    98f0:	2800      	cmp	r0, #0
    98f2:	d007      	beq.n	9904 <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    98f4:	0018      	movs	r0, r3
    98f6:	b00b      	add	sp, #44	; 0x2c
    98f8:	bc3c      	pop	{r2, r3, r4, r5}
    98fa:	4690      	mov	r8, r2
    98fc:	4699      	mov	r9, r3
    98fe:	46a2      	mov	sl, r4
    9900:	46ab      	mov	fp, r5
    9902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    9904:	4b71      	ldr	r3, [pc, #452]	; (9acc <CompactItem+0x1f0>)
    9906:	8818      	ldrh	r0, [r3, #0]
    9908:	2800      	cmp	r0, #0
    990a:	d146      	bne.n	999a <CompactItem+0xbe>
    990c:	4b70      	ldr	r3, [pc, #448]	; (9ad0 <CompactItem+0x1f4>)
    990e:	881b      	ldrh	r3, [r3, #0]
    9910:	2b00      	cmp	r3, #0
    9912:	d100      	bne.n	9916 <CompactItem+0x3a>
    9914:	e0d0      	b.n	9ab8 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    9916:	4b6e      	ldr	r3, [pc, #440]	; (9ad0 <CompactItem+0x1f4>)
    9918:	8818      	ldrh	r0, [r3, #0]
    991a:	4b6e      	ldr	r3, [pc, #440]	; (9ad4 <CompactItem+0x1f8>)
    991c:	4798      	blx	r3
    991e:	4683      	mov	fp, r0
    if ( cache == NULL )
    9920:	2800      	cmp	r0, #0
    9922:	d100      	bne.n	9926 <CompactItem+0x4a>
    9924:	e0ca      	b.n	9abc <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    9926:	7882      	ldrb	r2, [r0, #2]
    9928:	78c3      	ldrb	r3, [r0, #3]
    992a:	021b      	lsls	r3, r3, #8
    992c:	4313      	orrs	r3, r2
    992e:	0019      	movs	r1, r3
    9930:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9932:	4b69      	ldr	r3, [pc, #420]	; (9ad8 <CompactItem+0x1fc>)
    9934:	7818      	ldrb	r0, [r3, #0]
    9936:	2310      	movs	r3, #16
    9938:	aa06      	add	r2, sp, #24
    993a:	4c68      	ldr	r4, [pc, #416]	; (9adc <CompactItem+0x200>)
    993c:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    993e:	4b63      	ldr	r3, [pc, #396]	; (9acc <CompactItem+0x1f0>)
    9940:	881a      	ldrh	r2, [r3, #0]
    9942:	2a00      	cmp	r2, #0
    9944:	d02e      	beq.n	99a4 <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    9946:	4b66      	ldr	r3, [pc, #408]	; (9ae0 <CompactItem+0x204>)
    9948:	881b      	ldrh	r3, [r3, #0]
    994a:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    994c:	ab06      	add	r3, sp, #24
    994e:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    9950:	a906      	add	r1, sp, #24
    9952:	810a      	strh	r2, [r1, #8]
    9954:	1c19      	adds	r1, r3, #0
    9956:	4293      	cmp	r3, r2
    9958:	d900      	bls.n	995c <CompactItem+0x80>
    995a:	1c11      	adds	r1, r2, #0
    995c:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    995e:	aa06      	add	r2, sp, #24
    9960:	2100      	movs	r1, #0
    9962:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    9964:	8910      	ldrh	r0, [r2, #8]
    9966:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    9968:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    996a:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    996c:	001c      	movs	r4, r3
    996e:	3410      	adds	r4, #16
    9970:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9972:	495c      	ldr	r1, [pc, #368]	; (9ae4 <CompactItem+0x208>)
    9974:	ca61      	ldmia	r2!, {r0, r5, r6}
    9976:	c161      	stmia	r1!, {r0, r5, r6}
    9978:	6812      	ldr	r2, [r2, #0]
    997a:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    997c:	2280      	movs	r2, #128	; 0x80
    997e:	0052      	lsls	r2, r2, #1
    9980:	4294      	cmp	r4, r2
    9982:	d939      	bls.n	99f8 <CompactItem+0x11c>
    9984:	2600      	movs	r6, #0
    9986:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9988:	2280      	movs	r2, #128	; 0x80
    998a:	0052      	lsls	r2, r2, #1
    998c:	4691      	mov	r9, r2
    998e:	4669      	mov	r1, sp
    9990:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9992:	4a51      	ldr	r2, [pc, #324]	; (9ad8 <CompactItem+0x1fc>)
    9994:	4692      	mov	sl, r2
    9996:	001a      	movs	r2, r3
    9998:	e088      	b.n	9aac <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    999a:	3010      	adds	r0, #16
    999c:	b280      	uxth	r0, r0
    999e:	4b52      	ldr	r3, [pc, #328]	; (9ae8 <CompactItem+0x20c>)
    99a0:	4798      	blx	r3
    99a2:	e7b8      	b.n	9916 <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    99a4:	ab06      	add	r3, sp, #24
    99a6:	8918      	ldrh	r0, [r3, #8]
    99a8:	3010      	adds	r0, #16
    99aa:	b280      	uxth	r0, r0
    99ac:	4b4e      	ldr	r3, [pc, #312]	; (9ae8 <CompactItem+0x20c>)
    99ae:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    99b0:	4b47      	ldr	r3, [pc, #284]	; (9ad0 <CompactItem+0x1f4>)
    99b2:	8818      	ldrh	r0, [r3, #0]
    99b4:	4b47      	ldr	r3, [pc, #284]	; (9ad4 <CompactItem+0x1f8>)
    99b6:	4798      	blx	r3
    99b8:	4683      	mov	fp, r0
        assert(cache != NULL);
    99ba:	2800      	cmp	r0, #0
    99bc:	d015      	beq.n	99ea <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    99be:	7882      	ldrb	r2, [r0, #2]
    99c0:	78c3      	ldrb	r3, [r0, #3]
    99c2:	021b      	lsls	r3, r3, #8
    99c4:	4313      	orrs	r3, r2
    99c6:	0019      	movs	r1, r3
    99c8:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    99ca:	ac06      	add	r4, sp, #24
    99cc:	4b42      	ldr	r3, [pc, #264]	; (9ad8 <CompactItem+0x1fc>)
    99ce:	7818      	ldrb	r0, [r3, #0]
    99d0:	2310      	movs	r3, #16
    99d2:	0022      	movs	r2, r4
    99d4:	4d41      	ldr	r5, [pc, #260]	; (9adc <CompactItem+0x200>)
    99d6:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    99d8:	4b41      	ldr	r3, [pc, #260]	; (9ae0 <CompactItem+0x204>)
    99da:	881b      	ldrh	r3, [r3, #0]
    99dc:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    99de:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    99e0:	4a3a      	ldr	r2, [pc, #232]	; (9acc <CompactItem+0x1f0>)
    99e2:	8812      	ldrh	r2, [r2, #0]
    99e4:	2a00      	cmp	r2, #0
    99e6:	d0ba      	beq.n	995e <CompactItem+0x82>
    99e8:	e7b2      	b.n	9950 <CompactItem+0x74>
        assert(cache != NULL);
    99ea:	4b40      	ldr	r3, [pc, #256]	; (9aec <CompactItem+0x210>)
    99ec:	4a40      	ldr	r2, [pc, #256]	; (9af0 <CompactItem+0x214>)
    99ee:	2191      	movs	r1, #145	; 0x91
    99f0:	00c9      	lsls	r1, r1, #3
    99f2:	4840      	ldr	r0, [pc, #256]	; (9af4 <CompactItem+0x218>)
    99f4:	4c40      	ldr	r4, [pc, #256]	; (9af8 <CompactItem+0x21c>)
    99f6:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    99f8:	4a37      	ldr	r2, [pc, #220]	; (9ad8 <CompactItem+0x1fc>)
    99fa:	7810      	ldrb	r0, [r2, #0]
    99fc:	4a39      	ldr	r2, [pc, #228]	; (9ae4 <CompactItem+0x208>)
    99fe:	3210      	adds	r2, #16
    9a00:	9200      	str	r2, [sp, #0]
    9a02:	2200      	movs	r2, #0
    9a04:	9903      	ldr	r1, [sp, #12]
    9a06:	4c3d      	ldr	r4, [pc, #244]	; (9afc <CompactItem+0x220>)
    9a08:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    9a0a:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    9a0c:	2800      	cmp	r0, #0
    9a0e:	d100      	bne.n	9a12 <CompactItem+0x136>
    9a10:	e770      	b.n	98f4 <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9a12:	4934      	ldr	r1, [pc, #208]	; (9ae4 <CompactItem+0x208>)
    9a14:	ab06      	add	r3, sp, #24
    9a16:	000a      	movs	r2, r1
    9a18:	0018      	movs	r0, r3
    9a1a:	c870      	ldmia	r0!, {r4, r5, r6}
    9a1c:	c270      	stmia	r2!, {r4, r5, r6}
    9a1e:	6800      	ldr	r0, [r0, #0]
    9a20:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    9a22:	88da      	ldrh	r2, [r3, #6]
    9a24:	3210      	adds	r2, #16
    9a26:	b292      	uxth	r2, r2
    9a28:	4b2d      	ldr	r3, [pc, #180]	; (9ae0 <CompactItem+0x204>)
    9a2a:	8818      	ldrh	r0, [r3, #0]
    9a2c:	4b34      	ldr	r3, [pc, #208]	; (9b00 <CompactItem+0x224>)
    9a2e:	4798      	blx	r3
            return false;
    9a30:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    9a32:	2800      	cmp	r0, #0
    9a34:	d100      	bne.n	9a38 <CompactItem+0x15c>
    9a36:	e75d      	b.n	98f4 <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    9a38:	ab06      	add	r3, sp, #24
    9a3a:	88d8      	ldrh	r0, [r3, #6]
    9a3c:	3010      	adds	r0, #16
    9a3e:	b280      	uxth	r0, r0
    9a40:	2102      	movs	r1, #2
    9a42:	4b30      	ldr	r3, [pc, #192]	; (9b04 <CompactItem+0x228>)
    9a44:	4798      	blx	r3
    s_compactItemId = 0u;
    9a46:	2300      	movs	r3, #0
    9a48:	4a21      	ldr	r2, [pc, #132]	; (9ad0 <CompactItem+0x1f4>)
    9a4a:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    9a4c:	4a1f      	ldr	r2, [pc, #124]	; (9acc <CompactItem+0x1f0>)
    9a4e:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    9a50:	465b      	mov	r3, fp
    9a52:	9905      	ldr	r1, [sp, #20]
    9a54:	7099      	strb	r1, [r3, #2]
    9a56:	0a0b      	lsrs	r3, r1, #8
    9a58:	465a      	mov	r2, fp
    9a5a:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    9a5c:	2300      	movs	r3, #0
    9a5e:	e749      	b.n	98f4 <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9a60:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9a62:	1aaf      	subs	r7, r5, r2
    9a64:	b2bb      	uxth	r3, r7
    9a66:	0019      	movs	r1, r3
    9a68:	4653      	mov	r3, sl
    9a6a:	7818      	ldrb	r0, [r3, #0]
    9a6c:	4b1d      	ldr	r3, [pc, #116]	; (9ae4 <CompactItem+0x208>)
    9a6e:	189b      	adds	r3, r3, r2
    9a70:	9300      	str	r3, [sp, #0]
    9a72:	9102      	str	r1, [sp, #8]
    9a74:	000b      	movs	r3, r1
    9a76:	0032      	movs	r2, r6
    9a78:	9903      	ldr	r1, [sp, #12]
    9a7a:	4f20      	ldr	r7, [pc, #128]	; (9afc <CompactItem+0x220>)
    9a7c:	47b8      	blx	r7
    9a7e:	2800      	cmp	r0, #0
    9a80:	d01e      	beq.n	9ac0 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    9a82:	4b17      	ldr	r3, [pc, #92]	; (9ae0 <CompactItem+0x204>)
    9a84:	8818      	ldrh	r0, [r3, #0]
    9a86:	002a      	movs	r2, r5
    9a88:	4916      	ldr	r1, [pc, #88]	; (9ae4 <CompactItem+0x208>)
    9a8a:	4b1d      	ldr	r3, [pc, #116]	; (9b00 <CompactItem+0x224>)
    9a8c:	4798      	blx	r3
    9a8e:	2800      	cmp	r0, #0
    9a90:	d018      	beq.n	9ac4 <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    9a92:	2102      	movs	r1, #2
    9a94:	0028      	movs	r0, r5
    9a96:	4b1b      	ldr	r3, [pc, #108]	; (9b04 <CompactItem+0x228>)
    9a98:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    9a9a:	1b64      	subs	r4, r4, r5
    9a9c:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    9a9e:	9902      	ldr	r1, [sp, #8]
    9aa0:	468c      	mov	ip, r1
    9aa2:	4466      	add	r6, ip
    9aa4:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    9aa6:	2200      	movs	r2, #0
        } while(currLength > 0);
    9aa8:	2c00      	cmp	r4, #0
    9aaa:	d0cc      	beq.n	9a46 <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9aac:	1c25      	adds	r5, r4, #0
    9aae:	454c      	cmp	r4, r9
    9ab0:	d9d6      	bls.n	9a60 <CompactItem+0x184>
    9ab2:	466b      	mov	r3, sp
    9ab4:	8a5d      	ldrh	r5, [r3, #18]
    9ab6:	e7d3      	b.n	9a60 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    9ab8:	2300      	movs	r3, #0
    9aba:	e71b      	b.n	98f4 <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    9abc:	2300      	movs	r3, #0
    9abe:	e719      	b.n	98f4 <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    9ac0:	2301      	movs	r3, #1
    9ac2:	e717      	b.n	98f4 <CompactItem+0x18>
                return false;
    9ac4:	2300      	movs	r3, #0
    9ac6:	e715      	b.n	98f4 <CompactItem+0x18>
    9ac8:	000090ed 	.word	0x000090ed
    9acc:	2000031e 	.word	0x2000031e
    9ad0:	2000031c 	.word	0x2000031c
    9ad4:	000092e5 	.word	0x000092e5
    9ad8:	2000034c 	.word	0x2000034c
    9adc:	00008e9d 	.word	0x00008e9d
    9ae0:	2000034e 	.word	0x2000034e
    9ae4:	20000208 	.word	0x20000208
    9ae8:	00009861 	.word	0x00009861
    9aec:	00012214 	.word	0x00012214
    9af0:	000123d0 	.word	0x000123d0
    9af4:	000122a0 	.word	0x000122a0
    9af8:	00010bed 	.word	0x00010bed
    9afc:	00009185 	.word	0x00009185
    9b00:	0000947d 	.word	0x0000947d
    9b04:	00009109 	.word	0x00009109

00009b08 <compactItemTimerFired>:
{
    9b08:	b510      	push	{r4, lr}
    (void)CompactItem();
    9b0a:	4b01      	ldr	r3, [pc, #4]	; (9b10 <compactItemTimerFired+0x8>)
    9b0c:	4798      	blx	r3
}
    9b0e:	bd10      	pop	{r4, pc}
    9b10:	000098dd 	.word	0x000098dd

00009b14 <WriteDataBlockAndHeader>:
{
    9b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b16:	46de      	mov	lr, fp
    9b18:	4657      	mov	r7, sl
    9b1a:	464e      	mov	r6, r9
    9b1c:	4645      	mov	r5, r8
    9b1e:	b5e0      	push	{r5, r6, r7, lr}
    9b20:	b083      	sub	sp, #12
    9b22:	0004      	movs	r4, r0
    9b24:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    9b26:	4d46      	ldr	r5, [pc, #280]	; (9c40 <WriteDataBlockAndHeader+0x12c>)
    9b28:	2280      	movs	r2, #128	; 0x80
    9b2a:	0052      	lsls	r2, r2, #1
    9b2c:	21ff      	movs	r1, #255	; 0xff
    9b2e:	0028      	movs	r0, r5
    9b30:	4b44      	ldr	r3, [pc, #272]	; (9c44 <WriteDataBlockAndHeader+0x130>)
    9b32:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    9b34:	4e44      	ldr	r6, [pc, #272]	; (9c48 <WriteDataBlockAndHeader+0x134>)
    9b36:	79a3      	ldrb	r3, [r4, #6]
    9b38:	79e1      	ldrb	r1, [r4, #7]
    9b3a:	0209      	lsls	r1, r1, #8
    9b3c:	4319      	orrs	r1, r3
    9b3e:	0032      	movs	r2, r6
    9b40:	4650      	mov	r0, sl
    9b42:	4f42      	ldr	r7, [pc, #264]	; (9c4c <WriteDataBlockAndHeader+0x138>)
    9b44:	47b8      	blx	r7
    9b46:	7020      	strb	r0, [r4, #0]
    9b48:	0a00      	lsrs	r0, r0, #8
    9b4a:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9b4c:	0032      	movs	r2, r6
    9b4e:	210e      	movs	r1, #14
    9b50:	0020      	movs	r0, r4
    9b52:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    9b54:	73a0      	strb	r0, [r4, #14]
    9b56:	0a00      	lsrs	r0, r0, #8
    9b58:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    9b5a:	2210      	movs	r2, #16
    9b5c:	0021      	movs	r1, r4
    9b5e:	0028      	movs	r0, r5
    9b60:	4b3b      	ldr	r3, [pc, #236]	; (9c50 <WriteDataBlockAndHeader+0x13c>)
    9b62:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    9b64:	79a3      	ldrb	r3, [r4, #6]
    9b66:	79e2      	ldrb	r2, [r4, #7]
    9b68:	0212      	lsls	r2, r2, #8
    9b6a:	431a      	orrs	r2, r3
    9b6c:	0015      	movs	r5, r2
    9b6e:	3510      	adds	r5, #16
    9b70:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    9b72:	4653      	mov	r3, sl
    9b74:	2b00      	cmp	r3, #0
    9b76:	d012      	beq.n	9b9e <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    9b78:	2380      	movs	r3, #128	; 0x80
    9b7a:	005b      	lsls	r3, r3, #1
    9b7c:	429d      	cmp	r5, r3
    9b7e:	d909      	bls.n	9b94 <WriteDataBlockAndHeader+0x80>
    9b80:	2600      	movs	r6, #0
    9b82:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9b84:	2380      	movs	r3, #128	; 0x80
    9b86:	005b      	lsls	r3, r3, #1
    9b88:	469b      	mov	fp, r3
    9b8a:	466a      	mov	r2, sp
    9b8c:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    9b8e:	4b2c      	ldr	r3, [pc, #176]	; (9c40 <WriteDataBlockAndHeader+0x12c>)
    9b90:	4699      	mov	r9, r3
    9b92:	e045      	b.n	9c20 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    9b94:	4651      	mov	r1, sl
    9b96:	482a      	ldr	r0, [pc, #168]	; (9c40 <WriteDataBlockAndHeader+0x12c>)
    9b98:	3010      	adds	r0, #16
    9b9a:	4b2d      	ldr	r3, [pc, #180]	; (9c50 <WriteDataBlockAndHeader+0x13c>)
    9b9c:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    9b9e:	79a3      	ldrb	r3, [r4, #6]
    9ba0:	79e2      	ldrb	r2, [r4, #7]
    9ba2:	0212      	lsls	r2, r2, #8
    9ba4:	431a      	orrs	r2, r3
    9ba6:	3210      	adds	r2, #16
    9ba8:	2380      	movs	r3, #128	; 0x80
    9baa:	005b      	lsls	r3, r3, #1
    9bac:	429a      	cmp	r2, r3
    9bae:	dd00      	ble.n	9bb2 <WriteDataBlockAndHeader+0x9e>
    9bb0:	001a      	movs	r2, r3
    9bb2:	b292      	uxth	r2, r2
    9bb4:	4b27      	ldr	r3, [pc, #156]	; (9c54 <WriteDataBlockAndHeader+0x140>)
    9bb6:	8818      	ldrh	r0, [r3, #0]
    9bb8:	4921      	ldr	r1, [pc, #132]	; (9c40 <WriteDataBlockAndHeader+0x12c>)
    9bba:	4b27      	ldr	r3, [pc, #156]	; (9c58 <WriteDataBlockAndHeader+0x144>)
    9bbc:	4798      	blx	r3
    9bbe:	4680      	mov	r8, r0
    9bc0:	2800      	cmp	r0, #0
    9bc2:	d033      	beq.n	9c2c <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    9bc4:	79a3      	ldrb	r3, [r4, #6]
    9bc6:	79e0      	ldrb	r0, [r4, #7]
    9bc8:	0200      	lsls	r0, r0, #8
    9bca:	4318      	orrs	r0, r3
    9bcc:	3010      	adds	r0, #16
    9bce:	b280      	uxth	r0, r0
    9bd0:	2102      	movs	r1, #2
    9bd2:	4b22      	ldr	r3, [pc, #136]	; (9c5c <WriteDataBlockAndHeader+0x148>)
    9bd4:	4798      	blx	r3
}
    9bd6:	4640      	mov	r0, r8
    9bd8:	b003      	add	sp, #12
    9bda:	bc3c      	pop	{r2, r3, r4, r5}
    9bdc:	4690      	mov	r8, r2
    9bde:	4699      	mov	r9, r3
    9be0:	46a2      	mov	sl, r4
    9be2:	46ab      	mov	fp, r5
    9be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9be6:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    9be8:	464b      	mov	r3, r9
    9bea:	19d8      	adds	r0, r3, r7
    9bec:	1be2      	subs	r2, r4, r7
    9bee:	4653      	mov	r3, sl
    9bf0:	1999      	adds	r1, r3, r6
    9bf2:	4b17      	ldr	r3, [pc, #92]	; (9c50 <WriteDataBlockAndHeader+0x13c>)
    9bf4:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    9bf6:	4b17      	ldr	r3, [pc, #92]	; (9c54 <WriteDataBlockAndHeader+0x140>)
    9bf8:	8818      	ldrh	r0, [r3, #0]
    9bfa:	0022      	movs	r2, r4
    9bfc:	4649      	mov	r1, r9
    9bfe:	4b16      	ldr	r3, [pc, #88]	; (9c58 <WriteDataBlockAndHeader+0x144>)
    9c00:	4798      	blx	r3
    9c02:	4680      	mov	r8, r0
    9c04:	2800      	cmp	r0, #0
    9c06:	d0e6      	beq.n	9bd6 <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    9c08:	2102      	movs	r1, #2
    9c0a:	0020      	movs	r0, r4
    9c0c:	4b13      	ldr	r3, [pc, #76]	; (9c5c <WriteDataBlockAndHeader+0x148>)
    9c0e:	4798      	blx	r3
                currentLength -= bytesToCommit;
    9c10:	1b2d      	subs	r5, r5, r4
    9c12:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    9c14:	1be4      	subs	r4, r4, r7
    9c16:	1936      	adds	r6, r6, r4
    9c18:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    9c1a:	2700      	movs	r7, #0
            } while(currentLength > 0);
    9c1c:	2d00      	cmp	r5, #0
    9c1e:	d0da      	beq.n	9bd6 <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9c20:	1c2c      	adds	r4, r5, #0
    9c22:	455d      	cmp	r5, fp
    9c24:	d9df      	bls.n	9be6 <WriteDataBlockAndHeader+0xd2>
    9c26:	466b      	mov	r3, sp
    9c28:	88dc      	ldrh	r4, [r3, #6]
    9c2a:	e7dc      	b.n	9be6 <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    9c2c:	79a3      	ldrb	r3, [r4, #6]
    9c2e:	79e0      	ldrb	r0, [r4, #7]
    9c30:	0200      	lsls	r0, r0, #8
    9c32:	4318      	orrs	r0, r3
    9c34:	3010      	adds	r0, #16
    9c36:	b280      	uxth	r0, r0
    9c38:	2102      	movs	r1, #2
    9c3a:	4b08      	ldr	r3, [pc, #32]	; (9c5c <WriteDataBlockAndHeader+0x148>)
    9c3c:	4798      	blx	r3
        return false;
    9c3e:	e7ca      	b.n	9bd6 <WriteDataBlockAndHeader+0xc2>
    9c40:	20000208 	.word	0x20000208
    9c44:	00010cc1 	.word	0x00010cc1
    9c48:	0000ffff 	.word	0x0000ffff
    9c4c:	00009145 	.word	0x00009145
    9c50:	00010caf 	.word	0x00010caf
    9c54:	2000034e 	.word	0x2000034e
    9c58:	0000947d 	.word	0x0000947d
    9c5c:	00009109 	.word	0x00009109

00009c60 <S_Nv_EarlyInit>:
/***************************************************************************************************
* EXPORTED FUNCTIONS
***************************************************************************************************/

void S_Nv_EarlyInit(void)
{
    9c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c62:	46ce      	mov	lr, r9
    9c64:	4647      	mov	r7, r8
    9c66:	b580      	push	{r7, lr}
    9c68:	b091      	sub	sp, #68	; 0x44
    SnvRevisioin_t revisionNumber;
    s_itemCount = 0u;
    9c6a:	2200      	movs	r2, #0
    9c6c:	4bb3      	ldr	r3, [pc, #716]	; (9f3c <S_Nv_EarlyInit+0x2dc>)
    9c6e:	701a      	strb	r2, [r3, #0]
    SectorHeader_t sectorHeader;

    uint8_t lastSector = 0xFFu;
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;

    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9c70:	2400      	movs	r4, #0
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;
    9c72:	2301      	movs	r3, #1
    9c74:	425b      	negs	r3, r3
    9c76:	4699      	mov	r9, r3
    uint8_t lastSector = 0xFFu;
    9c78:	27ff      	movs	r7, #255	; 0xff
    {
        D_Nv_Read(sector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    9c7a:	4eb1      	ldr	r6, [pc, #708]	; (9f40 <S_Nv_EarlyInit+0x2e0>)
    9c7c:	2312      	movs	r3, #18
    9c7e:	aa0b      	add	r2, sp, #44	; 0x2c
    9c80:	2100      	movs	r1, #0
    9c82:	0020      	movs	r0, r4
    9c84:	47b0      	blx	r6
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    9c86:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9c8a:	9301      	str	r3, [sp, #4]
    9c8c:	406b      	eors	r3, r5
    9c8e:	3301      	adds	r3, #1
    9c90:	d01d      	beq.n	9cce <S_Nv_EarlyInit+0x6e>
    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9c92:	3401      	adds	r4, #1
    9c94:	b2e4      	uxtb	r4, r4
    9c96:	2c02      	cmp	r4, #2
    9c98:	d1f0      	bne.n	9c7c <S_Nv_EarlyInit+0x1c>
                lastSectorSequence = sectorHeader.sequenceNumber;
            }
        }
    }

    if ( lastSector == 0xFFu )
    9c9a:	2fff      	cmp	r7, #255	; 0xff
    9c9c:	d057      	beq.n	9d4e <S_Nv_EarlyInit+0xee>
        s_itemCount = 0u;
    }
    else
    {
        // load active sector
        s_sector = lastSector;
    9c9e:	4ba9      	ldr	r3, [pc, #676]	; (9f44 <S_Nv_EarlyInit+0x2e4>)
    9ca0:	701f      	strb	r7, [r3, #0]
    if (SNV_REV_1 == revisionNumber)
    9ca2:	4643      	mov	r3, r8
    9ca4:	2b01      	cmp	r3, #1
    9ca6:	d100      	bne.n	9caa <S_Nv_EarlyInit+0x4a>
    9ca8:	e07b      	b.n	9da2 <S_Nv_EarlyInit+0x142>
    else if (SNV_REV_2 == revisionNumber)
    9caa:	4643      	mov	r3, r8
    9cac:	2b02      	cmp	r3, #2
    9cae:	d16a      	bne.n	9d86 <S_Nv_EarlyInit+0x126>
        s_sectorHead = ITEMS_AREA_START_ADDRESS;
    9cb0:	2280      	movs	r2, #128	; 0x80
    9cb2:	0052      	lsls	r2, r2, #1
    9cb4:	4ba4      	ldr	r3, [pc, #656]	; (9f48 <S_Nv_EarlyInit+0x2e8>)
    9cb6:	801a      	strh	r2, [r3, #0]
        D_Nv_Read(s_sector, 0, (uint8_t*) &sectorHeader, sizeof(SectorHeader_t));
    9cb8:	2312      	movs	r3, #18
    9cba:	aa06      	add	r2, sp, #24
    9cbc:	2100      	movs	r1, #0
    9cbe:	0038      	movs	r0, r7
    9cc0:	4c9f      	ldr	r4, [pc, #636]	; (9f40 <S_Nv_EarlyInit+0x2e0>)
    9cc2:	47a0      	blx	r4
        while ( s_sectorHead < SECTOR_SIZE )
    9cc4:	4da0      	ldr	r5, [pc, #640]	; (9f48 <S_Nv_EarlyInit+0x2e8>)
                UpdateSectorHead(0, itemAlignment);
    9cc6:	4ba1      	ldr	r3, [pc, #644]	; (9f4c <S_Nv_EarlyInit+0x2ec>)
    9cc8:	4698      	mov	r8, r3
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9cca:	002e      	movs	r6, r5
    9ccc:	e10f      	b.n	9eee <S_Nv_EarlyInit+0x28e>
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    9cce:	ab02      	add	r3, sp, #8
    9cd0:	2226      	movs	r2, #38	; 0x26
    9cd2:	189b      	adds	r3, r3, r2
    9cd4:	781b      	ldrb	r3, [r3, #0]
    9cd6:	2b41      	cmp	r3, #65	; 0x41
    9cd8:	d1db      	bne.n	9c92 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[0] == (uint8_t) 'A') &&
    9cda:	ab02      	add	r3, sp, #8
    9cdc:	3201      	adds	r2, #1
    9cde:	189b      	adds	r3, r3, r2
    9ce0:	781b      	ldrb	r3, [r3, #0]
    9ce2:	2b54      	cmp	r3, #84	; 0x54
    9ce4:	d1d5      	bne.n	9c92 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[1] == (uint8_t) 'T') &&
    9ce6:	ab02      	add	r3, sp, #8
    9ce8:	3201      	adds	r2, #1
    9cea:	189b      	adds	r3, r3, r2
    9cec:	781b      	ldrb	r3, [r3, #0]
    9cee:	2b53      	cmp	r3, #83	; 0x53
    9cf0:	d1cf      	bne.n	9c92 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[2] == (uint8_t) 'S') &&
    9cf2:	ab02      	add	r3, sp, #8
    9cf4:	3201      	adds	r2, #1
    9cf6:	189b      	adds	r3, r3, r2
    9cf8:	781b      	ldrb	r3, [r3, #0]
    9cfa:	2b4e      	cmp	r3, #78	; 0x4e
    9cfc:	d1c9      	bne.n	9c92 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[3] == (uint8_t) 'N') &&
    9cfe:	ab02      	add	r3, sp, #8
    9d00:	3201      	adds	r2, #1
    9d02:	189b      	adds	r3, r3, r2
    9d04:	781b      	ldrb	r3, [r3, #0]
    9d06:	2b76      	cmp	r3, #118	; 0x76
    9d08:	d1c3      	bne.n	9c92 <S_Nv_EarlyInit+0x32>
            if ( sectorHeader.signature[5] == (uint8_t) '1')
    9d0a:	ab02      	add	r3, sp, #8
    9d0c:	3201      	adds	r2, #1
    9d0e:	189b      	adds	r3, r3, r2
    9d10:	781b      	ldrb	r3, [r3, #0]
    9d12:	2b31      	cmp	r3, #49	; 0x31
    9d14:	d106      	bne.n	9d24 <S_Nv_EarlyInit+0xc4>
                if (pSectorHeaderSnv1->isActive == 0x0000u)
    9d16:	ab02      	add	r3, sp, #8
    9d18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d1b9      	bne.n	9c92 <S_Nv_EarlyInit+0x32>
                    revisionNumber = SNV_REV_1;
    9d1e:	2301      	movs	r3, #1
    9d20:	4698      	mov	r8, r3
    9d22:	e00f      	b.n	9d44 <S_Nv_EarlyInit+0xe4>
            else if (sectorHeader.signature[5] == (uint8_t) '2')
    9d24:	2b32      	cmp	r3, #50	; 0x32
    9d26:	d1b4      	bne.n	9c92 <S_Nv_EarlyInit+0x32>
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9d28:	4a89      	ldr	r2, [pc, #548]	; (9f50 <S_Nv_EarlyInit+0x2f0>)
    9d2a:	2110      	movs	r1, #16
    9d2c:	2026      	movs	r0, #38	; 0x26
    9d2e:	ab02      	add	r3, sp, #8
    9d30:	469c      	mov	ip, r3
    9d32:	4460      	add	r0, ip
    9d34:	4b87      	ldr	r3, [pc, #540]	; (9f54 <S_Nv_EarlyInit+0x2f4>)
    9d36:	4798      	blx	r3
              if (headerCrc == sectorHeader.headerCrc)
    9d38:	ab02      	add	r3, sp, #8
    9d3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9d3c:	4283      	cmp	r3, r0
    9d3e:	d1a8      	bne.n	9c92 <S_Nv_EarlyInit+0x32>
                  revisionNumber = SNV_REV_2;
    9d40:	2302      	movs	r3, #2
    9d42:	4698      	mov	r8, r3
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    9d44:	454d      	cmp	r5, r9
    9d46:	d2a4      	bcs.n	9c92 <S_Nv_EarlyInit+0x32>
                lastSectorSequence = sectorHeader.sequenceNumber;
    9d48:	46a9      	mov	r9, r5
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    9d4a:	0027      	movs	r7, r4
    9d4c:	e7a1      	b.n	9c92 <S_Nv_EarlyInit+0x32>
        s_sector = FIRST_SECTOR;
    9d4e:	2200      	movs	r2, #0
    9d50:	4b7c      	ldr	r3, [pc, #496]	; (9f44 <S_Nv_EarlyInit+0x2e4>)
    9d52:	701a      	strb	r2, [r3, #0]
            if ( EraseSector())
    9d54:	4c80      	ldr	r4, [pc, #512]	; (9f58 <S_Nv_EarlyInit+0x2f8>)
                s_nextPageAddressAfterCompact = 0xFFFFu;
    9d56:	4e81      	ldr	r6, [pc, #516]	; (9f5c <S_Nv_EarlyInit+0x2fc>)
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    9d58:	4d81      	ldr	r5, [pc, #516]	; (9f60 <S_Nv_EarlyInit+0x300>)
    9d5a:	e006      	b.n	9d6a <S_Nv_EarlyInit+0x10a>
            s_sector++;
    9d5c:	4a79      	ldr	r2, [pc, #484]	; (9f44 <S_Nv_EarlyInit+0x2e4>)
    9d5e:	7813      	ldrb	r3, [r2, #0]
    9d60:	3301      	adds	r3, #1
    9d62:	b2db      	uxtb	r3, r3
    9d64:	7013      	strb	r3, [r2, #0]
            if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    9d66:	2b01      	cmp	r3, #1
    9d68:	d815      	bhi.n	9d96 <S_Nv_EarlyInit+0x136>
            if ( EraseSector())
    9d6a:	47a0      	blx	r4
    9d6c:	2800      	cmp	r0, #0
    9d6e:	d0f5      	beq.n	9d5c <S_Nv_EarlyInit+0xfc>
                s_nextPageAddressAfterCompact = 0xFFFFu;
    9d70:	2301      	movs	r3, #1
    9d72:	425b      	negs	r3, r3
    9d74:	8033      	strh	r3, [r6, #0]
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    9d76:	2002      	movs	r0, #2
    9d78:	4240      	negs	r0, r0
    9d7a:	47a8      	blx	r5
    9d7c:	2800      	cmp	r0, #0
    9d7e:	d0ed      	beq.n	9d5c <S_Nv_EarlyInit+0xfc>
        s_itemCount = 0u;
    9d80:	2200      	movs	r2, #0
    9d82:	4b6e      	ldr	r3, [pc, #440]	; (9f3c <S_Nv_EarlyInit+0x2dc>)
    9d84:	701a      	strb	r2, [r3, #0]

        LoadSector(revisionNumber);
    }
    s_earlyInitDone = true;
    9d86:	2201      	movs	r2, #1
    9d88:	4b76      	ldr	r3, [pc, #472]	; (9f64 <S_Nv_EarlyInit+0x304>)
    9d8a:	701a      	strb	r2, [r3, #0]
}
    9d8c:	b011      	add	sp, #68	; 0x44
    9d8e:	bc0c      	pop	{r2, r3}
    9d90:	4690      	mov	r8, r2
    9d92:	4699      	mov	r9, r3
    9d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
                assert(false);
    9d96:	4b74      	ldr	r3, [pc, #464]	; (9f68 <S_Nv_EarlyInit+0x308>)
    9d98:	4a74      	ldr	r2, [pc, #464]	; (9f6c <S_Nv_EarlyInit+0x30c>)
    9d9a:	4975      	ldr	r1, [pc, #468]	; (9f70 <S_Nv_EarlyInit+0x310>)
    9d9c:	4875      	ldr	r0, [pc, #468]	; (9f74 <S_Nv_EarlyInit+0x314>)
    9d9e:	4c76      	ldr	r4, [pc, #472]	; (9f78 <S_Nv_EarlyInit+0x318>)
    9da0:	47a0      	blx	r4
        s_sectorHead = sizeof(SectorHeaderSnv1_t);
    9da2:	2210      	movs	r2, #16
    9da4:	4b68      	ldr	r3, [pc, #416]	; (9f48 <S_Nv_EarlyInit+0x2e8>)
    9da6:	801a      	strh	r2, [r3, #0]
    9da8:	2110      	movs	r1, #16
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9daa:	4e66      	ldr	r6, [pc, #408]	; (9f44 <S_Nv_EarlyInit+0x2e4>)
    9dac:	4d64      	ldr	r5, [pc, #400]	; (9f40 <S_Nv_EarlyInit+0x2e0>)
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    9dae:	4f69      	ldr	r7, [pc, #420]	; (9f54 <S_Nv_EarlyInit+0x2f4>)
    9db0:	e072      	b.n	9e98 <S_Nv_EarlyInit+0x238>
            else if ( blockHeader.isActive != 0x0000u )
    9db2:	ab06      	add	r3, sp, #24
    9db4:	881b      	ldrh	r3, [r3, #0]
    9db6:	2b00      	cmp	r3, #0
    9db8:	d007      	beq.n	9dca <S_Nv_EarlyInit+0x16a>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    9dba:	ab06      	add	r3, sp, #24
    9dbc:	88d8      	ldrh	r0, [r3, #6]
    9dbe:	3010      	adds	r0, #16
    9dc0:	b280      	uxth	r0, r0
    9dc2:	2101      	movs	r1, #1
    9dc4:	4b61      	ldr	r3, [pc, #388]	; (9f4c <S_Nv_EarlyInit+0x2ec>)
    9dc6:	4798      	blx	r3
    9dc8:	e061      	b.n	9e8e <S_Nv_EarlyInit+0x22e>
                uint16_t id = blockHeader.id;
    9dca:	ab06      	add	r3, sp, #24
    9dcc:	885c      	ldrh	r4, [r3, #2]
                Item_t *cache = FindItemCache(id);
    9dce:	0020      	movs	r0, r4
    9dd0:	4b6a      	ldr	r3, [pc, #424]	; (9f7c <S_Nv_EarlyInit+0x31c>)
    9dd2:	4798      	blx	r3
                if (cache == NULL)
    9dd4:	2800      	cmp	r0, #0
    9dd6:	d010      	beq.n	9dfa <S_Nv_EarlyInit+0x19a>
                cache->lastBlock = s_sectorHead;
    9dd8:	4b5b      	ldr	r3, [pc, #364]	; (9f48 <S_Nv_EarlyInit+0x2e8>)
    9dda:	781a      	ldrb	r2, [r3, #0]
    9ddc:	7082      	strb	r2, [r0, #2]
    9dde:	785b      	ldrb	r3, [r3, #1]
    9de0:	70c3      	strb	r3, [r0, #3]
                if ( blockHeader.itemLength == 0u )
    9de2:	ab06      	add	r3, sp, #24
    9de4:	891b      	ldrh	r3, [r3, #8]
    9de6:	2b00      	cmp	r3, #0
    9de8:	d00b      	beq.n	9e02 <S_Nv_EarlyInit+0x1a2>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    9dea:	ab06      	add	r3, sp, #24
    9dec:	88d8      	ldrh	r0, [r3, #6]
    9dee:	3010      	adds	r0, #16
    9df0:	b280      	uxth	r0, r0
    9df2:	2101      	movs	r1, #1
    9df4:	4b55      	ldr	r3, [pc, #340]	; (9f4c <S_Nv_EarlyInit+0x2ec>)
    9df6:	4798      	blx	r3
    9df8:	e049      	b.n	9e8e <S_Nv_EarlyInit+0x22e>
                    cache = CreateItemCache(id);
    9dfa:	0020      	movs	r0, r4
    9dfc:	4b60      	ldr	r3, [pc, #384]	; (9f80 <S_Nv_EarlyInit+0x320>)
    9dfe:	4798      	blx	r3
    9e00:	e7ea      	b.n	9dd8 <S_Nv_EarlyInit+0x178>
                    DeleteItemCache(id);
    9e02:	0020      	movs	r0, r4
    9e04:	4b5f      	ldr	r3, [pc, #380]	; (9f84 <S_Nv_EarlyInit+0x324>)
    9e06:	4798      	blx	r3
    9e08:	e7ef      	b.n	9dea <S_Nv_EarlyInit+0x18a>
                uint16_t crc = ComputeDataCrc(s_sector, s_sectorHead, &blockHeader);
    9e0a:	4b4f      	ldr	r3, [pc, #316]	; (9f48 <S_Nv_EarlyInit+0x2e8>)
    9e0c:	8819      	ldrh	r1, [r3, #0]
    9e0e:	4b4d      	ldr	r3, [pc, #308]	; (9f44 <S_Nv_EarlyInit+0x2e4>)
    9e10:	7818      	ldrb	r0, [r3, #0]
    9e12:	aa02      	add	r2, sp, #8
    9e14:	4b5c      	ldr	r3, [pc, #368]	; (9f88 <S_Nv_EarlyInit+0x328>)
    9e16:	4798      	blx	r3
                if (crc != blockHeader.dataCrc)
    9e18:	ab02      	add	r3, sp, #8
    9e1a:	881b      	ldrh	r3, [r3, #0]
    9e1c:	4283      	cmp	r3, r0
    9e1e:	d007      	beq.n	9e30 <S_Nv_EarlyInit+0x1d0>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    9e20:	ab02      	add	r3, sp, #8
    9e22:	88d8      	ldrh	r0, [r3, #6]
    9e24:	3010      	adds	r0, #16
    9e26:	b280      	uxth	r0, r0
    9e28:	0021      	movs	r1, r4
    9e2a:	4b48      	ldr	r3, [pc, #288]	; (9f4c <S_Nv_EarlyInit+0x2ec>)
    9e2c:	4798      	blx	r3
    9e2e:	e05e      	b.n	9eee <S_Nv_EarlyInit+0x28e>
                    uint16_t id = blockHeader.id;
    9e30:	ab02      	add	r3, sp, #8
    9e32:	885f      	ldrh	r7, [r3, #2]
                    Item_t *cache = FindItemCache(id);
    9e34:	0038      	movs	r0, r7
    9e36:	4b51      	ldr	r3, [pc, #324]	; (9f7c <S_Nv_EarlyInit+0x31c>)
    9e38:	4798      	blx	r3
                    if (cache == NULL)
    9e3a:	2800      	cmp	r0, #0
    9e3c:	d010      	beq.n	9e60 <S_Nv_EarlyInit+0x200>
                    cache->lastBlock = s_sectorHead;
    9e3e:	4b42      	ldr	r3, [pc, #264]	; (9f48 <S_Nv_EarlyInit+0x2e8>)
    9e40:	781a      	ldrb	r2, [r3, #0]
    9e42:	7082      	strb	r2, [r0, #2]
    9e44:	785b      	ldrb	r3, [r3, #1]
    9e46:	70c3      	strb	r3, [r0, #3]
                    if ( blockHeader.itemLength == 0u )
    9e48:	ab02      	add	r3, sp, #8
    9e4a:	891b      	ldrh	r3, [r3, #8]
    9e4c:	2b00      	cmp	r3, #0
    9e4e:	d00b      	beq.n	9e68 <S_Nv_EarlyInit+0x208>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    9e50:	ab02      	add	r3, sp, #8
    9e52:	88d8      	ldrh	r0, [r3, #6]
    9e54:	3010      	adds	r0, #16
    9e56:	b280      	uxth	r0, r0
    9e58:	0021      	movs	r1, r4
    9e5a:	4b3c      	ldr	r3, [pc, #240]	; (9f4c <S_Nv_EarlyInit+0x2ec>)
    9e5c:	4798      	blx	r3
    9e5e:	e046      	b.n	9eee <S_Nv_EarlyInit+0x28e>
                        cache = CreateItemCache(id);
    9e60:	0038      	movs	r0, r7
    9e62:	4b47      	ldr	r3, [pc, #284]	; (9f80 <S_Nv_EarlyInit+0x320>)
    9e64:	4798      	blx	r3
    9e66:	e7ea      	b.n	9e3e <S_Nv_EarlyInit+0x1de>
                        DeleteItemCache(id);
    9e68:	0038      	movs	r0, r7
    9e6a:	4b46      	ldr	r3, [pc, #280]	; (9f84 <S_Nv_EarlyInit+0x324>)
    9e6c:	4798      	blx	r3
    9e6e:	e7ef      	b.n	9e50 <S_Nv_EarlyInit+0x1f0>
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    9e70:	ab06      	add	r3, sp, #24
    9e72:	89dc      	ldrh	r4, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    9e74:	4a36      	ldr	r2, [pc, #216]	; (9f50 <S_Nv_EarlyInit+0x2f0>)
    9e76:	210c      	movs	r1, #12
    9e78:	2012      	movs	r0, #18
    9e7a:	ab02      	add	r3, sp, #8
    9e7c:	469c      	mov	ip, r3
    9e7e:	4460      	add	r0, ip
    9e80:	47b8      	blx	r7
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    9e82:	4284      	cmp	r4, r0
    9e84:	d095      	beq.n	9db2 <S_Nv_EarlyInit+0x152>
                UpdateSectorHead(BLOCK_HEADER_SIZE, ITEM_16BYTE_ALIGNMENT);
    9e86:	2101      	movs	r1, #1
    9e88:	2010      	movs	r0, #16
    9e8a:	4b30      	ldr	r3, [pc, #192]	; (9f4c <S_Nv_EarlyInit+0x2ec>)
    9e8c:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    9e8e:	4b2e      	ldr	r3, [pc, #184]	; (9f48 <S_Nv_EarlyInit+0x2e8>)
    9e90:	8819      	ldrh	r1, [r3, #0]
    9e92:	4b3e      	ldr	r3, [pc, #248]	; (9f8c <S_Nv_EarlyInit+0x32c>)
    9e94:	4299      	cmp	r1, r3
    9e96:	d812      	bhi.n	9ebe <S_Nv_EarlyInit+0x25e>
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9e98:	ac06      	add	r4, sp, #24
    9e9a:	7830      	ldrb	r0, [r6, #0]
    9e9c:	2310      	movs	r3, #16
    9e9e:	0022      	movs	r2, r4
    9ea0:	47a8      	blx	r5
        if ( pData[i] != 0xFFu )
    9ea2:	7823      	ldrb	r3, [r4, #0]
    9ea4:	2bff      	cmp	r3, #255	; 0xff
    9ea6:	d1e3      	bne.n	9e70 <S_Nv_EarlyInit+0x210>
    9ea8:	ab06      	add	r3, sp, #24
    9eaa:	211f      	movs	r1, #31
    9eac:	aa02      	add	r2, sp, #8
    9eae:	4694      	mov	ip, r2
    9eb0:	4461      	add	r1, ip
    9eb2:	785a      	ldrb	r2, [r3, #1]
    9eb4:	2aff      	cmp	r2, #255	; 0xff
    9eb6:	d1db      	bne.n	9e70 <S_Nv_EarlyInit+0x210>
    9eb8:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    9eba:	428b      	cmp	r3, r1
    9ebc:	d1f9      	bne.n	9eb2 <S_Nv_EarlyInit+0x252>
        if ( !CompactSector() )
    9ebe:	4b34      	ldr	r3, [pc, #208]	; (9f90 <S_Nv_EarlyInit+0x330>)
    9ec0:	4798      	blx	r3
    9ec2:	2800      	cmp	r0, #0
    9ec4:	d000      	beq.n	9ec8 <S_Nv_EarlyInit+0x268>
    9ec6:	e75e      	b.n	9d86 <S_Nv_EarlyInit+0x126>
            assert(false);
    9ec8:	4b27      	ldr	r3, [pc, #156]	; (9f68 <S_Nv_EarlyInit+0x308>)
    9eca:	4a32      	ldr	r2, [pc, #200]	; (9f94 <S_Nv_EarlyInit+0x334>)
    9ecc:	4932      	ldr	r1, [pc, #200]	; (9f98 <S_Nv_EarlyInit+0x338>)
    9ece:	4829      	ldr	r0, [pc, #164]	; (9f74 <S_Nv_EarlyInit+0x314>)
    9ed0:	4c29      	ldr	r4, [pc, #164]	; (9f78 <S_Nv_EarlyInit+0x318>)
    9ed2:	47a0      	blx	r4
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    9ed4:	ab02      	add	r3, sp, #8
    9ed6:	89df      	ldrh	r7, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9ed8:	4a1d      	ldr	r2, [pc, #116]	; (9f50 <S_Nv_EarlyInit+0x2f0>)
    9eda:	210e      	movs	r1, #14
    9edc:	0018      	movs	r0, r3
    9ede:	4b1d      	ldr	r3, [pc, #116]	; (9f54 <S_Nv_EarlyInit+0x2f4>)
    9ee0:	4798      	blx	r3
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    9ee2:	4287      	cmp	r7, r0
    9ee4:	d091      	beq.n	9e0a <S_Nv_EarlyInit+0x1aa>
                UpdateSectorHead(BLOCK_HEADER_SIZE, itemAlignment);
    9ee6:	0021      	movs	r1, r4
    9ee8:	2010      	movs	r0, #16
    9eea:	4b18      	ldr	r3, [pc, #96]	; (9f4c <S_Nv_EarlyInit+0x2ec>)
    9eec:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    9eee:	882b      	ldrh	r3, [r5, #0]
    9ef0:	4a26      	ldr	r2, [pc, #152]	; (9f8c <S_Nv_EarlyInit+0x32c>)
    9ef2:	4293      	cmp	r3, r2
    9ef4:	d900      	bls.n	9ef8 <S_Nv_EarlyInit+0x298>
    9ef6:	e746      	b.n	9d86 <S_Nv_EarlyInit+0x126>
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    9ef8:	aa06      	add	r2, sp, #24
    9efa:	8a12      	ldrh	r2, [r2, #16]
    9efc:	4914      	ldr	r1, [pc, #80]	; (9f50 <S_Nv_EarlyInit+0x2f0>)
    9efe:	428a      	cmp	r2, r1
    9f00:	d002      	beq.n	9f08 <S_Nv_EarlyInit+0x2a8>
                itemAlignment = ITEM_NO_ALIGNMENT;
    9f02:	2400      	movs	r4, #0
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    9f04:	429a      	cmp	r2, r3
    9f06:	d803      	bhi.n	9f10 <S_Nv_EarlyInit+0x2b0>
                UpdateSectorHead(0, itemAlignment);
    9f08:	2102      	movs	r1, #2
    9f0a:	2000      	movs	r0, #0
    9f0c:	47c0      	blx	r8
                itemAlignment = ITEM_64BYTE_ALIGNMENT;
    9f0e:	2402      	movs	r4, #2
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9f10:	8831      	ldrh	r1, [r6, #0]
    9f12:	4b0c      	ldr	r3, [pc, #48]	; (9f44 <S_Nv_EarlyInit+0x2e4>)
    9f14:	7818      	ldrb	r0, [r3, #0]
    9f16:	2310      	movs	r3, #16
    9f18:	aa02      	add	r2, sp, #8
    9f1a:	4f09      	ldr	r7, [pc, #36]	; (9f40 <S_Nv_EarlyInit+0x2e0>)
    9f1c:	47b8      	blx	r7
        if ( pData[i] != 0xFFu )
    9f1e:	ab02      	add	r3, sp, #8
    9f20:	781b      	ldrb	r3, [r3, #0]
    9f22:	2bff      	cmp	r3, #255	; 0xff
    9f24:	d1d6      	bne.n	9ed4 <S_Nv_EarlyInit+0x274>
    9f26:	ab02      	add	r3, sp, #8
    9f28:	210f      	movs	r1, #15
    9f2a:	469c      	mov	ip, r3
    9f2c:	4461      	add	r1, ip
    9f2e:	785a      	ldrb	r2, [r3, #1]
    9f30:	2aff      	cmp	r2, #255	; 0xff
    9f32:	d1cf      	bne.n	9ed4 <S_Nv_EarlyInit+0x274>
    9f34:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    9f36:	428b      	cmp	r3, r1
    9f38:	d1f9      	bne.n	9f2e <S_Nv_EarlyInit+0x2ce>
    9f3a:	e724      	b.n	9d86 <S_Nv_EarlyInit+0x126>
    9f3c:	20000344 	.word	0x20000344
    9f40:	00008e9d 	.word	0x00008e9d
    9f44:	2000034c 	.word	0x2000034c
    9f48:	2000034e 	.word	0x2000034e
    9f4c:	00009109 	.word	0x00009109
    9f50:	0000ffff 	.word	0x0000ffff
    9f54:	00009145 	.word	0x00009145
    9f58:	00009449 	.word	0x00009449
    9f5c:	20000346 	.word	0x20000346
    9f60:	000094b1 	.word	0x000094b1
    9f64:	20000320 	.word	0x20000320
    9f68:	00012224 	.word	0x00012224
    9f6c:	000123dc 	.word	0x000123dc
    9f70:	0000052b 	.word	0x0000052b
    9f74:	000122a0 	.word	0x000122a0
    9f78:	00010bed 	.word	0x00010bed
    9f7c:	000092e5 	.word	0x000092e5
    9f80:	00009375 	.word	0x00009375
    9f84:	000093d5 	.word	0x000093d5
    9f88:	0000923d 	.word	0x0000923d
    9f8c:	00001fff 	.word	0x00001fff
    9f90:	000095b1 	.word	0x000095b1
    9f94:	0001239c 	.word	0x0001239c
    9f98:	00000336 	.word	0x00000336

00009f9c <S_Nv_Init>:


void S_Nv_Init(void)
{
    9f9c:	b510      	push	{r4, lr}
    if (!s_earlyInitDone)
    9f9e:	4b08      	ldr	r3, [pc, #32]	; (9fc0 <S_Nv_Init+0x24>)
    9fa0:	781b      	ldrb	r3, [r3, #0]
    9fa2:	2b00      	cmp	r3, #0
    9fa4:	d008      	beq.n	9fb8 <S_Nv_Init+0x1c>
    {
        S_Nv_EarlyInit();
    }

    eraseSectorTimer.handler = eraseSectorTimerFired;
    9fa6:	4b07      	ldr	r3, [pc, #28]	; (9fc4 <S_Nv_Init+0x28>)
    9fa8:	4a07      	ldr	r2, [pc, #28]	; (9fc8 <S_Nv_Init+0x2c>)
    9faa:	611a      	str	r2, [r3, #16]
    eraseSectorTimer.timeout = ERASE_SECTOR_DELAY_MS;
    9fac:	4a07      	ldr	r2, [pc, #28]	; (9fcc <S_Nv_Init+0x30>)
    9fae:	605a      	str	r2, [r3, #4]
    eraseSectorTimer.interval = ERASE_SECTOR_DELAY_MS;
    9fb0:	609a      	str	r2, [r3, #8]
    eraseSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    9fb2:	2200      	movs	r2, #0
    9fb4:	731a      	strb	r2, [r3, #12]
}
    9fb6:	bd10      	pop	{r4, pc}
        S_Nv_EarlyInit();
    9fb8:	4b05      	ldr	r3, [pc, #20]	; (9fd0 <S_Nv_Init+0x34>)
    9fba:	4798      	blx	r3
    9fbc:	e7f3      	b.n	9fa6 <S_Nv_Init+0xa>
    9fbe:	46c0      	nop			; (mov r8, r8)
    9fc0:	20000320 	.word	0x20000320
    9fc4:	20000308 	.word	0x20000308
    9fc8:	00009425 	.word	0x00009425
    9fcc:	00001b58 	.word	0x00001b58
    9fd0:	00009c61 	.word	0x00009c61

00009fd4 <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    9fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fd6:	46ce      	mov	lr, r9
    9fd8:	4647      	mov	r7, r8
    9fda:	b580      	push	{r7, lr}
    9fdc:	b087      	sub	sp, #28
    9fde:	0004      	movs	r4, r0
    9fe0:	9101      	str	r1, [sp, #4]
    9fe2:	0015      	movs	r5, r2
    9fe4:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    9fe6:	2800      	cmp	r0, #0
    9fe8:	d00c      	beq.n	a004 <S_Nv_Write_Impl+0x30>
    9fea:	2b00      	cmp	r3, #0
    9fec:	d00a      	beq.n	a004 <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    9fee:	4b35      	ldr	r3, [pc, #212]	; (a0c4 <S_Nv_Write_Impl+0xf0>)
    9ff0:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9ff2:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9ff4:	2800      	cmp	r0, #0
    9ff6:	d00b      	beq.n	a010 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    9ff8:	0018      	movs	r0, r3
    9ffa:	b007      	add	sp, #28
    9ffc:	bc0c      	pop	{r2, r3}
    9ffe:	4690      	mov	r8, r2
    a000:	4699      	mov	r9, r3
    a002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    a004:	4b30      	ldr	r3, [pc, #192]	; (a0c8 <S_Nv_Write_Impl+0xf4>)
    a006:	4a31      	ldr	r2, [pc, #196]	; (a0cc <S_Nv_Write_Impl+0xf8>)
    a008:	4931      	ldr	r1, [pc, #196]	; (a0d0 <S_Nv_Write_Impl+0xfc>)
    a00a:	4832      	ldr	r0, [pc, #200]	; (a0d4 <S_Nv_Write_Impl+0x100>)
    a00c:	4c32      	ldr	r4, [pc, #200]	; (a0d8 <S_Nv_Write_Impl+0x104>)
    a00e:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    a010:	0028      	movs	r0, r5
    a012:	3010      	adds	r0, #16
    a014:	b280      	uxth	r0, r0
    a016:	4b31      	ldr	r3, [pc, #196]	; (a0dc <S_Nv_Write_Impl+0x108>)
    a018:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    a01a:	0020      	movs	r0, r4
    a01c:	4b30      	ldr	r3, [pc, #192]	; (a0e0 <S_Nv_Write_Impl+0x10c>)
    a01e:	4798      	blx	r3
    a020:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    a022:	2303      	movs	r3, #3
    if ( cache == NULL )
    a024:	2800      	cmp	r0, #0
    a026:	d0e7      	beq.n	9ff8 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    a028:	7883      	ldrb	r3, [r0, #2]
    a02a:	78c4      	ldrb	r4, [r0, #3]
    a02c:	0224      	lsls	r4, r4, #8
    a02e:	431c      	orrs	r4, r3
    a030:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a032:	4b2c      	ldr	r3, [pc, #176]	; (a0e4 <S_Nv_Write_Impl+0x110>)
    a034:	7818      	ldrb	r0, [r3, #0]
    a036:	2310      	movs	r3, #16
    a038:	aa02      	add	r2, sp, #8
    a03a:	0021      	movs	r1, r4
    a03c:	4c2a      	ldr	r4, [pc, #168]	; (a0e8 <S_Nv_Write_Impl+0x114>)
    a03e:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    a040:	ab02      	add	r3, sp, #8
    a042:	8919      	ldrh	r1, [r3, #8]
    a044:	9b01      	ldr	r3, [sp, #4]
    a046:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    a048:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    a04a:	428a      	cmp	r2, r1
    a04c:	d8d4      	bhi.n	9ff8 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    a04e:	ab02      	add	r3, sp, #8
    a050:	466a      	mov	r2, sp
    a052:	8892      	ldrh	r2, [r2, #4]
    a054:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    a056:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    a058:	4642      	mov	r2, r8
    a05a:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    a05c:	428d      	cmp	r5, r1
    a05e:	d02c      	beq.n	a0ba <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    a060:	ab02      	add	r3, sp, #8
    a062:	899b      	ldrh	r3, [r3, #12]
    a064:	3301      	adds	r3, #1
    a066:	aa02      	add	r2, sp, #8
    a068:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    a06a:	4b20      	ldr	r3, [pc, #128]	; (a0ec <S_Nv_Write_Impl+0x118>)
    a06c:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    a06e:	0039      	movs	r1, r7
    a070:	a802      	add	r0, sp, #8
    a072:	4b1f      	ldr	r3, [pc, #124]	; (a0f0 <S_Nv_Write_Impl+0x11c>)
    a074:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    a076:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    a078:	2800      	cmp	r0, #0
    a07a:	d0bd      	beq.n	9ff8 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    a07c:	70b4      	strb	r4, [r6, #2]
    a07e:	0a24      	lsrs	r4, r4, #8
    a080:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    a082:	ab02      	add	r3, sp, #8
    a084:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    a086:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    a088:	2a64      	cmp	r2, #100	; 0x64
    a08a:	d9b5      	bls.n	9ff8 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    a08c:	ab02      	add	r3, sp, #8
    a08e:	885a      	ldrh	r2, [r3, #2]
    a090:	4b18      	ldr	r3, [pc, #96]	; (a0f4 <S_Nv_Write_Impl+0x120>)
    a092:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    a094:	2200      	movs	r2, #0
    a096:	4b18      	ldr	r3, [pc, #96]	; (a0f8 <S_Nv_Write_Impl+0x124>)
    a098:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    a09a:	4818      	ldr	r0, [pc, #96]	; (a0fc <S_Nv_Write_Impl+0x128>)
    a09c:	4b18      	ldr	r3, [pc, #96]	; (a100 <S_Nv_Write_Impl+0x12c>)
    a09e:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    a0a0:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    a0a2:	2800      	cmp	r0, #0
    a0a4:	d1a8      	bne.n	9ff8 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    a0a6:	4b15      	ldr	r3, [pc, #84]	; (a0fc <S_Nv_Write_Impl+0x128>)
    a0a8:	4a16      	ldr	r2, [pc, #88]	; (a104 <S_Nv_Write_Impl+0x130>)
    a0aa:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    a0ac:	4a16      	ldr	r2, [pc, #88]	; (a108 <S_Nv_Write_Impl+0x134>)
    a0ae:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    a0b0:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    a0b2:	2200      	movs	r2, #0
    a0b4:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    a0b6:	2300      	movs	r3, #0
    a0b8:	e79e      	b.n	9ff8 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    a0ba:	2300      	movs	r3, #0
    a0bc:	aa02      	add	r2, sp, #8
    a0be:	8193      	strh	r3, [r2, #12]
    a0c0:	e7d3      	b.n	a06a <S_Nv_Write_Impl+0x96>
    a0c2:	46c0      	nop			; (mov r8, r8)
    a0c4:	000090ed 	.word	0x000090ed
    a0c8:	00012334 	.word	0x00012334
    a0cc:	00012400 	.word	0x00012400
    a0d0:	00000596 	.word	0x00000596
    a0d4:	000122a0 	.word	0x000122a0
    a0d8:	00010bed 	.word	0x00010bed
    a0dc:	00009861 	.word	0x00009861
    a0e0:	000092e5 	.word	0x000092e5
    a0e4:	2000034c 	.word	0x2000034c
    a0e8:	00008e9d 	.word	0x00008e9d
    a0ec:	2000034e 	.word	0x2000034e
    a0f0:	00009b15 	.word	0x00009b15
    a0f4:	2000031c 	.word	0x2000031c
    a0f8:	2000031e 	.word	0x2000031e
    a0fc:	200001dc 	.word	0x200001dc
    a100:	0000c99d 	.word	0x0000c99d
    a104:	00009b09 	.word	0x00009b09
    a108:	00000bb8 	.word	0x00000bb8

0000a10c <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    a10c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a10e:	b083      	sub	sp, #12
    a110:	000c      	movs	r4, r1
    a112:	0015      	movs	r5, r2
    a114:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    a116:	2800      	cmp	r0, #0
    a118:	d009      	beq.n	a12e <S_Nv_Read_Impl+0x22>
    a11a:	2b00      	cmp	r3, #0
    a11c:	d007      	beq.n	a12e <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    a11e:	4b10      	ldr	r3, [pc, #64]	; (a160 <S_Nv_Read_Impl+0x54>)
    a120:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    a122:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    a124:	2800      	cmp	r0, #0
    a126:	d108      	bne.n	a13a <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    a128:	0018      	movs	r0, r3
    a12a:	b003      	add	sp, #12
    a12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    a12e:	4b0d      	ldr	r3, [pc, #52]	; (a164 <S_Nv_Read_Impl+0x58>)
    a130:	4a0d      	ldr	r2, [pc, #52]	; (a168 <S_Nv_Read_Impl+0x5c>)
    a132:	490e      	ldr	r1, [pc, #56]	; (a16c <S_Nv_Read_Impl+0x60>)
    a134:	480e      	ldr	r0, [pc, #56]	; (a170 <S_Nv_Read_Impl+0x64>)
    a136:	4c0f      	ldr	r4, [pc, #60]	; (a174 <S_Nv_Read_Impl+0x68>)
    a138:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    a13a:	1962      	adds	r2, r4, r5
    a13c:	490e      	ldr	r1, [pc, #56]	; (a178 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    a13e:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    a140:	428a      	cmp	r2, r1
    a142:	d8f1      	bhi.n	a128 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    a144:	4b0d      	ldr	r3, [pc, #52]	; (a17c <S_Nv_Read_Impl+0x70>)
    a146:	781f      	ldrb	r7, [r3, #0]
    a148:	9600      	str	r6, [sp, #0]
    a14a:	002b      	movs	r3, r5
    a14c:	0022      	movs	r2, r4
    a14e:	0001      	movs	r1, r0
    a150:	0038      	movs	r0, r7
    a152:	4c0b      	ldr	r4, [pc, #44]	; (a180 <S_Nv_Read_Impl+0x74>)
    a154:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    a156:	4243      	negs	r3, r0
    a158:	4143      	adcs	r3, r0
    a15a:	009b      	lsls	r3, r3, #2
    a15c:	e7e4      	b.n	a128 <S_Nv_Read_Impl+0x1c>
    a15e:	46c0      	nop			; (mov r8, r8)
    a160:	00009359 	.word	0x00009359
    a164:	00012334 	.word	0x00012334
    a168:	00012410 	.word	0x00012410
    a16c:	000005ee 	.word	0x000005ee
    a170:	000122a0 	.word	0x000122a0
    a174:	00010bed 	.word	0x00010bed
    a178:	0000ffff 	.word	0x0000ffff
    a17c:	2000034c 	.word	0x2000034c
    a180:	00009185 	.word	0x00009185

0000a184 <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    a184:	b510      	push	{r4, lr}
    a186:	b084      	sub	sp, #16
    assert(id != 0u);
    a188:	2800      	cmp	r0, #0
    a18a:	d005      	beq.n	a198 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    a18c:	4b0a      	ldr	r3, [pc, #40]	; (a1b8 <S_Nv_ItemLength_Impl+0x34>)
    a18e:	4798      	blx	r3
    a190:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    a192:	d107      	bne.n	a1a4 <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    a194:	b004      	add	sp, #16
    a196:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    a198:	4b08      	ldr	r3, [pc, #32]	; (a1bc <S_Nv_ItemLength_Impl+0x38>)
    a19a:	4a09      	ldr	r2, [pc, #36]	; (a1c0 <S_Nv_ItemLength_Impl+0x3c>)
    a19c:	4909      	ldr	r1, [pc, #36]	; (a1c4 <S_Nv_ItemLength_Impl+0x40>)
    a19e:	480a      	ldr	r0, [pc, #40]	; (a1c8 <S_Nv_ItemLength_Impl+0x44>)
    a1a0:	4c0a      	ldr	r4, [pc, #40]	; (a1cc <S_Nv_ItemLength_Impl+0x48>)
    a1a2:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a1a4:	4b0a      	ldr	r3, [pc, #40]	; (a1d0 <S_Nv_ItemLength_Impl+0x4c>)
    a1a6:	7818      	ldrb	r0, [r3, #0]
    a1a8:	2310      	movs	r3, #16
    a1aa:	466a      	mov	r2, sp
    a1ac:	4c09      	ldr	r4, [pc, #36]	; (a1d4 <S_Nv_ItemLength_Impl+0x50>)
    a1ae:	47a0      	blx	r4
    return blockHeader.itemLength;
    a1b0:	466b      	mov	r3, sp
    a1b2:	8918      	ldrh	r0, [r3, #8]
    a1b4:	e7ee      	b.n	a194 <S_Nv_ItemLength_Impl+0x10>
    a1b6:	46c0      	nop			; (mov r8, r8)
    a1b8:	00009359 	.word	0x00009359
    a1bc:	00012328 	.word	0x00012328
    a1c0:	00012420 	.word	0x00012420
    a1c4:	0000060b 	.word	0x0000060b
    a1c8:	000122a0 	.word	0x000122a0
    a1cc:	00010bed 	.word	0x00010bed
    a1d0:	2000034c 	.word	0x2000034c
    a1d4:	00008e9d 	.word	0x00008e9d

0000a1d8 <S_Nv_ItemInit_Impl>:
{
    a1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1da:	b085      	sub	sp, #20
    a1dc:	0004      	movs	r4, r0
    a1de:	000e      	movs	r6, r1
    a1e0:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    a1e2:	1e43      	subs	r3, r0, #1
    a1e4:	b29b      	uxth	r3, r3
    a1e6:	4a2e      	ldr	r2, [pc, #184]	; (a2a0 <S_Nv_ItemInit_Impl+0xc8>)
    a1e8:	4293      	cmp	r3, r2
    a1ea:	d81e      	bhi.n	a22a <S_Nv_ItemInit_Impl+0x52>
    a1ec:	2380      	movs	r3, #128	; 0x80
    a1ee:	011b      	lsls	r3, r3, #4
    a1f0:	4299      	cmp	r1, r3
    a1f2:	d81a      	bhi.n	a22a <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    a1f4:	4b2b      	ldr	r3, [pc, #172]	; (a2a4 <S_Nv_ItemInit_Impl+0xcc>)
    a1f6:	4798      	blx	r3
    a1f8:	2800      	cmp	r0, #0
    a1fa:	d01d      	beq.n	a238 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    a1fc:	0020      	movs	r0, r4
    a1fe:	4b2a      	ldr	r3, [pc, #168]	; (a2a8 <S_Nv_ItemInit_Impl+0xd0>)
    a200:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    a202:	4286      	cmp	r6, r0
    a204:	d007      	beq.n	a216 <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    a206:	4b29      	ldr	r3, [pc, #164]	; (a2ac <S_Nv_ItemInit_Impl+0xd4>)
    a208:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    a20a:	4b29      	ldr	r3, [pc, #164]	; (a2b0 <S_Nv_ItemInit_Impl+0xd8>)
    a20c:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    a20e:	4b29      	ldr	r3, [pc, #164]	; (a2b4 <S_Nv_ItemInit_Impl+0xdc>)
    a210:	4798      	blx	r3
    a212:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    a214:	d115      	bne.n	a242 <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    a216:	2d00      	cmp	r5, #0
    a218:	d040      	beq.n	a29c <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    a21a:	002b      	movs	r3, r5
    a21c:	0032      	movs	r2, r6
    a21e:	2100      	movs	r1, #0
    a220:	0020      	movs	r0, r4
    a222:	4c25      	ldr	r4, [pc, #148]	; (a2b8 <S_Nv_ItemInit_Impl+0xe0>)
    a224:	47a0      	blx	r4
    a226:	0003      	movs	r3, r0
    a228:	e00b      	b.n	a242 <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    a22a:	4b24      	ldr	r3, [pc, #144]	; (a2bc <S_Nv_ItemInit_Impl+0xe4>)
    a22c:	4a24      	ldr	r2, [pc, #144]	; (a2c0 <S_Nv_ItemInit_Impl+0xe8>)
    a22e:	21aa      	movs	r1, #170	; 0xaa
    a230:	00c9      	lsls	r1, r1, #3
    a232:	4824      	ldr	r0, [pc, #144]	; (a2c4 <S_Nv_ItemInit_Impl+0xec>)
    a234:	4c24      	ldr	r4, [pc, #144]	; (a2c8 <S_Nv_ItemInit_Impl+0xf0>)
    a236:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    a238:	4b24      	ldr	r3, [pc, #144]	; (a2cc <S_Nv_ItemInit_Impl+0xf4>)
    a23a:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    a23c:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    a23e:	2800      	cmp	r0, #0
    a240:	d002      	beq.n	a248 <S_Nv_ItemInit_Impl+0x70>
}
    a242:	0018      	movs	r0, r3
    a244:	b005      	add	sp, #20
    a246:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    a248:	0030      	movs	r0, r6
    a24a:	3010      	adds	r0, #16
    a24c:	b280      	uxth	r0, r0
    a24e:	4b20      	ldr	r3, [pc, #128]	; (a2d0 <S_Nv_ItemInit_Impl+0xf8>)
    a250:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    a252:	4b20      	ldr	r3, [pc, #128]	; (a2d4 <S_Nv_ItemInit_Impl+0xfc>)
    a254:	781b      	ldrb	r3, [r3, #0]
    a256:	2b07      	cmp	r3, #7
    a258:	d819      	bhi.n	a28e <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    a25a:	4b1f      	ldr	r3, [pc, #124]	; (a2d8 <S_Nv_ItemInit_Impl+0x100>)
    a25c:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    a25e:	466b      	mov	r3, sp
    a260:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    a262:	2300      	movs	r3, #0
    a264:	466a      	mov	r2, sp
    a266:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    a268:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    a26a:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    a26c:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    a26e:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    a270:	0029      	movs	r1, r5
    a272:	4668      	mov	r0, sp
    a274:	4b19      	ldr	r3, [pc, #100]	; (a2dc <S_Nv_ItemInit_Impl+0x104>)
    a276:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    a278:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    a27a:	2800      	cmp	r0, #0
    a27c:	d0e1      	beq.n	a242 <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    a27e:	0020      	movs	r0, r4
    a280:	4b17      	ldr	r3, [pc, #92]	; (a2e0 <S_Nv_ItemInit_Impl+0x108>)
    a282:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    a284:	7087      	strb	r7, [r0, #2]
    a286:	0a3f      	lsrs	r7, r7, #8
    a288:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    a28a:	2302      	movs	r3, #2
    a28c:	e7d9      	b.n	a242 <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    a28e:	4b15      	ldr	r3, [pc, #84]	; (a2e4 <S_Nv_ItemInit_Impl+0x10c>)
    a290:	4a0b      	ldr	r2, [pc, #44]	; (a2c0 <S_Nv_ItemInit_Impl+0xe8>)
    a292:	21af      	movs	r1, #175	; 0xaf
    a294:	00c9      	lsls	r1, r1, #3
    a296:	480b      	ldr	r0, [pc, #44]	; (a2c4 <S_Nv_ItemInit_Impl+0xec>)
    a298:	4c0b      	ldr	r4, [pc, #44]	; (a2c8 <S_Nv_ItemInit_Impl+0xf0>)
    a29a:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    a29c:	2300      	movs	r3, #0
    a29e:	e7d0      	b.n	a242 <S_Nv_ItemInit_Impl+0x6a>
    a2a0:	0000effe 	.word	0x0000effe
    a2a4:	00009359 	.word	0x00009359
    a2a8:	0000a185 	.word	0x0000a185
    a2ac:	2000031c 	.word	0x2000031c
    a2b0:	2000031e 	.word	0x2000031e
    a2b4:	000098dd 	.word	0x000098dd
    a2b8:	0000a10d 	.word	0x0000a10d
    a2bc:	000122e8 	.word	0x000122e8
    a2c0:	000123ec 	.word	0x000123ec
    a2c4:	000122a0 	.word	0x000122a0
    a2c8:	00010bed 	.word	0x00010bed
    a2cc:	000090ed 	.word	0x000090ed
    a2d0:	00009861 	.word	0x00009861
    a2d4:	20000344 	.word	0x20000344
    a2d8:	2000034e 	.word	0x2000034e
    a2dc:	00009b15 	.word	0x00009b15
    a2e0:	00009375 	.word	0x00009375
    a2e4:	00012248 	.word	0x00012248

0000a2e8 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    a2e8:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    a2ea:	4b03      	ldr	r3, [pc, #12]	; (a2f8 <S_Nv_IsItemAvailable_Impl+0x10>)
    a2ec:	4798      	blx	r3
    a2ee:	1e43      	subs	r3, r0, #1
    a2f0:	4198      	sbcs	r0, r3
    a2f2:	b2c0      	uxtb	r0, r0
}
    a2f4:	bd10      	pop	{r4, pc}
    a2f6:	46c0      	nop			; (mov r8, r8)
    a2f8:	00009359 	.word	0x00009359

0000a2fc <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    a2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2fe:	46d6      	mov	lr, sl
    a300:	4647      	mov	r7, r8
    a302:	b580      	push	{r7, lr}
    a304:	b087      	sub	sp, #28
    a306:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    a308:	4b20      	ldr	r3, [pc, #128]	; (a38c <pdsInitItemMask+0x90>)
    a30a:	4298      	cmp	r0, r3
    a30c:	d012      	beq.n	a334 <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    a30e:	0443      	lsls	r3, r0, #17
    a310:	d415      	bmi.n	a33e <pdsInitItemMask+0x42>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    a312:	08c3      	lsrs	r3, r0, #3
    a314:	18cf      	adds	r7, r1, r3
    a316:	2307      	movs	r3, #7
    a318:	4018      	ands	r0, r3
    a31a:	3b06      	subs	r3, #6
    a31c:	4083      	lsls	r3, r0
    a31e:	783a      	ldrb	r2, [r7, #0]
    a320:	4313      	orrs	r3, r2
    a322:	703b      	strb	r3, [r7, #0]
  }

  return true;
    a324:	2301      	movs	r3, #1
    a326:	9301      	str	r3, [sp, #4]
}
    a328:	9801      	ldr	r0, [sp, #4]
    a32a:	b007      	add	sp, #28
    a32c:	bc0c      	pop	{r2, r3}
    a32e:	4690      	mov	r8, r2
    a330:	469a      	mov	sl, r3
    a332:	bdf0      	pop	{r4, r5, r6, r7, pc}
    itemMask[0] &= 0xFEU;
    a334:	23fe      	movs	r3, #254	; 0xfe
    a336:	700b      	strb	r3, [r1, #0]
  return true;
    a338:	3bfd      	subs	r3, #253	; 0xfd
    a33a:	9301      	str	r3, [sp, #4]
    a33c:	e7f4      	b.n	a328 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    a33e:	a904      	add	r1, sp, #16
    a340:	4b13      	ldr	r3, [pc, #76]	; (a390 <pdsInitItemMask+0x94>)
    a342:	4798      	blx	r3
    a344:	9001      	str	r0, [sp, #4]
    a346:	2800      	cmp	r0, #0
    a348:	d0ee      	beq.n	a328 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    a34a:	ab04      	add	r3, sp, #16
    a34c:	889b      	ldrh	r3, [r3, #4]
    a34e:	4698      	mov	r8, r3
    a350:	2b00      	cmp	r3, #0
    a352:	d0e9      	beq.n	a328 <pdsInitItemMask+0x2c>
    a354:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    a356:	ab02      	add	r3, sp, #8
    a358:	1d9d      	adds	r5, r3, #6
    a35a:	4b0e      	ldr	r3, [pc, #56]	; (a394 <pdsInitItemMask+0x98>)
    a35c:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    a35e:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    a360:	0061      	lsls	r1, r4, #1
    a362:	9b04      	ldr	r3, [sp, #16]
    a364:	469c      	mov	ip, r3
    a366:	4461      	add	r1, ip
    a368:	2202      	movs	r2, #2
    a36a:	0028      	movs	r0, r5
    a36c:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    a36e:	8829      	ldrh	r1, [r5, #0]
    a370:	08ca      	lsrs	r2, r1, #3
    a372:	18ba      	adds	r2, r7, r2
    a374:	4031      	ands	r1, r6
    a376:	2301      	movs	r3, #1
    a378:	408b      	lsls	r3, r1
    a37a:	7811      	ldrb	r1, [r2, #0]
    a37c:	430b      	orrs	r3, r1
    a37e:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    a380:	3401      	adds	r4, #1
    a382:	b2e4      	uxtb	r4, r4
    a384:	b2a3      	uxth	r3, r4
    a386:	4543      	cmp	r3, r8
    a388:	d3ea      	bcc.n	a360 <pdsInitItemMask+0x64>
    a38a:	e7cd      	b.n	a328 <pdsInitItemMask+0x2c>
    a38c:	00004002 	.word	0x00004002
    a390:	0000a789 	.word	0x0000a789
    a394:	00010caf 	.word	0x00010caf

0000a398 <PDS_Restore>:
{
    a398:	b5f0      	push	{r4, r5, r6, r7, lr}
    a39a:	46d6      	mov	lr, sl
    a39c:	4647      	mov	r7, r8
    a39e:	b580      	push	{r7, lr}
    a3a0:	b089      	sub	sp, #36	; 0x24
  uint8_t itemsToRestore[PDS_ITEM_MASK_SIZE] = {0U};
    a3a2:	a907      	add	r1, sp, #28
    a3a4:	2300      	movs	r3, #0
    a3a6:	700b      	strb	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToRestore))
    a3a8:	4b27      	ldr	r3, [pc, #156]	; (a448 <PDS_Restore+0xb0>)
    a3aa:	4798      	blx	r3
    a3ac:	1e06      	subs	r6, r0, #0
    a3ae:	d043      	beq.n	a438 <PDS_Restore+0xa0>
    a3b0:	2400      	movs	r4, #0
  if (pdsGetItemDescr(id, &itemDescr))
    a3b2:	4f26      	ldr	r7, [pc, #152]	; (a44c <PDS_Restore+0xb4>)
      oldSize = S_Nv_ItemLength(id);
    a3b4:	4b26      	ldr	r3, [pc, #152]	; (a450 <PDS_Restore+0xb8>)
    a3b6:	469a      	mov	sl, r3
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    a3b8:	4b26      	ldr	r3, [pc, #152]	; (a454 <PDS_Restore+0xbc>)
    a3ba:	4698      	mov	r8, r3
    a3bc:	e010      	b.n	a3e0 <PDS_Restore+0x48>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a3be:	4b26      	ldr	r3, [pc, #152]	; (a458 <PDS_Restore+0xc0>)
    a3c0:	4a26      	ldr	r2, [pc, #152]	; (a45c <PDS_Restore+0xc4>)
    a3c2:	21ab      	movs	r1, #171	; 0xab
    a3c4:	0049      	lsls	r1, r1, #1
    a3c6:	4826      	ldr	r0, [pc, #152]	; (a460 <PDS_Restore+0xc8>)
    a3c8:	4c26      	ldr	r4, [pc, #152]	; (a464 <PDS_Restore+0xcc>)
    a3ca:	47a0      	blx	r4
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a3cc:	4b26      	ldr	r3, [pc, #152]	; (a468 <PDS_Restore+0xd0>)
    a3ce:	4a23      	ldr	r2, [pc, #140]	; (a45c <PDS_Restore+0xc4>)
    a3d0:	2168      	movs	r1, #104	; 0x68
    a3d2:	31ff      	adds	r1, #255	; 0xff
    a3d4:	4822      	ldr	r0, [pc, #136]	; (a460 <PDS_Restore+0xc8>)
    a3d6:	4c23      	ldr	r4, [pc, #140]	; (a464 <PDS_Restore+0xcc>)
    a3d8:	47a0      	blx	r4
    a3da:	3401      	adds	r4, #1
    for (j = 0U; j < 8U; j++)
    a3dc:	2c08      	cmp	r4, #8
    a3de:	d02b      	beq.n	a438 <PDS_Restore+0xa0>
      if (itemsToRestore[i] & (1U << j))
    a3e0:	ab07      	add	r3, sp, #28
    a3e2:	781b      	ldrb	r3, [r3, #0]
    a3e4:	40e3      	lsrs	r3, r4
    a3e6:	07db      	lsls	r3, r3, #31
    a3e8:	d5f7      	bpl.n	a3da <PDS_Restore+0x42>
        if (!pdsRestoreItem(((S_Nv_ItemId_t)i << 3U) + j))
    a3ea:	b2a5      	uxth	r5, r4
  if (pdsGetItemDescr(id, &itemDescr))
    a3ec:	a903      	add	r1, sp, #12
    a3ee:	0028      	movs	r0, r5
    a3f0:	47b8      	blx	r7
    a3f2:	2800      	cmp	r0, #0
    a3f4:	d01f      	beq.n	a436 <PDS_Restore+0x9e>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a3f6:	ab03      	add	r3, sp, #12
    a3f8:	885b      	ldrh	r3, [r3, #2]
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	d0df      	beq.n	a3be <PDS_Restore+0x26>
    a3fe:	9b04      	ldr	r3, [sp, #16]
    a400:	2b00      	cmp	r3, #0
    a402:	d0dc      	beq.n	a3be <PDS_Restore+0x26>
    if (itemDescr.filler)
    a404:	9b05      	ldr	r3, [sp, #20]
    a406:	2b00      	cmp	r3, #0
    a408:	d000      	beq.n	a40c <PDS_Restore+0x74>
      itemDescr.filler();
    a40a:	4798      	blx	r3
      oldSize = S_Nv_ItemLength(id);
    a40c:	0028      	movs	r0, r5
    a40e:	47d0      	blx	sl
    a410:	9001      	str	r0, [sp, #4]
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    a412:	ab03      	add	r3, sp, #12
    a414:	9a04      	ldr	r2, [sp, #16]
    a416:	8859      	ldrh	r1, [r3, #2]
    a418:	0028      	movs	r0, r5
    a41a:	47c0      	blx	r8
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a41c:	2802      	cmp	r0, #2
    a41e:	d011      	beq.n	a444 <PDS_Restore+0xac>
    a420:	2800      	cmp	r0, #0
    a422:	d1d3      	bne.n	a3cc <PDS_Restore+0x34>
        if (!pdsUpdateMemory(id, itemDescr.itemData, itemDescr.itemSize, oldSize))
    a424:	ab03      	add	r3, sp, #12
    a426:	885a      	ldrh	r2, [r3, #2]
    a428:	9904      	ldr	r1, [sp, #16]
    a42a:	9b01      	ldr	r3, [sp, #4]
    a42c:	0028      	movs	r0, r5
    a42e:	4d0f      	ldr	r5, [pc, #60]	; (a46c <PDS_Restore+0xd4>)
    a430:	47a8      	blx	r5
    a432:	2800      	cmp	r0, #0
    a434:	d1d1      	bne.n	a3da <PDS_Restore+0x42>
          return false;
    a436:	2600      	movs	r6, #0
}
    a438:	0030      	movs	r0, r6
    a43a:	b009      	add	sp, #36	; 0x24
    a43c:	bc0c      	pop	{r2, r3}
    a43e:	4690      	mov	r8, r2
    a440:	469a      	mov	sl, r3
    a442:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return false;
    a444:	2600      	movs	r6, #0
    a446:	e7f7      	b.n	a438 <PDS_Restore+0xa0>
    a448:	0000a2fd 	.word	0x0000a2fd
    a44c:	0000a6e9 	.word	0x0000a6e9
    a450:	0000a185 	.word	0x0000a185
    a454:	0000a1d9 	.word	0x0000a1d9
    a458:	00012438 	.word	0x00012438
    a45c:	00012530 	.word	0x00012530
    a460:	00012474 	.word	0x00012474
    a464:	00010bed 	.word	0x00010bed
    a468:	000124c0 	.word	0x000124c0
    a46c:	0000a745 	.word	0x0000a745

0000a470 <PDS_Store>:
{
    a470:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    a472:	4905      	ldr	r1, [pc, #20]	; (a488 <PDS_Store+0x18>)
    a474:	4b05      	ldr	r3, [pc, #20]	; (a48c <PDS_Store+0x1c>)
    a476:	4798      	blx	r3
    a478:	1e04      	subs	r4, r0, #0
    a47a:	d101      	bne.n	a480 <PDS_Store+0x10>
}
    a47c:	0020      	movs	r0, r4
    a47e:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    a480:	2000      	movs	r0, #0
    a482:	4b03      	ldr	r3, [pc, #12]	; (a490 <PDS_Store+0x20>)
    a484:	4798      	blx	r3
  return true;
    a486:	e7f9      	b.n	a47c <PDS_Store+0xc>
    a488:	20000354 	.word	0x20000354
    a48c:	0000a2fd 	.word	0x0000a2fd
    a490:	0000a695 	.word	0x0000a695

0000a494 <pdsStoreItemTaskHandler>:
{
    a494:	b5f0      	push	{r4, r5, r6, r7, lr}
    a496:	b085      	sub	sp, #20
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a498:	4b3e      	ldr	r3, [pc, #248]	; (a594 <pdsStoreItemTaskHandler+0x100>)
    a49a:	781b      	ldrb	r3, [r3, #0]
    a49c:	3301      	adds	r3, #1
      bit_index %= 8;
    a49e:	2207      	movs	r2, #7
    a4a0:	4013      	ands	r3, r2
      if (itemsToStore[byte_index] & (1U << bit_index))
    a4a2:	4a3d      	ldr	r2, [pc, #244]	; (a598 <pdsStoreItemTaskHandler+0x104>)
    a4a4:	7817      	ldrb	r7, [r2, #0]
    a4a6:	0038      	movs	r0, r7
    a4a8:	001e      	movs	r6, r3
    a4aa:	003a      	movs	r2, r7
    a4ac:	40da      	lsrs	r2, r3
    a4ae:	07d2      	lsls	r2, r2, #31
    a4b0:	d431      	bmi.n	a516 <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a4b2:	3301      	adds	r3, #1
    a4b4:	b2db      	uxtb	r3, r3
    a4b6:	2207      	movs	r2, #7
      bit_index %= 8;
    a4b8:	2507      	movs	r5, #7
      if (itemsToStore[byte_index] & (1U << bit_index))
    a4ba:	2401      	movs	r4, #1
      bit_index %= 8;
    a4bc:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    a4be:	001e      	movs	r6, r3
    a4c0:	0001      	movs	r1, r0
    a4c2:	40d9      	lsrs	r1, r3
    a4c4:	420c      	tst	r4, r1
    a4c6:	d126      	bne.n	a516 <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a4c8:	3301      	adds	r3, #1
    a4ca:	b2db      	uxtb	r3, r3
    a4cc:	3a01      	subs	r2, #1
    a4ce:	b2d2      	uxtb	r2, r2
    a4d0:	2a00      	cmp	r2, #0
    a4d2:	d1f3      	bne.n	a4bc <pdsStoreItemTaskHandler+0x28>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    a4d4:	2401      	movs	r4, #1
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    a4d6:	00e4      	lsls	r4, r4, #3
    a4d8:	18e4      	adds	r4, r4, r3
    a4da:	0020      	movs	r0, r4
    a4dc:	4b2f      	ldr	r3, [pc, #188]	; (a59c <pdsStoreItemTaskHandler+0x108>)
    a4de:	4798      	blx	r3
    a4e0:	2800      	cmp	r0, #0
    a4e2:	d124      	bne.n	a52e <pdsStoreItemTaskHandler+0x9a>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    a4e4:	4669      	mov	r1, sp
    a4e6:	0020      	movs	r0, r4
    a4e8:	4b2d      	ldr	r3, [pc, #180]	; (a5a0 <pdsStoreItemTaskHandler+0x10c>)
    a4ea:	4798      	blx	r3
    a4ec:	2800      	cmp	r0, #0
    a4ee:	d038      	beq.n	a562 <pdsStoreItemTaskHandler+0xce>
      if (itemDescr.filler)
    a4f0:	9b02      	ldr	r3, [sp, #8]
    a4f2:	2b00      	cmp	r3, #0
    a4f4:	d000      	beq.n	a4f8 <pdsStoreItemTaskHandler+0x64>
        itemDescr.filler();
    a4f6:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    a4f8:	9a01      	ldr	r2, [sp, #4]
    a4fa:	466b      	mov	r3, sp
    a4fc:	8859      	ldrh	r1, [r3, #2]
    a4fe:	0020      	movs	r0, r4
    a500:	4b28      	ldr	r3, [pc, #160]	; (a5a4 <pdsStoreItemTaskHandler+0x110>)
    a502:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a504:	23fd      	movs	r3, #253	; 0xfd
    a506:	4218      	tst	r0, r3
    a508:	d02b      	beq.n	a562 <pdsStoreItemTaskHandler+0xce>
    a50a:	4b27      	ldr	r3, [pc, #156]	; (a5a8 <pdsStoreItemTaskHandler+0x114>)
    a50c:	4a27      	ldr	r2, [pc, #156]	; (a5ac <pdsStoreItemTaskHandler+0x118>)
    a50e:	21eb      	movs	r1, #235	; 0xeb
    a510:	4827      	ldr	r0, [pc, #156]	; (a5b0 <pdsStoreItemTaskHandler+0x11c>)
    a512:	4c28      	ldr	r4, [pc, #160]	; (a5b4 <pdsStoreItemTaskHandler+0x120>)
    a514:	47a0      	blx	r4
        itemsToStore[byte_index] &= ~(1U << bit_index);
    a516:	2201      	movs	r2, #1
    a518:	40b2      	lsls	r2, r6
    a51a:	4397      	bics	r7, r2
    a51c:	4a1e      	ldr	r2, [pc, #120]	; (a598 <pdsStoreItemTaskHandler+0x104>)
    a51e:	7017      	strb	r7, [r2, #0]
        i_found = byte_index;
    a520:	2100      	movs	r1, #0
    a522:	4a25      	ldr	r2, [pc, #148]	; (a5b8 <pdsStoreItemTaskHandler+0x124>)
    a524:	7011      	strb	r1, [r2, #0]
        j_found = bit_index;
    a526:	4a1b      	ldr	r2, [pc, #108]	; (a594 <pdsStoreItemTaskHandler+0x100>)
    a528:	7013      	strb	r3, [r2, #0]
    byte_index %= PDS_ITEM_MASK_SIZE;
    a52a:	2400      	movs	r4, #0
    a52c:	e7d3      	b.n	a4d6 <pdsStoreItemTaskHandler+0x42>
  if (pdsGetItemDescr(id, &itemDescr))
    a52e:	4669      	mov	r1, sp
    a530:	0020      	movs	r0, r4
    a532:	4b1b      	ldr	r3, [pc, #108]	; (a5a0 <pdsStoreItemTaskHandler+0x10c>)
    a534:	4798      	blx	r3
    a536:	2800      	cmp	r0, #0
    a538:	d013      	beq.n	a562 <pdsStoreItemTaskHandler+0xce>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a53a:	466b      	mov	r3, sp
    a53c:	885b      	ldrh	r3, [r3, #2]
    a53e:	2b00      	cmp	r3, #0
    a540:	d015      	beq.n	a56e <pdsStoreItemTaskHandler+0xda>
    a542:	9b01      	ldr	r3, [sp, #4]
    a544:	2b00      	cmp	r3, #0
    a546:	d012      	beq.n	a56e <pdsStoreItemTaskHandler+0xda>
    if (itemDescr.filler)
    a548:	9b02      	ldr	r3, [sp, #8]
    a54a:	2b00      	cmp	r3, #0
    a54c:	d000      	beq.n	a550 <pdsStoreItemTaskHandler+0xbc>
      itemDescr.filler();
    a54e:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    a550:	9b01      	ldr	r3, [sp, #4]
    a552:	466a      	mov	r2, sp
    a554:	8852      	ldrh	r2, [r2, #2]
    a556:	2100      	movs	r1, #0
    a558:	0020      	movs	r0, r4
    a55a:	4c18      	ldr	r4, [pc, #96]	; (a5bc <pdsStoreItemTaskHandler+0x128>)
    a55c:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    a55e:	2800      	cmp	r0, #0
    a560:	d10c      	bne.n	a57c <pdsStoreItemTaskHandler+0xe8>
    if (itemsToStore[i])
    a562:	4b0d      	ldr	r3, [pc, #52]	; (a598 <pdsStoreItemTaskHandler+0x104>)
    a564:	781b      	ldrb	r3, [r3, #0]
    a566:	2b00      	cmp	r3, #0
    a568:	d10f      	bne.n	a58a <pdsStoreItemTaskHandler+0xf6>
}
    a56a:	b005      	add	sp, #20
    a56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a56e:	4b14      	ldr	r3, [pc, #80]	; (a5c0 <pdsStoreItemTaskHandler+0x12c>)
    a570:	4a14      	ldr	r2, [pc, #80]	; (a5c4 <pdsStoreItemTaskHandler+0x130>)
    a572:	219a      	movs	r1, #154	; 0x9a
    a574:	0049      	lsls	r1, r1, #1
    a576:	480e      	ldr	r0, [pc, #56]	; (a5b0 <pdsStoreItemTaskHandler+0x11c>)
    a578:	4c0e      	ldr	r4, [pc, #56]	; (a5b4 <pdsStoreItemTaskHandler+0x120>)
    a57a:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    a57c:	4b12      	ldr	r3, [pc, #72]	; (a5c8 <pdsStoreItemTaskHandler+0x134>)
    a57e:	4a11      	ldr	r2, [pc, #68]	; (a5c4 <pdsStoreItemTaskHandler+0x130>)
    a580:	21a1      	movs	r1, #161	; 0xa1
    a582:	0049      	lsls	r1, r1, #1
    a584:	480a      	ldr	r0, [pc, #40]	; (a5b0 <pdsStoreItemTaskHandler+0x11c>)
    a586:	4c0b      	ldr	r4, [pc, #44]	; (a5b4 <pdsStoreItemTaskHandler+0x120>)
    a588:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    a58a:	2000      	movs	r0, #0
    a58c:	4b0f      	ldr	r3, [pc, #60]	; (a5cc <pdsStoreItemTaskHandler+0x138>)
    a58e:	4798      	blx	r3
}
    a590:	e7eb      	b.n	a56a <pdsStoreItemTaskHandler+0xd6>
    a592:	46c0      	nop			; (mov r8, r8)
    a594:	20000355 	.word	0x20000355
    a598:	20000354 	.word	0x20000354
    a59c:	0000a2e9 	.word	0x0000a2e9
    a5a0:	0000a6e9 	.word	0x0000a6e9
    a5a4:	0000a1d9 	.word	0x0000a1d9
    a5a8:	000124c0 	.word	0x000124c0
    a5ac:	00012508 	.word	0x00012508
    a5b0:	00012474 	.word	0x00012474
    a5b4:	00010bed 	.word	0x00010bed
    a5b8:	20000350 	.word	0x20000350
    a5bc:	00009fd5 	.word	0x00009fd5
    a5c0:	00012438 	.word	0x00012438
    a5c4:	00012520 	.word	0x00012520
    a5c8:	00012540 	.word	0x00012540
    a5cc:	0000a695 	.word	0x0000a695

0000a5d0 <PDS_IsAbleToRestore>:
{
    a5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5d2:	b085      	sub	sp, #20
  uint8_t itemsToBeAbleRestore[PDS_ITEM_MASK_SIZE] = {0U};
    a5d4:	a903      	add	r1, sp, #12
    a5d6:	2300      	movs	r3, #0
    a5d8:	700b      	strb	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToBeAbleRestore))
    a5da:	4b0c      	ldr	r3, [pc, #48]	; (a60c <PDS_IsAbleToRestore+0x3c>)
    a5dc:	4798      	blx	r3
    a5de:	9001      	str	r0, [sp, #4]
    a5e0:	2800      	cmp	r0, #0
    a5e2:	d010      	beq.n	a606 <PDS_IsAbleToRestore+0x36>
    a5e4:	2400      	movs	r4, #0
      if (itemsToBeAbleRestore[i] & (1U << j))
    a5e6:	ad03      	add	r5, sp, #12
    a5e8:	2701      	movs	r7, #1
      if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)i << 3U) + j))
    a5ea:	4e09      	ldr	r6, [pc, #36]	; (a610 <PDS_IsAbleToRestore+0x40>)
    a5ec:	e002      	b.n	a5f4 <PDS_IsAbleToRestore+0x24>
    a5ee:	3401      	adds	r4, #1
    for (j = 0U; j < 8U; j++)
    a5f0:	2c08      	cmp	r4, #8
    a5f2:	d008      	beq.n	a606 <PDS_IsAbleToRestore+0x36>
      if (itemsToBeAbleRestore[i] & (1U << j))
    a5f4:	782b      	ldrb	r3, [r5, #0]
    a5f6:	40e3      	lsrs	r3, r4
    a5f8:	421f      	tst	r7, r3
    a5fa:	d0f8      	beq.n	a5ee <PDS_IsAbleToRestore+0x1e>
      if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)i << 3U) + j))
    a5fc:	b2a0      	uxth	r0, r4
    a5fe:	47b0      	blx	r6
    a600:	2800      	cmp	r0, #0
    a602:	d1f4      	bne.n	a5ee <PDS_IsAbleToRestore+0x1e>
          return false;
    a604:	9001      	str	r0, [sp, #4]
}
    a606:	9801      	ldr	r0, [sp, #4]
    a608:	b005      	add	sp, #20
    a60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a60c:	0000a2fd 	.word	0x0000a2fd
    a610:	0000a2e9 	.word	0x0000a2e9

0000a614 <PDS_Init>:
\brief Persistent Data Server initialization routine.
******************************************************************************/


void PDS_Init (void)
{
    a614:	b510      	push	{r4, lr}
  D_Nv_Init();
    a616:	4b02      	ldr	r3, [pc, #8]	; (a620 <PDS_Init+0xc>)
    a618:	4798      	blx	r3
  S_Nv_Init();
    a61a:	4b02      	ldr	r3, [pc, #8]	; (a624 <PDS_Init+0x10>)
    a61c:	4798      	blx	r3
}
    a61e:	bd10      	pop	{r4, pc}
    a620:	00008e4d 	.word	0x00008e4d
    a624:	00009f9d 	.word	0x00009f9d

0000a628 <PDS_InitItems>:

/******************************************************************************
\brief PDS item initialization routine
******************************************************************************/
void PDS_InitItems(void)
{
    a628:	b570      	push	{r4, r5, r6, lr}
    a62a:	b084      	sub	sp, #16
  S_Nv_ReturnValue_t ret;
  ItemIdToMemoryMapping_t itemDesc;

  for (S_Nv_ItemId_t i = 1U; i < PDS_ITEM_AMOUNT; i++)
    a62c:	2401      	movs	r4, #1
  {
    if (pdsGetItemDescr(i, &itemDesc))
    a62e:	4e12      	ldr	r6, [pc, #72]	; (a678 <PDS_InitItems+0x50>)
        pdsSecureItemInit(i,itemDesc.itemSize);
      }
      else
#endif
      {
        ret = S_Nv_ItemInit(i, itemDesc.itemSize, NULL);
    a630:	4d12      	ldr	r5, [pc, #72]	; (a67c <PDS_InitItems+0x54>)
    a632:	e009      	b.n	a648 <PDS_InitItems+0x20>
      assert(itemDesc.itemSize);
    a634:	4b12      	ldr	r3, [pc, #72]	; (a680 <PDS_InitItems+0x58>)
    a636:	4a13      	ldr	r2, [pc, #76]	; (a684 <PDS_InitItems+0x5c>)
    a638:	3150      	adds	r1, #80	; 0x50
    a63a:	4813      	ldr	r0, [pc, #76]	; (a688 <PDS_InitItems+0x60>)
    a63c:	4c13      	ldr	r4, [pc, #76]	; (a68c <PDS_InitItems+0x64>)
    a63e:	47a0      	blx	r4
  for (S_Nv_ItemId_t i = 1U; i < PDS_ITEM_AMOUNT; i++)
    a640:	3401      	adds	r4, #1
    a642:	b2a4      	uxth	r4, r4
    a644:	2c08      	cmp	r4, #8
    a646:	d014      	beq.n	a672 <PDS_InitItems+0x4a>
    if (pdsGetItemDescr(i, &itemDesc))
    a648:	4669      	mov	r1, sp
    a64a:	0020      	movs	r0, r4
    a64c:	47b0      	blx	r6
    a64e:	2800      	cmp	r0, #0
    a650:	d0f6      	beq.n	a640 <PDS_InitItems+0x18>
      assert(itemDesc.itemSize);
    a652:	466b      	mov	r3, sp
    a654:	8859      	ldrh	r1, [r3, #2]
    a656:	2900      	cmp	r1, #0
    a658:	d0ec      	beq.n	a634 <PDS_InitItems+0xc>
        ret = S_Nv_ItemInit(i, itemDesc.itemSize, NULL);
    a65a:	2200      	movs	r2, #0
    a65c:	0020      	movs	r0, r4
    a65e:	47a8      	blx	r5
        assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a660:	23fd      	movs	r3, #253	; 0xfd
    a662:	4218      	tst	r0, r3
    a664:	d0ec      	beq.n	a640 <PDS_InitItems+0x18>
    a666:	4b0a      	ldr	r3, [pc, #40]	; (a690 <PDS_InitItems+0x68>)
    a668:	4a06      	ldr	r2, [pc, #24]	; (a684 <PDS_InitItems+0x5c>)
    a66a:	215b      	movs	r1, #91	; 0x5b
    a66c:	4806      	ldr	r0, [pc, #24]	; (a688 <PDS_InitItems+0x60>)
    a66e:	4c07      	ldr	r4, [pc, #28]	; (a68c <PDS_InitItems+0x64>)
    a670:	47a0      	blx	r4
      }
    }
  }
}
    a672:	b004      	add	sp, #16
    a674:	bd70      	pop	{r4, r5, r6, pc}
    a676:	46c0      	nop			; (mov r8, r8)
    a678:	0000a6e9 	.word	0x0000a6e9
    a67c:	0000a1d9 	.word	0x0000a1d9
    a680:	0001255c 	.word	0x0001255c
    a684:	000125b4 	.word	0x000125b4
    a688:	00012570 	.word	0x00012570
    a68c:	00010bed 	.word	0x00010bed
    a690:	000124c0 	.word	0x000124c0

0000a694 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    a694:	4a03      	ldr	r2, [pc, #12]	; (a6a4 <pdsPostTask+0x10>)
    a696:	2301      	movs	r3, #1
    a698:	4083      	lsls	r3, r0
    a69a:	7811      	ldrb	r1, [r2, #0]
    a69c:	430b      	orrs	r3, r1
    a69e:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    a6a0:	4770      	bx	lr
    a6a2:	46c0      	nop			; (mov r8, r8)
    a6a4:	20000356 	.word	0x20000356

0000a6a8 <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    a6a8:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    a6aa:	4b0d      	ldr	r3, [pc, #52]	; (a6e0 <PDS_TaskHandler+0x38>)
    a6ac:	781d      	ldrb	r5, [r3, #0]
    a6ae:	2d00      	cmp	r5, #0
    a6b0:	d012      	beq.n	a6d8 <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    a6b2:	0028      	movs	r0, r5
    a6b4:	07eb      	lsls	r3, r5, #31
    a6b6:	d410      	bmi.n	a6da <PDS_TaskHandler+0x32>
    a6b8:	2300      	movs	r3, #0
    a6ba:	2401      	movs	r4, #1
      taskId++;
    a6bc:	3301      	adds	r3, #1
    a6be:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    a6c0:	0019      	movs	r1, r3
    a6c2:	0002      	movs	r2, r0
    a6c4:	40da      	lsrs	r2, r3
    a6c6:	4214      	tst	r4, r2
    a6c8:	d0f8      	beq.n	a6bc <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    a6ca:	2301      	movs	r3, #1
    a6cc:	408b      	lsls	r3, r1
    a6ce:	405d      	eors	r5, r3
    a6d0:	4b03      	ldr	r3, [pc, #12]	; (a6e0 <PDS_TaskHandler+0x38>)
    a6d2:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    a6d4:	4b03      	ldr	r3, [pc, #12]	; (a6e4 <PDS_TaskHandler+0x3c>)
    a6d6:	4798      	blx	r3
   
  }
}
    a6d8:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    a6da:	2100      	movs	r1, #0
    a6dc:	e7f5      	b.n	a6ca <PDS_TaskHandler+0x22>
    a6de:	46c0      	nop			; (mov r8, r8)
    a6e0:	20000356 	.word	0x20000356
    a6e4:	0000a495 	.word	0x0000a495

0000a6e8 <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    a6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6ea:	b087      	sub	sp, #28
    a6ec:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a6ee:	aa02      	add	r2, sp, #8
    a6f0:	4b10      	ldr	r3, [pc, #64]	; (a734 <pdsGetItemDescr+0x4c>)
    a6f2:	0011      	movs	r1, r2
    a6f4:	cb70      	ldmia	r3!, {r4, r5, r6}
    a6f6:	c170      	stmia	r1!, {r4, r5, r6}
    a6f8:	681b      	ldr	r3, [r3, #0]
    a6fa:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    a6fc:	8813      	ldrh	r3, [r2, #0]
    a6fe:	4283      	cmp	r3, r0
    a700:	d011      	beq.n	a726 <pdsGetItemDescr+0x3e>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    a702:	4b0d      	ldr	r3, [pc, #52]	; (a738 <pdsGetItemDescr+0x50>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a704:	aa02      	add	r2, sp, #8
    a706:	0011      	movs	r1, r2
    a708:	001c      	movs	r4, r3
    a70a:	cce0      	ldmia	r4!, {r5, r6, r7}
    a70c:	c1e0      	stmia	r1!, {r5, r6, r7}
    a70e:	6824      	ldr	r4, [r4, #0]
    a710:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    a712:	8811      	ldrh	r1, [r2, #0]
    a714:	4281      	cmp	r1, r0
    a716:	d006      	beq.n	a726 <pdsGetItemDescr+0x3e>
    itemDescrPtr++;
    a718:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    a71a:	4908      	ldr	r1, [pc, #32]	; (a73c <pdsGetItemDescr+0x54>)
    a71c:	428b      	cmp	r3, r1
    a71e:	d1f2      	bne.n	a706 <pdsGetItemDescr+0x1e>

  }
  return false;
    a720:	2000      	movs	r0, #0
}
    a722:	b007      	add	sp, #28
    a724:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    a726:	2210      	movs	r2, #16
    a728:	a902      	add	r1, sp, #8
    a72a:	9801      	ldr	r0, [sp, #4]
    a72c:	4b04      	ldr	r3, [pc, #16]	; (a740 <pdsGetItemDescr+0x58>)
    a72e:	4798      	blx	r3
      return true;
    a730:	2001      	movs	r0, #1
    a732:	e7f6      	b.n	a722 <pdsGetItemDescr+0x3a>
    a734:	00006100 	.word	0x00006100
    a738:	00006110 	.word	0x00006110
    a73c:	00006180 	.word	0x00006180
    a740:	00010caf 	.word	0x00010caf

0000a744 <pdsUpdateMemory>:
{
    a744:	b510      	push	{r4, lr}
    a746:	b084      	sub	sp, #16
  if (size == oldSize)
    a748:	429a      	cmp	r2, r3
    a74a:	d008      	beq.n	a75e <pdsUpdateMemory+0x1a>
  if (pdsGetItemDescr(id, &mapItem))
    a74c:	4669      	mov	r1, sp
    a74e:	4b09      	ldr	r3, [pc, #36]	; (a774 <pdsUpdateMemory+0x30>)
    a750:	4798      	blx	r3
    a752:	2800      	cmp	r0, #0
    a754:	d003      	beq.n	a75e <pdsUpdateMemory+0x1a>
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    a756:	466b      	mov	r3, sp
    a758:	7b1b      	ldrb	r3, [r3, #12]
    a75a:	07db      	lsls	r3, r3, #31
    a75c:	d502      	bpl.n	a764 <pdsUpdateMemory+0x20>
}
    a75e:	2001      	movs	r0, #1
    a760:	b004      	add	sp, #16
    a762:	bd10      	pop	{r4, pc}
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    a764:	4b04      	ldr	r3, [pc, #16]	; (a778 <pdsUpdateMemory+0x34>)
    a766:	4a05      	ldr	r2, [pc, #20]	; (a77c <pdsUpdateMemory+0x38>)
    a768:	21bc      	movs	r1, #188	; 0xbc
    a76a:	31ff      	adds	r1, #255	; 0xff
    a76c:	4804      	ldr	r0, [pc, #16]	; (a780 <pdsUpdateMemory+0x3c>)
    a76e:	4c05      	ldr	r4, [pc, #20]	; (a784 <pdsUpdateMemory+0x40>)
    a770:	47a0      	blx	r4
    a772:	46c0      	nop			; (mov r8, r8)
    a774:	0000a6e9 	.word	0x0000a6e9
    a778:	000125d4 	.word	0x000125d4
    a77c:	000125c4 	.word	0x000125c4
    a780:	00012600 	.word	0x00012600
    a784:	00010bed 	.word	0x00010bed

0000a788 <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    a788:	b570      	push	{r4, r5, r6, lr}
    a78a:	b082      	sub	sp, #8
    a78c:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    a78e:	466b      	mov	r3, sp
    a790:	4a08      	ldr	r2, [pc, #32]	; (a7b4 <pdsGetDirDescr+0x2c>)
    a792:	4669      	mov	r1, sp
    a794:	ca60      	ldmia	r2!, {r5, r6}
    a796:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    a798:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    a79a:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    a79c:	4282      	cmp	r2, r0
    a79e:	d002      	beq.n	a7a6 <pdsGetDirDescr+0x1e>
}
    a7a0:	0018      	movs	r0, r3
    a7a2:	b002      	add	sp, #8
    a7a4:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    a7a6:	2208      	movs	r2, #8
    a7a8:	4669      	mov	r1, sp
    a7aa:	0020      	movs	r0, r4
    a7ac:	4b02      	ldr	r3, [pc, #8]	; (a7b8 <pdsGetDirDescr+0x30>)
    a7ae:	4798      	blx	r3
      return true;
    a7b0:	2301      	movs	r3, #1
    a7b2:	e7f5      	b.n	a7a0 <pdsGetDirDescr+0x18>
    a7b4:	00006170 	.word	0x00006170
    a7b8:	00010caf 	.word	0x00010caf

0000a7bc <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	dataStatus = (miwi_status_t)status;
    a7bc:	4b02      	ldr	r3, [pc, #8]	; (a7c8 <PHY_DataConf+0xc>)
    a7be:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    a7c0:	2201      	movs	r2, #1
    a7c2:	4b02      	ldr	r3, [pc, #8]	; (a7cc <PHY_DataConf+0x10>)
    a7c4:	701a      	strb	r2, [r3, #0]
}
    a7c6:	4770      	bx	lr
    a7c8:	20001dbc 	.word	0x20001dbc
    a7cc:	20000357 	.word	0x20000357

0000a7d0 <MiMAC_SetAltAddress>:
{
    a7d0:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    a7d2:	7802      	ldrb	r2, [r0, #0]
    a7d4:	4b08      	ldr	r3, [pc, #32]	; (a7f8 <MiMAC_SetAltAddress+0x28>)
    a7d6:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    a7d8:	7842      	ldrb	r2, [r0, #1]
    a7da:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    a7dc:	780a      	ldrb	r2, [r1, #0]
    a7de:	4c07      	ldr	r4, [pc, #28]	; (a7fc <MiMAC_SetAltAddress+0x2c>)
    a7e0:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    a7e2:	784a      	ldrb	r2, [r1, #1]
    a7e4:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    a7e6:	8818      	ldrh	r0, [r3, #0]
    a7e8:	4b05      	ldr	r3, [pc, #20]	; (a800 <MiMAC_SetAltAddress+0x30>)
    a7ea:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    a7ec:	8820      	ldrh	r0, [r4, #0]
    a7ee:	4b05      	ldr	r3, [pc, #20]	; (a804 <MiMAC_SetAltAddress+0x34>)
    a7f0:	4798      	blx	r3
}
    a7f2:	2001      	movs	r0, #1
    a7f4:	bd10      	pop	{r4, pc}
    a7f6:	46c0      	nop			; (mov r8, r8)
    a7f8:	20001d7c 	.word	0x20001d7c
    a7fc:	20001dd8 	.word	0x20001dd8
    a800:	0000b751 	.word	0x0000b751
    a804:	0000b731 	.word	0x0000b731

0000a808 <mic_generator>:
{
    a808:	b5f0      	push	{r4, r5, r6, r7, lr}
    a80a:	46c6      	mov	lr, r8
    a80c:	b500      	push	{lr}
    a80e:	b0a6      	sub	sp, #152	; 0x98
    a810:	0006      	movs	r6, r0
    a812:	000c      	movs	r4, r1
    a814:	469c      	mov	ip, r3
    a816:	992c      	ldr	r1, [sp, #176]	; 0xb0
	iterations = len/16;
    a818:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    a81a:	0723      	lsls	r3, r4, #28
    a81c:	d000      	beq.n	a820 <mic_generator+0x18>
    a81e:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    a820:	2049      	movs	r0, #73	; 0x49
    a822:	4b41      	ldr	r3, [pc, #260]	; (a928 <mic_generator+0x120>)
    a824:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    a826:	2300      	movs	r3, #0
    a828:	a802      	add	r0, sp, #8
    a82a:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    a82c:	330d      	adds	r3, #13
    a82e:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    a830:	7082      	strb	r2, [r0, #2]
    a832:	2200      	movs	r2, #0
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    a834:	4b3c      	ldr	r3, [pc, #240]	; (a928 <mic_generator+0x120>)
    a836:	5c8f      	ldrb	r7, [r1, r2]
    a838:	18d0      	adds	r0, r2, r3
    a83a:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    a83c:	0010      	movs	r0, r2
    a83e:	af02      	add	r7, sp, #8
    a840:	46b8      	mov	r8, r7
    a842:	4440      	add	r0, r8
    a844:	5c8f      	ldrb	r7, [r1, r2]
    a846:	71c7      	strb	r7, [r0, #7]
    a848:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    a84a:	2a08      	cmp	r2, #8
    a84c:	d1f3      	bne.n	a836 <mic_generator+0x2e>
		InitVect_in[i+9] = FrameCounter.v[i];
    a84e:	4663      	mov	r3, ip
    a850:	466a      	mov	r2, sp
    a852:	71d3      	strb	r3, [r2, #7]
    a854:	79d3      	ldrb	r3, [r2, #7]
    a856:	4834      	ldr	r0, [pc, #208]	; (a928 <mic_generator+0x120>)
    a858:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    a85a:	4642      	mov	r2, r8
    a85c:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    a85e:	4663      	mov	r3, ip
    a860:	041b      	lsls	r3, r3, #16
    a862:	0e1b      	lsrs	r3, r3, #24
    a864:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    a866:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    a868:	4663      	mov	r3, ip
    a86a:	021b      	lsls	r3, r3, #8
    a86c:	0e1b      	lsrs	r3, r3, #24
    a86e:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    a870:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    a872:	4663      	mov	r3, ip
    a874:	0e1b      	lsrs	r3, r3, #24
    a876:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    a878:	7193      	strb	r3, [r2, #6]
	cbc_header_with_padding[15] = 0x00;   // Padding
    a87a:	2300      	movs	r3, #0
    a87c:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    a87e:	2204      	movs	r2, #4
    a880:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    a882:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    a884:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    a886:	4929      	ldr	r1, [pc, #164]	; (a92c <mic_generator+0x124>)
    a888:	4b29      	ldr	r3, [pc, #164]	; (a930 <mic_generator+0x128>)
    a88a:	4798      	blx	r3
    a88c:	2300      	movs	r3, #0
		copy_packet1[i] = cbc_header_with_padding[i];
    a88e:	a906      	add	r1, sp, #24
    a890:	aa02      	add	r2, sp, #8
    a892:	5c9a      	ldrb	r2, [r3, r2]
    a894:	545a      	strb	r2, [r3, r1]
    a896:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    a898:	2b10      	cmp	r3, #16
    a89a:	d1f9      	bne.n	a890 <mic_generator+0x88>
	for (i=16;i<len+16;i++)
    a89c:	0027      	movs	r7, r4
    a89e:	3710      	adds	r7, #16
    a8a0:	2f10      	cmp	r7, #16
    a8a2:	dd0a      	ble.n	a8ba <mic_generator+0xb2>
    a8a4:	2010      	movs	r0, #16
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    a8a6:	a906      	add	r1, sp, #24
    a8a8:	18f2      	adds	r2, r6, r3
    a8aa:	3a10      	subs	r2, #16
    a8ac:	7812      	ldrb	r2, [r2, #0]
    a8ae:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    a8b0:	3301      	adds	r3, #1
    a8b2:	b2db      	uxtb	r3, r3
    a8b4:	0018      	movs	r0, r3
    a8b6:	42bb      	cmp	r3, r7
    a8b8:	dbf6      	blt.n	a8a8 <mic_generator+0xa0>
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    a8ba:	0023      	movs	r3, r4
    a8bc:	3310      	adds	r3, #16
    a8be:	b2db      	uxtb	r3, r3
    a8c0:	001a      	movs	r2, r3
    a8c2:	3501      	adds	r5, #1
    a8c4:	0129      	lsls	r1, r5, #4
    a8c6:	428b      	cmp	r3, r1
    a8c8:	da07      	bge.n	a8da <mic_generator+0xd2>
		copy_packet1[i] = 0; // Padding
    a8ca:	ac06      	add	r4, sp, #24
    a8cc:	2000      	movs	r0, #0
    a8ce:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    a8d0:	3301      	adds	r3, #1
    a8d2:	b2db      	uxtb	r3, r3
    a8d4:	001a      	movs	r2, r3
    a8d6:	428b      	cmp	r3, r1
    a8d8:	dbf9      	blt.n	a8ce <mic_generator+0xc6>
	for (i=0;i<iterations+1;i++)
    a8da:	2200      	movs	r2, #0
    a8dc:	2700      	movs	r7, #0
    a8de:	2d00      	cmp	r5, #0
    a8e0:	dd15      	ble.n	a90e <mic_generator+0x106>
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    a8e2:	4e11      	ldr	r6, [pc, #68]	; (a928 <mic_generator+0x120>)
    a8e4:	0112      	lsls	r2, r2, #4
    a8e6:	2300      	movs	r3, #0
    a8e8:	a906      	add	r1, sp, #24
    a8ea:	188c      	adds	r4, r1, r2
    a8ec:	1999      	adds	r1, r3, r6
    a8ee:	5ce2      	ldrb	r2, [r4, r3]
    a8f0:	7808      	ldrb	r0, [r1, #0]
    a8f2:	4042      	eors	r2, r0
    a8f4:	700a      	strb	r2, [r1, #0]
    a8f6:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    a8f8:	2b10      	cmp	r3, #16
    a8fa:	d1f7      	bne.n	a8ec <mic_generator+0xe4>
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    a8fc:	490b      	ldr	r1, [pc, #44]	; (a92c <mic_generator+0x124>)
    a8fe:	480a      	ldr	r0, [pc, #40]	; (a928 <mic_generator+0x120>)
    a900:	4b0b      	ldr	r3, [pc, #44]	; (a930 <mic_generator+0x128>)
    a902:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    a904:	3701      	adds	r7, #1
    a906:	b2ff      	uxtb	r7, r7
    a908:	003a      	movs	r2, r7
    a90a:	42af      	cmp	r7, r5
    a90c:	dbea      	blt.n	a8e4 <mic_generator+0xdc>
    a90e:	2300      	movs	r3, #0
		CBC_mic[i] = InitVect_in[i];
    a910:	4808      	ldr	r0, [pc, #32]	; (a934 <mic_generator+0x12c>)
    a912:	4905      	ldr	r1, [pc, #20]	; (a928 <mic_generator+0x120>)
    a914:	5cca      	ldrb	r2, [r1, r3]
    a916:	54c2      	strb	r2, [r0, r3]
    a918:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    a91a:	2b10      	cmp	r3, #16
    a91c:	d1fa      	bne.n	a914 <mic_generator+0x10c>
}
    a91e:	b026      	add	sp, #152	; 0x98
    a920:	bc04      	pop	{r2}
    a922:	4690      	mov	r8, r2
    a924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a926:	46c0      	nop			; (mov r8, r8)
    a928:	20001d8c 	.word	0x20001d8c
    a92c:	00012650 	.word	0x00012650
    a930:	0000b7e5 	.word	0x0000b7e5
    a934:	20001dc4 	.word	0x20001dc4

0000a938 <DataEncrypt>:
{
    a938:	b5f0      	push	{r4, r5, r6, r7, lr}
    a93a:	46de      	mov	lr, fp
    a93c:	4657      	mov	r7, sl
    a93e:	464e      	mov	r6, r9
    a940:	4645      	mov	r5, r8
    a942:	b5e0      	push	{r5, r6, r7, lr}
    a944:	b099      	sub	sp, #100	; 0x64
    a946:	9003      	str	r0, [sp, #12]
    a948:	468a      	mov	sl, r1
    a94a:	0014      	movs	r4, r2
    a94c:	001d      	movs	r5, r3
	iterations = *Payload_len/16;
    a94e:	780f      	ldrb	r7, [r1, #0]
    a950:	093e      	lsrs	r6, r7, #4
	if (*Payload_len % 16 != 0) iterations++;
    a952:	073b      	lsls	r3, r7, #28
    a954:	d000      	beq.n	a958 <DataEncrypt+0x20>
    a956:	3601      	adds	r6, #1
	memcpy(CipheringData, Payloadinfo, *Payload_len);
    a958:	003a      	movs	r2, r7
    a95a:	9903      	ldr	r1, [sp, #12]
    a95c:	a804      	add	r0, sp, #16
    a95e:	4b3e      	ldr	r3, [pc, #248]	; (aa58 <DataEncrypt+0x120>)
    a960:	4798      	blx	r3
	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    a962:	4b3e      	ldr	r3, [pc, #248]	; (aa5c <DataEncrypt+0x124>)
    a964:	685b      	ldr	r3, [r3, #4]
    a966:	9300      	str	r3, [sp, #0]
    a968:	0023      	movs	r3, r4
    a96a:	002a      	movs	r2, r5
    a96c:	0039      	movs	r1, r7
    a96e:	9803      	ldr	r0, [sp, #12]
    a970:	4d3b      	ldr	r5, [pc, #236]	; (aa60 <DataEncrypt+0x128>)
    a972:	47a8      	blx	r5
	for (i=*Payload_len;i<iterations *16 ; i++ )
    a974:	4653      	mov	r3, sl
    a976:	781b      	ldrb	r3, [r3, #0]
    a978:	001a      	movs	r2, r3
    a97a:	0035      	movs	r5, r6
    a97c:	0131      	lsls	r1, r6, #4
    a97e:	428b      	cmp	r3, r1
    a980:	da07      	bge.n	a992 <DataEncrypt+0x5a>
		CipheringData[i] = 0; // Padding
    a982:	a804      	add	r0, sp, #16
    a984:	2600      	movs	r6, #0
    a986:	5486      	strb	r6, [r0, r2]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    a988:	3301      	adds	r3, #1
    a98a:	b2db      	uxtb	r3, r3
    a98c:	001a      	movs	r2, r3
    a98e:	428b      	cmp	r3, r1
    a990:	dbf9      	blt.n	a986 <DataEncrypt+0x4e>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    a992:	2201      	movs	r2, #1
    a994:	ab10      	add	r3, sp, #64	; 0x40
    a996:	701a      	strb	r2, [r3, #0]
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    a998:	4b30      	ldr	r3, [pc, #192]	; (aa5c <DataEncrypt+0x124>)
    a99a:	6858      	ldr	r0, [r3, #4]
    a99c:	2300      	movs	r3, #0
    a99e:	aa10      	add	r2, sp, #64	; 0x40
    a9a0:	18d2      	adds	r2, r2, r3
    a9a2:	5cc1      	ldrb	r1, [r0, r3]
    a9a4:	7051      	strb	r1, [r2, #1]
    a9a6:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    a9a8:	2b08      	cmp	r3, #8
    a9aa:	d1f8      	bne.n	a99e <DataEncrypt+0x66>
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    a9ac:	ab10      	add	r3, sp, #64	; 0x40
    a9ae:	725c      	strb	r4, [r3, #9]
    a9b0:	0a22      	lsrs	r2, r4, #8
    a9b2:	729a      	strb	r2, [r3, #10]
    a9b4:	0c22      	lsrs	r2, r4, #16
    a9b6:	72da      	strb	r2, [r3, #11]
    a9b8:	0e24      	lsrs	r4, r4, #24
    a9ba:	731c      	strb	r4, [r3, #12]
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    a9bc:	2204      	movs	r2, #4
    a9be:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    a9c0:	2200      	movs	r2, #0
    a9c2:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    a9c4:	73da      	strb	r2, [r3, #15]
	for (i=0;i<iterations+1;i++)
    a9c6:	1c6b      	adds	r3, r5, #1
    a9c8:	4698      	mov	r8, r3
    a9ca:	2300      	movs	r3, #0
    a9cc:	469b      	mov	fp, r3
    a9ce:	9302      	str	r3, [sp, #8]
    a9d0:	4643      	mov	r3, r8
    a9d2:	2b00      	cmp	r3, #0
    a9d4:	dd31      	ble.n	aa3a <DataEncrypt+0x102>
			block[j] = CTR_Nonce_and_Counter[j];
    a9d6:	ac14      	add	r4, sp, #80	; 0x50
    a9d8:	ad10      	add	r5, sp, #64	; 0x40
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    a9da:	4b22      	ldr	r3, [pc, #136]	; (aa64 <DataEncrypt+0x12c>)
    a9dc:	4699      	mov	r9, r3
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    a9de:	4e22      	ldr	r6, [pc, #136]	; (aa68 <DataEncrypt+0x130>)
    a9e0:	e017      	b.n	aa12 <DataEncrypt+0xda>
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    a9e2:	5d1a      	ldrb	r2, [r3, r4]
    a9e4:	5cc7      	ldrb	r7, [r0, r3]
    a9e6:	407a      	eors	r2, r7
    a9e8:	54c2      	strb	r2, [r0, r3]
    a9ea:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    a9ec:	2b10      	cmp	r3, #16
    a9ee:	d007      	beq.n	aa00 <DataEncrypt+0xc8>
			if (CTR_Nonce_and_Counter[15] == 0)
    a9f0:	2900      	cmp	r1, #0
    a9f2:	d1f6      	bne.n	a9e2 <DataEncrypt+0xaa>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    a9f4:	5d1a      	ldrb	r2, [r3, r4]
    a9f6:	4667      	mov	r7, ip
    a9f8:	5cff      	ldrb	r7, [r7, r3]
    a9fa:	407a      	eors	r2, r7
    a9fc:	54f2      	strb	r2, [r6, r3]
    a9fe:	e7f4      	b.n	a9ea <DataEncrypt+0xb2>
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    aa00:	3101      	adds	r1, #1
    aa02:	73e9      	strb	r1, [r5, #15]
	for (i=0;i<iterations+1;i++)
    aa04:	9f02      	ldr	r7, [sp, #8]
    aa06:	3701      	adds	r7, #1
    aa08:	b2fb      	uxtb	r3, r7
    aa0a:	9302      	str	r3, [sp, #8]
    aa0c:	469b      	mov	fp, r3
    aa0e:	4543      	cmp	r3, r8
    aa10:	da13      	bge.n	aa3a <DataEncrypt+0x102>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    aa12:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    aa14:	5d5a      	ldrb	r2, [r3, r5]
    aa16:	551a      	strb	r2, [r3, r4]
    aa18:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    aa1a:	2b10      	cmp	r3, #16
    aa1c:	d1fa      	bne.n	aa14 <DataEncrypt+0xdc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    aa1e:	4913      	ldr	r1, [pc, #76]	; (aa6c <DataEncrypt+0x134>)
    aa20:	0020      	movs	r0, r4
    aa22:	47c8      	blx	r9
			if (CTR_Nonce_and_Counter[15] == 0)
    aa24:	7be9      	ldrb	r1, [r5, #15]
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    aa26:	4658      	mov	r0, fp
    aa28:	3801      	subs	r0, #1
    aa2a:	0100      	lsls	r0, r0, #4
    aa2c:	2300      	movs	r3, #0
    aa2e:	aa04      	add	r2, sp, #16
    aa30:	4694      	mov	ip, r2
    aa32:	4460      	add	r0, ip
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    aa34:	4a0e      	ldr	r2, [pc, #56]	; (aa70 <DataEncrypt+0x138>)
    aa36:	4694      	mov	ip, r2
    aa38:	e7da      	b.n	a9f0 <DataEncrypt+0xb8>
	memcpy(Payloadinfo, CipheringData, *Payload_len);
    aa3a:	4653      	mov	r3, sl
    aa3c:	781a      	ldrb	r2, [r3, #0]
    aa3e:	a904      	add	r1, sp, #16
    aa40:	9803      	ldr	r0, [sp, #12]
    aa42:	4b05      	ldr	r3, [pc, #20]	; (aa58 <DataEncrypt+0x120>)
    aa44:	4798      	blx	r3
}
    aa46:	2001      	movs	r0, #1
    aa48:	b019      	add	sp, #100	; 0x64
    aa4a:	bc3c      	pop	{r2, r3, r4, r5}
    aa4c:	4690      	mov	r8, r2
    aa4e:	4699      	mov	r9, r3
    aa50:	46a2      	mov	sl, r4
    aa52:	46ab      	mov	fp, r5
    aa54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa56:	46c0      	nop			; (mov r8, r8)
    aa58:	00010caf 	.word	0x00010caf
    aa5c:	20001d84 	.word	0x20001d84
    aa60:	0000a809 	.word	0x0000a809
    aa64:	0000b7e5 	.word	0x0000b7e5
    aa68:	20001dac 	.word	0x20001dac
    aa6c:	00012650 	.word	0x00012650
    aa70:	20001dc4 	.word	0x20001dc4

0000aa74 <validate_mic>:
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    aa74:	4b0e      	ldr	r3, [pc, #56]	; (aab0 <validate_mic+0x3c>)
    aa76:	781a      	ldrb	r2, [r3, #0]
    aa78:	4b0e      	ldr	r3, [pc, #56]	; (aab4 <validate_mic+0x40>)
    aa7a:	781b      	ldrb	r3, [r3, #0]
		return false;
    aa7c:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    aa7e:	429a      	cmp	r2, r3
    aa80:	d000      	beq.n	aa84 <validate_mic+0x10>
}
    aa82:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    aa84:	4b0a      	ldr	r3, [pc, #40]	; (aab0 <validate_mic+0x3c>)
    aa86:	785a      	ldrb	r2, [r3, #1]
    aa88:	4b0a      	ldr	r3, [pc, #40]	; (aab4 <validate_mic+0x40>)
    aa8a:	785b      	ldrb	r3, [r3, #1]
    aa8c:	429a      	cmp	r2, r3
    aa8e:	d1f8      	bne.n	aa82 <validate_mic+0xe>
    aa90:	4b07      	ldr	r3, [pc, #28]	; (aab0 <validate_mic+0x3c>)
    aa92:	789a      	ldrb	r2, [r3, #2]
    aa94:	4b07      	ldr	r3, [pc, #28]	; (aab4 <validate_mic+0x40>)
    aa96:	789b      	ldrb	r3, [r3, #2]
    aa98:	429a      	cmp	r2, r3
    aa9a:	d1f2      	bne.n	aa82 <validate_mic+0xe>
    aa9c:	4b04      	ldr	r3, [pc, #16]	; (aab0 <validate_mic+0x3c>)
    aa9e:	78d8      	ldrb	r0, [r3, #3]
    aaa0:	4b04      	ldr	r3, [pc, #16]	; (aab4 <validate_mic+0x40>)
    aaa2:	78db      	ldrb	r3, [r3, #3]
    aaa4:	1ac0      	subs	r0, r0, r3
    aaa6:	4243      	negs	r3, r0
    aaa8:	4158      	adcs	r0, r3
    aaaa:	b2c0      	uxtb	r0, r0
    aaac:	e7e9      	b.n	aa82 <validate_mic+0xe>
    aaae:	46c0      	nop			; (mov r8, r8)
    aab0:	20001dac 	.word	0x20001dac
    aab4:	20001dd4 	.word	0x20001dd4

0000aab8 <DataDecrypt>:
{
    aab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    aaba:	46de      	mov	lr, fp
    aabc:	4657      	mov	r7, sl
    aabe:	464e      	mov	r6, r9
    aac0:	4645      	mov	r5, r8
    aac2:	b5e0      	push	{r5, r6, r7, lr}
    aac4:	b09d      	sub	sp, #116	; 0x74
    aac6:	9004      	str	r0, [sp, #16]
    aac8:	9105      	str	r1, [sp, #20]
    aaca:	4693      	mov	fp, r2
    aacc:	9306      	str	r3, [sp, #24]
    aace:	ab26      	add	r3, sp, #152	; 0x98
    aad0:	781b      	ldrb	r3, [r3, #0]
    aad2:	9307      	str	r3, [sp, #28]
	iterations = *PayloadLen/16;
    aad4:	780c      	ldrb	r4, [r1, #0]
    aad6:	0925      	lsrs	r5, r4, #4
	if (*PayloadLen % 16 != 0) iterations++;
    aad8:	0723      	lsls	r3, r4, #28
    aada:	d000      	beq.n	aade <DataDecrypt+0x26>
    aadc:	3501      	adds	r5, #1
	memcpy(CipheringData, Payload, *PayloadLen);
    aade:	0022      	movs	r2, r4
    aae0:	9904      	ldr	r1, [sp, #16]
    aae2:	a808      	add	r0, sp, #32
    aae4:	4b43      	ldr	r3, [pc, #268]	; (abf4 <DataDecrypt+0x13c>)
    aae6:	4798      	blx	r3
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    aae8:	0023      	movs	r3, r4
    aaea:	0028      	movs	r0, r5
    aaec:	012d      	lsls	r5, r5, #4
    aaee:	42ac      	cmp	r4, r5
    aaf0:	da07      	bge.n	ab02 <DataDecrypt+0x4a>
		CipheringData[i] = 0; // Padding
    aaf2:	aa08      	add	r2, sp, #32
    aaf4:	2100      	movs	r1, #0
    aaf6:	54d1      	strb	r1, [r2, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    aaf8:	3401      	adds	r4, #1
    aafa:	b2e4      	uxtb	r4, r4
    aafc:	0023      	movs	r3, r4
    aafe:	42ac      	cmp	r4, r5
    ab00:	dbf9      	blt.n	aaf6 <DataDecrypt+0x3e>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    ab02:	2201      	movs	r2, #1
    ab04:	ab14      	add	r3, sp, #80	; 0x50
    ab06:	701a      	strb	r2, [r3, #0]
    ab08:	2300      	movs	r3, #0
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    ab0a:	465c      	mov	r4, fp
    ab0c:	aa14      	add	r2, sp, #80	; 0x50
    ab0e:	18d2      	adds	r2, r2, r3
    ab10:	5ce1      	ldrb	r1, [r4, r3]
    ab12:	7051      	strb	r1, [r2, #1]
    ab14:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    ab16:	2b08      	cmp	r3, #8
    ab18:	d1f8      	bne.n	ab0c <DataDecrypt+0x54>
    ab1a:	46a3      	mov	fp, r4
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    ab1c:	ab14      	add	r3, sp, #80	; 0x50
    ab1e:	9906      	ldr	r1, [sp, #24]
    ab20:	7259      	strb	r1, [r3, #9]
    ab22:	0a0a      	lsrs	r2, r1, #8
    ab24:	729a      	strb	r2, [r3, #10]
    ab26:	0c0a      	lsrs	r2, r1, #16
    ab28:	72da      	strb	r2, [r3, #11]
    ab2a:	0e0a      	lsrs	r2, r1, #24
    ab2c:	731a      	strb	r2, [r3, #12]
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    ab2e:	2204      	movs	r2, #4
    ab30:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    ab32:	2200      	movs	r2, #0
    ab34:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    ab36:	73da      	strb	r2, [r3, #15]
	for (i=0;i<iterations+1;i++)
    ab38:	1c43      	adds	r3, r0, #1
    ab3a:	4699      	mov	r9, r3
    ab3c:	2500      	movs	r5, #0
    ab3e:	2300      	movs	r3, #0
    ab40:	4698      	mov	r8, r3
    ab42:	464b      	mov	r3, r9
    ab44:	2b00      	cmp	r3, #0
    ab46:	dd2e      	ble.n	aba6 <DataDecrypt+0xee>
			block[j] = CTR_Nonce_and_Counter[j];
    ab48:	ac18      	add	r4, sp, #96	; 0x60
    ab4a:	ae14      	add	r6, sp, #80	; 0x50
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    ab4c:	4b2a      	ldr	r3, [pc, #168]	; (abf8 <DataDecrypt+0x140>)
    ab4e:	469a      	mov	sl, r3
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    ab50:	4f2a      	ldr	r7, [pc, #168]	; (abfc <DataDecrypt+0x144>)
    ab52:	4643      	mov	r3, r8
    ab54:	9303      	str	r3, [sp, #12]
    ab56:	46a8      	mov	r8, r5
    ab58:	e014      	b.n	ab84 <DataDecrypt+0xcc>
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    ab5a:	5d1a      	ldrb	r2, [r3, r4]
    ab5c:	5ce9      	ldrb	r1, [r5, r3]
    ab5e:	404a      	eors	r2, r1
    ab60:	54ea      	strb	r2, [r5, r3]
    ab62:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    ab64:	2b10      	cmp	r3, #16
    ab66:	d004      	beq.n	ab72 <DataDecrypt+0xba>
			if (CTR_Nonce_and_Counter[15] == 0)
    ab68:	2800      	cmp	r0, #0
    ab6a:	d1f6      	bne.n	ab5a <DataDecrypt+0xa2>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    ab6c:	5d1a      	ldrb	r2, [r3, r4]
    ab6e:	54fa      	strb	r2, [r7, r3]
    ab70:	e7f7      	b.n	ab62 <DataDecrypt+0xaa>
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    ab72:	3001      	adds	r0, #1
    ab74:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    ab76:	9d03      	ldr	r5, [sp, #12]
    ab78:	3501      	adds	r5, #1
    ab7a:	b2eb      	uxtb	r3, r5
    ab7c:	9303      	str	r3, [sp, #12]
    ab7e:	4698      	mov	r8, r3
    ab80:	454b      	cmp	r3, r9
    ab82:	da10      	bge.n	aba6 <DataDecrypt+0xee>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    ab84:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    ab86:	5d9a      	ldrb	r2, [r3, r6]
    ab88:	551a      	strb	r2, [r3, r4]
    ab8a:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    ab8c:	2b10      	cmp	r3, #16
    ab8e:	d1fa      	bne.n	ab86 <DataDecrypt+0xce>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    ab90:	491b      	ldr	r1, [pc, #108]	; (ac00 <DataDecrypt+0x148>)
    ab92:	0020      	movs	r0, r4
    ab94:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    ab96:	7bf0      	ldrb	r0, [r6, #15]
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    ab98:	4642      	mov	r2, r8
    ab9a:	3a01      	subs	r2, #1
    ab9c:	0112      	lsls	r2, r2, #4
    ab9e:	2300      	movs	r3, #0
    aba0:	a908      	add	r1, sp, #32
    aba2:	188d      	adds	r5, r1, r2
    aba4:	e7e0      	b.n	ab68 <DataDecrypt+0xb0>
	*PayloadLen = *PayloadLen-4;
    aba6:	9b05      	ldr	r3, [sp, #20]
    aba8:	7819      	ldrb	r1, [r3, #0]
    abaa:	3904      	subs	r1, #4
    abac:	b2c9      	uxtb	r1, r1
    abae:	7019      	strb	r1, [r3, #0]
	mic_generator(&CipheringData[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    abb0:	465b      	mov	r3, fp
    abb2:	9300      	str	r3, [sp, #0]
    abb4:	9b06      	ldr	r3, [sp, #24]
    abb6:	9a07      	ldr	r2, [sp, #28]
    abb8:	a808      	add	r0, sp, #32
    abba:	4c12      	ldr	r4, [pc, #72]	; (ac04 <DataDecrypt+0x14c>)
    abbc:	47a0      	blx	r4
    abbe:	2300      	movs	r3, #0
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    abc0:	4d11      	ldr	r5, [pc, #68]	; (ac08 <DataDecrypt+0x150>)
    abc2:	4c0e      	ldr	r4, [pc, #56]	; (abfc <DataDecrypt+0x144>)
    abc4:	4811      	ldr	r0, [pc, #68]	; (ac0c <DataDecrypt+0x154>)
    abc6:	5ce2      	ldrb	r2, [r4, r3]
    abc8:	5cc1      	ldrb	r1, [r0, r3]
    abca:	404a      	eors	r2, r1
    abcc:	54ea      	strb	r2, [r5, r3]
    abce:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    abd0:	2b10      	cmp	r3, #16
    abd2:	d1f8      	bne.n	abc6 <DataDecrypt+0x10e>
	memcpy(Payload, CipheringData, *PayloadLen);
    abd4:	9b05      	ldr	r3, [sp, #20]
    abd6:	781a      	ldrb	r2, [r3, #0]
    abd8:	a908      	add	r1, sp, #32
    abda:	9804      	ldr	r0, [sp, #16]
    abdc:	4b05      	ldr	r3, [pc, #20]	; (abf4 <DataDecrypt+0x13c>)
    abde:	4798      	blx	r3
	return validate_mic();
    abe0:	4b0b      	ldr	r3, [pc, #44]	; (ac10 <DataDecrypt+0x158>)
    abe2:	4798      	blx	r3
}
    abe4:	b01d      	add	sp, #116	; 0x74
    abe6:	bc3c      	pop	{r2, r3, r4, r5}
    abe8:	4690      	mov	r8, r2
    abea:	4699      	mov	r9, r3
    abec:	46a2      	mov	sl, r4
    abee:	46ab      	mov	fp, r5
    abf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    abf2:	46c0      	nop			; (mov r8, r8)
    abf4:	00010caf 	.word	0x00010caf
    abf8:	0000b7e5 	.word	0x0000b7e5
    abfc:	20001d9c 	.word	0x20001d9c
    ac00:	00012650 	.word	0x00012650
    ac04:	0000a809 	.word	0x0000a809
    ac08:	20001dac 	.word	0x20001dac
    ac0c:	20001dc4 	.word	0x20001dc4
    ac10:	0000aa75 	.word	0x0000aa75

0000ac14 <MiMAC_Set>:
{
    ac14:	b510      	push	{r4, lr}
    switch(id)
    ac16:	2800      	cmp	r0, #0
    ac18:	d109      	bne.n	ac2e <MiMAC_Set+0x1a>
         if(*value > 26) //TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    ac1a:	780b      	ldrb	r3, [r1, #0]
    ac1c:	2b1a      	cmp	r3, #26
    ac1e:	d807      	bhi.n	ac30 <MiMAC_Set+0x1c>
          MACCurrentChannel = *value;
    ac20:	4a04      	ldr	r2, [pc, #16]	; (ac34 <MiMAC_Set+0x20>)
    ac22:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    ac24:	0018      	movs	r0, r3
    ac26:	4b04      	ldr	r3, [pc, #16]	; (ac38 <MiMAC_Set+0x24>)
    ac28:	4798      	blx	r3
          return true;
    ac2a:	2001      	movs	r0, #1
    ac2c:	e000      	b.n	ac30 <MiMAC_Set+0x1c>
    return false;
    ac2e:	2000      	movs	r0, #0
}
    ac30:	bd10      	pop	{r4, pc}
    ac32:	46c0      	nop			; (mov r8, r8)
    ac34:	20001dda 	.word	0x20001dda
    ac38:	0000b7a9 	.word	0x0000b7a9

0000ac3c <MiMAC_Init>:
{
    ac3c:	b570      	push	{r4, r5, r6, lr}
    ac3e:	b082      	sub	sp, #8
    ac40:	466c      	mov	r4, sp
    ac42:	9000      	str	r0, [sp, #0]
    ac44:	9101      	str	r1, [sp, #4]
	PHY_Init();
    ac46:	4b1b      	ldr	r3, [pc, #108]	; (acb4 <MiMAC_Init+0x78>)
    ac48:	4798      	blx	r3
	MACInitParams = initValue;
    ac4a:	4d1b      	ldr	r5, [pc, #108]	; (acb8 <MiMAC_Init+0x7c>)
    ac4c:	002b      	movs	r3, r5
    ac4e:	466a      	mov	r2, sp
    ac50:	ca03      	ldmia	r2!, {r0, r1}
    ac52:	c303      	stmia	r3!, {r0, r1}
	uint16_t x =  PHY_RandomReq();
    ac54:	4b19      	ldr	r3, [pc, #100]	; (acbc <MiMAC_Init+0x80>)
    ac56:	4798      	blx	r3
    ac58:	0006      	movs	r6, r0
	PHY_SetRxState(true);
    ac5a:	2001      	movs	r0, #1
    ac5c:	4b18      	ldr	r3, [pc, #96]	; (acc0 <MiMAC_Init+0x84>)
    ac5e:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    ac60:	4b18      	ldr	r3, [pc, #96]	; (acc4 <MiMAC_Init+0x88>)
    ac62:	701e      	strb	r6, [r3, #0]
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    ac64:	6868      	ldr	r0, [r5, #4]
    ac66:	4b18      	ldr	r3, [pc, #96]	; (acc8 <MiMAC_Init+0x8c>)
    ac68:	4798      	blx	r3
		RxBuffer[i].PayloadLen = 0;
    ac6a:	4b18      	ldr	r3, [pc, #96]	; (accc <MiMAC_Init+0x90>)
    ac6c:	2200      	movs	r2, #0
    ac6e:	701a      	strb	r2, [r3, #0]
    ac70:	214e      	movs	r1, #78	; 0x4e
    ac72:	545a      	strb	r2, [r3, r1]
    ac74:	314e      	adds	r1, #78	; 0x4e
    ac76:	545a      	strb	r2, [r3, r1]
    ac78:	314e      	adds	r1, #78	; 0x4e
    ac7a:	545a      	strb	r2, [r3, r1]
			if (initValue.actionFlags.bits.NetworkFreezer)
    ac7c:	7823      	ldrb	r3, [r4, #0]
    ac7e:	075b      	lsls	r3, r3, #29
    ac80:	d40a      	bmi.n	ac98 <MiMAC_Init+0x5c>
				OutgoingFrameCounter.Val = 0;
    ac82:	4c13      	ldr	r4, [pc, #76]	; (acd0 <MiMAC_Init+0x94>)
    ac84:	2300      	movs	r3, #0
    ac86:	6023      	str	r3, [r4, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    ac88:	2001      	movs	r0, #1
    ac8a:	4b12      	ldr	r3, [pc, #72]	; (acd4 <MiMAC_Init+0x98>)
    ac8c:	4798      	blx	r3
				OutgoingFrameCounter.Val = 1;
    ac8e:	2301      	movs	r3, #1
    ac90:	6023      	str	r3, [r4, #0]
}
    ac92:	2001      	movs	r0, #1
    ac94:	b002      	add	sp, #8
    ac96:	bd70      	pop	{r4, r5, r6, pc}
				PDS_Restore(PDS_OUTGOING_FRAME_COUNTER_ID);
    ac98:	2001      	movs	r0, #1
    ac9a:	4b0f      	ldr	r3, [pc, #60]	; (acd8 <MiMAC_Init+0x9c>)
    ac9c:	4798      	blx	r3
				OutgoingFrameCounter.Val += FRAME_COUNTER_UPDATE_INTERVAL;
    ac9e:	4a0c      	ldr	r2, [pc, #48]	; (acd0 <MiMAC_Init+0x94>)
    aca0:	6813      	ldr	r3, [r2, #0]
    aca2:	2180      	movs	r1, #128	; 0x80
    aca4:	00c9      	lsls	r1, r1, #3
    aca6:	468c      	mov	ip, r1
    aca8:	4463      	add	r3, ip
    acaa:	6013      	str	r3, [r2, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    acac:	2001      	movs	r0, #1
    acae:	4b09      	ldr	r3, [pc, #36]	; (acd4 <MiMAC_Init+0x98>)
    acb0:	4798      	blx	r3
    acb2:	e7ee      	b.n	ac92 <MiMAC_Init+0x56>
    acb4:	0000b6c9 	.word	0x0000b6c9
    acb8:	20001d84 	.word	0x20001d84
    acbc:	0000b679 	.word	0x0000b679
    acc0:	0000b71d 	.word	0x0000b71d
    acc4:	20001cf8 	.word	0x20001cf8
    acc8:	0000b811 	.word	0x0000b811
    accc:	20001df4 	.word	0x20001df4
    acd0:	20001dc0 	.word	0x20001dc0
    acd4:	0000a471 	.word	0x0000a471
    acd8:	0000a399 	.word	0x0000a399

0000acdc <MiMAC_SendPacket>:
{
    acdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    acde:	46de      	mov	lr, fp
    ace0:	4657      	mov	r7, sl
    ace2:	464e      	mov	r6, r9
    ace4:	4645      	mov	r5, r8
    ace6:	b5e0      	push	{r5, r6, r7, lr}
    ace8:	b08b      	sub	sp, #44	; 0x2c
    acea:	1c04      	adds	r4, r0, #0
    acec:	9003      	str	r0, [sp, #12]
    acee:	9104      	str	r1, [sp, #16]
    acf0:	0015      	movs	r5, r2
    acf2:	0a2d      	lsrs	r5, r5, #8
    acf4:	9205      	str	r2, [sp, #20]
    acf6:	9300      	str	r3, [sp, #0]
    acf8:	ab15      	add	r3, sp, #84	; 0x54
    acfa:	781b      	ldrb	r3, [r3, #0]
    acfc:	469a      	mov	sl, r3
    acfe:	b2e4      	uxtb	r4, r4
    ad00:	06a3      	lsls	r3, r4, #26
    ad02:	0fdb      	lsrs	r3, r3, #31
    ad04:	4698      	mov	r8, r3
    ad06:	9102      	str	r1, [sp, #8]
    ad08:	b2d7      	uxtb	r7, r2
    ad0a:	b2ed      	uxtb	r5, r5
    if (transParam.flags.bits.broadcast)
    ad0c:	0763      	lsls	r3, r4, #29
    ad0e:	d500      	bpl.n	ad12 <MiMAC_SendPacket+0x36>
        transParam.altDestAddr = true;
    ad10:	2701      	movs	r7, #1
    if (transParam.flags.bits.secEn)
    ad12:	2308      	movs	r3, #8
    ad14:	4023      	ands	r3, r4
    ad16:	001a      	movs	r2, r3
        transParam.altSrcAddr = false;
    ad18:	4253      	negs	r3, r2
    ad1a:	4153      	adcs	r3, r2
    ad1c:	425b      	negs	r3, r3
    ad1e:	401d      	ands	r5, r3
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    ad20:	2303      	movs	r3, #3
    ad22:	4023      	ands	r3, r4
    ad24:	2b01      	cmp	r3, #1
    ad26:	d03a      	beq.n	ad9e <MiMAC_SendPacket+0xc2>
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    ad28:	425a      	negs	r2, r3
    ad2a:	415a      	adcs	r2, r3
        frameControl = 0x03;
    ad2c:	b2d2      	uxtb	r2, r2
    ad2e:	4691      	mov	r9, r2
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    ad30:	aa03      	add	r2, sp, #12
    ad32:	8952      	ldrh	r2, [r2, #10]
    ad34:	49a7      	ldr	r1, [pc, #668]	; (afd4 <MiMAC_SendPacket+0x2f8>)
    ad36:	8809      	ldrh	r1, [r1, #0]
    ad38:	4291      	cmp	r1, r2
    ad3a:	d033      	beq.n	ada4 <MiMAC_SendPacket+0xc8>
        IntraPAN = false;
    ad3c:	2200      	movs	r2, #0
    ad3e:	4693      	mov	fp, r2
        headerLength = 7;
    ad40:	3207      	adds	r2, #7
        headerLength += 8;
    ad42:	0016      	movs	r6, r2
    ad44:	3608      	adds	r6, #8
    if (transParam.altDestAddr)
    ad46:	2f00      	cmp	r7, #0
    ad48:	d000      	beq.n	ad4c <MiMAC_SendPacket+0x70>
        headerLength += 2;
    ad4a:	1c96      	adds	r6, r2, #2
    if (transParam.altSrcAddr)
    ad4c:	2d00      	cmp	r5, #0
    ad4e:	d038      	beq.n	adc2 <MiMAC_SendPacket+0xe6>
        headerLength += 2;
    ad50:	3602      	adds	r6, #2
    ad52:	b2f2      	uxtb	r2, r6
    ad54:	9201      	str	r2, [sp, #4]
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    ad56:	2224      	movs	r2, #36	; 0x24
    ad58:	4014      	ands	r4, r2
    ad5a:	2c20      	cmp	r4, #32
    ad5c:	d035      	beq.n	adca <MiMAC_SendPacket+0xee>
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    ad5e:	2b03      	cmp	r3, #3
    ad60:	d038      	beq.n	add4 <MiMAC_SendPacket+0xf8>
    if (transParam.flags.bits.secEn)
    ad62:	ab03      	add	r3, sp, #12
    ad64:	4642      	mov	r2, r8
    ad66:	0152      	lsls	r2, r2, #5
    ad68:	781c      	ldrb	r4, [r3, #0]
    ad6a:	2120      	movs	r1, #32
    ad6c:	438c      	bics	r4, r1
    ad6e:	4314      	orrs	r4, r2
    ad70:	701c      	strb	r4, [r3, #0]
    ad72:	0723      	lsls	r3, r4, #28
    ad74:	d436      	bmi.n	ade4 <MiMAC_SendPacket+0x108>
		packet[loc++] = MACPayloadLen+headerLength;
    ad76:	ab14      	add	r3, sp, #80	; 0x50
    ad78:	781b      	ldrb	r3, [r3, #0]
    ad7a:	9a01      	ldr	r2, [sp, #4]
    ad7c:	18d6      	adds	r6, r2, r3
    ad7e:	4b96      	ldr	r3, [pc, #600]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    ad80:	701e      	strb	r6, [r3, #0]
	packet[loc++] = frameControl;
    ad82:	4b95      	ldr	r3, [pc, #596]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    ad84:	464a      	mov	r2, r9
    ad86:	705a      	strb	r2, [r3, #1]
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    ad88:	43e3      	mvns	r3, r4
    ad8a:	079b      	lsls	r3, r3, #30
    ad8c:	d03d      	beq.n	ae0a <MiMAC_SendPacket+0x12e>
        if (transParam.altDestAddr && transParam.altSrcAddr)
    ad8e:	2f00      	cmp	r7, #0
    ad90:	d05d      	beq.n	ae4e <MiMAC_SendPacket+0x172>
    ad92:	2d00      	cmp	r5, #0
    ad94:	d043      	beq.n	ae1e <MiMAC_SendPacket+0x142>
			packet[loc++] = 0x88;
    ad96:	2288      	movs	r2, #136	; 0x88
    ad98:	4b8f      	ldr	r3, [pc, #572]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    ad9a:	709a      	strb	r2, [r3, #2]
    ad9c:	e042      	b.n	ae24 <MiMAC_SendPacket+0x148>
        frameControl = 0x03;
    ad9e:	2203      	movs	r2, #3
    ada0:	4691      	mov	r9, r2
    ada2:	e7c5      	b.n	ad30 <MiMAC_SendPacket+0x54>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    ada4:	498d      	ldr	r1, [pc, #564]	; (afdc <MiMAC_SendPacket+0x300>)
    ada6:	428a      	cmp	r2, r1
    ada8:	d007      	beq.n	adba <MiMAC_SendPacket+0xde>
        frameControl |= 0x40;
    adaa:	2240      	movs	r2, #64	; 0x40
    adac:	4649      	mov	r1, r9
    adae:	4311      	orrs	r1, r2
    adb0:	4689      	mov	r9, r1
        IntraPAN = true;
    adb2:	3a3f      	subs	r2, #63	; 0x3f
    adb4:	4693      	mov	fp, r2
        headerLength = 5;
    adb6:	3204      	adds	r2, #4
        IntraPAN = true;
    adb8:	e7c3      	b.n	ad42 <MiMAC_SendPacket+0x66>
        IntraPAN = false;
    adba:	2200      	movs	r2, #0
    adbc:	4693      	mov	fp, r2
        headerLength = 7;
    adbe:	3207      	adds	r2, #7
    adc0:	e7bf      	b.n	ad42 <MiMAC_SendPacket+0x66>
        headerLength += 8;
    adc2:	3608      	adds	r6, #8
    adc4:	b2f2      	uxtb	r2, r6
    adc6:	9201      	str	r2, [sp, #4]
    adc8:	e7c5      	b.n	ad56 <MiMAC_SendPacket+0x7a>
        frameControl |= 0x20;
    adca:	3a04      	subs	r2, #4
    adcc:	4649      	mov	r1, r9
    adce:	4311      	orrs	r1, r2
    add0:	4689      	mov	r9, r1
    add2:	e7c4      	b.n	ad5e <MiMAC_SendPacket+0x82>
        transParam.altSrcAddr = true;
    add4:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    add6:	2300      	movs	r3, #0
    add8:	4698      	mov	r8, r3
        IntraPAN = false;
    adda:	469b      	mov	fp, r3
        frameControl = 0x00;
    addc:	4699      	mov	r9, r3
        headerLength = 7;
    adde:	3307      	adds	r3, #7
    ade0:	9301      	str	r3, [sp, #4]
    ade2:	e7be      	b.n	ad62 <MiMAC_SendPacket+0x86>
        frameControl |= 0x08;
    ade4:	2308      	movs	r3, #8
    ade6:	464a      	mov	r2, r9
    ade8:	431a      	orrs	r2, r3
    adea:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    adec:	4b7c      	ldr	r3, [pc, #496]	; (afe0 <MiMAC_SendPacket+0x304>)
    adee:	681a      	ldr	r2, [r3, #0]
    adf0:	464b      	mov	r3, r9
    adf2:	a914      	add	r1, sp, #80	; 0x50
    adf4:	9800      	ldr	r0, [sp, #0]
    adf6:	4e7b      	ldr	r6, [pc, #492]	; (afe4 <MiMAC_SendPacket+0x308>)
    adf8:	47b0      	blx	r6
		packet[loc++] = MACPayloadLen+headerLength+9;
    adfa:	ab14      	add	r3, sp, #80	; 0x50
    adfc:	781b      	ldrb	r3, [r3, #0]
    adfe:	3309      	adds	r3, #9
    ae00:	9a01      	ldr	r2, [sp, #4]
    ae02:	18d6      	adds	r6, r2, r3
    ae04:	4b74      	ldr	r3, [pc, #464]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    ae06:	701e      	strb	r6, [r3, #0]
    ae08:	e7bb      	b.n	ad82 <MiMAC_SendPacket+0xa6>
		packet[loc++] = 0x80;
    ae0a:	4b73      	ldr	r3, [pc, #460]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    ae0c:	2280      	movs	r2, #128	; 0x80
    ae0e:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    ae10:	4975      	ldr	r1, [pc, #468]	; (afe8 <MiMAC_SendPacket+0x30c>)
    ae12:	780a      	ldrb	r2, [r1, #0]
    ae14:	1c50      	adds	r0, r2, #1
    ae16:	7008      	strb	r0, [r1, #0]
    ae18:	70da      	strb	r2, [r3, #3]
    ae1a:	2304      	movs	r3, #4
    ae1c:	e03e      	b.n	ae9c <MiMAC_SendPacket+0x1c0>
			packet[loc++] = 0xC8;
    ae1e:	22c8      	movs	r2, #200	; 0xc8
    ae20:	4b6d      	ldr	r3, [pc, #436]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    ae22:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    ae24:	4b70      	ldr	r3, [pc, #448]	; (afe8 <MiMAC_SendPacket+0x30c>)
    ae26:	781a      	ldrb	r2, [r3, #0]
    ae28:	1c51      	adds	r1, r2, #1
    ae2a:	7019      	strb	r1, [r3, #0]
    ae2c:	4b6a      	ldr	r3, [pc, #424]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    ae2e:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    ae30:	aa03      	add	r2, sp, #12
    ae32:	7a91      	ldrb	r1, [r2, #10]
    ae34:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    ae36:	7ad2      	ldrb	r2, [r2, #11]
    ae38:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    ae3a:	0763      	lsls	r3, r4, #29
    ae3c:	d429      	bmi.n	ae92 <MiMAC_SendPacket+0x1b6>
				packet[loc++] = transParam.DestAddress[0];
    ae3e:	9902      	ldr	r1, [sp, #8]
    ae40:	780a      	ldrb	r2, [r1, #0]
    ae42:	4b65      	ldr	r3, [pc, #404]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    ae44:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    ae46:	784a      	ldrb	r2, [r1, #1]
    ae48:	71da      	strb	r2, [r3, #7]
    ae4a:	2308      	movs	r3, #8
    ae4c:	e026      	b.n	ae9c <MiMAC_SendPacket+0x1c0>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    ae4e:	2d00      	cmp	r5, #0
    ae50:	d00f      	beq.n	ae72 <MiMAC_SendPacket+0x196>
			packet[loc++] = 0x8C;
    ae52:	4b61      	ldr	r3, [pc, #388]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    ae54:	228c      	movs	r2, #140	; 0x8c
    ae56:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    ae58:	4963      	ldr	r1, [pc, #396]	; (afe8 <MiMAC_SendPacket+0x30c>)
    ae5a:	780a      	ldrb	r2, [r1, #0]
    ae5c:	1c50      	adds	r0, r2, #1
    ae5e:	7008      	strb	r0, [r1, #0]
    ae60:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    ae62:	aa03      	add	r2, sp, #12
    ae64:	7a91      	ldrb	r1, [r2, #10]
    ae66:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    ae68:	7ad2      	ldrb	r2, [r2, #11]
    ae6a:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    ae6c:	0763      	lsls	r3, r4, #29
    ae6e:	d410      	bmi.n	ae92 <MiMAC_SendPacket+0x1b6>
    ae70:	e08f      	b.n	af92 <MiMAC_SendPacket+0x2b6>
			packet[loc++] = 0xCC;
    ae72:	4b59      	ldr	r3, [pc, #356]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    ae74:	22cc      	movs	r2, #204	; 0xcc
    ae76:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    ae78:	495b      	ldr	r1, [pc, #364]	; (afe8 <MiMAC_SendPacket+0x30c>)
    ae7a:	780a      	ldrb	r2, [r1, #0]
    ae7c:	1c50      	adds	r0, r2, #1
    ae7e:	7008      	strb	r0, [r1, #0]
    ae80:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    ae82:	aa03      	add	r2, sp, #12
    ae84:	7a91      	ldrb	r1, [r2, #10]
    ae86:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    ae88:	7ad2      	ldrb	r2, [r2, #11]
    ae8a:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    ae8c:	0763      	lsls	r3, r4, #29
    ae8e:	d400      	bmi.n	ae92 <MiMAC_SendPacket+0x1b6>
    ae90:	e07c      	b.n	af8c <MiMAC_SendPacket+0x2b0>
			packet[loc++] = 0xFF;
    ae92:	4b51      	ldr	r3, [pc, #324]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    ae94:	22ff      	movs	r2, #255	; 0xff
    ae96:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    ae98:	71da      	strb	r2, [r3, #7]
    ae9a:	2308      	movs	r3, #8
    if (IntraPAN == false)
    ae9c:	465a      	mov	r2, fp
    ae9e:	2a00      	cmp	r2, #0
    aea0:	d109      	bne.n	aeb6 <MiMAC_SendPacket+0x1da>
		packet[loc++] = MAC_PANID.v[0];
    aea2:	1c5a      	adds	r2, r3, #1
    aea4:	b2d2      	uxtb	r2, r2
    aea6:	494c      	ldr	r1, [pc, #304]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    aea8:	484a      	ldr	r0, [pc, #296]	; (afd4 <MiMAC_SendPacket+0x2f8>)
    aeaa:	7804      	ldrb	r4, [r0, #0]
    aeac:	54cc      	strb	r4, [r1, r3]
		packet[loc++] = MAC_PANID.v[1];
    aeae:	3302      	adds	r3, #2
    aeb0:	b2db      	uxtb	r3, r3
    aeb2:	7840      	ldrb	r0, [r0, #1]
    aeb4:	5488      	strb	r0, [r1, r2]
    if (transParam.altSrcAddr)
    aeb6:	2d00      	cmp	r5, #0
    aeb8:	d100      	bne.n	aebc <MiMAC_SendPacket+0x1e0>
    aeba:	e075      	b.n	afa8 <MiMAC_SendPacket+0x2cc>
		packet[loc++] = myNetworkAddress.v[0];
    aebc:	4a46      	ldr	r2, [pc, #280]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    aebe:	494b      	ldr	r1, [pc, #300]	; (afec <MiMAC_SendPacket+0x310>)
    aec0:	7808      	ldrb	r0, [r1, #0]
    aec2:	54d0      	strb	r0, [r2, r3]
		packet[loc++] = myNetworkAddress.v[1];
    aec4:	1c9c      	adds	r4, r3, #2
    aec6:	b2e4      	uxtb	r4, r4
		packet[loc++] = myNetworkAddress.v[0];
    aec8:	3301      	adds	r3, #1
		packet[loc++] = myNetworkAddress.v[1];
    aeca:	b2db      	uxtb	r3, r3
    aecc:	7849      	ldrb	r1, [r1, #1]
    aece:	54d1      	strb	r1, [r2, r3]
if (transParam.flags.bits.secEn)
    aed0:	aa03      	add	r2, sp, #12
    aed2:	4643      	mov	r3, r8
    aed4:	0159      	lsls	r1, r3, #5
    aed6:	7813      	ldrb	r3, [r2, #0]
    aed8:	2020      	movs	r0, #32
    aeda:	4383      	bics	r3, r0
    aedc:	430b      	orrs	r3, r1
    aede:	7013      	strb	r3, [r2, #0]
    aee0:	071b      	lsls	r3, r3, #28
    aee2:	d51b      	bpl.n	af1c <MiMAC_SendPacket+0x240>
    aee4:	0022      	movs	r2, r4
    aee6:	2300      	movs	r3, #0
		packet[loc++] = OutgoingFrameCounter.v[i];
    aee8:	4e3b      	ldr	r6, [pc, #236]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    aeea:	4d3d      	ldr	r5, [pc, #244]	; (afe0 <MiMAC_SendPacket+0x304>)
    aeec:	1c51      	adds	r1, r2, #1
    aeee:	5ce8      	ldrb	r0, [r5, r3]
    aef0:	54b0      	strb	r0, [r6, r2]
    aef2:	3301      	adds	r3, #1
    aef4:	b2ca      	uxtb	r2, r1
	for (i = 0; i < 4; i++)
    aef6:	2b04      	cmp	r3, #4
    aef8:	d1f8      	bne.n	aeec <MiMAC_SendPacket+0x210>
    aefa:	1d25      	adds	r5, r4, #4
    aefc:	b2ed      	uxtb	r5, r5
	OutgoingFrameCounter.Val++;
    aefe:	4a38      	ldr	r2, [pc, #224]	; (afe0 <MiMAC_SendPacket+0x304>)
    af00:	6813      	ldr	r3, [r2, #0]
    af02:	3301      	adds	r3, #1
    af04:	6013      	str	r3, [r2, #0]
	if ((OutgoingFrameCounter.v[0] == 0) && ((OutgoingFrameCounter.v[1] & 0x03) == 0))
    af06:	b2db      	uxtb	r3, r3
    af08:	2b00      	cmp	r3, #0
    af0a:	d102      	bne.n	af12 <MiMAC_SendPacket+0x236>
    af0c:	7853      	ldrb	r3, [r2, #1]
    af0e:	079b      	lsls	r3, r3, #30
    af10:	d059      	beq.n	afc6 <MiMAC_SendPacket+0x2ea>
	packet[loc++] = myKeySequenceNumber;
    af12:	3405      	adds	r4, #5
    af14:	b2e4      	uxtb	r4, r4
    af16:	2200      	movs	r2, #0
    af18:	4b2f      	ldr	r3, [pc, #188]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    af1a:	555a      	strb	r2, [r3, r5]
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    af1c:	ab14      	add	r3, sp, #80	; 0x50
    af1e:	781a      	ldrb	r2, [r3, #0]
    af20:	2a00      	cmp	r2, #0
    af22:	d054      	beq.n	afce <MiMAC_SendPacket+0x2f2>
    af24:	9b00      	ldr	r3, [sp, #0]
    af26:	18a2      	adds	r2, r4, r2
    af28:	b2d2      	uxtb	r2, r2
	    packet[loc++] = MACPayload[i];
    af2a:	4d2b      	ldr	r5, [pc, #172]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    af2c:	1c61      	adds	r1, r4, #1
    af2e:	7818      	ldrb	r0, [r3, #0]
    af30:	5528      	strb	r0, [r5, r4]
    af32:	3301      	adds	r3, #1
    af34:	b2cc      	uxtb	r4, r1
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    af36:	4294      	cmp	r4, r2
    af38:	d1f8      	bne.n	af2c <MiMAC_SendPacket+0x250>
	packet[loc++] = final_mic_value[0];
    af3a:	4b27      	ldr	r3, [pc, #156]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    af3c:	492c      	ldr	r1, [pc, #176]	; (aff0 <MiMAC_SendPacket+0x314>)
    af3e:	7808      	ldrb	r0, [r1, #0]
    af40:	5498      	strb	r0, [r3, r2]
    af42:	1c50      	adds	r0, r2, #1
	packet[loc++] = final_mic_value[1];
    af44:	b2c0      	uxtb	r0, r0
    af46:	784c      	ldrb	r4, [r1, #1]
    af48:	541c      	strb	r4, [r3, r0]
    af4a:	1c90      	adds	r0, r2, #2
	packet[loc++] = final_mic_value[2];
    af4c:	b2c0      	uxtb	r0, r0
    af4e:	788c      	ldrb	r4, [r1, #2]
    af50:	541c      	strb	r4, [r3, r0]
    af52:	3203      	adds	r2, #3
	packet[loc++] = final_mic_value[3];
    af54:	b2d2      	uxtb	r2, r2
    af56:	78c9      	ldrb	r1, [r1, #3]
    af58:	5499      	strb	r1, [r3, r2]
    dataPointer = MACPayload;
    af5a:	4a26      	ldr	r2, [pc, #152]	; (aff4 <MiMAC_SendPacket+0x318>)
    af5c:	9900      	ldr	r1, [sp, #0]
    af5e:	6011      	str	r1, [r2, #0]
	dataConfCallback = ConfCallback;
    af60:	4a25      	ldr	r2, [pc, #148]	; (aff8 <MiMAC_SendPacket+0x31c>)
    af62:	9916      	ldr	r1, [sp, #88]	; 0x58
    af64:	6011      	str	r1, [r2, #0]
    dataHandle = msghandle;
    af66:	4a25      	ldr	r2, [pc, #148]	; (affc <MiMAC_SendPacket+0x320>)
    af68:	4651      	mov	r1, sl
    af6a:	7011      	strb	r1, [r2, #0]
    phyDataRequest.polledConfirmation = false;
    af6c:	a807      	add	r0, sp, #28
    af6e:	2200      	movs	r2, #0
    af70:	7002      	strb	r2, [r0, #0]
    phyDataRequest.confirmCallback = PHY_DataConf;
    af72:	4a23      	ldr	r2, [pc, #140]	; (b000 <MiMAC_SendPacket+0x324>)
    af74:	6082      	str	r2, [r0, #8]
    phyDataRequest.data = packet;
    af76:	6043      	str	r3, [r0, #4]
    PHY_DataReq(&phyDataRequest);
    af78:	4b22      	ldr	r3, [pc, #136]	; (b004 <MiMAC_SendPacket+0x328>)
    af7a:	4798      	blx	r3
}
    af7c:	2001      	movs	r0, #1
    af7e:	b00b      	add	sp, #44	; 0x2c
    af80:	bc3c      	pop	{r2, r3, r4, r5}
    af82:	4690      	mov	r8, r2
    af84:	4699      	mov	r9, r3
    af86:	46a2      	mov	sl, r4
    af88:	46ab      	mov	fp, r5
    af8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    af8c:	2f00      	cmp	r7, #0
    af8e:	d000      	beq.n	af92 <MiMAC_SendPacket+0x2b6>
    af90:	e755      	b.n	ae3e <MiMAC_SendPacket+0x162>
        headerLength = 7;
    af92:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    af94:	4810      	ldr	r0, [pc, #64]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    af96:	9c02      	ldr	r4, [sp, #8]
    af98:	5ce1      	ldrb	r1, [r4, r3]
    af9a:	181a      	adds	r2, r3, r0
    af9c:	7191      	strb	r1, [r2, #6]
    af9e:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    afa0:	2b08      	cmp	r3, #8
    afa2:	d1f9      	bne.n	af98 <MiMAC_SendPacket+0x2bc>
					packet[loc++] = transParam.DestAddress[i];
    afa4:	3306      	adds	r3, #6
    afa6:	e779      	b.n	ae9c <MiMAC_SendPacket+0x1c0>
			packet[loc++] = MACInitParams.PAddress[i];
    afa8:	4a17      	ldr	r2, [pc, #92]	; (b008 <MiMAC_SendPacket+0x32c>)
    afaa:	6852      	ldr	r2, [r2, #4]
    afac:	0018      	movs	r0, r3
    afae:	3008      	adds	r0, #8
    afb0:	b2c0      	uxtb	r0, r0
    afb2:	4d09      	ldr	r5, [pc, #36]	; (afd8 <MiMAC_SendPacket+0x2fc>)
    afb4:	1c5c      	adds	r4, r3, #1
    afb6:	b2e4      	uxtb	r4, r4
    afb8:	7811      	ldrb	r1, [r2, #0]
    afba:	54e9      	strb	r1, [r5, r3]
    afbc:	3201      	adds	r2, #1
    afbe:	0023      	movs	r3, r4
        for (i = 0; i < 8; i++)
    afc0:	42a0      	cmp	r0, r4
    afc2:	d1f7      	bne.n	afb4 <MiMAC_SendPacket+0x2d8>
    afc4:	e784      	b.n	aed0 <MiMAC_SendPacket+0x1f4>
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    afc6:	2001      	movs	r0, #1
    afc8:	4b10      	ldr	r3, [pc, #64]	; (b00c <MiMAC_SendPacket+0x330>)
    afca:	4798      	blx	r3
    afcc:	e7a1      	b.n	af12 <MiMAC_SendPacket+0x236>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    afce:	0022      	movs	r2, r4
    afd0:	e7b3      	b.n	af3a <MiMAC_SendPacket+0x25e>
    afd2:	46c0      	nop			; (mov r8, r8)
    afd4:	20001dd8 	.word	0x20001dd8
    afd8:	20001cfc 	.word	0x20001cfc
    afdc:	0000ffff 	.word	0x0000ffff
    afe0:	20001dc0 	.word	0x20001dc0
    afe4:	0000a939 	.word	0x0000a939
    afe8:	20001cf8 	.word	0x20001cf8
    afec:	20001d7c 	.word	0x20001d7c
    aff0:	20001dac 	.word	0x20001dac
    aff4:	20000360 	.word	0x20000360
    aff8:	20000358 	.word	0x20000358
    affc:	2000035c 	.word	0x2000035c
    b000:	0000a7bd 	.word	0x0000a7bd
    b004:	0000b59d 	.word	0x0000b59d
    b008:	20001d84 	.word	0x20001d84
    b00c:	0000a471 	.word	0x0000a471

0000b010 <MiMAC_DiscardPacket>:
	if (BankIndex < BANK_SIZE)
    b010:	4b04      	ldr	r3, [pc, #16]	; (b024 <MiMAC_DiscardPacket+0x14>)
    b012:	781b      	ldrb	r3, [r3, #0]
    b014:	2b03      	cmp	r3, #3
    b016:	d804      	bhi.n	b022 <MiMAC_DiscardPacket+0x12>
		RxBuffer[BankIndex].PayloadLen = 0;
    b018:	224e      	movs	r2, #78	; 0x4e
    b01a:	4353      	muls	r3, r2
    b01c:	2100      	movs	r1, #0
    b01e:	4a02      	ldr	r2, [pc, #8]	; (b028 <MiMAC_DiscardPacket+0x18>)
    b020:	5499      	strb	r1, [r3, r2]
}
    b022:	4770      	bx	lr
    b024:	2000000a 	.word	0x2000000a
    b028:	20001df4 	.word	0x20001df4

0000b02c <MiMAC_ReceivedPacket>:
{
    b02c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b02e:	b083      	sub	sp, #12
	BankIndex = 0xFF;
    b030:	22ff      	movs	r2, #255	; 0xff
    b032:	4bcb      	ldr	r3, [pc, #812]	; (b360 <MiMAC_ReceivedPacket+0x334>)
    b034:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    b036:	4bcb      	ldr	r3, [pc, #812]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b038:	781b      	ldrb	r3, [r3, #0]
    b03a:	2b00      	cmp	r3, #0
    b03c:	d000      	beq.n	b040 <MiMAC_ReceivedPacket+0x14>
    b03e:	e230      	b.n	b4a2 <MiMAC_ReceivedPacket+0x476>
    b040:	334e      	adds	r3, #78	; 0x4e
    b042:	4ac8      	ldr	r2, [pc, #800]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b044:	5cd3      	ldrb	r3, [r2, r3]
    b046:	2b00      	cmp	r3, #0
    b048:	d10b      	bne.n	b062 <MiMAC_ReceivedPacket+0x36>
    b04a:	339c      	adds	r3, #156	; 0x9c
    b04c:	5cd3      	ldrb	r3, [r2, r3]
    b04e:	2b00      	cmp	r3, #0
    b050:	d130      	bne.n	b0b4 <MiMAC_ReceivedPacket+0x88>
    b052:	33ea      	adds	r3, #234	; 0xea
    b054:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    b056:	2000      	movs	r0, #0
	for (i = 0; i < BANK_SIZE; i++)
    b058:	2103      	movs	r1, #3
		if (RxBuffer[i].PayloadLen > 0)
    b05a:	2b00      	cmp	r3, #0
    b05c:	d102      	bne.n	b064 <MiMAC_ReceivedPacket+0x38>
}
    b05e:	b003      	add	sp, #12
    b060:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    b062:	2101      	movs	r1, #1
			BankIndex = i;
    b064:	4bbe      	ldr	r3, [pc, #760]	; (b360 <MiMAC_ReceivedPacket+0x334>)
    b066:	7019      	strb	r1, [r3, #0]
	return false;
    b068:	2000      	movs	r0, #0
	if (BankIndex < BANK_SIZE)
    b06a:	2903      	cmp	r1, #3
    b06c:	d8f7      	bhi.n	b05e <MiMAC_ReceivedPacket+0x32>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    b06e:	000a      	movs	r2, r1
    b070:	204e      	movs	r0, #78	; 0x4e
    b072:	4348      	muls	r0, r1
    b074:	4bbb      	ldr	r3, [pc, #748]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b076:	181b      	adds	r3, r3, r0
    b078:	785d      	ldrb	r5, [r3, #1]
    b07a:	2440      	movs	r4, #64	; 0x40
    b07c:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    b07e:	48ba      	ldr	r0, [pc, #744]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b080:	2400      	movs	r4, #0
    b082:	7004      	strb	r4, [r0, #0]
		MACRxPacket.altSourceAddress = false;
    b084:	73c4      	strb	r4, [r0, #15]
		MACRxPacket.SourcePANID.Val = 0xFFFF;
    b086:	3c01      	subs	r4, #1
    b088:	8204      	strh	r4, [r0, #16]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    b08a:	789b      	ldrb	r3, [r3, #2]
    b08c:	2033      	movs	r0, #51	; 0x33
    b08e:	4383      	bics	r3, r0
		switch (addrMode)
    b090:	b2d8      	uxtb	r0, r3
    b092:	2888      	cmp	r0, #136	; 0x88
    b094:	d100      	bne.n	b098 <MiMAC_ReceivedPacket+0x6c>
    b096:	e11b      	b.n	b2d0 <MiMAC_ReceivedPacket+0x2a4>
    b098:	d90e      	bls.n	b0b8 <MiMAC_ReceivedPacket+0x8c>
    b09a:	b2d8      	uxtb	r0, r3
    b09c:	28c8      	cmp	r0, #200	; 0xc8
    b09e:	d04c      	beq.n	b13a <MiMAC_ReceivedPacket+0x10e>
    b0a0:	28cc      	cmp	r0, #204	; 0xcc
    b0a2:	d100      	bne.n	b0a6 <MiMAC_ReceivedPacket+0x7a>
    b0a4:	e0e3      	b.n	b26e <MiMAC_ReceivedPacket+0x242>
    b0a6:	288c      	cmp	r0, #140	; 0x8c
    b0a8:	d100      	bne.n	b0ac <MiMAC_ReceivedPacket+0x80>
    b0aa:	e16b      	b.n	b384 <MiMAC_ReceivedPacket+0x358>
			MiMAC_DiscardPacket();
    b0ac:	4baf      	ldr	r3, [pc, #700]	; (b36c <MiMAC_ReceivedPacket+0x340>)
    b0ae:	4798      	blx	r3
			return false;
    b0b0:	2000      	movs	r0, #0
    b0b2:	e7d4      	b.n	b05e <MiMAC_ReceivedPacket+0x32>
	for (i = 0; i < BANK_SIZE; i++)
    b0b4:	2102      	movs	r1, #2
    b0b6:	e7d5      	b.n	b064 <MiMAC_ReceivedPacket+0x38>
		switch (addrMode)
    b0b8:	2b08      	cmp	r3, #8
    b0ba:	d100      	bne.n	b0be <MiMAC_ReceivedPacket+0x92>
    b0bc:	e196      	b.n	b3ec <MiMAC_ReceivedPacket+0x3c0>
    b0be:	2880      	cmp	r0, #128	; 0x80
    b0c0:	d1f4      	bne.n	b0ac <MiMAC_ReceivedPacket+0x80>
				MACRxPacket.flags.bits.broadcast = 1;
    b0c2:	48a9      	ldr	r0, [pc, #676]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b0c4:	7803      	ldrb	r3, [r0, #0]
    b0c6:	2404      	movs	r4, #4
    b0c8:	4323      	orrs	r3, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    b0ca:	2480      	movs	r4, #128	; 0x80
    b0cc:	4264      	negs	r4, r4
    b0ce:	4323      	orrs	r3, r4
    b0d0:	7003      	strb	r3, [r0, #0]
				MACRxPacket.altSourceAddress = true;
    b0d2:	2301      	movs	r3, #1
    b0d4:	73c3      	strb	r3, [r0, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b0d6:	4ca3      	ldr	r4, [pc, #652]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b0d8:	334d      	adds	r3, #77	; 0x4d
    b0da:	435a      	muls	r2, r3
    b0dc:	18a5      	adds	r5, r4, r2
    b0de:	792e      	ldrb	r6, [r5, #4]
    b0e0:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b0e2:	796d      	ldrb	r5, [r5, #5]
    b0e4:	7445      	strb	r5, [r0, #17]
    b0e6:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    b0e8:	1d8b      	adds	r3, r1, #6
    b0ea:	191b      	adds	r3, r3, r4
    b0ec:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    b0ee:	5d13      	ldrb	r3, [r2, r4]
    b0f0:	3b0b      	subs	r3, #11
    b0f2:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    b0f4:	3108      	adds	r1, #8
    b0f6:	1909      	adds	r1, r1, r4
    b0f8:	6081      	str	r1, [r0, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    b0fa:	4b99      	ldr	r3, [pc, #612]	; (b360 <MiMAC_ReceivedPacket+0x334>)
    b0fc:	781a      	ldrb	r2, [r3, #0]
    b0fe:	234e      	movs	r3, #78	; 0x4e
    b100:	435a      	muls	r2, r3
    b102:	4b98      	ldr	r3, [pc, #608]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b104:	189b      	adds	r3, r3, r2
    b106:	785b      	ldrb	r3, [r3, #1]
    b108:	071b      	lsls	r3, r3, #28
    b10a:	d500      	bpl.n	b10e <MiMAC_ReceivedPacket+0xe2>
    b10c:	e18e      	b.n	b42c <MiMAC_ReceivedPacket+0x400>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    b10e:	4b94      	ldr	r3, [pc, #592]	; (b360 <MiMAC_ReceivedPacket+0x334>)
    b110:	7818      	ldrb	r0, [r3, #0]
    b112:	214e      	movs	r1, #78	; 0x4e
    b114:	4341      	muls	r1, r0
    b116:	4a93      	ldr	r2, [pc, #588]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b118:	1852      	adds	r2, r2, r1
    b11a:	7852      	ldrb	r2, [r2, #1]
    b11c:	2307      	movs	r3, #7
    b11e:	4013      	ands	r3, r2
    b120:	2b01      	cmp	r3, #1
    b122:	d100      	bne.n	b126 <MiMAC_ReceivedPacket+0xfa>
    b124:	e19c      	b.n	b460 <MiMAC_ReceivedPacket+0x434>
    b126:	2b00      	cmp	r3, #0
    b128:	d100      	bne.n	b12c <MiMAC_ReceivedPacket+0x100>
    b12a:	e1b4      	b.n	b496 <MiMAC_ReceivedPacket+0x46a>
    b12c:	2b03      	cmp	r3, #3
    b12e:	d100      	bne.n	b132 <MiMAC_ReceivedPacket+0x106>
    b130:	e1a9      	b.n	b486 <MiMAC_ReceivedPacket+0x45a>
			MiMAC_DiscardPacket();
    b132:	4b8e      	ldr	r3, [pc, #568]	; (b36c <MiMAC_ReceivedPacket+0x340>)
    b134:	4798      	blx	r3
			return false;
    b136:	2000      	movs	r0, #0
    b138:	e791      	b.n	b05e <MiMAC_ReceivedPacket+0x32>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b13a:	204e      	movs	r0, #78	; 0x4e
    b13c:	4348      	muls	r0, r1
    b13e:	4b89      	ldr	r3, [pc, #548]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b140:	181b      	adds	r3, r3, r0
    b142:	799b      	ldrb	r3, [r3, #6]
    b144:	2bff      	cmp	r3, #255	; 0xff
    b146:	d070      	beq.n	b22a <MiMAC_ReceivedPacket+0x1fe>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    b148:	4887      	ldr	r0, [pc, #540]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b14a:	7804      	ldrb	r4, [r0, #0]
    b14c:	2380      	movs	r3, #128	; 0x80
    b14e:	425b      	negs	r3, r3
    b150:	4323      	orrs	r3, r4
    b152:	7003      	strb	r3, [r0, #0]
			if (bIntraPAN) // check if it is intraPAN
    b154:	2d00      	cmp	r5, #0
    b156:	d075      	beq.n	b244 <MiMAC_ReceivedPacket+0x218>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b158:	4c82      	ldr	r4, [pc, #520]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b15a:	234e      	movs	r3, #78	; 0x4e
    b15c:	435a      	muls	r2, r3
    b15e:	18a5      	adds	r5, r4, r2
    b160:	792e      	ldrb	r6, [r5, #4]
    b162:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b164:	796d      	ldrb	r5, [r5, #5]
    b166:	7445      	strb	r5, [r0, #17]
    b168:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    b16a:	000b      	movs	r3, r1
    b16c:	3308      	adds	r3, #8
    b16e:	191b      	adds	r3, r3, r4
    b170:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    b172:	5d13      	ldrb	r3, [r2, r4]
    b174:	3b13      	subs	r3, #19
    b176:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    b178:	3110      	adds	r1, #16
    b17a:	1909      	adds	r1, r1, r4
    b17c:	6081      	str	r1, [r0, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    b17e:	4b78      	ldr	r3, [pc, #480]	; (b360 <MiMAC_ReceivedPacket+0x334>)
    b180:	781a      	ldrb	r2, [r3, #0]
    b182:	234e      	movs	r3, #78	; 0x4e
    b184:	435a      	muls	r2, r3
    b186:	4b77      	ldr	r3, [pc, #476]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b188:	189b      	adds	r3, r3, r2
    b18a:	785b      	ldrb	r3, [r3, #1]
    b18c:	071b      	lsls	r3, r3, #28
    b18e:	d5be      	bpl.n	b10e <MiMAC_ReceivedPacket+0xe2>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    b190:	4b75      	ldr	r3, [pc, #468]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b192:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    b194:	785e      	ldrb	r6, [r3, #1]
    b196:	0236      	lsls	r6, r6, #8
    b198:	781a      	ldrb	r2, [r3, #0]
    b19a:	4316      	orrs	r6, r2
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    b19c:	789a      	ldrb	r2, [r3, #2]
    b19e:	0412      	lsls	r2, r2, #16
    b1a0:	4973      	ldr	r1, [pc, #460]	; (b370 <MiMAC_ReceivedPacket+0x344>)
    b1a2:	400e      	ands	r6, r1
    b1a4:	4316      	orrs	r6, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    b1a6:	78db      	ldrb	r3, [r3, #3]
    b1a8:	061b      	lsls	r3, r3, #24
    b1aa:	0236      	lsls	r6, r6, #8
    b1ac:	0a36      	lsrs	r6, r6, #8
    b1ae:	431e      	orrs	r6, r3
    b1b0:	2500      	movs	r5, #0
			for (i = 0; i < CONNECTION_SIZE; i++)
    b1b2:	2400      	movs	r4, #0
				if ((defaultParamsRomOrRam.ConnectionTable[i].status.bits.isValid) &&
    b1b4:	4f6f      	ldr	r7, [pc, #444]	; (b374 <MiMAC_ReceivedPacket+0x348>)
    b1b6:	683b      	ldr	r3, [r7, #0]
    b1b8:	1958      	adds	r0, r3, r5
    b1ba:	7a03      	ldrb	r3, [r0, #8]
    b1bc:	2b7f      	cmp	r3, #127	; 0x7f
    b1be:	d900      	bls.n	b1c2 <MiMAC_ReceivedPacket+0x196>
    b1c0:	e138      	b.n	b434 <MiMAC_ReceivedPacket+0x408>
			for (i = 0; i < CONNECTION_SIZE; i++)
    b1c2:	3401      	adds	r4, #1
    b1c4:	b2e4      	uxtb	r4, r4
    b1c6:	350a      	adds	r5, #10
    b1c8:	2c05      	cmp	r4, #5
    b1ca:	d1f4      	bne.n	b1b6 <MiMAC_ReceivedPacket+0x18a>
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    b1cc:	4966      	ldr	r1, [pc, #408]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b1ce:	7b0b      	ldrb	r3, [r1, #12]
    b1d0:	3b05      	subs	r3, #5
    b1d2:	b2db      	uxtb	r3, r3
    b1d4:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    b1d6:	6888      	ldr	r0, [r1, #8]
    b1d8:	18c3      	adds	r3, r0, r3
    b1da:	785d      	ldrb	r5, [r3, #1]
    b1dc:	4a66      	ldr	r2, [pc, #408]	; (b378 <MiMAC_ReceivedPacket+0x34c>)
    b1de:	7015      	strb	r5, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    b1e0:	789d      	ldrb	r5, [r3, #2]
    b1e2:	7055      	strb	r5, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    b1e4:	78dd      	ldrb	r5, [r3, #3]
    b1e6:	7095      	strb	r5, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    b1e8:	791b      	ldrb	r3, [r3, #4]
    b1ea:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    b1ec:	684a      	ldr	r2, [r1, #4]
    b1ee:	310c      	adds	r1, #12
    b1f0:	3005      	adds	r0, #5
    b1f2:	4b5b      	ldr	r3, [pc, #364]	; (b360 <MiMAC_ReceivedPacket+0x334>)
    b1f4:	781d      	ldrb	r5, [r3, #0]
    b1f6:	234e      	movs	r3, #78	; 0x4e
    b1f8:	435d      	muls	r5, r3
    b1fa:	4b5a      	ldr	r3, [pc, #360]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b1fc:	195b      	adds	r3, r3, r5
    b1fe:	785b      	ldrb	r3, [r3, #1]
    b200:	9300      	str	r3, [sp, #0]
    b202:	0033      	movs	r3, r6
    b204:	4d5d      	ldr	r5, [pc, #372]	; (b37c <MiMAC_ReceivedPacket+0x350>)
    b206:	47a8      	blx	r5
    b208:	2800      	cmp	r0, #0
    b20a:	d100      	bne.n	b20e <MiMAC_ReceivedPacket+0x1e2>
    b20c:	e125      	b.n	b45a <MiMAC_ReceivedPacket+0x42e>
            if (i < CONNECTION_SIZE) 
    b20e:	2c04      	cmp	r4, #4
    b210:	d802      	bhi.n	b218 <MiMAC_ReceivedPacket+0x1ec>
				IncomingFrameCounter[i].Val = FrameCounter.Val;
    b212:	00a4      	lsls	r4, r4, #2
    b214:	4b5a      	ldr	r3, [pc, #360]	; (b380 <MiMAC_ReceivedPacket+0x354>)
    b216:	50e6      	str	r6, [r4, r3]
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    b218:	4b53      	ldr	r3, [pc, #332]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b21a:	689a      	ldr	r2, [r3, #8]
    b21c:	3205      	adds	r2, #5
    b21e:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    b220:	781a      	ldrb	r2, [r3, #0]
    b222:	2108      	movs	r1, #8
    b224:	430a      	orrs	r2, r1
    b226:	701a      	strb	r2, [r3, #0]
    b228:	e771      	b.n	b10e <MiMAC_ReceivedPacket+0xe2>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b22a:	204e      	movs	r0, #78	; 0x4e
    b22c:	4348      	muls	r0, r1
    b22e:	4b4d      	ldr	r3, [pc, #308]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b230:	181b      	adds	r3, r3, r0
    b232:	79db      	ldrb	r3, [r3, #7]
    b234:	2bff      	cmp	r3, #255	; 0xff
    b236:	d187      	bne.n	b148 <MiMAC_ReceivedPacket+0x11c>
				MACRxPacket.flags.bits.broadcast = 1;
    b238:	484b      	ldr	r0, [pc, #300]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b23a:	7803      	ldrb	r3, [r0, #0]
    b23c:	2404      	movs	r4, #4
    b23e:	4323      	orrs	r3, r4
    b240:	7003      	strb	r3, [r0, #0]
    b242:	e781      	b.n	b148 <MiMAC_ReceivedPacket+0x11c>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    b244:	4848      	ldr	r0, [pc, #288]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b246:	4c47      	ldr	r4, [pc, #284]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b248:	234e      	movs	r3, #78	; 0x4e
    b24a:	435a      	muls	r2, r3
    b24c:	18a5      	adds	r5, r4, r2
    b24e:	7a2e      	ldrb	r6, [r5, #8]
    b250:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    b252:	7a6d      	ldrb	r5, [r5, #9]
    b254:	7445      	strb	r5, [r0, #17]
    b256:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    b258:	000b      	movs	r3, r1
    b25a:	330a      	adds	r3, #10
    b25c:	191b      	adds	r3, r3, r4
    b25e:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    b260:	5d13      	ldrb	r3, [r2, r4]
    b262:	3b15      	subs	r3, #21
    b264:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    b266:	3112      	adds	r1, #18
    b268:	1909      	adds	r1, r1, r4
    b26a:	6081      	str	r1, [r0, #8]
    b26c:	e787      	b.n	b17e <MiMAC_ReceivedPacket+0x152>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    b26e:	483e      	ldr	r0, [pc, #248]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b270:	7804      	ldrb	r4, [r0, #0]
    b272:	2380      	movs	r3, #128	; 0x80
    b274:	425b      	negs	r3, r3
    b276:	4323      	orrs	r3, r4
    b278:	7003      	strb	r3, [r0, #0]
			if (bIntraPAN) // check if it is intraPAN
    b27a:	2d00      	cmp	r5, #0
    b27c:	d013      	beq.n	b2a6 <MiMAC_ReceivedPacket+0x27a>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b27e:	4c39      	ldr	r4, [pc, #228]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b280:	234e      	movs	r3, #78	; 0x4e
    b282:	435a      	muls	r2, r3
    b284:	18a5      	adds	r5, r4, r2
    b286:	792e      	ldrb	r6, [r5, #4]
    b288:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b28a:	796d      	ldrb	r5, [r5, #5]
    b28c:	7445      	strb	r5, [r0, #17]
    b28e:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    b290:	000b      	movs	r3, r1
    b292:	330e      	adds	r3, #14
    b294:	191b      	adds	r3, r3, r4
    b296:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    b298:	5d13      	ldrb	r3, [r2, r4]
    b29a:	3b19      	subs	r3, #25
    b29c:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    b29e:	3116      	adds	r1, #22
    b2a0:	1909      	adds	r1, r1, r4
    b2a2:	6081      	str	r1, [r0, #8]
    b2a4:	e76b      	b.n	b17e <MiMAC_ReceivedPacket+0x152>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    b2a6:	4830      	ldr	r0, [pc, #192]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b2a8:	4c2e      	ldr	r4, [pc, #184]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b2aa:	234e      	movs	r3, #78	; 0x4e
    b2ac:	435a      	muls	r2, r3
    b2ae:	18a5      	adds	r5, r4, r2
    b2b0:	7bae      	ldrb	r6, [r5, #14]
    b2b2:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    b2b4:	7bed      	ldrb	r5, [r5, #15]
    b2b6:	7445      	strb	r5, [r0, #17]
    b2b8:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    b2ba:	000b      	movs	r3, r1
    b2bc:	3310      	adds	r3, #16
    b2be:	191b      	adds	r3, r3, r4
    b2c0:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    b2c2:	5d13      	ldrb	r3, [r2, r4]
    b2c4:	3b1b      	subs	r3, #27
    b2c6:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    b2c8:	3118      	adds	r1, #24
    b2ca:	1909      	adds	r1, r1, r4
    b2cc:	6081      	str	r1, [r0, #8]
    b2ce:	e756      	b.n	b17e <MiMAC_ReceivedPacket+0x152>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b2d0:	204e      	movs	r0, #78	; 0x4e
    b2d2:	4348      	muls	r0, r1
    b2d4:	4b23      	ldr	r3, [pc, #140]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b2d6:	181b      	adds	r3, r3, r0
    b2d8:	799b      	ldrb	r3, [r3, #6]
    b2da:	2bff      	cmp	r3, #255	; 0xff
    b2dc:	d01e      	beq.n	b31c <MiMAC_ReceivedPacket+0x2f0>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    b2de:	4b22      	ldr	r3, [pc, #136]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b2e0:	781c      	ldrb	r4, [r3, #0]
    b2e2:	2080      	movs	r0, #128	; 0x80
    b2e4:	4240      	negs	r0, r0
    b2e6:	4320      	orrs	r0, r4
    b2e8:	7018      	strb	r0, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    b2ea:	2001      	movs	r0, #1
    b2ec:	73d8      	strb	r0, [r3, #15]
				if (bIntraPAN == false)
    b2ee:	2d00      	cmp	r5, #0
    b2f0:	d121      	bne.n	b336 <MiMAC_ReceivedPacket+0x30a>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    b2f2:	0018      	movs	r0, r3
    b2f4:	4c1b      	ldr	r4, [pc, #108]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b2f6:	234e      	movs	r3, #78	; 0x4e
    b2f8:	435a      	muls	r2, r3
    b2fa:	18a5      	adds	r5, r4, r2
    b2fc:	7a2e      	ldrb	r6, [r5, #8]
    b2fe:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    b300:	7a6d      	ldrb	r5, [r5, #9]
    b302:	7445      	strb	r5, [r0, #17]
    b304:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    b306:	000b      	movs	r3, r1
    b308:	330a      	adds	r3, #10
    b30a:	191b      	adds	r3, r3, r4
    b30c:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    b30e:	5d13      	ldrb	r3, [r2, r4]
    b310:	3b0f      	subs	r3, #15
    b312:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    b314:	310c      	adds	r1, #12
    b316:	1909      	adds	r1, r1, r4
    b318:	6081      	str	r1, [r0, #8]
    b31a:	e6ee      	b.n	b0fa <MiMAC_ReceivedPacket+0xce>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b31c:	204e      	movs	r0, #78	; 0x4e
    b31e:	4348      	muls	r0, r1
    b320:	4b10      	ldr	r3, [pc, #64]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b322:	181b      	adds	r3, r3, r0
    b324:	79db      	ldrb	r3, [r3, #7]
    b326:	2bff      	cmp	r3, #255	; 0xff
    b328:	d1d9      	bne.n	b2de <MiMAC_ReceivedPacket+0x2b2>
					MACRxPacket.flags.bits.broadcast = 1;
    b32a:	480f      	ldr	r0, [pc, #60]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b32c:	7803      	ldrb	r3, [r0, #0]
    b32e:	2404      	movs	r4, #4
    b330:	4323      	orrs	r3, r4
    b332:	7003      	strb	r3, [r0, #0]
    b334:	e7d3      	b.n	b2de <MiMAC_ReceivedPacket+0x2b2>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b336:	480c      	ldr	r0, [pc, #48]	; (b368 <MiMAC_ReceivedPacket+0x33c>)
    b338:	4c0a      	ldr	r4, [pc, #40]	; (b364 <MiMAC_ReceivedPacket+0x338>)
    b33a:	234e      	movs	r3, #78	; 0x4e
    b33c:	435a      	muls	r2, r3
    b33e:	18a5      	adds	r5, r4, r2
    b340:	792e      	ldrb	r6, [r5, #4]
    b342:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b344:	796d      	ldrb	r5, [r5, #5]
    b346:	7445      	strb	r5, [r0, #17]
    b348:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    b34a:	000b      	movs	r3, r1
    b34c:	3308      	adds	r3, #8
    b34e:	191b      	adds	r3, r3, r4
    b350:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    b352:	5d13      	ldrb	r3, [r2, r4]
    b354:	3b0d      	subs	r3, #13
    b356:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    b358:	310a      	adds	r1, #10
    b35a:	1909      	adds	r1, r1, r4
    b35c:	6081      	str	r1, [r0, #8]
    b35e:	e6cc      	b.n	b0fa <MiMAC_ReceivedPacket+0xce>
    b360:	2000000a 	.word	0x2000000a
    b364:	20001df4 	.word	0x20001df4
    b368:	20001f48 	.word	0x20001f48
    b36c:	0000b011 	.word	0x0000b011
    b370:	ff00ffff 	.word	0xff00ffff
    b374:	20000024 	.word	0x20000024
    b378:	20001dd4 	.word	0x20001dd4
    b37c:	0000aab9 	.word	0x0000aab9
    b380:	20001f70 	.word	0x20001f70
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    b384:	4b49      	ldr	r3, [pc, #292]	; (b4ac <MiMAC_ReceivedPacket+0x480>)
    b386:	781c      	ldrb	r4, [r3, #0]
    b388:	2080      	movs	r0, #128	; 0x80
    b38a:	4240      	negs	r0, r0
    b38c:	4320      	orrs	r0, r4
    b38e:	7018      	strb	r0, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    b390:	2001      	movs	r0, #1
    b392:	73d8      	strb	r0, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    b394:	2d00      	cmp	r5, #0
    b396:	d014      	beq.n	b3c2 <MiMAC_ReceivedPacket+0x396>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b398:	0018      	movs	r0, r3
    b39a:	4c45      	ldr	r4, [pc, #276]	; (b4b0 <MiMAC_ReceivedPacket+0x484>)
    b39c:	234e      	movs	r3, #78	; 0x4e
    b39e:	435a      	muls	r2, r3
    b3a0:	18a5      	adds	r5, r4, r2
    b3a2:	792e      	ldrb	r6, [r5, #4]
    b3a4:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b3a6:	796d      	ldrb	r5, [r5, #5]
    b3a8:	7445      	strb	r5, [r0, #17]
    b3aa:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    b3ac:	000b      	movs	r3, r1
    b3ae:	330d      	adds	r3, #13
    b3b0:	191b      	adds	r3, r3, r4
    b3b2:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    b3b4:	5d13      	ldrb	r3, [r2, r4]
    b3b6:	3b13      	subs	r3, #19
    b3b8:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    b3ba:	3110      	adds	r1, #16
    b3bc:	1909      	adds	r1, r1, r4
    b3be:	6081      	str	r1, [r0, #8]
    b3c0:	e69b      	b.n	b0fa <MiMAC_ReceivedPacket+0xce>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    b3c2:	483a      	ldr	r0, [pc, #232]	; (b4ac <MiMAC_ReceivedPacket+0x480>)
    b3c4:	4c3a      	ldr	r4, [pc, #232]	; (b4b0 <MiMAC_ReceivedPacket+0x484>)
    b3c6:	234e      	movs	r3, #78	; 0x4e
    b3c8:	435a      	muls	r2, r3
    b3ca:	18a5      	adds	r5, r4, r2
    b3cc:	7b6e      	ldrb	r6, [r5, #13]
    b3ce:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    b3d0:	7bad      	ldrb	r5, [r5, #14]
    b3d2:	7445      	strb	r5, [r0, #17]
    b3d4:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    b3d6:	000b      	movs	r3, r1
    b3d8:	330f      	adds	r3, #15
    b3da:	191b      	adds	r3, r3, r4
    b3dc:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    b3de:	5d13      	ldrb	r3, [r2, r4]
    b3e0:	3b15      	subs	r3, #21
    b3e2:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    b3e4:	3112      	adds	r1, #18
    b3e6:	1909      	adds	r1, r1, r4
    b3e8:	6081      	str	r1, [r0, #8]
    b3ea:	e686      	b.n	b0fa <MiMAC_ReceivedPacket+0xce>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b3ec:	204e      	movs	r0, #78	; 0x4e
    b3ee:	4348      	muls	r0, r1
    b3f0:	4b2f      	ldr	r3, [pc, #188]	; (b4b0 <MiMAC_ReceivedPacket+0x484>)
    b3f2:	181b      	adds	r3, r3, r0
    b3f4:	799b      	ldrb	r3, [r3, #6]
    b3f6:	2bff      	cmp	r3, #255	; 0xff
    b3f8:	d00b      	beq.n	b412 <MiMAC_ReceivedPacket+0x3e6>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    b3fa:	482c      	ldr	r0, [pc, #176]	; (b4ac <MiMAC_ReceivedPacket+0x480>)
    b3fc:	4c2c      	ldr	r4, [pc, #176]	; (b4b0 <MiMAC_ReceivedPacket+0x484>)
    b3fe:	234e      	movs	r3, #78	; 0x4e
    b400:	435a      	muls	r2, r3
    b402:	5d12      	ldrb	r2, [r2, r4]
    b404:	3a0a      	subs	r2, #10
    b406:	7302      	strb	r2, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    b408:	434b      	muls	r3, r1
    b40a:	3308      	adds	r3, #8
    b40c:	191b      	adds	r3, r3, r4
    b40e:	6083      	str	r3, [r0, #8]
			break;
    b410:	e673      	b.n	b0fa <MiMAC_ReceivedPacket+0xce>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b412:	204e      	movs	r0, #78	; 0x4e
    b414:	4348      	muls	r0, r1
    b416:	4b26      	ldr	r3, [pc, #152]	; (b4b0 <MiMAC_ReceivedPacket+0x484>)
    b418:	181b      	adds	r3, r3, r0
    b41a:	79db      	ldrb	r3, [r3, #7]
    b41c:	2bff      	cmp	r3, #255	; 0xff
    b41e:	d1ec      	bne.n	b3fa <MiMAC_ReceivedPacket+0x3ce>
					MACRxPacket.flags.bits.broadcast = 1;
    b420:	4822      	ldr	r0, [pc, #136]	; (b4ac <MiMAC_ReceivedPacket+0x480>)
    b422:	7803      	ldrb	r3, [r0, #0]
    b424:	2404      	movs	r4, #4
    b426:	4323      	orrs	r3, r4
    b428:	7003      	strb	r3, [r0, #0]
    b42a:	e7e6      	b.n	b3fa <MiMAC_ReceivedPacket+0x3ce>
				MiMAC_DiscardPacket();
    b42c:	4b21      	ldr	r3, [pc, #132]	; (b4b4 <MiMAC_ReceivedPacket+0x488>)
    b42e:	4798      	blx	r3
				return false;
    b430:	2000      	movs	r0, #0
    b432:	e614      	b.n	b05e <MiMAC_ReceivedPacket+0x32>
				isSameAddress(defaultParamsRomOrRam.ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    b434:	4b1d      	ldr	r3, [pc, #116]	; (b4ac <MiMAC_ReceivedPacket+0x480>)
    b436:	6859      	ldr	r1, [r3, #4]
    b438:	4b1f      	ldr	r3, [pc, #124]	; (b4b8 <MiMAC_ReceivedPacket+0x48c>)
    b43a:	4798      	blx	r3
				if ((defaultParamsRomOrRam.ConnectionTable[i].status.bits.isValid) &&
    b43c:	2800      	cmp	r0, #0
    b43e:	d100      	bne.n	b442 <MiMAC_ReceivedPacket+0x416>
    b440:	e6bf      	b.n	b1c2 <MiMAC_ReceivedPacket+0x196>
            if (i < CONNECTION_SIZE && IncomingFrameCounter[i].Val >= FrameCounter.Val)
    b442:	2c04      	cmp	r4, #4
    b444:	d900      	bls.n	b448 <MiMAC_ReceivedPacket+0x41c>
    b446:	e6c1      	b.n	b1cc <MiMAC_ReceivedPacket+0x1a0>
    b448:	00a3      	lsls	r3, r4, #2
    b44a:	4a1c      	ldr	r2, [pc, #112]	; (b4bc <MiMAC_ReceivedPacket+0x490>)
    b44c:	589b      	ldr	r3, [r3, r2]
    b44e:	42b3      	cmp	r3, r6
    b450:	d200      	bcs.n	b454 <MiMAC_ReceivedPacket+0x428>
    b452:	e6bb      	b.n	b1cc <MiMAC_ReceivedPacket+0x1a0>
                MiMAC_DiscardPacket();
    b454:	4b17      	ldr	r3, [pc, #92]	; (b4b4 <MiMAC_ReceivedPacket+0x488>)
    b456:	4798      	blx	r3
                return false;
    b458:	e7ea      	b.n	b430 <MiMAC_ReceivedPacket+0x404>
				MiMAC_DiscardPacket();
    b45a:	4b16      	ldr	r3, [pc, #88]	; (b4b4 <MiMAC_ReceivedPacket+0x488>)
    b45c:	4798      	blx	r3
				return false;
    b45e:	e7e7      	b.n	b430 <MiMAC_ReceivedPacket+0x404>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    b460:	4a12      	ldr	r2, [pc, #72]	; (b4ac <MiMAC_ReceivedPacket+0x480>)
    b462:	7813      	ldrb	r3, [r2, #0]
    b464:	2103      	movs	r1, #3
    b466:	438b      	bics	r3, r1
    b468:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    b46a:	4b11      	ldr	r3, [pc, #68]	; (b4b0 <MiMAC_ReceivedPacket+0x484>)
    b46c:	224e      	movs	r2, #78	; 0x4e
    b46e:	4342      	muls	r2, r0
    b470:	5cd0      	ldrb	r0, [r2, r3]
    b472:	490e      	ldr	r1, [pc, #56]	; (b4ac <MiMAC_ReceivedPacket+0x480>)
    b474:	189b      	adds	r3, r3, r2
    b476:	181a      	adds	r2, r3, r0
    b478:	3a01      	subs	r2, #1
    b47a:	7812      	ldrb	r2, [r2, #0]
    b47c:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    b47e:	5c1b      	ldrb	r3, [r3, r0]
    b480:	734b      	strb	r3, [r1, #13]
		return true;
    b482:	2001      	movs	r0, #1
    b484:	e5eb      	b.n	b05e <MiMAC_ReceivedPacket+0x32>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    b486:	4a09      	ldr	r2, [pc, #36]	; (b4ac <MiMAC_ReceivedPacket+0x480>)
    b488:	7813      	ldrb	r3, [r2, #0]
    b48a:	2103      	movs	r1, #3
    b48c:	438b      	bics	r3, r1
    b48e:	2101      	movs	r1, #1
    b490:	430b      	orrs	r3, r1
    b492:	7013      	strb	r3, [r2, #0]
			break;
    b494:	e7e9      	b.n	b46a <MiMAC_ReceivedPacket+0x43e>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    b496:	4a05      	ldr	r2, [pc, #20]	; (b4ac <MiMAC_ReceivedPacket+0x480>)
    b498:	7813      	ldrb	r3, [r2, #0]
    b49a:	2103      	movs	r1, #3
    b49c:	430b      	orrs	r3, r1
    b49e:	7013      	strb	r3, [r2, #0]
			break;
    b4a0:	e7e3      	b.n	b46a <MiMAC_ReceivedPacket+0x43e>
			BankIndex = i;
    b4a2:	2200      	movs	r2, #0
    b4a4:	4b06      	ldr	r3, [pc, #24]	; (b4c0 <MiMAC_ReceivedPacket+0x494>)
    b4a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BANK_SIZE; i++)
    b4a8:	2100      	movs	r1, #0
    b4aa:	e5e0      	b.n	b06e <MiMAC_ReceivedPacket+0x42>
    b4ac:	20001f48 	.word	0x20001f48
    b4b0:	20001df4 	.word	0x20001df4
    b4b4:	0000b011 	.word	0x0000b011
    b4b8:	0000bcc5 	.word	0x0000bcc5
    b4bc:	20001f70 	.word	0x20001f70
    b4c0:	2000000a 	.word	0x2000000a

0000b4c4 <MiMAC_SymbolToTicks>:
	return SYMBOLS_TO_TICKS(symbols);
    b4c4:	0100      	lsls	r0, r0, #4
}
    b4c6:	4770      	bx	lr

0000b4c8 <MiMAC_Task>:

void MiMAC_Task(void)
{
    b4c8:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    b4ca:	4b0b      	ldr	r3, [pc, #44]	; (b4f8 <MiMAC_Task+0x30>)
    b4cc:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    b4ce:	4b0b      	ldr	r3, [pc, #44]	; (b4fc <MiMAC_Task+0x34>)
    b4d0:	681b      	ldr	r3, [r3, #0]
    b4d2:	2b00      	cmp	r3, #0
    b4d4:	d003      	beq.n	b4de <MiMAC_Task+0x16>
    b4d6:	4a0a      	ldr	r2, [pc, #40]	; (b500 <MiMAC_Task+0x38>)
    b4d8:	7812      	ldrb	r2, [r2, #0]
    b4da:	2a00      	cmp	r2, #0
    b4dc:	d100      	bne.n	b4e0 <MiMAC_Task+0x18>
  {
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
	  dataConfAvailable = false;
  }
}
    b4de:	bd10      	pop	{r4, pc}
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    b4e0:	4a08      	ldr	r2, [pc, #32]	; (b504 <MiMAC_Task+0x3c>)
    b4e2:	6812      	ldr	r2, [r2, #0]
    b4e4:	4908      	ldr	r1, [pc, #32]	; (b508 <MiMAC_Task+0x40>)
    b4e6:	7809      	ldrb	r1, [r1, #0]
    b4e8:	4808      	ldr	r0, [pc, #32]	; (b50c <MiMAC_Task+0x44>)
    b4ea:	7800      	ldrb	r0, [r0, #0]
    b4ec:	4798      	blx	r3
	  dataConfAvailable = false;
    b4ee:	2200      	movs	r2, #0
    b4f0:	4b03      	ldr	r3, [pc, #12]	; (b500 <MiMAC_Task+0x38>)
    b4f2:	701a      	strb	r2, [r3, #0]
}
    b4f4:	e7f3      	b.n	b4de <MiMAC_Task+0x16>
    b4f6:	46c0      	nop			; (mov r8, r8)
    b4f8:	0000b831 	.word	0x0000b831
    b4fc:	20000358 	.word	0x20000358
    b500:	20000357 	.word	0x20000357
    b504:	20000360 	.word	0x20000360
    b508:	20001dbc 	.word	0x20001dbc
    b50c:	2000035c 	.word	0x2000035c

0000b510 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b512:	0004      	movs	r4, r0
    if (PHY_STATE_SLEEP == phyState)
    b514:	4b0f      	ldr	r3, [pc, #60]	; (b554 <phyTrxSetState+0x44>)
    b516:	781b      	ldrb	r3, [r3, #0]
    b518:	2b02      	cmp	r3, #2
    b51a:	d016      	beq.n	b54a <phyTrxSetState+0x3a>
	trx_reg_write(reg, value);
    b51c:	4f0e      	ldr	r7, [pc, #56]	; (b558 <phyTrxSetState+0x48>)
	value = trx_reg_read(reg);
    b51e:	4e0f      	ldr	r6, [pc, #60]	; (b55c <phyTrxSetState+0x4c>)
	{
		TRX_SLP_TR_LOW();
	}
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b520:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    b522:	2103      	movs	r1, #3
    b524:	2002      	movs	r0, #2
    b526:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b528:	2001      	movs	r0, #1
    b52a:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b52c:	4028      	ands	r0, r5
    b52e:	2808      	cmp	r0, #8
    b530:	d1f7      	bne.n	b522 <phyTrxSetState+0x12>
	trx_reg_write(reg, value);
    b532:	4f09      	ldr	r7, [pc, #36]	; (b558 <phyTrxSetState+0x48>)
	value = trx_reg_read(reg);
    b534:	4e09      	ldr	r6, [pc, #36]	; (b55c <phyTrxSetState+0x4c>)

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b536:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    b538:	0021      	movs	r1, r4
    b53a:	2002      	movs	r0, #2
    b53c:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b53e:	2001      	movs	r0, #1
    b540:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b542:	4028      	ands	r0, r5
    b544:	4284      	cmp	r4, r0
    b546:	d1f7      	bne.n	b538 <phyTrxSetState+0x28>
}
    b548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		port_base->OUTCLR.reg = pin_mask;
    b54a:	2280      	movs	r2, #128	; 0x80
    b54c:	0352      	lsls	r2, r2, #13
    b54e:	4b04      	ldr	r3, [pc, #16]	; (b560 <phyTrxSetState+0x50>)
    b550:	615a      	str	r2, [r3, #20]
    b552:	e7e3      	b.n	b51c <phyTrxSetState+0xc>
    b554:	200003e5 	.word	0x200003e5
    b558:	0000d251 	.word	0x0000d251
    b55c:	0000d155 	.word	0x0000d155
    b560:	41004400 	.word	0x41004400

0000b564 <phySetRxState>:
{
    b564:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    b566:	2008      	movs	r0, #8
    b568:	4b08      	ldr	r3, [pc, #32]	; (b58c <phySetRxState+0x28>)
    b56a:	4798      	blx	r3
	value = trx_reg_read(reg);
    b56c:	200f      	movs	r0, #15
    b56e:	4b08      	ldr	r3, [pc, #32]	; (b590 <phySetRxState+0x2c>)
    b570:	4798      	blx	r3
	if (phyRxState) {
    b572:	4b08      	ldr	r3, [pc, #32]	; (b594 <phySetRxState+0x30>)
    b574:	781b      	ldrb	r3, [r3, #0]
    b576:	2b00      	cmp	r3, #0
    b578:	d100      	bne.n	b57c <phySetRxState+0x18>
}
    b57a:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    b57c:	2016      	movs	r0, #22
    b57e:	4b03      	ldr	r3, [pc, #12]	; (b58c <phySetRxState+0x28>)
    b580:	4798      	blx	r3
		phyState = PHY_STATE_IDLE;
    b582:	2201      	movs	r2, #1
    b584:	4b04      	ldr	r3, [pc, #16]	; (b598 <phySetRxState+0x34>)
    b586:	701a      	strb	r2, [r3, #0]
}
    b588:	e7f7      	b.n	b57a <phySetRxState+0x16>
    b58a:	46c0      	nop			; (mov r8, r8)
    b58c:	0000b511 	.word	0x0000b511
    b590:	0000d155 	.word	0x0000d155
    b594:	200003e4 	.word	0x200003e4
    b598:	200003e5 	.word	0x200003e5

0000b59c <PHY_DataReq>:
{
    b59c:	b570      	push	{r4, r5, r6, lr}
    b59e:	0005      	movs	r5, r0
    phyDataRequestPtr = (PhyTxFrame_t *) MiMem_Alloc(sizeof(PhyTxFrame_t));
    b5a0:	2010      	movs	r0, #16
    b5a2:	4b09      	ldr	r3, [pc, #36]	; (b5c8 <PHY_DataReq+0x2c>)
    b5a4:	4798      	blx	r3
    b5a6:	1e04      	subs	r4, r0, #0
    if (NULL == phyDataRequestPtr)
    b5a8:	d009      	beq.n	b5be <PHY_DataReq+0x22>
	memcpy(&phyDataRequestPtr->phyDataReq, phyDataReq, sizeof(PHY_DataReq_t));
    b5aa:	3004      	adds	r0, #4
    b5ac:	220c      	movs	r2, #12
    b5ae:	0029      	movs	r1, r5
    b5b0:	4b06      	ldr	r3, [pc, #24]	; (b5cc <PHY_DataReq+0x30>)
    b5b2:	4798      	blx	r3
	miQueueAppend(&phyTxQueue, (miQueueBuffer_t *)phyDataRequestPtr);
    b5b4:	0021      	movs	r1, r4
    b5b6:	4806      	ldr	r0, [pc, #24]	; (b5d0 <PHY_DataReq+0x34>)
    b5b8:	4b06      	ldr	r3, [pc, #24]	; (b5d4 <PHY_DataReq+0x38>)
    b5ba:	4798      	blx	r3
}
    b5bc:	bd70      	pop	{r4, r5, r6, pc}
        phyDataReq->confirmCallback(PHY_STATUS_ERROR);
    b5be:	68ab      	ldr	r3, [r5, #8]
    b5c0:	2001      	movs	r0, #1
    b5c2:	4798      	blx	r3
        return;
    b5c4:	e7fa      	b.n	b5bc <PHY_DataReq+0x20>
    b5c6:	46c0      	nop			; (mov r8, r8)
    b5c8:	0000c645 	.word	0x0000c645
    b5cc:	00010caf 	.word	0x00010caf
    b5d0:	20001de8 	.word	0x20001de8
    b5d4:	0000c821 	.word	0x0000c821

0000b5d8 <PHY_TxHandler>:
{
    b5d8:	b510      	push	{r4, lr}
	if (phyTxQueue.size && ((phyState == PHY_STATE_IDLE) || (phyState == PHY_STATE_SLEEP)))
    b5da:	4b1e      	ldr	r3, [pc, #120]	; (b654 <PHY_TxHandler+0x7c>)
    b5dc:	7a1b      	ldrb	r3, [r3, #8]
    b5de:	2b00      	cmp	r3, #0
    b5e0:	d004      	beq.n	b5ec <PHY_TxHandler+0x14>
    b5e2:	4b1d      	ldr	r3, [pc, #116]	; (b658 <PHY_TxHandler+0x80>)
    b5e4:	781b      	ldrb	r3, [r3, #0]
    b5e6:	3b01      	subs	r3, #1
    b5e8:	2b01      	cmp	r3, #1
    b5ea:	d900      	bls.n	b5ee <PHY_TxHandler+0x16>
}
    b5ec:	bd10      	pop	{r4, pc}
        phyTxPtr =  (PhyTxFrame_t *)miQueueRemove(&phyTxQueue, NULL);
    b5ee:	2100      	movs	r1, #0
    b5f0:	4818      	ldr	r0, [pc, #96]	; (b654 <PHY_TxHandler+0x7c>)
    b5f2:	4b1a      	ldr	r3, [pc, #104]	; (b65c <PHY_TxHandler+0x84>)
    b5f4:	4798      	blx	r3
    b5f6:	1e04      	subs	r4, r0, #0
        if (NULL != phyTxPtr)
    b5f8:	d0f8      	beq.n	b5ec <PHY_TxHandler+0x14>
			if (phyTxPtr->phyDataReq.data[0] > MAX_PSDU)
    b5fa:	6883      	ldr	r3, [r0, #8]
    b5fc:	781b      	ldrb	r3, [r3, #0]
    b5fe:	2b7f      	cmp	r3, #127	; 0x7f
    b600:	d823      	bhi.n	b64a <PHY_TxHandler+0x72>
			gPhyDataReq.polledConfirmation = phyTxPtr->phyDataReq.polledConfirmation;
    b602:	4b17      	ldr	r3, [pc, #92]	; (b660 <PHY_TxHandler+0x88>)
    b604:	7902      	ldrb	r2, [r0, #4]
    b606:	701a      	strb	r2, [r3, #0]
			gPhyDataReq.confirmCallback = phyTxPtr->phyDataReq.confirmCallback;
    b608:	68c2      	ldr	r2, [r0, #12]
    b60a:	609a      	str	r2, [r3, #8]
			phyTrxSetState(TRX_CMD_TX_ARET_ON);
    b60c:	2019      	movs	r0, #25
    b60e:	4b15      	ldr	r3, [pc, #84]	; (b664 <PHY_TxHandler+0x8c>)
    b610:	4798      	blx	r3
	value = trx_reg_read(reg);
    b612:	200f      	movs	r0, #15
    b614:	4b14      	ldr	r3, [pc, #80]	; (b668 <PHY_TxHandler+0x90>)
    b616:	4798      	blx	r3
			phyTxPtr->phyDataReq.data[0] += 2;// 2
    b618:	68a2      	ldr	r2, [r4, #8]
    b61a:	7813      	ldrb	r3, [r2, #0]
    b61c:	3302      	adds	r3, #2
    b61e:	7013      	strb	r3, [r2, #0]
			trx_frame_write(&phyTxPtr->phyDataReq.data[0], (phyTxPtr->phyDataReq.data[0]-1 ) /* length value*/);
    b620:	68a3      	ldr	r3, [r4, #8]
    b622:	7819      	ldrb	r1, [r3, #0]
    b624:	3901      	subs	r1, #1
    b626:	b2c9      	uxtb	r1, r1
    b628:	0018      	movs	r0, r3
    b62a:	4b10      	ldr	r3, [pc, #64]	; (b66c <PHY_TxHandler+0x94>)
    b62c:	4798      	blx	r3
			phyState = PHY_STATE_TX_WAIT_END;
    b62e:	2203      	movs	r2, #3
    b630:	4b09      	ldr	r3, [pc, #36]	; (b658 <PHY_TxHandler+0x80>)
    b632:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    b634:	4b0e      	ldr	r3, [pc, #56]	; (b670 <PHY_TxHandler+0x98>)
    b636:	2280      	movs	r2, #128	; 0x80
    b638:	0352      	lsls	r2, r2, #13
    b63a:	619a      	str	r2, [r3, #24]
			TRX_TRIG_DELAY();
    b63c:	46c0      	nop			; (mov r8, r8)
    b63e:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    b640:	615a      	str	r2, [r3, #20]
		    MiMem_Free((uint8_t *)phyTxPtr);
    b642:	0020      	movs	r0, r4
    b644:	4b0b      	ldr	r3, [pc, #44]	; (b674 <PHY_TxHandler+0x9c>)
    b646:	4798      	blx	r3
    b648:	e7d0      	b.n	b5ec <PHY_TxHandler+0x14>
				phyTxPtr->phyDataReq.confirmCallback(PHY_STATUS_ERROR);
    b64a:	68c3      	ldr	r3, [r0, #12]
    b64c:	2001      	movs	r0, #1
    b64e:	4798      	blx	r3
				return;
    b650:	e7cc      	b.n	b5ec <PHY_TxHandler+0x14>
    b652:	46c0      	nop			; (mov r8, r8)
    b654:	20001de8 	.word	0x20001de8
    b658:	200003e5 	.word	0x200003e5
    b65c:	0000c859 	.word	0x0000c859
    b660:	20001ddc 	.word	0x20001ddc
    b664:	0000b511 	.word	0x0000b511
    b668:	0000d155 	.word	0x0000d155
    b66c:	0000d481 	.word	0x0000d481
    b670:	41004400 	.word	0x41004400
    b674:	0000c701 	.word	0x0000c701

0000b678 <PHY_RandomReq>:
{
    b678:	b5f0      	push	{r4, r5, r6, r7, lr}
    b67a:	46c6      	mov	lr, r8
    b67c:	b500      	push	{lr}
	phyTrxSetState(TRX_CMD_RX_ON);
    b67e:	2006      	movs	r0, #6
    b680:	4b0d      	ldr	r3, [pc, #52]	; (b6b8 <PHY_RandomReq+0x40>)
    b682:	4798      	blx	r3
    b684:	2400      	movs	r4, #0
	uint16_t rnd = 0;
    b686:	2500      	movs	r5, #0
		delay_cycles_us(1);
    b688:	4f0c      	ldr	r7, [pc, #48]	; (b6bc <PHY_RandomReq+0x44>)
	value = trx_reg_read(reg);
    b68a:	4e0d      	ldr	r6, [pc, #52]	; (b6c0 <PHY_RandomReq+0x48>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    b68c:	2303      	movs	r3, #3
    b68e:	4698      	mov	r8, r3
		delay_cycles_us(1);
    b690:	2001      	movs	r0, #1
    b692:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b694:	2006      	movs	r0, #6
    b696:	47b0      	blx	r6
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    b698:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    b69a:	4643      	mov	r3, r8
    b69c:	4018      	ands	r0, r3
    b69e:	40a0      	lsls	r0, r4
    b6a0:	4305      	orrs	r5, r0
    b6a2:	b2ad      	uxth	r5, r5
    b6a4:	3402      	adds	r4, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    b6a6:	2c10      	cmp	r4, #16
    b6a8:	d1f2      	bne.n	b690 <PHY_RandomReq+0x18>
	phySetRxState();
    b6aa:	4b06      	ldr	r3, [pc, #24]	; (b6c4 <PHY_RandomReq+0x4c>)
    b6ac:	4798      	blx	r3
}
    b6ae:	0028      	movs	r0, r5
    b6b0:	bc04      	pop	{r2}
    b6b2:	4690      	mov	r8, r2
    b6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6b6:	46c0      	nop			; (mov r8, r8)
    b6b8:	0000b511 	.word	0x0000b511
    b6bc:	00006219 	.word	0x00006219
    b6c0:	0000d155 	.word	0x0000d155
    b6c4:	0000b565 	.word	0x0000b565

0000b6c8 <PHY_Init>:
{
    b6c8:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    b6ca:	4b0e      	ldr	r3, [pc, #56]	; (b704 <PHY_Init+0x3c>)
    b6cc:	4798      	blx	r3
	PhyReset();
    b6ce:	4b0e      	ldr	r3, [pc, #56]	; (b708 <PHY_Init+0x40>)
    b6d0:	4798      	blx	r3
	phyRxState = false;
    b6d2:	2200      	movs	r2, #0
    b6d4:	4b0d      	ldr	r3, [pc, #52]	; (b70c <PHY_Init+0x44>)
    b6d6:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    b6d8:	3201      	adds	r2, #1
    b6da:	4b0d      	ldr	r3, [pc, #52]	; (b710 <PHY_Init+0x48>)
    b6dc:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    b6de:	4e0d      	ldr	r6, [pc, #52]	; (b714 <PHY_Init+0x4c>)
	value = trx_reg_read(reg);
    b6e0:	4d0d      	ldr	r5, [pc, #52]	; (b718 <PHY_Init+0x50>)
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b6e2:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    b6e4:	2108      	movs	r1, #8
    b6e6:	2002      	movs	r0, #2
    b6e8:	47b0      	blx	r6
	value = trx_reg_read(reg);
    b6ea:	2001      	movs	r0, #1
    b6ec:	47a8      	blx	r5
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b6ee:	4020      	ands	r0, r4
    b6f0:	2808      	cmp	r0, #8
    b6f2:	d1f7      	bne.n	b6e4 <PHY_Init+0x1c>
	trx_reg_write(reg, value);
    b6f4:	212e      	movs	r1, #46	; 0x2e
    b6f6:	3804      	subs	r0, #4
    b6f8:	4c06      	ldr	r4, [pc, #24]	; (b714 <PHY_Init+0x4c>)
    b6fa:	47a0      	blx	r4
    b6fc:	21a0      	movs	r1, #160	; 0xa0
    b6fe:	200c      	movs	r0, #12
    b700:	47a0      	blx	r4
}
    b702:	bd70      	pop	{r4, r5, r6, pc}
    b704:	0000d009 	.word	0x0000d009
    b708:	0000d125 	.word	0x0000d125
    b70c:	200003e4 	.word	0x200003e4
    b710:	200003e5 	.word	0x200003e5
    b714:	0000d251 	.word	0x0000d251
    b718:	0000d155 	.word	0x0000d155

0000b71c <PHY_SetRxState>:
{
    b71c:	b510      	push	{r4, lr}
	phyRxState = rx;
    b71e:	4b02      	ldr	r3, [pc, #8]	; (b728 <PHY_SetRxState+0xc>)
    b720:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    b722:	4b02      	ldr	r3, [pc, #8]	; (b72c <PHY_SetRxState+0x10>)
    b724:	4798      	blx	r3
}
    b726:	bd10      	pop	{r4, pc}
    b728:	200003e4 	.word	0x200003e4
    b72c:	0000b565 	.word	0x0000b565

0000b730 <PHY_SetPanId>:
{
    b730:	b530      	push	{r4, r5, lr}
    b732:	b083      	sub	sp, #12
    b734:	466b      	mov	r3, sp
    b736:	1d9d      	adds	r5, r3, #6
    b738:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    b73a:	b2c1      	uxtb	r1, r0
    b73c:	2022      	movs	r0, #34	; 0x22
    b73e:	4c03      	ldr	r4, [pc, #12]	; (b74c <PHY_SetPanId+0x1c>)
    b740:	47a0      	blx	r4
    b742:	7869      	ldrb	r1, [r5, #1]
    b744:	2023      	movs	r0, #35	; 0x23
    b746:	47a0      	blx	r4
}
    b748:	b003      	add	sp, #12
    b74a:	bd30      	pop	{r4, r5, pc}
    b74c:	0000d251 	.word	0x0000d251

0000b750 <PHY_SetShortAddr>:
{
    b750:	b570      	push	{r4, r5, r6, lr}
    b752:	b082      	sub	sp, #8
    b754:	466b      	mov	r3, sp
    b756:	1d9e      	adds	r6, r3, #6
    b758:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    b75a:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    b75c:	0021      	movs	r1, r4
    b75e:	2020      	movs	r0, #32
    b760:	4d05      	ldr	r5, [pc, #20]	; (b778 <PHY_SetShortAddr+0x28>)
    b762:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    b764:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    b766:	0031      	movs	r1, r6
    b768:	2021      	movs	r0, #33	; 0x21
    b76a:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    b76c:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    b76e:	b2e1      	uxtb	r1, r4
    b770:	202d      	movs	r0, #45	; 0x2d
    b772:	47a8      	blx	r5
}
    b774:	b002      	add	sp, #8
    b776:	bd70      	pop	{r4, r5, r6, pc}
    b778:	0000d251 	.word	0x0000d251

0000b77c <PHY_Wakeup>:
{
    b77c:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    b77e:	4b07      	ldr	r3, [pc, #28]	; (b79c <PHY_Wakeup+0x20>)
    b780:	781b      	ldrb	r3, [r3, #0]
    b782:	2b02      	cmp	r3, #2
    b784:	d000      	beq.n	b788 <PHY_Wakeup+0xc>
}
    b786:	bd10      	pop	{r4, pc}
    b788:	2280      	movs	r2, #128	; 0x80
    b78a:	0352      	lsls	r2, r2, #13
    b78c:	4b04      	ldr	r3, [pc, #16]	; (b7a0 <PHY_Wakeup+0x24>)
    b78e:	615a      	str	r2, [r3, #20]
	 	phySetRxState();
    b790:	4b04      	ldr	r3, [pc, #16]	; (b7a4 <PHY_Wakeup+0x28>)
    b792:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    b794:	2201      	movs	r2, #1
    b796:	4b01      	ldr	r3, [pc, #4]	; (b79c <PHY_Wakeup+0x20>)
    b798:	701a      	strb	r2, [r3, #0]
}
    b79a:	e7f4      	b.n	b786 <PHY_Wakeup+0xa>
    b79c:	200003e5 	.word	0x200003e5
    b7a0:	41004400 	.word	0x41004400
    b7a4:	0000b565 	.word	0x0000b565

0000b7a8 <PHY_SetChannel>:
{
    b7a8:	b510      	push	{r4, lr}
    b7aa:	0004      	movs	r4, r0
	if (PHY_STATE_SLEEP == phyState)
    b7ac:	4b09      	ldr	r3, [pc, #36]	; (b7d4 <PHY_SetChannel+0x2c>)
    b7ae:	781b      	ldrb	r3, [r3, #0]
    b7b0:	2b02      	cmp	r3, #2
    b7b2:	d00b      	beq.n	b7cc <PHY_SetChannel+0x24>
	value = trx_reg_read(reg);
    b7b4:	2008      	movs	r0, #8
    b7b6:	4b08      	ldr	r3, [pc, #32]	; (b7d8 <PHY_SetChannel+0x30>)
    b7b8:	4798      	blx	r3
	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    b7ba:	231f      	movs	r3, #31
    b7bc:	0001      	movs	r1, r0
    b7be:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    b7c0:	4321      	orrs	r1, r4
	trx_reg_write(reg, value);
    b7c2:	b2c9      	uxtb	r1, r1
    b7c4:	2008      	movs	r0, #8
    b7c6:	4b05      	ldr	r3, [pc, #20]	; (b7dc <PHY_SetChannel+0x34>)
    b7c8:	4798      	blx	r3
}
    b7ca:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    b7cc:	4b04      	ldr	r3, [pc, #16]	; (b7e0 <PHY_SetChannel+0x38>)
    b7ce:	4798      	blx	r3
    b7d0:	e7f0      	b.n	b7b4 <PHY_SetChannel+0xc>
    b7d2:	46c0      	nop			; (mov r8, r8)
    b7d4:	200003e5 	.word	0x200003e5
    b7d8:	0000d155 	.word	0x0000d155
    b7dc:	0000d251 	.word	0x0000d251
    b7e0:	0000b77d 	.word	0x0000b77d

0000b7e4 <PHY_EncryptReq>:
{
    b7e4:	b510      	push	{r4, lr}
    b7e6:	0004      	movs	r4, r0
    b7e8:	0008      	movs	r0, r1
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    b7ea:	2200      	movs	r2, #0
    b7ec:	2100      	movs	r1, #0
    b7ee:	4b05      	ldr	r3, [pc, #20]	; (b804 <PHY_EncryptReq+0x20>)
    b7f0:	4798      	blx	r3
	sal_aes_wrrd(text, NULL);
    b7f2:	2100      	movs	r1, #0
    b7f4:	0020      	movs	r0, r4
    b7f6:	4b04      	ldr	r3, [pc, #16]	; (b808 <PHY_EncryptReq+0x24>)
    b7f8:	4798      	blx	r3
	sal_aes_read(text);
    b7fa:	0020      	movs	r0, r4
    b7fc:	4b03      	ldr	r3, [pc, #12]	; (b80c <PHY_EncryptReq+0x28>)
    b7fe:	4798      	blx	r3
}
    b800:	bd10      	pop	{r4, pc}
    b802:	46c0      	nop			; (mov r8, r8)
    b804:	0000cea1 	.word	0x0000cea1
    b808:	0000ce35 	.word	0x0000ce35
    b80c:	0000cfd9 	.word	0x0000cfd9

0000b810 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    b810:	b570      	push	{r4, r5, r6, lr}
    b812:	0005      	movs	r5, r0
    b814:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
    b816:	4e05      	ldr	r6, [pc, #20]	; (b82c <PHY_SetIEEEAddr+0x1c>)
    b818:	7829      	ldrb	r1, [r5, #0]
    b81a:	0020      	movs	r0, r4
    b81c:	47b0      	blx	r6
		ptr_to_reg++;
    b81e:	3501      	adds	r5, #1
    b820:	3401      	adds	r4, #1
    b822:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    b824:	2c2c      	cmp	r4, #44	; 0x2c
    b826:	d1f7      	bne.n	b818 <PHY_SetIEEEAddr+0x8>
	}
}
    b828:	bd70      	pop	{r4, r5, r6, pc}
    b82a:	46c0      	nop			; (mov r8, r8)
    b82c:	0000d251 	.word	0x0000d251

0000b830 <PHY_TaskHandler>:
/*************************************************************************//**
*****************************************************************************/

// Handle Packet Received
void PHY_TaskHandler(void)
{
    b830:	b5f0      	push	{r4, r5, r6, r7, lr}
    b832:	b085      	sub	sp, #20
	PHY_TxHandler();
    b834:	4b3f      	ldr	r3, [pc, #252]	; (b934 <PHY_TaskHandler+0x104>)
    b836:	4798      	blx	r3

	if (PHY_STATE_SLEEP == phyState)
    b838:	4b3f      	ldr	r3, [pc, #252]	; (b938 <PHY_TaskHandler+0x108>)
    b83a:	781b      	ldrb	r3, [r3, #0]
    b83c:	2b02      	cmp	r3, #2
    b83e:	d00a      	beq.n	b856 <PHY_TaskHandler+0x26>
	value = trx_reg_read(reg);
    b840:	200f      	movs	r0, #15
    b842:	4b3e      	ldr	r3, [pc, #248]	; (b93c <PHY_TaskHandler+0x10c>)
    b844:	4798      	blx	r3
	{
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END))
    b846:	0703      	lsls	r3, r0, #28
    b848:	d505      	bpl.n	b856 <PHY_TaskHandler+0x26>
	{
		if (PHY_STATE_IDLE == phyState)
    b84a:	4b3b      	ldr	r3, [pc, #236]	; (b938 <PHY_TaskHandler+0x108>)
    b84c:	781b      	ldrb	r3, [r3, #0]
    b84e:	2b01      	cmp	r3, #1
    b850:	d003      	beq.n	b85a <PHY_TaskHandler+0x2a>
					}
				}
				phyWaitState(TRX_STATUS_RX_AACK_ON);
			}
		}
		else if (PHY_STATE_TX_WAIT_END == phyState)
    b852:	2b03      	cmp	r3, #3
    b854:	d052      	beq.n	b8fc <PHY_TaskHandler+0xcc>
		    gPhyDataReq.confirmCallback = NULL;
			phySetRxState();
			phyState = PHY_STATE_IDLE;
		}
	}
}
    b856:	b005      	add	sp, #20
    b858:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (RxBuffer[i].PayloadLen == 0)
    b85a:	4b39      	ldr	r3, [pc, #228]	; (b940 <PHY_TaskHandler+0x110>)
    b85c:	781d      	ldrb	r5, [r3, #0]
    b85e:	2d00      	cmp	r5, #0
    b860:	d00f      	beq.n	b882 <PHY_TaskHandler+0x52>
    b862:	234e      	movs	r3, #78	; 0x4e
    b864:	4a36      	ldr	r2, [pc, #216]	; (b940 <PHY_TaskHandler+0x110>)
    b866:	5cd3      	ldrb	r3, [r2, r3]
    b868:	2b00      	cmp	r3, #0
    b86a:	d009      	beq.n	b880 <PHY_TaskHandler+0x50>
    b86c:	239c      	movs	r3, #156	; 0x9c
    b86e:	5cd3      	ldrb	r3, [r2, r3]
    b870:	2b00      	cmp	r3, #0
    b872:	d041      	beq.n	b8f8 <PHY_TaskHandler+0xc8>
    b874:	23ea      	movs	r3, #234	; 0xea
    b876:	5cd3      	ldrb	r3, [r2, r3]
			for (i = 0; i < BANK_SIZE; i++)
    b878:	2503      	movs	r5, #3
				if (RxBuffer[i].PayloadLen == 0)
    b87a:	2b00      	cmp	r3, #0
    b87c:	d1eb      	bne.n	b856 <PHY_TaskHandler+0x26>
    b87e:	e000      	b.n	b882 <PHY_TaskHandler+0x52>
			for (i = 0; i < BANK_SIZE; i++)
    b880:	2501      	movs	r5, #1
	value = trx_reg_read(reg);
    b882:	2007      	movs	r0, #7
    b884:	4b2d      	ldr	r3, [pc, #180]	; (b93c <PHY_TaskHandler+0x10c>)
    b886:	4798      	blx	r3
    b888:	9001      	str	r0, [sp, #4]
				trx_frame_read(&size, 1);
    b88a:	ab02      	add	r3, sp, #8
    b88c:	1dde      	adds	r6, r3, #7
    b88e:	2101      	movs	r1, #1
    b890:	0030      	movs	r0, r6
    b892:	4b2c      	ldr	r3, [pc, #176]	; (b944 <PHY_TaskHandler+0x114>)
    b894:	4798      	blx	r3
				if(size <= MAX_PSDU)
    b896:	7831      	ldrb	r1, [r6, #0]
    b898:	b24b      	sxtb	r3, r1
    b89a:	2b00      	cmp	r3, #0
    b89c:	db24      	blt.n	b8e8 <PHY_TaskHandler+0xb8>
					trx_frame_read(phyRxBuffer, size + 2);
    b89e:	3102      	adds	r1, #2
    b8a0:	b2c9      	uxtb	r1, r1
    b8a2:	4829      	ldr	r0, [pc, #164]	; (b948 <PHY_TaskHandler+0x118>)
    b8a4:	4b27      	ldr	r3, [pc, #156]	; (b944 <PHY_TaskHandler+0x114>)
    b8a6:	4798      	blx	r3
					RxBuffer[RxBank].PayloadLen = size + 2;
    b8a8:	002c      	movs	r4, r5
    b8aa:	ab02      	add	r3, sp, #8
    b8ac:	79d8      	ldrb	r0, [r3, #7]
    b8ae:	1c87      	adds	r7, r0, #2
    b8b0:	b2ff      	uxtb	r7, r7
    b8b2:	234e      	movs	r3, #78	; 0x4e
    b8b4:	435d      	muls	r5, r3
    b8b6:	4b22      	ldr	r3, [pc, #136]	; (b940 <PHY_TaskHandler+0x110>)
    b8b8:	54ef      	strb	r7, [r5, r3]
					if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    b8ba:	2f4c      	cmp	r7, #76	; 0x4c
    b8bc:	d814      	bhi.n	b8e8 <PHY_TaskHandler+0xb8>
						for (i = 1; i <= size+2; i++)
    b8be:	3002      	adds	r0, #2
    b8c0:	2201      	movs	r2, #1
    b8c2:	2301      	movs	r3, #1
							RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    b8c4:	0029      	movs	r1, r5
    b8c6:	4d1e      	ldr	r5, [pc, #120]	; (b940 <PHY_TaskHandler+0x110>)
    b8c8:	186d      	adds	r5, r5, r1
    b8ca:	4e1f      	ldr	r6, [pc, #124]	; (b948 <PHY_TaskHandler+0x118>)
    b8cc:	5cb1      	ldrb	r1, [r6, r2]
    b8ce:	54a9      	strb	r1, [r5, r2]
						for (i = 1; i <= size+2; i++)
    b8d0:	3301      	adds	r3, #1
    b8d2:	b2db      	uxtb	r3, r3
    b8d4:	001a      	movs	r2, r3
    b8d6:	4298      	cmp	r0, r3
    b8d8:	daf8      	bge.n	b8cc <PHY_TaskHandler+0x9c>
						RxBuffer[RxBank].Payload[RxBuffer[RxBank].PayloadLen - 1] = rssi + PHY_RSSI_BASE_VAL;
    b8da:	224e      	movs	r2, #78	; 0x4e
    b8dc:	4362      	muls	r2, r4
    b8de:	4b18      	ldr	r3, [pc, #96]	; (b940 <PHY_TaskHandler+0x110>)
    b8e0:	189b      	adds	r3, r3, r2
    b8e2:	9c01      	ldr	r4, [sp, #4]
    b8e4:	3c5e      	subs	r4, #94	; 0x5e
    b8e6:	55dc      	strb	r4, [r3, r7]
	value = trx_reg_read(reg);
    b8e8:	4d14      	ldr	r5, [pc, #80]	; (b93c <PHY_TaskHandler+0x10c>)
while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    b8ea:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    b8ec:	2001      	movs	r0, #1
    b8ee:	47a8      	blx	r5
while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    b8f0:	4020      	ands	r0, r4
    b8f2:	2816      	cmp	r0, #22
    b8f4:	d1fa      	bne.n	b8ec <PHY_TaskHandler+0xbc>
    b8f6:	e7ae      	b.n	b856 <PHY_TaskHandler+0x26>
			for (i = 0; i < BANK_SIZE; i++)
    b8f8:	2502      	movs	r5, #2
    b8fa:	e7c2      	b.n	b882 <PHY_TaskHandler+0x52>
	value = trx_reg_read(reg);
    b8fc:	2002      	movs	r0, #2
    b8fe:	4b0f      	ldr	r3, [pc, #60]	; (b93c <PHY_TaskHandler+0x10c>)
    b900:	4798      	blx	r3
			uint8_t status = (phyReadRegister(TRX_STATE_REG) >>  TRAC_STATUS) & 7;
    b902:	0940      	lsrs	r0, r0, #5
    b904:	b2c0      	uxtb	r0, r0
   			if (TRAC_STATUS_SUCCESS == status)
    b906:	2800      	cmp	r0, #0
    b908:	d004      	beq.n	b914 <PHY_TaskHandler+0xe4>
			else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    b90a:	2803      	cmp	r0, #3
    b90c:	d00d      	beq.n	b92a <PHY_TaskHandler+0xfa>
			else if (TRAC_STATUS_NO_ACK == status)
    b90e:	2805      	cmp	r0, #5
    b910:	d00d      	beq.n	b92e <PHY_TaskHandler+0xfe>
				status = PHY_STATUS_ERROR;
    b912:	2001      	movs	r0, #1
		    gPhyDataReq.confirmCallback(status);
    b914:	4c0d      	ldr	r4, [pc, #52]	; (b94c <PHY_TaskHandler+0x11c>)
    b916:	68a3      	ldr	r3, [r4, #8]
    b918:	4798      	blx	r3
		    gPhyDataReq.confirmCallback = NULL;
    b91a:	2300      	movs	r3, #0
    b91c:	60a3      	str	r3, [r4, #8]
			phySetRxState();
    b91e:	4b0c      	ldr	r3, [pc, #48]	; (b950 <PHY_TaskHandler+0x120>)
    b920:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    b922:	2201      	movs	r2, #1
    b924:	4b04      	ldr	r3, [pc, #16]	; (b938 <PHY_TaskHandler+0x108>)
    b926:	701a      	strb	r2, [r3, #0]
    b928:	e795      	b.n	b856 <PHY_TaskHandler+0x26>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    b92a:	2002      	movs	r0, #2
    b92c:	e7f2      	b.n	b914 <PHY_TaskHandler+0xe4>
				status = PHY_STATUS_NO_ACK;
    b92e:	2003      	movs	r0, #3
    b930:	e7f0      	b.n	b914 <PHY_TaskHandler+0xe4>
    b932:	46c0      	nop			; (mov r8, r8)
    b934:	0000b5d9 	.word	0x0000b5d9
    b938:	200003e5 	.word	0x200003e5
    b93c:	0000d155 	.word	0x0000d155
    b940:	20001df4 	.word	0x20001df4
    b944:	0000d351 	.word	0x0000d351
    b948:	20000364 	.word	0x20000364
    b94c:	20001ddc 	.word	0x20001ddc
    b950:	0000b565 	.word	0x0000b565

0000b954 <CommandConfCallback>:
	}
	return true;
}

void CommandConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    b954:	b510      	push	{r4, lr}
    MiMem_Free(msgPointer);
    b956:	0010      	movs	r0, r2
    b958:	4b01      	ldr	r3, [pc, #4]	; (b960 <CommandConfCallback+0xc>)
    b95a:	4798      	blx	r3
}
    b95c:	bd10      	pop	{r4, pc}
    b95e:	46c0      	nop			; (mov r8, r8)
    b960:	0000c701 	.word	0x0000c701

0000b964 <frameTxCallback>:

static void frameTxCallback(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    b964:	b510      	push	{r4, lr}
    txCallbackReceived = true;
    b966:	2401      	movs	r4, #1
    b968:	4b08      	ldr	r3, [pc, #32]	; (b98c <frameTxCallback+0x28>)
    b96a:	701c      	strb	r4, [r3, #0]
    DataConf_callback_t callback = sentFrame->txFrameEntry.frameConfCallback;
    b96c:	4b08      	ldr	r3, [pc, #32]	; (b990 <frameTxCallback+0x2c>)
    b96e:	681b      	ldr	r3, [r3, #0]
    b970:	691b      	ldr	r3, [r3, #16]
    if (NULL != callback)
    b972:	2b00      	cmp	r3, #0
    b974:	d005      	beq.n	b982 <frameTxCallback+0x1e>
    {
        callback(handle, status, msgPointer);
    b976:	4798      	blx	r3
    }
    else
    {
        MiMem_Free(msgPointer);
    }
    MiMem_Free((uint8_t *)sentFrame);
    b978:	4b05      	ldr	r3, [pc, #20]	; (b990 <frameTxCallback+0x2c>)
    b97a:	6818      	ldr	r0, [r3, #0]
    b97c:	4b05      	ldr	r3, [pc, #20]	; (b994 <frameTxCallback+0x30>)
    b97e:	4798      	blx	r3
}
    b980:	bd10      	pop	{r4, pc}
        MiMem_Free(msgPointer);
    b982:	0010      	movs	r0, r2
    b984:	4b03      	ldr	r3, [pc, #12]	; (b994 <frameTxCallback+0x30>)
    b986:	4798      	blx	r3
    b988:	e7f6      	b.n	b978 <frameTxCallback+0x14>
    b98a:	46c0      	nop			; (mov r8, r8)
    b98c:	20000018 	.word	0x20000018
    b990:	20001fd4 	.word	0x20001fd4
    b994:	0000c701 	.word	0x0000c701

0000b998 <connectionRespConfCallback>:
    return true;
}

#ifndef ENABLE_SLEEP_FEATURE
static void connectionRespConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    b998:	b510      	push	{r4, lr}
    /* Free the Frame Memory */
    MiMem_Free(msgPointer);
    b99a:	0010      	movs	r0, r2
    b99c:	4b01      	ldr	r3, [pc, #4]	; (b9a4 <connectionRespConfCallback+0xc>)
    b99e:	4798      	blx	r3

#if defined(PROTOCOL_STAR)
    /* Broadcast connection table upon a device join */
    MiApp_BroadcastConnectionTable();
#endif
}
    b9a0:	bd10      	pop	{r4, pc}
    b9a2:	46c0      	nop			; (mov r8, r8)
    b9a4:	0000c701 	.word	0x0000c701

0000b9a8 <macAckOnlyDataCallback>:
    return false;
}
#endif

void macAckOnlyDataCallback(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    b9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9aa:	0005      	movs	r5, r0
    b9ac:	000e      	movs	r6, r1
    b9ae:	0017      	movs	r7, r2
	P2PStarDataFrame_t *dataFramePtr = NULL;
	dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&macAckOnlyFrameQueue, NULL);
    b9b0:	2100      	movs	r1, #0
    b9b2:	4809      	ldr	r0, [pc, #36]	; (b9d8 <macAckOnlyDataCallback+0x30>)
    b9b4:	4b09      	ldr	r3, [pc, #36]	; (b9dc <macAckOnlyDataCallback+0x34>)
    b9b6:	4798      	blx	r3
    b9b8:	1e04      	subs	r4, r0, #0

	if (NULL != dataFramePtr)
    b9ba:	d00c      	beq.n	b9d6 <macAckOnlyDataCallback+0x2e>
	{
		DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    b9bc:	6843      	ldr	r3, [r0, #4]
		if (NULL != callback && 1 != dataFramePtr->dataFrame.broadcast)
    b9be:	2b00      	cmp	r3, #0
    b9c0:	d006      	beq.n	b9d0 <macAckOnlyDataCallback+0x28>
    b9c2:	7c82      	ldrb	r2, [r0, #18]
    b9c4:	2a01      	cmp	r2, #1
    b9c6:	d003      	beq.n	b9d0 <macAckOnlyDataCallback+0x28>
		{
			callback(handle, status, msgPointer);
    b9c8:	003a      	movs	r2, r7
    b9ca:	0031      	movs	r1, r6
    b9cc:	0028      	movs	r0, r5
    b9ce:	4798      	blx	r3
				dataPtr[0] = CMD_DATA_TO_ENDDEV_SUCCESS;
				frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, true, true, 1, dataPtr, 0, true, CommandConfCallback);
			}
		}
#endif
		MiMem_Free((uint8_t *)dataFramePtr);
    b9d0:	0020      	movs	r0, r4
    b9d2:	4b03      	ldr	r3, [pc, #12]	; (b9e0 <macAckOnlyDataCallback+0x38>)
    b9d4:	4798      	blx	r3
	}
}
    b9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b9d8:	20001f30 	.word	0x20001f30
    b9dc:	0000c859 	.word	0x0000c859
    b9e0:	0000c701 	.word	0x0000c701

0000b9e4 <MiApp_Set>:
{
    b9e4:	b570      	push	{r4, r5, r6, lr}
    b9e6:	000d      	movs	r5, r1
    return false;
    b9e8:	2400      	movs	r4, #0
    switch(id)
    b9ea:	2800      	cmp	r0, #0
    b9ec:	d001      	beq.n	b9f2 <MiApp_Set+0xe>
}
    b9ee:	0020      	movs	r0, r4
    b9f0:	bd70      	pop	{r4, r5, r6, pc}
            if( MiMAC_Set(MAC_CHANNEL, value))
    b9f2:	4b05      	ldr	r3, [pc, #20]	; (ba08 <MiApp_Set+0x24>)
    b9f4:	4798      	blx	r3
    b9f6:	1e04      	subs	r4, r0, #0
    b9f8:	d0f9      	beq.n	b9ee <MiApp_Set+0xa>
                currentChannel = *value;
    b9fa:	782a      	ldrb	r2, [r5, #0]
    b9fc:	4b03      	ldr	r3, [pc, #12]	; (ba0c <MiApp_Set+0x28>)
    b9fe:	701a      	strb	r2, [r3, #0]
                PDS_Store(PDS_CURRENT_CHANNEL_ID);
    ba00:	2004      	movs	r0, #4
    ba02:	4b03      	ldr	r3, [pc, #12]	; (ba10 <MiApp_Set+0x2c>)
    ba04:	4798      	blx	r3
                return true;
    ba06:	e7f2      	b.n	b9ee <MiApp_Set+0xa>
    ba08:	0000ac15 	.word	0x0000ac15
    ba0c:	2000000d 	.word	0x2000000d
    ba10:	0000a471 	.word	0x0000a471

0000ba14 <MiApp_ProtocolInit>:
{
    ba14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba16:	b085      	sub	sp, #20
    ba18:	0005      	movs	r5, r0
    uint16_t broadcastAddress = 0xFFFF;
    ba1a:	2201      	movs	r2, #1
    ba1c:	4252      	negs	r2, r2
    ba1e:	230e      	movs	r3, #14
    ba20:	446b      	add	r3, sp
    ba22:	801a      	strh	r2, [r3, #0]
    P2PStatus.Val = 0;//TODO
    ba24:	2300      	movs	r3, #0
    ba26:	4a3f      	ldr	r2, [pc, #252]	; (bb24 <MiApp_ProtocolInit+0x110>)
    ba28:	7013      	strb	r3, [r2, #0]
    miwiDefaultRomOrRamParams = defaultRomOrRamParams;
    ba2a:	4a3f      	ldr	r2, [pc, #252]	; (bb28 <MiApp_ProtocolInit+0x114>)
    ba2c:	6010      	str	r0, [r2, #0]
    miwiDefaultRamOnlyParams = defaultRamOnlyParams;
    ba2e:	4a3f      	ldr	r2, [pc, #252]	; (bb2c <MiApp_ProtocolInit+0x118>)
    ba30:	6011      	str	r1, [r2, #0]
    myPANID.Val = 0;
    ba32:	4a3f      	ldr	r2, [pc, #252]	; (bb30 <MiApp_ProtocolInit+0x11c>)
    ba34:	8013      	strh	r3, [r2, #0]
    if (defaultRomOrRamParams->networkFreezerRestore)
    ba36:	7b03      	ldrb	r3, [r0, #12]
    ba38:	2b00      	cmp	r3, #0
    ba3a:	d153      	bne.n	bae4 <MiApp_ProtocolInit+0xd0>
        p2pStarCurrentState = INIT_STATE;
    ba3c:	2201      	movs	r2, #1
    ba3e:	4b3d      	ldr	r3, [pc, #244]	; (bb34 <MiApp_ProtocolInit+0x120>)
    ba40:	701a      	strb	r2, [r3, #0]
        myPANID.Val = MY_PAN_ID;
    ba42:	4a3d      	ldr	r2, [pc, #244]	; (bb38 <MiApp_ProtocolInit+0x124>)
    ba44:	4b3a      	ldr	r3, [pc, #232]	; (bb30 <MiApp_ProtocolInit+0x11c>)
    ba46:	801a      	strh	r2, [r3, #0]
    ba48:	2400      	movs	r4, #0
        defaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    ba4a:	2600      	movs	r6, #0
        memset(&defaultRomOrRamParams->ConnectionTable[i].Address, 0, LONG_ADDR_LEN);
    ba4c:	4f3b      	ldr	r7, [pc, #236]	; (bb3c <MiApp_ProtocolInit+0x128>)
        defaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    ba4e:	682b      	ldr	r3, [r5, #0]
    ba50:	191b      	adds	r3, r3, r4
    ba52:	721e      	strb	r6, [r3, #8]
        memset(&defaultRomOrRamParams->ConnectionTable[i].Address, 0, LONG_ADDR_LEN);
    ba54:	682b      	ldr	r3, [r5, #0]
    ba56:	1918      	adds	r0, r3, r4
    ba58:	2208      	movs	r2, #8
    ba5a:	0031      	movs	r1, r6
    ba5c:	47b8      	blx	r7
    ba5e:	340a      	adds	r4, #10
    for(i = 0; i < CONNECTION_SIZE; i++)
    ba60:	2c32      	cmp	r4, #50	; 0x32
    ba62:	d1f4      	bne.n	ba4e <MiApp_ProtocolInit+0x3a>
        IncomingFrameCounter[i].Val = 0;
    ba64:	4b36      	ldr	r3, [pc, #216]	; (bb40 <MiApp_ProtocolInit+0x12c>)
    ba66:	2200      	movs	r2, #0
    ba68:	601a      	str	r2, [r3, #0]
    ba6a:	605a      	str	r2, [r3, #4]
    ba6c:	609a      	str	r2, [r3, #8]
    ba6e:	60da      	str	r2, [r3, #12]
    ba70:	611a      	str	r2, [r3, #16]
    miwi_status_t initStatus = SUCCESS;
    ba72:	2400      	movs	r4, #0
    initValue.PAddress = myLongAddress;
    ba74:	aa01      	add	r2, sp, #4
    initValue.actionFlags.bits.CCAEnable = 1;
    ba76:	7813      	ldrb	r3, [r2, #0]
    ba78:	2102      	movs	r1, #2
    ba7a:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    ba7c:	2187      	movs	r1, #135	; 0x87
    ba7e:	400b      	ands	r3, r1
    ba80:	2140      	movs	r1, #64	; 0x40
    ba82:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.NetworkFreezer = 1;
    ba84:	b2db      	uxtb	r3, r3
    ba86:	2104      	movs	r1, #4
    ba88:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.RepeaterMode = 0;
    ba8a:	21c6      	movs	r1, #198	; 0xc6
    ba8c:	400b      	ands	r3, r1
    ba8e:	7013      	strb	r3, [r2, #0]
    MiMAC_Init(initValue);
    ba90:	9801      	ldr	r0, [sp, #4]
    ba92:	492c      	ldr	r1, [pc, #176]	; (bb44 <MiApp_ProtocolInit+0x130>)
    ba94:	4b2c      	ldr	r3, [pc, #176]	; (bb48 <MiApp_ProtocolInit+0x134>)
    ba96:	4798      	blx	r3
    if (currentChannel != 0xFF)
    ba98:	4b2c      	ldr	r3, [pc, #176]	; (bb4c <MiApp_ProtocolInit+0x138>)
    ba9a:	781b      	ldrb	r3, [r3, #0]
    ba9c:	2bff      	cmp	r3, #255	; 0xff
    ba9e:	d003      	beq.n	baa8 <MiApp_ProtocolInit+0x94>
        MiApp_Set(CHANNEL, &currentChannel);
    baa0:	492a      	ldr	r1, [pc, #168]	; (bb4c <MiApp_ProtocolInit+0x138>)
    baa2:	2000      	movs	r0, #0
    baa4:	4b2a      	ldr	r3, [pc, #168]	; (bb50 <MiApp_ProtocolInit+0x13c>)
    baa6:	4798      	blx	r3
    MiMAC_SetAltAddress((uint8_t *)&broadcastAddress, (uint8_t *)&myPANID.Val);
    baa8:	4921      	ldr	r1, [pc, #132]	; (bb30 <MiApp_ProtocolInit+0x11c>)
    baaa:	200e      	movs	r0, #14
    baac:	4468      	add	r0, sp
    baae:	4b29      	ldr	r3, [pc, #164]	; (bb54 <MiApp_ProtocolInit+0x140>)
    bab0:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    bab2:	4a29      	ldr	r2, [pc, #164]	; (bb58 <MiApp_ProtocolInit+0x144>)
    bab4:	4b29      	ldr	r3, [pc, #164]	; (bb5c <MiApp_ProtocolInit+0x148>)
    bab6:	781b      	ldrb	r3, [r3, #0]
    bab8:	011b      	lsls	r3, r3, #4
    baba:	7811      	ldrb	r1, [r2, #0]
    babc:	430b      	orrs	r3, r1
    babe:	7013      	strb	r3, [r2, #0]
    protocolTimer.interval = PROTOCOL_TIMER_INTERVAL;
    bac0:	4827      	ldr	r0, [pc, #156]	; (bb60 <MiApp_ProtocolInit+0x14c>)
    bac2:	23fa      	movs	r3, #250	; 0xfa
    bac4:	009b      	lsls	r3, r3, #2
    bac6:	6083      	str	r3, [r0, #8]
    protocolTimer.mode = SYS_TIMER_PERIODIC_MODE;
    bac8:	2301      	movs	r3, #1
    baca:	7303      	strb	r3, [r0, #12]
    protocolTimer.handler = protocolTimerHandler;
    bacc:	4b25      	ldr	r3, [pc, #148]	; (bb64 <MiApp_ProtocolInit+0x150>)
    bace:	6103      	str	r3, [r0, #16]
    SYS_TimerStart(&protocolTimer);
    bad0:	4b25      	ldr	r3, [pc, #148]	; (bb68 <MiApp_ProtocolInit+0x154>)
    bad2:	4798      	blx	r3
	miQueueInit(&macAckOnlyFrameQueue);
    bad4:	4825      	ldr	r0, [pc, #148]	; (bb6c <MiApp_ProtocolInit+0x158>)
    bad6:	4d26      	ldr	r5, [pc, #152]	; (bb70 <MiApp_ProtocolInit+0x15c>)
    bad8:	47a8      	blx	r5
	miQueueInit(&indirectFrameQueue);
    bada:	4826      	ldr	r0, [pc, #152]	; (bb74 <MiApp_ProtocolInit+0x160>)
    badc:	47a8      	blx	r5
}
    bade:	0020      	movs	r0, r4
    bae0:	b005      	add	sp, #20
    bae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!PDS_IsAbleToRestore(MIWI_ALL_MEMORY_MEM_ID) || !PDS_Restore(MIWI_ALL_MEMORY_MEM_ID))
    bae4:	4824      	ldr	r0, [pc, #144]	; (bb78 <MiApp_ProtocolInit+0x164>)
    bae6:	4b25      	ldr	r3, [pc, #148]	; (bb7c <MiApp_ProtocolInit+0x168>)
    bae8:	4798      	blx	r3
    baea:	2800      	cmp	r0, #0
    baec:	d004      	beq.n	baf8 <MiApp_ProtocolInit+0xe4>
    baee:	4822      	ldr	r0, [pc, #136]	; (bb78 <MiApp_ProtocolInit+0x164>)
    baf0:	4b23      	ldr	r3, [pc, #140]	; (bb80 <MiApp_ProtocolInit+0x16c>)
    baf2:	4798      	blx	r3
    baf4:	2800      	cmp	r0, #0
    baf6:	d101      	bne.n	bafc <MiApp_ProtocolInit+0xe8>
            PDS_InitItems();
    baf8:	4b22      	ldr	r3, [pc, #136]	; (bb84 <MiApp_ProtocolInit+0x170>)
    bafa:	4798      	blx	r3
    if (myPANID.Val != 0x0000 && myPANID.Val != 0xFFFF)
    bafc:	4b0c      	ldr	r3, [pc, #48]	; (bb30 <MiApp_ProtocolInit+0x11c>)
    bafe:	881b      	ldrh	r3, [r3, #0]
    bb00:	3b01      	subs	r3, #1
    bb02:	b29b      	uxth	r3, r3
    bb04:	4a20      	ldr	r2, [pc, #128]	; (bb88 <MiApp_ProtocolInit+0x174>)
    bb06:	4293      	cmp	r3, r2
    bb08:	d898      	bhi.n	ba3c <MiApp_ProtocolInit+0x28>
        p2pStarCurrentState = IN_NETWORK_STATE;
    bb0a:	2207      	movs	r2, #7
    bb0c:	4b09      	ldr	r3, [pc, #36]	; (bb34 <MiApp_ProtocolInit+0x120>)
    bb0e:	701a      	strb	r2, [r3, #0]
        if (NULL != reconnectionCallback)
    bb10:	4b1e      	ldr	r3, [pc, #120]	; (bb8c <MiApp_ProtocolInit+0x178>)
    bb12:	681b      	ldr	r3, [r3, #0]
    bb14:	2b00      	cmp	r3, #0
    bb16:	d003      	beq.n	bb20 <MiApp_ProtocolInit+0x10c>
            reconnectionCallback(SUCCESS);
    bb18:	2000      	movs	r0, #0
    bb1a:	4798      	blx	r3
        initStatus = RECONNECTED;
    bb1c:	240f      	movs	r4, #15
    bb1e:	e7a9      	b.n	ba74 <MiApp_ProtocolInit+0x60>
    bb20:	240f      	movs	r4, #15
    bb22:	e7a7      	b.n	ba74 <MiApp_ProtocolInit+0x60>
    bb24:	20001f94 	.word	0x20001f94
    bb28:	20001f5c 	.word	0x20001f5c
    bb2c:	20001f60 	.word	0x20001f60
    bb30:	20001f6c 	.word	0x20001f6c
    bb34:	200003f0 	.word	0x200003f0
    bb38:	00001234 	.word	0x00001234
    bb3c:	00010cc1 	.word	0x00010cc1
    bb40:	20001f70 	.word	0x20001f70
    bb44:	20000010 	.word	0x20000010
    bb48:	0000ac3d 	.word	0x0000ac3d
    bb4c:	2000000d 	.word	0x2000000d
    bb50:	0000b9e5 	.word	0x0000b9e5
    bb54:	0000a7d1 	.word	0x0000a7d1
    bb58:	2000000c 	.word	0x2000000c
    bb5c:	2000000b 	.word	0x2000000b
    bb60:	200003f8 	.word	0x200003f8
    bb64:	0000bfb1 	.word	0x0000bfb1
    bb68:	0000c9c9 	.word	0x0000c9c9
    bb6c:	20001f30 	.word	0x20001f30
    bb70:	0000c815 	.word	0x0000c815
    bb74:	20001f3c 	.word	0x20001f3c
    bb78:	00004001 	.word	0x00004001
    bb7c:	0000a5d1 	.word	0x0000a5d1
    bb80:	0000a399 	.word	0x0000a399
    bb84:	0000a629 	.word	0x0000a629
    bb88:	0000fffd 	.word	0x0000fffd
    bb8c:	20001f68 	.word	0x20001f68

0000bb90 <MiApp_ConnectionMode>:
{
    bb90:	b510      	push	{r4, lr}
    if( Mode > 3 )
    bb92:	2803      	cmp	r0, #3
    bb94:	d900      	bls.n	bb98 <MiApp_ConnectionMode+0x8>
}
    bb96:	bd10      	pop	{r4, pc}
    ConnMode = Mode;
    bb98:	4b06      	ldr	r3, [pc, #24]	; (bbb4 <MiApp_ConnectionMode+0x24>)
    bb9a:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    bb9c:	4a06      	ldr	r2, [pc, #24]	; (bbb8 <MiApp_ConnectionMode+0x28>)
    bb9e:	7811      	ldrb	r1, [r2, #0]
    bba0:	230f      	movs	r3, #15
    bba2:	400b      	ands	r3, r1
    bba4:	0100      	lsls	r0, r0, #4
    bba6:	4318      	orrs	r0, r3
    bba8:	7010      	strb	r0, [r2, #0]
        PDS_Store(PDS_CONNECTION_MODE_ID);
    bbaa:	2005      	movs	r0, #5
    bbac:	4b03      	ldr	r3, [pc, #12]	; (bbbc <MiApp_ConnectionMode+0x2c>)
    bbae:	4798      	blx	r3
    bbb0:	e7f1      	b.n	bb96 <MiApp_ConnectionMode+0x6>
    bbb2:	46c0      	nop			; (mov r8, r8)
    bbb4:	2000000b 	.word	0x2000000b
    bbb8:	2000000c 	.word	0x2000000c
    bbbc:	0000a471 	.word	0x0000a471

0000bbc0 <MiApp_StartConnection>:
{
    bbc0:	b530      	push	{r4, r5, lr}
    bbc2:	b083      	sub	sp, #12
    bbc4:	0015      	movs	r5, r2
    bbc6:	001c      	movs	r4, r3
    if ((p2pStarCurrentState != INIT_STATE) && (p2pStarCurrentState != SEARCH_COMPLETE))
    bbc8:	4b28      	ldr	r3, [pc, #160]	; (bc6c <MiApp_StartConnection+0xac>)
    bbca:	781b      	ldrb	r3, [r3, #0]
    bbcc:	2204      	movs	r2, #4
    bbce:	4393      	bics	r3, r2
        return false;
    bbd0:	2200      	movs	r2, #0
    if ((p2pStarCurrentState != INIT_STATE) && (p2pStarCurrentState != SEARCH_COMPLETE))
    bbd2:	2b01      	cmp	r3, #1
    bbd4:	d002      	beq.n	bbdc <MiApp_StartConnection+0x1c>
}
    bbd6:	0010      	movs	r0, r2
    bbd8:	b003      	add	sp, #12
    bbda:	bd30      	pop	{r4, r5, pc}
    p2pStarCurrentState = STARTING_NETWORK;
    bbdc:	3202      	adds	r2, #2
    bbde:	4b23      	ldr	r3, [pc, #140]	; (bc6c <MiApp_StartConnection+0xac>)
    bbe0:	701a      	strb	r2, [r3, #0]
    switch(Mode)
    bbe2:	2801      	cmp	r0, #1
    bbe4:	d036      	beq.n	bc54 <MiApp_StartConnection+0x94>
    bbe6:	2800      	cmp	r0, #0
    bbe8:	d008      	beq.n	bbfc <MiApp_StartConnection+0x3c>
    bbea:	2802      	cmp	r0, #2
    bbec:	d036      	beq.n	bc5c <MiApp_StartConnection+0x9c>
    ConfCallback(FAILURE);
    bbee:	2001      	movs	r0, #1
    bbf0:	47a0      	blx	r4
    p2pStarCurrentState = INIT_STATE;
    bbf2:	2201      	movs	r2, #1
    bbf4:	4b1d      	ldr	r3, [pc, #116]	; (bc6c <MiApp_StartConnection+0xac>)
    bbf6:	701a      	strb	r2, [r3, #0]
    return false;
    bbf8:	2200      	movs	r2, #0
    bbfa:	e7ec      	b.n	bbd6 <MiApp_StartConnection+0x16>
            uint8_t channel = 0;
    bbfc:	2200      	movs	r2, #0
    bbfe:	466b      	mov	r3, sp
    bc00:	715a      	strb	r2, [r3, #5]
            uint16_t tmp = 0xFFFF;
    bc02:	466b      	mov	r3, sp
    bc04:	1d98      	adds	r0, r3, #6
    bc06:	2301      	movs	r3, #1
    bc08:	425b      	negs	r3, r3
    bc0a:	8003      	strh	r3, [r0, #0]
            myPANID.Val = MY_PAN_ID;
    bc0c:	4918      	ldr	r1, [pc, #96]	; (bc70 <MiApp_StartConnection+0xb0>)
    bc0e:	4b19      	ldr	r3, [pc, #100]	; (bc74 <MiApp_StartConnection+0xb4>)
    bc10:	800b      	strh	r3, [r1, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    bc12:	4b19      	ldr	r3, [pc, #100]	; (bc78 <MiApp_StartConnection+0xb8>)
    bc14:	4798      	blx	r3
            while (!(index & ChannelMap))
    bc16:	07eb      	lsls	r3, r5, #31
    bc18:	d40d      	bmi.n	bc36 <MiApp_StartConnection+0x76>
    bc1a:	466b      	mov	r3, sp
    bc1c:	7959      	ldrb	r1, [r3, #5]
    bc1e:	3101      	adds	r1, #1
    bc20:	b2c9      	uxtb	r1, r1
    bc22:	2201      	movs	r2, #1
    bc24:	e000      	b.n	bc28 <MiApp_StartConnection+0x68>
    bc26:	0019      	movs	r1, r3
                index = index << 1;
    bc28:	0052      	lsls	r2, r2, #1
    bc2a:	1c4b      	adds	r3, r1, #1
    bc2c:	b2db      	uxtb	r3, r3
            while (!(index & ChannelMap))
    bc2e:	422a      	tst	r2, r5
    bc30:	d0f9      	beq.n	bc26 <MiApp_StartConnection+0x66>
    bc32:	466b      	mov	r3, sp
    bc34:	7159      	strb	r1, [r3, #5]
            MiApp_Set(CHANNEL, &channel);
    bc36:	466b      	mov	r3, sp
    bc38:	1d59      	adds	r1, r3, #5
    bc3a:	2000      	movs	r0, #0
    bc3c:	4b0f      	ldr	r3, [pc, #60]	; (bc7c <MiApp_StartConnection+0xbc>)
    bc3e:	4798      	blx	r3
        p2pStarCurrentState = IN_NETWORK_STATE;
    bc40:	2207      	movs	r2, #7
    bc42:	4b0a      	ldr	r3, [pc, #40]	; (bc6c <MiApp_StartConnection+0xac>)
    bc44:	701a      	strb	r2, [r3, #0]
        PDS_Store(MIWI_ALL_MEMORY_MEM_ID);
    bc46:	480e      	ldr	r0, [pc, #56]	; (bc80 <MiApp_StartConnection+0xc0>)
    bc48:	4b0e      	ldr	r3, [pc, #56]	; (bc84 <MiApp_StartConnection+0xc4>)
    bc4a:	4798      	blx	r3
            ConfCallback(SUCCESS);
    bc4c:	2000      	movs	r0, #0
    bc4e:	47a0      	blx	r4
            return true;
    bc50:	2201      	movs	r2, #1
    bc52:	e7c0      	b.n	bbd6 <MiApp_StartConnection+0x16>
        ConfCallback(FAILURE);
    bc54:	2001      	movs	r0, #1
    bc56:	47a0      	blx	r4
        return false;
    bc58:	2200      	movs	r2, #0
    bc5a:	e7bc      	b.n	bbd6 <MiApp_StartConnection+0x16>
            ConfCallback(FAILURE);
    bc5c:	2001      	movs	r0, #1
    bc5e:	47a0      	blx	r4
            p2pStarCurrentState = INIT_STATE;
    bc60:	2201      	movs	r2, #1
    bc62:	4b02      	ldr	r3, [pc, #8]	; (bc6c <MiApp_StartConnection+0xac>)
    bc64:	701a      	strb	r2, [r3, #0]
            return false;
    bc66:	2200      	movs	r2, #0
    bc68:	e7b5      	b.n	bbd6 <MiApp_StartConnection+0x16>
    bc6a:	46c0      	nop			; (mov r8, r8)
    bc6c:	200003f0 	.word	0x200003f0
    bc70:	20001f6c 	.word	0x20001f6c
    bc74:	00001234 	.word	0x00001234
    bc78:	0000a7d1 	.word	0x0000a7d1
    bc7c:	0000b9e5 	.word	0x0000b9e5
    bc80:	00004001 	.word	0x00004001
    bc84:	0000a471 	.word	0x0000a471

0000bc88 <MiApp_SubscribeDataIndicationCallback>:
    if (NULL != callback)
    bc88:	2800      	cmp	r0, #0
    bc8a:	d003      	beq.n	bc94 <MiApp_SubscribeDataIndicationCallback+0xc>
	    pktRxcallback = callback;
    bc8c:	4b02      	ldr	r3, [pc, #8]	; (bc98 <MiApp_SubscribeDataIndicationCallback+0x10>)
    bc8e:	6018      	str	r0, [r3, #0]
	    return true;
    bc90:	2001      	movs	r0, #1
}
    bc92:	4770      	bx	lr
    return false;
    bc94:	2000      	movs	r0, #0
    bc96:	e7fc      	b.n	bc92 <MiApp_SubscribeDataIndicationCallback+0xa>
    bc98:	200003f4 	.word	0x200003f4

0000bc9c <Total_Connections>:
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    bc9c:	4b08      	ldr	r3, [pc, #32]	; (bcc0 <Total_Connections+0x24>)
    bc9e:	681b      	ldr	r3, [r3, #0]
    bca0:	681b      	ldr	r3, [r3, #0]
    bca2:	0019      	movs	r1, r3
    bca4:	3132      	adds	r1, #50	; 0x32
    uint8_t count=0 , i;
    bca6:	2000      	movs	r0, #0
    bca8:	e002      	b.n	bcb0 <Total_Connections+0x14>
    bcaa:	330a      	adds	r3, #10
    for (i=0;i<CONNECTION_SIZE;i++)
    bcac:	428b      	cmp	r3, r1
    bcae:	d005      	beq.n	bcbc <Total_Connections+0x20>
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    bcb0:	7a1a      	ldrb	r2, [r3, #8]
    bcb2:	2a7f      	cmp	r2, #127	; 0x7f
    bcb4:	d9f9      	bls.n	bcaa <Total_Connections+0xe>
            count++;
    bcb6:	3001      	adds	r0, #1
    bcb8:	b2c0      	uxtb	r0, r0
    bcba:	e7f6      	b.n	bcaa <Total_Connections+0xe>
}
    bcbc:	4770      	bx	lr
    bcbe:	46c0      	nop			; (mov r8, r8)
    bcc0:	20001f5c 	.word	0x20001f5c

0000bcc4 <isSameAddress>:
{
    bcc4:	b510      	push	{r4, lr}
        if( Address1[i] != Address2[i] )
    bcc6:	7802      	ldrb	r2, [r0, #0]
    bcc8:	780b      	ldrb	r3, [r1, #0]
    bcca:	429a      	cmp	r2, r3
    bccc:	d109      	bne.n	bce2 <isSameAddress+0x1e>
    bcce:	2301      	movs	r3, #1
    bcd0:	5cc4      	ldrb	r4, [r0, r3]
    bcd2:	5cca      	ldrb	r2, [r1, r3]
    bcd4:	4294      	cmp	r4, r2
    bcd6:	d106      	bne.n	bce6 <isSameAddress+0x22>
    bcd8:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    bcda:	2b08      	cmp	r3, #8
    bcdc:	d1f8      	bne.n	bcd0 <isSameAddress+0xc>
    return true;
    bcde:	2001      	movs	r0, #1
}
    bce0:	bd10      	pop	{r4, pc}
            return false;
    bce2:	2000      	movs	r0, #0
    bce4:	e7fc      	b.n	bce0 <isSameAddress+0x1c>
    bce6:	2000      	movs	r0, #0
    bce8:	e7fa      	b.n	bce0 <isSameAddress+0x1c>
    bcea:	Address 0x0000bcea is out of bounds.


0000bcec <AddConnection>:
{
    bcec:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcee:	46c6      	mov	lr, r8
    bcf0:	b500      	push	{lr}
    bcf2:	b082      	sub	sp, #8
    bcf4:	9001      	str	r0, [sp, #4]
            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    bcf6:	4b32      	ldr	r3, [pc, #200]	; (bdc0 <AddConnection+0xd4>)
    bcf8:	685e      	ldr	r6, [r3, #4]
        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    bcfa:	4b32      	ldr	r3, [pc, #200]	; (bdc4 <AddConnection+0xd8>)
    bcfc:	681b      	ldr	r3, [r3, #0]
    bcfe:	681d      	ldr	r5, [r3, #0]
    uint8_t connectionSlot = 0xFF;
    bd00:	27ff      	movs	r7, #255	; 0xff
    for(i = 0; i < CONNECTION_SIZE; i++)
    bd02:	2400      	movs	r4, #0
    bd04:	e00a      	b.n	bd1c <AddConnection+0x30>
            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    bd06:	0029      	movs	r1, r5
    bd08:	0030      	movs	r0, r6
    bd0a:	4b2f      	ldr	r3, [pc, #188]	; (bdc8 <AddConnection+0xdc>)
    bd0c:	4798      	blx	r3
    bd0e:	2800      	cmp	r0, #0
    bd10:	d14c      	bne.n	bdac <AddConnection+0xc0>
    for(i = 0; i < CONNECTION_SIZE; i++)
    bd12:	3401      	adds	r4, #1
    bd14:	b2e4      	uxtb	r4, r4
    bd16:	350a      	adds	r5, #10
    bd18:	2c05      	cmp	r4, #5
    bd1a:	d006      	beq.n	bd2a <AddConnection+0x3e>
        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    bd1c:	7a2b      	ldrb	r3, [r5, #8]
    bd1e:	2b7f      	cmp	r3, #127	; 0x7f
    bd20:	d8f1      	bhi.n	bd06 <AddConnection+0x1a>
        else if( connectionSlot == 0xFF )
    bd22:	2fff      	cmp	r7, #255	; 0xff
    bd24:	d1f5      	bne.n	bd12 <AddConnection+0x26>
    bd26:	0027      	movs	r7, r4
    bd28:	e7f3      	b.n	bd12 <AddConnection+0x26>
    uint8_t status = STATUS_SUCCESS;
    bd2a:	2400      	movs	r4, #0
    if( connectionSlot == 0xFF )
    bd2c:	2fff      	cmp	r7, #255	; 0xff
    bd2e:	d040      	beq.n	bdb2 <AddConnection+0xc6>
        if( ConnMode >= ENABLE_PREV_CONN )
    bd30:	4b26      	ldr	r3, [pc, #152]	; (bdcc <AddConnection+0xe0>)
    bd32:	781b      	ldrb	r3, [r3, #0]
    bd34:	2b00      	cmp	r3, #0
    bd36:	d13d      	bne.n	bdb4 <AddConnection+0xc8>
        MyindexinPC = connectionSlot;
    bd38:	4b25      	ldr	r3, [pc, #148]	; (bdd0 <AddConnection+0xe4>)
    bd3a:	701f      	strb	r7, [r3, #0]
            miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    bd3c:	00bb      	lsls	r3, r7, #2
    bd3e:	19db      	adds	r3, r3, r7
    bd40:	005b      	lsls	r3, r3, #1
    bd42:	4698      	mov	r8, r3
    bd44:	001e      	movs	r6, r3
    bd46:	2300      	movs	r3, #0
    bd48:	4d1d      	ldr	r5, [pc, #116]	; (bdc0 <AddConnection+0xd4>)
    bd4a:	481e      	ldr	r0, [pc, #120]	; (bdc4 <AddConnection+0xd8>)
    bd4c:	686a      	ldr	r2, [r5, #4]
    bd4e:	5cd1      	ldrb	r1, [r2, r3]
    bd50:	6802      	ldr	r2, [r0, #0]
    bd52:	6812      	ldr	r2, [r2, #0]
    bd54:	18d2      	adds	r2, r2, r3
    bd56:	5591      	strb	r1, [r2, r6]
    bd58:	3301      	adds	r3, #1
        for(i = 0; i < 8; i++)
    bd5a:	2b08      	cmp	r3, #8
    bd5c:	d1f6      	bne.n	bd4c <AddConnection+0x60>
        miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].status.bits.isValid = 1;
    bd5e:	4b19      	ldr	r3, [pc, #100]	; (bdc4 <AddConnection+0xd8>)
    bd60:	681a      	ldr	r2, [r3, #0]
    bd62:	6813      	ldr	r3, [r2, #0]
    bd64:	4443      	add	r3, r8
    bd66:	7a18      	ldrb	r0, [r3, #8]
    bd68:	2180      	movs	r1, #128	; 0x80
    bd6a:	4249      	negs	r1, r1
    bd6c:	4301      	orrs	r1, r0
    bd6e:	7219      	strb	r1, [r3, #8]
        miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (capacityInfo & 0x01);
    bd70:	6813      	ldr	r3, [r2, #0]
    bd72:	4443      	add	r3, r8
    bd74:	2101      	movs	r1, #1
    bd76:	9801      	ldr	r0, [sp, #4]
    bd78:	4001      	ands	r1, r0
    bd7a:	7a1e      	ldrb	r6, [r3, #8]
    bd7c:	2001      	movs	r0, #1
    bd7e:	4386      	bics	r6, r0
    bd80:	430e      	orrs	r6, r1
    bd82:	721e      	strb	r6, [r3, #8]
                miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    bd84:	4b0e      	ldr	r3, [pc, #56]	; (bdc0 <AddConnection+0xd4>)
    bd86:	689b      	ldr	r3, [r3, #8]
    bd88:	78d9      	ldrb	r1, [r3, #3]
    bd8a:	6813      	ldr	r3, [r2, #0]
    bd8c:	4443      	add	r3, r8
    bd8e:	7259      	strb	r1, [r3, #9]
            IncomingFrameCounter[connectionSlot].Val = 0;
    bd90:	00ba      	lsls	r2, r7, #2
    bd92:	2100      	movs	r1, #0
    bd94:	4b0f      	ldr	r3, [pc, #60]	; (bdd4 <AddConnection+0xe8>)
    bd96:	50d1      	str	r1, [r2, r3]
        LatestConnection = connectionSlot;
    bd98:	4b0f      	ldr	r3, [pc, #60]	; (bdd8 <AddConnection+0xec>)
    bd9a:	701f      	strb	r7, [r3, #0]
    conn_size = Total_Connections();
    bd9c:	4b0f      	ldr	r3, [pc, #60]	; (bddc <AddConnection+0xf0>)
    bd9e:	4798      	blx	r3
    bda0:	4b0f      	ldr	r3, [pc, #60]	; (bde0 <AddConnection+0xf4>)
    bda2:	7018      	strb	r0, [r3, #0]
    PDS_Store(PDS_EDC_ID);
    bda4:	2007      	movs	r0, #7
    bda6:	4b0f      	ldr	r3, [pc, #60]	; (bde4 <AddConnection+0xf8>)
    bda8:	4798      	blx	r3
    return status;
    bdaa:	e003      	b.n	bdb4 <AddConnection+0xc8>
    bdac:	0027      	movs	r7, r4
                status = STATUS_EXISTS;
    bdae:	2401      	movs	r4, #1
    bdb0:	e7bc      	b.n	bd2c <AddConnection+0x40>
        return STATUS_NOT_ENOUGH_SPACE;
    bdb2:	24f1      	movs	r4, #241	; 0xf1
}
    bdb4:	0020      	movs	r0, r4
    bdb6:	b002      	add	sp, #8
    bdb8:	bc04      	pop	{r2}
    bdba:	4690      	mov	r8, r2
    bdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bdbe:	46c0      	nop			; (mov r8, r8)
    bdc0:	20001fc4 	.word	0x20001fc4
    bdc4:	20001f5c 	.word	0x20001f5c
    bdc8:	0000bcc5 	.word	0x0000bcc5
    bdcc:	2000000b 	.word	0x2000000b
    bdd0:	20001f90 	.word	0x20001f90
    bdd4:	20001f70 	.word	0x20001f70
    bdd8:	20001f2c 	.word	0x20001f2c
    bddc:	0000bc9d 	.word	0x0000bc9d
    bde0:	200003e6 	.word	0x200003e6
    bde4:	0000a471 	.word	0x0000a471

0000bde8 <frameTransmit>:
{
    bde8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdea:	46de      	mov	lr, fp
    bdec:	4657      	mov	r7, sl
    bdee:	464e      	mov	r6, r9
    bdf0:	4645      	mov	r5, r8
    bdf2:	b5e0      	push	{r5, r6, r7, lr}
    bdf4:	b083      	sub	sp, #12
    bdf6:	0005      	movs	r5, r0
    bdf8:	4668      	mov	r0, sp
    bdfa:	80c1      	strh	r1, [r0, #6]
    bdfc:	0017      	movs	r7, r2
    bdfe:	469a      	mov	sl, r3
    be00:	ab0c      	add	r3, sp, #48	; 0x30
    be02:	781e      	ldrb	r6, [r3, #0]
    be04:	ab0d      	add	r3, sp, #52	; 0x34
    be06:	781b      	ldrb	r3, [r3, #0]
    be08:	4698      	mov	r8, r3
    be0a:	ab0f      	add	r3, sp, #60	; 0x3c
    be0c:	781b      	ldrb	r3, [r3, #0]
    be0e:	4699      	mov	r9, r3
    be10:	ab10      	add	r3, sp, #64	; 0x40
    be12:	781b      	ldrb	r3, [r3, #0]
    be14:	469b      	mov	fp, r3
    txFramePtr = (TxFrame_t *) MiMem_Alloc(sizeof(TxFrame_t));
    be16:	2028      	movs	r0, #40	; 0x28
    be18:	4b30      	ldr	r3, [pc, #192]	; (bedc <frameTransmit+0xf4>)
    be1a:	4798      	blx	r3
    be1c:	1e04      	subs	r4, r0, #0
    if (NULL == txFramePtr)
    be1e:	d05b      	beq.n	bed8 <frameTransmit+0xf0>
    tParam->flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
    be20:	2303      	movs	r3, #3
    be22:	4652      	mov	r2, sl
    be24:	4013      	ands	r3, r2
    be26:	7603      	strb	r3, [r0, #24]
    tParam->flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
    be28:	2300      	movs	r3, #0
    be2a:	2d00      	cmp	r5, #0
    be2c:	d100      	bne.n	be30 <frameTransmit+0x48>
    be2e:	465b      	mov	r3, fp
    be30:	2201      	movs	r2, #1
    be32:	4013      	ands	r3, r2
    be34:	015b      	lsls	r3, r3, #5
    be36:	469c      	mov	ip, r3
    be38:	7e23      	ldrb	r3, [r4, #24]
    be3a:	2120      	movs	r1, #32
    be3c:	468a      	mov	sl, r1
    be3e:	438b      	bics	r3, r1
    tParam->flags.bits.broadcast = Broadcast;
    be40:	0010      	movs	r0, r2
    be42:	4028      	ands	r0, r5
    be44:	0080      	lsls	r0, r0, #2
    be46:	4661      	mov	r1, ip
    be48:	430b      	orrs	r3, r1
    be4a:	2104      	movs	r1, #4
    be4c:	438b      	bics	r3, r1
    tParam->flags.bits.secEn = SecurityEnabled;
    be4e:	4016      	ands	r6, r2
    be50:	00f6      	lsls	r6, r6, #3
    be52:	4303      	orrs	r3, r0
    be54:	2008      	movs	r0, #8
    be56:	4383      	bics	r3, r0
        tParam->altSrcAddr = 0;
    be58:	2100      	movs	r1, #0
    be5a:	3019      	adds	r0, #25
    be5c:	5421      	strb	r1, [r4, r0]
        tParam->altDestAddr = (Broadcast) ? true : false;
    be5e:	4651      	mov	r1, sl
    be60:	5465      	strb	r5, [r4, r1]
        tParam->flags.bits.destPrsnt = (Broadcast) ? 0:1;
    be62:	2101      	movs	r1, #1
    be64:	404d      	eors	r5, r1
    be66:	402a      	ands	r2, r5
    be68:	0192      	lsls	r2, r2, #6
    be6a:	431e      	orrs	r6, r3
    be6c:	2340      	movs	r3, #64	; 0x40
    be6e:	439e      	bics	r6, r3
        tParam->flags.bits.sourcePrsnt = 1;
    be70:	4332      	orrs	r2, r6
    be72:	2680      	movs	r6, #128	; 0x80
    be74:	4276      	negs	r6, r6
    be76:	4332      	orrs	r2, r6
    be78:	7622      	strb	r2, [r4, #24]
    tParam->DestAddress = DestinationAddress;
    be7a:	61e7      	str	r7, [r4, #28]
        tParam->DestPANID.Val = DestinationPANID.Val;
    be7c:	466b      	mov	r3, sp
    be7e:	88db      	ldrh	r3, [r3, #6]
    be80:	8463      	strh	r3, [r4, #34]	; 0x22
    if (NULL != DestinationAddress)
    be82:	2f00      	cmp	r7, #0
    be84:	d008      	beq.n	be98 <frameTransmit+0xb0>
        if (false == tParam->flags.bits.broadcast)
    be86:	b2d3      	uxtb	r3, r2
    be88:	075b      	lsls	r3, r3, #29
    be8a:	d41e      	bmi.n	beca <frameTransmit+0xe2>
            memcpy(&(txFramePtr->txFrameEntry.frameDstAddr), DestinationAddress, LONG_ADDR_LEN);
    be8c:	0020      	movs	r0, r4
    be8e:	3008      	adds	r0, #8
    be90:	2208      	movs	r2, #8
    be92:	0039      	movs	r1, r7
    be94:	4b12      	ldr	r3, [pc, #72]	; (bee0 <frameTransmit+0xf8>)
    be96:	4798      	blx	r3
    txFramePtr->txFrameEntry.frame = msgPtr;
    be98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    be9a:	6163      	str	r3, [r4, #20]
    tParam->DestAddress = (uint8_t*)&(txFramePtr->txFrameEntry.frameDstAddr);
    be9c:	0023      	movs	r3, r4
    be9e:	3308      	adds	r3, #8
    bea0:	61e3      	str	r3, [r4, #28]
    txFramePtr->txFrameEntry.frameConfCallback = ConfCallback;
    bea2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bea4:	6123      	str	r3, [r4, #16]
    txFramePtr->txFrameEntry.frameHandle = msghandle;
    bea6:	2325      	movs	r3, #37	; 0x25
    bea8:	464a      	mov	r2, r9
    beaa:	54e2      	strb	r2, [r4, r3]
    txFramePtr->txFrameEntry.frameLength = msgLen;
    beac:	3b01      	subs	r3, #1
    beae:	4642      	mov	r2, r8
    beb0:	54e2      	strb	r2, [r4, r3]
    miQueueAppend(&frameTxQueue, (miQueueBuffer_t *)txFramePtr);
    beb2:	0021      	movs	r1, r4
    beb4:	480b      	ldr	r0, [pc, #44]	; (bee4 <frameTransmit+0xfc>)
    beb6:	4b0c      	ldr	r3, [pc, #48]	; (bee8 <frameTransmit+0x100>)
    beb8:	4798      	blx	r3
    return true;
    beba:	2001      	movs	r0, #1
}
    bebc:	b003      	add	sp, #12
    bebe:	bc3c      	pop	{r2, r3, r4, r5}
    bec0:	4690      	mov	r8, r2
    bec2:	4699      	mov	r9, r3
    bec4:	46a2      	mov	sl, r4
    bec6:	46ab      	mov	fp, r5
    bec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(&(txFramePtr->txFrameEntry.frameDstAddr), DestinationAddress, SHORT_ADDR_LEN);
    beca:	0020      	movs	r0, r4
    becc:	3008      	adds	r0, #8
    bece:	2202      	movs	r2, #2
    bed0:	0039      	movs	r1, r7
    bed2:	4b03      	ldr	r3, [pc, #12]	; (bee0 <frameTransmit+0xf8>)
    bed4:	4798      	blx	r3
    bed6:	e7df      	b.n	be98 <frameTransmit+0xb0>
        return false;
    bed8:	2000      	movs	r0, #0
    beda:	e7ef      	b.n	bebc <frameTransmit+0xd4>
    bedc:	0000c645 	.word	0x0000c645
    bee0:	00010caf 	.word	0x00010caf
    bee4:	20001f84 	.word	0x20001f84
    bee8:	0000c821 	.word	0x0000c821

0000beec <sendConnectionRequest>:
{
    beec:	b510      	push	{r4, lr}
    beee:	b086      	sub	sp, #24
    if ((gEstConnectionInfo.connectionRetries > 0) &&  (ESTABLISHING_NETWORK ==  p2pStarCurrentState))
    bef0:	4b26      	ldr	r3, [pc, #152]	; (bf8c <sendConnectionRequest+0xa0>)
    bef2:	78db      	ldrb	r3, [r3, #3]
    bef4:	2b00      	cmp	r3, #0
    bef6:	d111      	bne.n	bf1c <sendConnectionRequest+0x30>
        if ((gEstConnectionInfo.status == ALREADY_EXISTS) || (gEstConnectionInfo.status == SUCCESS))
    bef8:	4b24      	ldr	r3, [pc, #144]	; (bf8c <sendConnectionRequest+0xa0>)
    befa:	7858      	ldrb	r0, [r3, #1]
    befc:	2806      	cmp	r0, #6
    befe:	d001      	beq.n	bf04 <sendConnectionRequest+0x18>
    bf00:	2800      	cmp	r0, #0
    bf02:	d136      	bne.n	bf72 <sendConnectionRequest+0x86>
            p2pStarCurrentState = IN_NETWORK_STATE;
    bf04:	2207      	movs	r2, #7
    bf06:	4b22      	ldr	r3, [pc, #136]	; (bf90 <sendConnectionRequest+0xa4>)
    bf08:	701a      	strb	r2, [r3, #0]
            gEstConnectionInfo.confCallback(gEstConnectionInfo.status);
    bf0a:	4b20      	ldr	r3, [pc, #128]	; (bf8c <sendConnectionRequest+0xa0>)
    bf0c:	68db      	ldr	r3, [r3, #12]
    bf0e:	4798      	blx	r3
        gEstConnectionInfo.confCallback = NULL;
    bf10:	2200      	movs	r2, #0
    bf12:	4b1e      	ldr	r3, [pc, #120]	; (bf8c <sendConnectionRequest+0xa0>)
    bf14:	60da      	str	r2, [r3, #12]
        return TIMER_EXPIRED;
    bf16:	2004      	movs	r0, #4
}
    bf18:	b006      	add	sp, #24
    bf1a:	bd10      	pop	{r4, pc}
    if ((gEstConnectionInfo.connectionRetries > 0) &&  (ESTABLISHING_NETWORK ==  p2pStarCurrentState))
    bf1c:	4b1c      	ldr	r3, [pc, #112]	; (bf90 <sendConnectionRequest+0xa4>)
    bf1e:	781b      	ldrb	r3, [r3, #0]
    bf20:	2b04      	cmp	r3, #4
    bf22:	d1e9      	bne.n	bef8 <sendConnectionRequest+0xc>
        dataPtr = MiMem_Alloc(PACKETLEN_P2P_CONNECTION_REQUEST);
    bf24:	2005      	movs	r0, #5
    bf26:	4b1b      	ldr	r3, [pc, #108]	; (bf94 <sendConnectionRequest+0xa8>)
    bf28:	4798      	blx	r3
        if (NULL == dataPtr)
    bf2a:	2800      	cmp	r0, #0
    bf2c:	d029      	beq.n	bf82 <sendConnectionRequest+0x96>
        dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    bf2e:	2381      	movs	r3, #129	; 0x81
    bf30:	7003      	strb	r3, [r0, #0]
        dataPtr[dataLen++] = currentChannel;
    bf32:	4b19      	ldr	r3, [pc, #100]	; (bf98 <sendConnectionRequest+0xac>)
    bf34:	781b      	ldrb	r3, [r3, #0]
    bf36:	7043      	strb	r3, [r0, #1]
        dataPtr[dataLen++] = P2PCapacityInfo;
    bf38:	4b18      	ldr	r3, [pc, #96]	; (bf9c <sendConnectionRequest+0xb0>)
    bf3a:	781b      	ldrb	r3, [r3, #0]
    bf3c:	7083      	strb	r3, [r0, #2]
            dataPtr[dataLen++] = miwiDefaultRomOrRamParams->AdditionalNodeID[i];
    bf3e:	4b18      	ldr	r3, [pc, #96]	; (bfa0 <sendConnectionRequest+0xb4>)
    bf40:	681b      	ldr	r3, [r3, #0]
    bf42:	689b      	ldr	r3, [r3, #8]
    bf44:	781b      	ldrb	r3, [r3, #0]
    bf46:	70c3      	strb	r3, [r0, #3]
        if(frameTransmit(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, connReqConfCallback))
    bf48:	4b16      	ldr	r3, [pc, #88]	; (bfa4 <sendConnectionRequest+0xb8>)
    bf4a:	8819      	ldrh	r1, [r3, #0]
    bf4c:	4b16      	ldr	r3, [pc, #88]	; (bfa8 <sendConnectionRequest+0xbc>)
    bf4e:	9305      	str	r3, [sp, #20]
    bf50:	2301      	movs	r3, #1
    bf52:	9304      	str	r3, [sp, #16]
    bf54:	2300      	movs	r3, #0
    bf56:	9303      	str	r3, [sp, #12]
    bf58:	9002      	str	r0, [sp, #8]
    bf5a:	2204      	movs	r2, #4
    bf5c:	9201      	str	r2, [sp, #4]
    bf5e:	9300      	str	r3, [sp, #0]
    bf60:	3301      	adds	r3, #1
    bf62:	2200      	movs	r2, #0
    bf64:	2001      	movs	r0, #1
    bf66:	4c11      	ldr	r4, [pc, #68]	; (bfac <sendConnectionRequest+0xc0>)
    bf68:	47a0      	blx	r4
    bf6a:	2800      	cmp	r0, #0
    bf6c:	d10b      	bne.n	bf86 <sendConnectionRequest+0x9a>
            return MEMORY_UNAVAILABLE;
    bf6e:	300a      	adds	r0, #10
    bf70:	e7d2      	b.n	bf18 <sendConnectionRequest+0x2c>
            p2pStarCurrentState = gEstConnectionInfo.backupState;
    bf72:	4b06      	ldr	r3, [pc, #24]	; (bf8c <sendConnectionRequest+0xa0>)
    bf74:	7899      	ldrb	r1, [r3, #2]
    bf76:	4a06      	ldr	r2, [pc, #24]	; (bf90 <sendConnectionRequest+0xa4>)
    bf78:	7011      	strb	r1, [r2, #0]
            gEstConnectionInfo.confCallback(FAILURE);
    bf7a:	68db      	ldr	r3, [r3, #12]
    bf7c:	2001      	movs	r0, #1
    bf7e:	4798      	blx	r3
    bf80:	e7c6      	b.n	bf10 <sendConnectionRequest+0x24>
          return MEMORY_UNAVAILABLE;
    bf82:	200a      	movs	r0, #10
    bf84:	e7c8      	b.n	bf18 <sendConnectionRequest+0x2c>
            return SUCCESS;
    bf86:	2000      	movs	r0, #0
    bf88:	e7c6      	b.n	bf18 <sendConnectionRequest+0x2c>
    bf8a:	46c0      	nop			; (mov r8, r8)
    bf8c:	20001f98 	.word	0x20001f98
    bf90:	200003f0 	.word	0x200003f0
    bf94:	0000c645 	.word	0x0000c645
    bf98:	2000000d 	.word	0x2000000d
    bf9c:	2000000c 	.word	0x2000000c
    bfa0:	20001f5c 	.word	0x20001f5c
    bfa4:	20001f6c 	.word	0x20001f6c
    bfa8:	0000bfd9 	.word	0x0000bfd9
    bfac:	0000bde9 	.word	0x0000bde9

0000bfb0 <protocolTimerHandler>:
{
    bfb0:	b510      	push	{r4, lr}
    if((0 != connectionTimeInterval) && ((--connectionTimeInterval) == 0))
    bfb2:	4b07      	ldr	r3, [pc, #28]	; (bfd0 <protocolTimerHandler+0x20>)
    bfb4:	881b      	ldrh	r3, [r3, #0]
    bfb6:	2b00      	cmp	r3, #0
    bfb8:	d005      	beq.n	bfc6 <protocolTimerHandler+0x16>
    bfba:	3b01      	subs	r3, #1
    bfbc:	b29b      	uxth	r3, r3
    bfbe:	4a04      	ldr	r2, [pc, #16]	; (bfd0 <protocolTimerHandler+0x20>)
    bfc0:	8013      	strh	r3, [r2, #0]
    bfc2:	2b00      	cmp	r3, #0
    bfc4:	d000      	beq.n	bfc8 <protocolTimerHandler+0x18>
}
    bfc6:	bd10      	pop	{r4, pc}
        sendConnectionRequest();
    bfc8:	4b02      	ldr	r3, [pc, #8]	; (bfd4 <protocolTimerHandler+0x24>)
    bfca:	4798      	blx	r3
}
    bfcc:	e7fb      	b.n	bfc6 <protocolTimerHandler+0x16>
    bfce:	46c0      	nop			; (mov r8, r8)
    bfd0:	200003e8 	.word	0x200003e8
    bfd4:	0000beed 	.word	0x0000beed

0000bfd8 <connReqConfCallback>:
{
    bfd8:	b510      	push	{r4, lr}
    bfda:	000c      	movs	r4, r1
    MiMem_Free(msgPointer);
    bfdc:	0010      	movs	r0, r2
    bfde:	4b07      	ldr	r3, [pc, #28]	; (bffc <connReqConfCallback+0x24>)
    bfe0:	4798      	blx	r3
    --gEstConnectionInfo.connectionRetries;
    bfe2:	4a07      	ldr	r2, [pc, #28]	; (c000 <connReqConfCallback+0x28>)
    bfe4:	78d3      	ldrb	r3, [r2, #3]
    bfe6:	3b01      	subs	r3, #1
    bfe8:	70d3      	strb	r3, [r2, #3]
    if (SUCCESS == status)
    bfea:	2c00      	cmp	r4, #0
    bfec:	d103      	bne.n	bff6 <connReqConfCallback+0x1e>
        connectionTimeInterval = CONNECTION_INTERVAL;
    bfee:	2202      	movs	r2, #2
    bff0:	4b04      	ldr	r3, [pc, #16]	; (c004 <connReqConfCallback+0x2c>)
    bff2:	801a      	strh	r2, [r3, #0]
}
    bff4:	bd10      	pop	{r4, pc}
        sendConnectionRequest();
    bff6:	4b04      	ldr	r3, [pc, #16]	; (c008 <connReqConfCallback+0x30>)
    bff8:	4798      	blx	r3
}
    bffa:	e7fb      	b.n	bff4 <connReqConfCallback+0x1c>
    bffc:	0000c701 	.word	0x0000c701
    c000:	20001f98 	.word	0x20001f98
    c004:	200003e8 	.word	0x200003e8
    c008:	0000beed 	.word	0x0000beed

0000c00c <MiApp_EstablishConnection>:
{
    c00c:	b570      	push	{r4, r5, r6, lr}
    c00e:	b082      	sub	sp, #8
    c010:	0016      	movs	r6, r2
    c012:	466b      	mov	r3, sp
    c014:	71d8      	strb	r0, [r3, #7]
    if (p2pStarCurrentState == INITIAL_STATE)
    c016:	4b11      	ldr	r3, [pc, #68]	; (c05c <MiApp_EstablishConnection+0x50>)
    c018:	781d      	ldrb	r5, [r3, #0]
        return 0;
    c01a:	2000      	movs	r0, #0
    if (p2pStarCurrentState == INITIAL_STATE)
    c01c:	2d00      	cmp	r5, #0
    c01e:	d101      	bne.n	c024 <MiApp_EstablishConnection+0x18>
}
    c020:	b002      	add	sp, #8
    c022:	bd70      	pop	{r4, r5, r6, pc}
    ConnMode = ENABLE_ALL_CONN;
    c024:	2200      	movs	r2, #0
    c026:	4b0e      	ldr	r3, [pc, #56]	; (c060 <MiApp_EstablishConnection+0x54>)
    c028:	701a      	strb	r2, [r3, #0]
    gEstConnectionInfo.confCallback = ConfCallback;
    c02a:	4c0e      	ldr	r4, [pc, #56]	; (c064 <MiApp_EstablishConnection+0x58>)
    c02c:	9b06      	ldr	r3, [sp, #24]
    c02e:	60e3      	str	r3, [r4, #12]
    gEstConnectionInfo.addrLen = addr_len;
    c030:	7021      	strb	r1, [r4, #0]
    memcpy(gEstConnectionInfo.address, addr, addr_len);
    c032:	1d20      	adds	r0, r4, #4
    c034:	000a      	movs	r2, r1
    c036:	0031      	movs	r1, r6
    c038:	4b0b      	ldr	r3, [pc, #44]	; (c068 <MiApp_EstablishConnection+0x5c>)
    c03a:	4798      	blx	r3
    gEstConnectionInfo.backupState = p2pStarCurrentState;
    c03c:	70a5      	strb	r5, [r4, #2]
	gEstConnectionInfo.status = SCAN_NO_BEACON;
    c03e:	2308      	movs	r3, #8
    c040:	7063      	strb	r3, [r4, #1]
    gEstConnectionInfo.connectionRetries = CONNECTION_RETRY_TIMES;
    c042:	3b05      	subs	r3, #5
    c044:	70e3      	strb	r3, [r4, #3]
    p2pStarCurrentState = ESTABLISHING_NETWORK;
    c046:	2204      	movs	r2, #4
    c048:	4b04      	ldr	r3, [pc, #16]	; (c05c <MiApp_EstablishConnection+0x50>)
    c04a:	701a      	strb	r2, [r3, #0]
    MiApp_Set(CHANNEL, &Channel);
    c04c:	466b      	mov	r3, sp
    c04e:	1dd9      	adds	r1, r3, #7
    c050:	2000      	movs	r0, #0
    c052:	4b06      	ldr	r3, [pc, #24]	; (c06c <MiApp_EstablishConnection+0x60>)
    c054:	4798      	blx	r3
    return sendConnectionRequest();
    c056:	4b06      	ldr	r3, [pc, #24]	; (c070 <MiApp_EstablishConnection+0x64>)
    c058:	4798      	blx	r3
    c05a:	e7e1      	b.n	c020 <MiApp_EstablishConnection+0x14>
    c05c:	200003f0 	.word	0x200003f0
    c060:	2000000b 	.word	0x2000000b
    c064:	20001f98 	.word	0x20001f98
    c068:	00010caf 	.word	0x00010caf
    c06c:	0000b9e5 	.word	0x0000b9e5
    c070:	0000beed 	.word	0x0000beed

0000c074 <MiApp_SendData>:
{
    c074:	b5f0      	push	{r4, r5, r6, r7, lr}
    c076:	46de      	mov	lr, fp
    c078:	4657      	mov	r7, sl
    c07a:	464e      	mov	r6, r9
    c07c:	b5c0      	push	{r6, r7, lr}
    c07e:	b088      	sub	sp, #32
    c080:	9106      	str	r1, [sp, #24]
    c082:	0014      	movs	r4, r2
    c084:	9307      	str	r3, [sp, #28]
    c086:	ab10      	add	r3, sp, #64	; 0x40
    c088:	781f      	ldrb	r7, [r3, #0]
    c08a:	ab11      	add	r3, sp, #68	; 0x44
    c08c:	781e      	ldrb	r6, [r3, #0]
	if (IN_NETWORK_STATE == p2pStarCurrentState &&  MAX_PAYLOAD >= msglen)
    c08e:	4b39      	ldr	r3, [pc, #228]	; (c174 <MiApp_SendData+0x100>)
    c090:	781a      	ldrb	r2, [r3, #0]
	return true;
    c092:	2301      	movs	r3, #1
	if (IN_NETWORK_STATE == p2pStarCurrentState &&  MAX_PAYLOAD >= msglen)
    c094:	2a07      	cmp	r2, #7
    c096:	d006      	beq.n	c0a6 <MiApp_SendData+0x32>
}
    c098:	0018      	movs	r0, r3
    c09a:	b008      	add	sp, #32
    c09c:	bc1c      	pop	{r2, r3, r4}
    c09e:	4691      	mov	r9, r2
    c0a0:	469a      	mov	sl, r3
    c0a2:	46a3      	mov	fp, r4
    c0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (IN_NETWORK_STATE == p2pStarCurrentState &&  MAX_PAYLOAD >= msglen)
    c0a6:	2c4c      	cmp	r4, #76	; 0x4c
    c0a8:	d8f6      	bhi.n	c098 <MiApp_SendData+0x24>
	    if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    c0aa:	2802      	cmp	r0, #2
    c0ac:	d02e      	beq.n	c10c <MiApp_SendData+0x98>
		dataFramePtr = (P2PStarDataFrame_t *)MiMem_Alloc(sizeof(P2PStarDataFrame_t));
    c0ae:	2068      	movs	r0, #104	; 0x68
    c0b0:	4b31      	ldr	r3, [pc, #196]	; (c178 <MiApp_SendData+0x104>)
    c0b2:	4798      	blx	r3
    c0b4:	1e05      	subs	r5, r0, #0
		if (NULL == dataFramePtr)
    c0b6:	d05b      	beq.n	c170 <MiApp_SendData+0xfc>
		dataFramePtr->dataFrame.confCallback = ConfCallback;
    c0b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c0ba:	6043      	str	r3, [r0, #4]
		memcpy(&(dataFramePtr->dataFrame.destAddress), addr, MY_ADDRESS_LENGTH);
    c0bc:	3008      	adds	r0, #8
    c0be:	2208      	movs	r2, #8
    c0c0:	9906      	ldr	r1, [sp, #24]
    c0c2:	4b2e      	ldr	r3, [pc, #184]	; (c17c <MiApp_SendData+0x108>)
    c0c4:	469b      	mov	fp, r3
    c0c6:	4798      	blx	r3
		dataFramePtr->dataFrame.msghandle = msghandle;
    c0c8:	752f      	strb	r7, [r5, #20]
		dataFramePtr->dataFrame.msgLength = msglen;
    c0ca:	756c      	strb	r4, [r5, #21]
		dataFramePtr->dataFrame.timeout = 0;
    c0cc:	2300      	movs	r3, #0
    c0ce:	4699      	mov	r9, r3
    c0d0:	742b      	strb	r3, [r5, #16]
		dataFramePtr->dataFrame.ackReq = ackReq;
    c0d2:	746e      	strb	r6, [r5, #17]
		memcpy(&(dataFramePtr->dataFrame.msg), msgpointer, msglen);
    c0d4:	2316      	movs	r3, #22
    c0d6:	469a      	mov	sl, r3
    c0d8:	44aa      	add	sl, r5
    c0da:	0022      	movs	r2, r4
    c0dc:	9907      	ldr	r1, [sp, #28]
    c0de:	4650      	mov	r0, sl
    c0e0:	47d8      	blx	fp
		frameTransmit(broadcast, myPANID, addr, false, false, msglen, dataFramePtr->dataFrame.msg, msghandle, ackReq, macAckOnlyDataCallback);
    c0e2:	4b27      	ldr	r3, [pc, #156]	; (c180 <MiApp_SendData+0x10c>)
    c0e4:	8819      	ldrh	r1, [r3, #0]
    c0e6:	4b27      	ldr	r3, [pc, #156]	; (c184 <MiApp_SendData+0x110>)
    c0e8:	9305      	str	r3, [sp, #20]
    c0ea:	9604      	str	r6, [sp, #16]
    c0ec:	9703      	str	r7, [sp, #12]
    c0ee:	4653      	mov	r3, sl
    c0f0:	9302      	str	r3, [sp, #8]
    c0f2:	9401      	str	r4, [sp, #4]
    c0f4:	464b      	mov	r3, r9
    c0f6:	9300      	str	r3, [sp, #0]
    c0f8:	9a06      	ldr	r2, [sp, #24]
    c0fa:	2000      	movs	r0, #0
    c0fc:	4c22      	ldr	r4, [pc, #136]	; (c188 <MiApp_SendData+0x114>)
    c0fe:	47a0      	blx	r4
		miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c100:	0029      	movs	r1, r5
    c102:	4822      	ldr	r0, [pc, #136]	; (c18c <MiApp_SendData+0x118>)
    c104:	4b22      	ldr	r3, [pc, #136]	; (c190 <MiApp_SendData+0x11c>)
    c106:	4798      	blx	r3
	return true;
    c108:	2301      	movs	r3, #1
    c10a:	e7c5      	b.n	c098 <MiApp_SendData+0x24>
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);
    c10c:	784a      	ldrb	r2, [r1, #1]
    c10e:	0212      	lsls	r2, r2, #8
    c110:	780b      	ldrb	r3, [r1, #0]
    c112:	189b      	adds	r3, r3, r2
	    if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    c114:	b29b      	uxth	r3, r3
    c116:	4a1f      	ldr	r2, [pc, #124]	; (c194 <MiApp_SendData+0x120>)
    c118:	4293      	cmp	r3, r2
    c11a:	d1c8      	bne.n	c0ae <MiApp_SendData+0x3a>
			dataFramePtr = (P2PStarDataFrame_t *)MiMem_Alloc(sizeof(P2PStarDataFrame_t));
    c11c:	3066      	adds	r0, #102	; 0x66
    c11e:	4b16      	ldr	r3, [pc, #88]	; (c178 <MiApp_SendData+0x104>)
    c120:	4798      	blx	r3
    c122:	1e05      	subs	r5, r0, #0
			if (NULL == dataFramePtr)
    c124:	d022      	beq.n	c16c <MiApp_SendData+0xf8>
			dataFramePtr->dataFrame.confCallback = ConfCallback;
    c126:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c128:	6043      	str	r3, [r0, #4]
			dataFramePtr->dataFrame.msghandle = msghandle;
    c12a:	7507      	strb	r7, [r0, #20]
			dataFramePtr->dataFrame.msgLength = msglen;
    c12c:	7544      	strb	r4, [r0, #21]
			dataFramePtr->dataFrame.timeout = 0;
    c12e:	2600      	movs	r6, #0
    c130:	7406      	strb	r6, [r0, #16]
			memcpy(&(dataFramePtr->dataFrame.msg), msgpointer, msglen);
    c132:	2316      	movs	r3, #22
    c134:	4699      	mov	r9, r3
    c136:	4481      	add	r9, r0
    c138:	0022      	movs	r2, r4
    c13a:	9907      	ldr	r1, [sp, #28]
    c13c:	4648      	mov	r0, r9
    c13e:	4b0f      	ldr	r3, [pc, #60]	; (c17c <MiApp_SendData+0x108>)
    c140:	4798      	blx	r3
			frameTransmit(broadcast, myPANID, addr, false, false, msglen, dataFramePtr->dataFrame.msg, msghandle, 0, macAckOnlyDataCallback);
    c142:	4b0f      	ldr	r3, [pc, #60]	; (c180 <MiApp_SendData+0x10c>)
    c144:	8819      	ldrh	r1, [r3, #0]
    c146:	4b0f      	ldr	r3, [pc, #60]	; (c184 <MiApp_SendData+0x110>)
    c148:	9305      	str	r3, [sp, #20]
    c14a:	9604      	str	r6, [sp, #16]
    c14c:	9703      	str	r7, [sp, #12]
    c14e:	464b      	mov	r3, r9
    c150:	9302      	str	r3, [sp, #8]
    c152:	9401      	str	r4, [sp, #4]
    c154:	9600      	str	r6, [sp, #0]
    c156:	2300      	movs	r3, #0
    c158:	9a06      	ldr	r2, [sp, #24]
    c15a:	2001      	movs	r0, #1
    c15c:	4c0a      	ldr	r4, [pc, #40]	; (c188 <MiApp_SendData+0x114>)
    c15e:	47a0      	blx	r4
			miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c160:	0029      	movs	r1, r5
    c162:	480a      	ldr	r0, [pc, #40]	; (c18c <MiApp_SendData+0x118>)
    c164:	4b0a      	ldr	r3, [pc, #40]	; (c190 <MiApp_SendData+0x11c>)
    c166:	4798      	blx	r3
			return true;
    c168:	2301      	movs	r3, #1
    c16a:	e795      	b.n	c098 <MiApp_SendData+0x24>
				return false;
    c16c:	2300      	movs	r3, #0
    c16e:	e793      	b.n	c098 <MiApp_SendData+0x24>
			return false;
    c170:	2300      	movs	r3, #0
    c172:	e791      	b.n	c098 <MiApp_SendData+0x24>
    c174:	200003f0 	.word	0x200003f0
    c178:	0000c645 	.word	0x0000c645
    c17c:	00010caf 	.word	0x00010caf
    c180:	20001f6c 	.word	0x20001f6c
    c184:	0000b9a9 	.word	0x0000b9a9
    c188:	0000bde9 	.word	0x0000bde9
    c18c:	20001f30 	.word	0x20001f30
    c190:	0000c821 	.word	0x0000c821
    c194:	0000ffff 	.word	0x0000ffff

0000c198 <P2PTasks>:
{
    c198:	b5f0      	push	{r4, r5, r6, r7, lr}
    c19a:	b08b      	sub	sp, #44	; 0x2c
    currentTick.Val = MiWi_TickGet();
    c19c:	4bc8      	ldr	r3, [pc, #800]	; (c4c0 <P2PTasks+0x328>)
    c19e:	4798      	blx	r3
    c1a0:	0004      	movs	r4, r0
    if (frameTxQueue.size && txCallbackReceived && (MiWi_TickGetDiff(currentTick, lastTxFrameTick) > (transaction_duration_us)))
    c1a2:	4bc8      	ldr	r3, [pc, #800]	; (c4c4 <P2PTasks+0x32c>)
    c1a4:	7a1b      	ldrb	r3, [r3, #8]
    c1a6:	2b00      	cmp	r3, #0
    c1a8:	d003      	beq.n	c1b2 <P2PTasks+0x1a>
    c1aa:	4bc7      	ldr	r3, [pc, #796]	; (c4c8 <P2PTasks+0x330>)
    c1ac:	781b      	ldrb	r3, [r3, #0]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	d109      	bne.n	c1c6 <P2PTasks+0x2e>
    if(MiMAC_ReceivedPacket())
    c1b2:	4bc6      	ldr	r3, [pc, #792]	; (c4cc <P2PTasks+0x334>)
    c1b4:	4798      	blx	r3
    c1b6:	2800      	cmp	r0, #0
    c1b8:	d135      	bne.n	c226 <P2PTasks+0x8e>
    MiMAC_Task();
    c1ba:	4bc5      	ldr	r3, [pc, #788]	; (c4d0 <P2PTasks+0x338>)
    c1bc:	4798      	blx	r3
    SYS_TimerTaskHandler();
    c1be:	4bc5      	ldr	r3, [pc, #788]	; (c4d4 <P2PTasks+0x33c>)
    c1c0:	4798      	blx	r3
}
    c1c2:	b00b      	add	sp, #44	; 0x2c
    c1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (frameTxQueue.size && txCallbackReceived && (MiWi_TickGetDiff(currentTick, lastTxFrameTick) > (transaction_duration_us)))
    c1c6:	4bc4      	ldr	r3, [pc, #784]	; (c4d8 <P2PTasks+0x340>)
    c1c8:	6819      	ldr	r1, [r3, #0]
    c1ca:	4bc4      	ldr	r3, [pc, #784]	; (c4dc <P2PTasks+0x344>)
    c1cc:	4798      	blx	r3
    c1ce:	4bc4      	ldr	r3, [pc, #784]	; (c4e0 <P2PTasks+0x348>)
    c1d0:	681b      	ldr	r3, [r3, #0]
    c1d2:	4298      	cmp	r0, r3
    c1d4:	d9ed      	bls.n	c1b2 <P2PTasks+0x1a>
        txFramePtr =  (TxFrame_t *)miQueueRemove(&frameTxQueue, NULL);
    c1d6:	2100      	movs	r1, #0
    c1d8:	48ba      	ldr	r0, [pc, #744]	; (c4c4 <P2PTasks+0x32c>)
    c1da:	4bc2      	ldr	r3, [pc, #776]	; (c4e4 <P2PTasks+0x34c>)
    c1dc:	4798      	blx	r3
    c1de:	1e05      	subs	r5, r0, #0
        if (NULL != txFramePtr)
    c1e0:	d0e7      	beq.n	c1b2 <P2PTasks+0x1a>
            sentFrame = txFramePtr;
    c1e2:	4bc1      	ldr	r3, [pc, #772]	; (c4e8 <P2PTasks+0x350>)
    c1e4:	6018      	str	r0, [r3, #0]
            if ( (txFramePtr->txFrameEntry.frameLength + MAC_OVERHEAD + PHY_OVERHEAD) > aMaxSIFSFrameSize)
    c1e6:	2324      	movs	r3, #36	; 0x24
    c1e8:	5cc3      	ldrb	r3, [r0, r3]
    c1ea:	331c      	adds	r3, #28
                transaction_duration_sym = macMinLIFSPeriod_def;
    c1ec:	2028      	movs	r0, #40	; 0x28
            if ( (txFramePtr->txFrameEntry.frameLength + MAC_OVERHEAD + PHY_OVERHEAD) > aMaxSIFSFrameSize)
    c1ee:	2b12      	cmp	r3, #18
    c1f0:	dc00      	bgt.n	c1f4 <P2PTasks+0x5c>
                transaction_duration_sym = macMinSIFSPeriod_def;
    c1f2:	381c      	subs	r0, #28
            transaction_duration_us = MiMAC_SymbolToTicks(transaction_duration_sym);
    c1f4:	3020      	adds	r0, #32
    c1f6:	4bbd      	ldr	r3, [pc, #756]	; (c4ec <P2PTasks+0x354>)
    c1f8:	4798      	blx	r3
    c1fa:	4bb9      	ldr	r3, [pc, #740]	; (c4e0 <P2PTasks+0x348>)
    c1fc:	6018      	str	r0, [r3, #0]
            lastTxFrameTick = currentTick;
    c1fe:	4bb6      	ldr	r3, [pc, #728]	; (c4d8 <P2PTasks+0x340>)
    c200:	601c      	str	r4, [r3, #0]
            MiMAC_SendPacket(txFramePtr->txFrameEntry.frameParam, txFramePtr->txFrameEntry.frame,
    c202:	696b      	ldr	r3, [r5, #20]
    c204:	4aba      	ldr	r2, [pc, #744]	; (c4f0 <P2PTasks+0x358>)
    c206:	9202      	str	r2, [sp, #8]
    c208:	2225      	movs	r2, #37	; 0x25
    c20a:	5caa      	ldrb	r2, [r5, r2]
    c20c:	9201      	str	r2, [sp, #4]
    c20e:	2224      	movs	r2, #36	; 0x24
    c210:	5caa      	ldrb	r2, [r5, r2]
    c212:	9200      	str	r2, [sp, #0]
    c214:	69a8      	ldr	r0, [r5, #24]
    c216:	69e9      	ldr	r1, [r5, #28]
    c218:	6a2a      	ldr	r2, [r5, #32]
    c21a:	4cb6      	ldr	r4, [pc, #728]	; (c4f4 <P2PTasks+0x35c>)
    c21c:	47a0      	blx	r4
            txCallbackReceived = false;
    c21e:	2200      	movs	r2, #0
    c220:	4ba9      	ldr	r3, [pc, #676]	; (c4c8 <P2PTasks+0x330>)
    c222:	701a      	strb	r2, [r3, #0]
    c224:	e7c5      	b.n	c1b2 <P2PTasks+0x1a>
    rxMessage.flags.bits.broadcast = MACRxPacket.flags.bits.broadcast;
    c226:	4bb4      	ldr	r3, [pc, #720]	; (c4f8 <P2PTasks+0x360>)
    c228:	7819      	ldrb	r1, [r3, #0]
    c22a:	074a      	lsls	r2, r1, #29
    rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    c22c:	08cc      	lsrs	r4, r1, #3
    c22e:	2001      	movs	r0, #1
    c230:	4004      	ands	r4, r0
    c232:	00e4      	lsls	r4, r4, #3
    c234:	0fd2      	lsrs	r2, r2, #31
    rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    c236:	2303      	movs	r3, #3
    c238:	400b      	ands	r3, r1
    c23a:	3b01      	subs	r3, #1
    c23c:	425e      	negs	r6, r3
    c23e:	415e      	adcs	r6, r3
    c240:	0033      	movs	r3, r6
    c242:	4003      	ands	r3, r0
    c244:	015b      	lsls	r3, r3, #5
    c246:	4322      	orrs	r2, r4
    rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    c248:	09cc      	lsrs	r4, r1, #7
    c24a:	4020      	ands	r0, r4
    c24c:	0180      	lsls	r0, r0, #6
    c24e:	4313      	orrs	r3, r2
    c250:	4303      	orrs	r3, r0
    c252:	4aaa      	ldr	r2, [pc, #680]	; (c4fc <P2PTasks+0x364>)
    c254:	7013      	strb	r3, [r2, #0]
    if( MACRxPacket.flags.bits.sourcePrsnt )
    c256:	b249      	sxtb	r1, r1
    c258:	2900      	cmp	r1, #0
    c25a:	db19      	blt.n	c290 <P2PTasks+0xf8>
    rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    c25c:	4aa6      	ldr	r2, [pc, #664]	; (c4f8 <P2PTasks+0x360>)
    c25e:	8a14      	ldrh	r4, [r2, #16]
    c260:	4ba6      	ldr	r3, [pc, #664]	; (c4fc <P2PTasks+0x364>)
    c262:	805c      	strh	r4, [r3, #2]
    rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    c264:	7b10      	ldrb	r0, [r2, #12]
    c266:	7318      	strb	r0, [r3, #12]
    rxMessage.Payload = MACRxPacket.Payload;
    c268:	6891      	ldr	r1, [r2, #8]
    c26a:	6099      	str	r1, [r3, #8]
    rxMessage.PacketLQI = MACRxPacket.LQIValue;
    c26c:	7b95      	ldrb	r5, [r2, #14]
    c26e:	739d      	strb	r5, [r3, #14]
    rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    c270:	7b52      	ldrb	r2, [r2, #13]
    c272:	735a      	strb	r2, [r3, #13]
    if( rxMessage.flags.bits.command )
    c274:	781b      	ldrb	r3, [r3, #0]
    c276:	069b      	lsls	r3, r3, #26
    c278:	d400      	bmi.n	c27c <P2PTasks+0xe4>
    c27a:	e19d      	b.n	c5b8 <P2PTasks+0x420>
        switch( rxMessage.Payload[0] )
    c27c:	780b      	ldrb	r3, [r1, #0]
    c27e:	337f      	adds	r3, #127	; 0x7f
    c280:	b2da      	uxtb	r2, r3
    c282:	2a16      	cmp	r2, #22
    c284:	d900      	bls.n	c288 <P2PTasks+0xf0>
    c286:	e19b      	b.n	c5c0 <P2PTasks+0x428>
    c288:	0093      	lsls	r3, r2, #2
    c28a:	4a9d      	ldr	r2, [pc, #628]	; (c500 <P2PTasks+0x368>)
    c28c:	58d3      	ldr	r3, [r2, r3]
    c28e:	469f      	mov	pc, r3
        rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    c290:	4b99      	ldr	r3, [pc, #612]	; (c4f8 <P2PTasks+0x360>)
    c292:	685a      	ldr	r2, [r3, #4]
    c294:	4b99      	ldr	r3, [pc, #612]	; (c4fc <P2PTasks+0x364>)
    c296:	605a      	str	r2, [r3, #4]
    c298:	e7e0      	b.n	c25c <P2PTasks+0xc4>
                if( ConnMode > ENABLE_PREV_CONN )
    c29a:	4b9a      	ldr	r3, [pc, #616]	; (c504 <P2PTasks+0x36c>)
    c29c:	781b      	ldrb	r3, [r3, #0]
    c29e:	2b01      	cmp	r3, #1
    c2a0:	d900      	bls.n	c2a4 <P2PTasks+0x10c>
    c2a2:	e18d      	b.n	c5c0 <P2PTasks+0x428>
                if( currentChannel != rxMessage.Payload[1] )
    c2a4:	784a      	ldrb	r2, [r1, #1]
    c2a6:	4b98      	ldr	r3, [pc, #608]	; (c508 <P2PTasks+0x370>)
    c2a8:	781b      	ldrb	r3, [r3, #0]
    c2aa:	429a      	cmp	r2, r3
    c2ac:	d000      	beq.n	c2b0 <P2PTasks+0x118>
    c2ae:	e187      	b.n	c5c0 <P2PTasks+0x428>
                if( (rxMessage.SourcePANID.Val != 0xFFFF) && (rxMessage.SourcePANID.Val != myPANID.Val) &&
    c2b0:	4b96      	ldr	r3, [pc, #600]	; (c50c <P2PTasks+0x374>)
    c2b2:	429c      	cmp	r4, r3
    c2b4:	d006      	beq.n	c2c4 <P2PTasks+0x12c>
    c2b6:	4b96      	ldr	r3, [pc, #600]	; (c510 <P2PTasks+0x378>)
    c2b8:	881b      	ldrh	r3, [r3, #0]
    c2ba:	42a3      	cmp	r3, r4
    c2bc:	d002      	beq.n	c2c4 <P2PTasks+0x12c>
    c2be:	2802      	cmp	r0, #2
    c2c0:	d900      	bls.n	c2c4 <P2PTasks+0x12c>
    c2c2:	e185      	b.n	c5d0 <P2PTasks+0x438>
                    status = AddConnection(rxMessage.Payload[2]);
    c2c4:	7888      	ldrb	r0, [r1, #2]
    c2c6:	4b93      	ldr	r3, [pc, #588]	; (c514 <P2PTasks+0x37c>)
    c2c8:	4798      	blx	r3
    c2ca:	0004      	movs	r4, r0
                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    c2cc:	4b8d      	ldr	r3, [pc, #564]	; (c504 <P2PTasks+0x36c>)
    c2ce:	781b      	ldrb	r3, [r3, #0]
    c2d0:	2b01      	cmp	r3, #1
    c2d2:	d025      	beq.n	c320 <P2PTasks+0x188>
                dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    c2d4:	2028      	movs	r0, #40	; 0x28
    c2d6:	4b90      	ldr	r3, [pc, #576]	; (c518 <P2PTasks+0x380>)
    c2d8:	4798      	blx	r3
                if (NULL == dataPtr)
    c2da:	2800      	cmp	r0, #0
    c2dc:	d100      	bne.n	c2e0 <P2PTasks+0x148>
    c2de:	e16f      	b.n	c5c0 <P2PTasks+0x428>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    c2e0:	2391      	movs	r3, #145	; 0x91
    c2e2:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = status;
    c2e4:	7044      	strb	r4, [r0, #1]
    c2e6:	2502      	movs	r5, #2
                if( status == STATUS_SUCCESS || status == STATUS_EXISTS )
    c2e8:	2c01      	cmp	r4, #1
    c2ea:	d93a      	bls.n	c362 <P2PTasks+0x1ca>
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    c2ec:	4b83      	ldr	r3, [pc, #524]	; (c4fc <P2PTasks+0x364>)
    c2ee:	685a      	ldr	r2, [r3, #4]
    c2f0:	8859      	ldrh	r1, [r3, #2]
    c2f2:	4e8a      	ldr	r6, [pc, #552]	; (c51c <P2PTasks+0x384>)
    c2f4:	9605      	str	r6, [sp, #20]
    c2f6:	2601      	movs	r6, #1
    c2f8:	9604      	str	r6, [sp, #16]
    c2fa:	2600      	movs	r6, #0
    c2fc:	9603      	str	r6, [sp, #12]
    c2fe:	9002      	str	r0, [sp, #8]
    c300:	9501      	str	r5, [sp, #4]
    c302:	781b      	ldrb	r3, [r3, #0]
    c304:	071b      	lsls	r3, r3, #28
    c306:	0fdb      	lsrs	r3, r3, #31
    c308:	9300      	str	r3, [sp, #0]
    c30a:	2301      	movs	r3, #1
    c30c:	2000      	movs	r0, #0
    c30e:	4d84      	ldr	r5, [pc, #528]	; (c520 <P2PTasks+0x388>)
    c310:	47a8      	blx	r5
                if( status == STATUS_SUCCESS )
    c312:	2c00      	cmp	r4, #0
    c314:	d000      	beq.n	c318 <P2PTasks+0x180>
    c316:	e153      	b.n	c5c0 <P2PTasks+0x428>
                     PDS_Store(PDS_CONNECTION_TABLE_ID);
    c318:	2006      	movs	r0, #6
    c31a:	4b82      	ldr	r3, [pc, #520]	; (c524 <P2PTasks+0x38c>)
    c31c:	4798      	blx	r3
    c31e:	e14f      	b.n	c5c0 <P2PTasks+0x428>
                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    c320:	3801      	subs	r0, #1
    c322:	b2c0      	uxtb	r0, r0
    c324:	2801      	cmp	r0, #1
    c326:	d9d5      	bls.n	c2d4 <P2PTasks+0x13c>
                dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    c328:	2028      	movs	r0, #40	; 0x28
    c32a:	4b7b      	ldr	r3, [pc, #492]	; (c518 <P2PTasks+0x380>)
    c32c:	4798      	blx	r3
    c32e:	1e02      	subs	r2, r0, #0
                if (NULL == dataPtr)
    c330:	d100      	bne.n	c334 <P2PTasks+0x19c>
    c332:	e145      	b.n	c5c0 <P2PTasks+0x428>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    c334:	2391      	movs	r3, #145	; 0x91
    c336:	7013      	strb	r3, [r2, #0]
                dataPtr[dataLen++] = status;
    c338:	3362      	adds	r3, #98	; 0x62
    c33a:	7053      	strb	r3, [r2, #1]
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    c33c:	496f      	ldr	r1, [pc, #444]	; (c4fc <P2PTasks+0x364>)
    c33e:	4b77      	ldr	r3, [pc, #476]	; (c51c <P2PTasks+0x384>)
    c340:	9305      	str	r3, [sp, #20]
    c342:	2301      	movs	r3, #1
    c344:	9304      	str	r3, [sp, #16]
    c346:	2000      	movs	r0, #0
    c348:	9003      	str	r0, [sp, #12]
    c34a:	9202      	str	r2, [sp, #8]
    c34c:	2202      	movs	r2, #2
    c34e:	9201      	str	r2, [sp, #4]
    c350:	780a      	ldrb	r2, [r1, #0]
    c352:	0712      	lsls	r2, r2, #28
    c354:	0fd2      	lsrs	r2, r2, #31
    c356:	9200      	str	r2, [sp, #0]
    c358:	684a      	ldr	r2, [r1, #4]
    c35a:	8849      	ldrh	r1, [r1, #2]
    c35c:	4c70      	ldr	r4, [pc, #448]	; (c520 <P2PTasks+0x388>)
    c35e:	47a0      	blx	r4
    c360:	e12e      	b.n	c5c0 <P2PTasks+0x428>
                    dataPtr[dataLen++] = P2PCapacityInfo;
    c362:	4b71      	ldr	r3, [pc, #452]	; (c528 <P2PTasks+0x390>)
    c364:	781b      	ldrb	r3, [r3, #0]
    c366:	7083      	strb	r3, [r0, #2]
                        dataPtr[dataLen++] = miwiDefaultRomOrRamParams->AdditionalNodeID[i];
    c368:	4b70      	ldr	r3, [pc, #448]	; (c52c <P2PTasks+0x394>)
    c36a:	681b      	ldr	r3, [r3, #0]
    c36c:	689b      	ldr	r3, [r3, #8]
    c36e:	781b      	ldrb	r3, [r3, #0]
    c370:	70c3      	strb	r3, [r0, #3]
    c372:	3502      	adds	r5, #2
    c374:	e7ba      	b.n	c2ec <P2PTasks+0x154>
                if(ESTABLISHING_NETWORK != p2pStarCurrentState)
    c376:	4b6e      	ldr	r3, [pc, #440]	; (c530 <P2PTasks+0x398>)
    c378:	781b      	ldrb	r3, [r3, #0]
    c37a:	2b04      	cmp	r3, #4
    c37c:	d000      	beq.n	c380 <P2PTasks+0x1e8>
    c37e:	e11f      	b.n	c5c0 <P2PTasks+0x428>
                switch( rxMessage.Payload[1] )
    c380:	784b      	ldrb	r3, [r1, #1]
    c382:	2b01      	cmp	r3, #1
    c384:	d900      	bls.n	c388 <P2PTasks+0x1f0>
    c386:	e11b      	b.n	c5c0 <P2PTasks+0x428>
                    if( myPANID.Val == 0xFFFF )
    c388:	4b61      	ldr	r3, [pc, #388]	; (c510 <P2PTasks+0x378>)
    c38a:	881a      	ldrh	r2, [r3, #0]
    c38c:	4b5f      	ldr	r3, [pc, #380]	; (c50c <P2PTasks+0x374>)
    c38e:	429a      	cmp	r2, r3
    c390:	d013      	beq.n	c3ba <P2PTasks+0x222>
                    if (rxMessage.Payload[1] == STATUS_EXISTS)
    c392:	4b5a      	ldr	r3, [pc, #360]	; (c4fc <P2PTasks+0x364>)
    c394:	689b      	ldr	r3, [r3, #8]
    c396:	785a      	ldrb	r2, [r3, #1]
    c398:	2a01      	cmp	r2, #1
    c39a:	d01d      	beq.n	c3d8 <P2PTasks+0x240>
                    else if (rxMessage.Payload[1] == STATUS_SUCCESS)
    c39c:	2a00      	cmp	r2, #0
    c39e:	d11f      	bne.n	c3e0 <P2PTasks+0x248>
                        gEstConnectionInfo.status = SUCCESS;
    c3a0:	2100      	movs	r1, #0
    c3a2:	4a64      	ldr	r2, [pc, #400]	; (c534 <P2PTasks+0x39c>)
    c3a4:	7051      	strb	r1, [r2, #1]
                    gEstConnectionInfo.connectionRetries = 0;
    c3a6:	2100      	movs	r1, #0
    c3a8:	4a62      	ldr	r2, [pc, #392]	; (c534 <P2PTasks+0x39c>)
    c3aa:	70d1      	strb	r1, [r2, #3]
                    uint8_t status = AddConnection(rxMessage.Payload[2]);
    c3ac:	7898      	ldrb	r0, [r3, #2]
    c3ae:	4b59      	ldr	r3, [pc, #356]	; (c514 <P2PTasks+0x37c>)
    c3b0:	4798      	blx	r3
                   PDS_Store(MIWI_ALL_MEMORY_MEM_ID);
    c3b2:	4861      	ldr	r0, [pc, #388]	; (c538 <P2PTasks+0x3a0>)
    c3b4:	4b5b      	ldr	r3, [pc, #364]	; (c524 <P2PTasks+0x38c>)
    c3b6:	4798      	blx	r3
    c3b8:	e102      	b.n	c5c0 <P2PTasks+0x428>
                        uint16_t broadcastAddr = 0xFFFF;
    c3ba:	201e      	movs	r0, #30
    c3bc:	ab02      	add	r3, sp, #8
    c3be:	469c      	mov	ip, r3
    c3c0:	4460      	add	r0, ip
    c3c2:	2301      	movs	r3, #1
    c3c4:	425b      	negs	r3, r3
    c3c6:	8003      	strh	r3, [r0, #0]
                        myPANID.Val = rxMessage.SourcePANID.Val;
    c3c8:	4951      	ldr	r1, [pc, #324]	; (c510 <P2PTasks+0x378>)
    c3ca:	800c      	strh	r4, [r1, #0]
                        MiMAC_SetAltAddress((uint8_t *)&broadcastAddr, (uint8_t *)&myPANID.Val);
    c3cc:	4b5b      	ldr	r3, [pc, #364]	; (c53c <P2PTasks+0x3a4>)
    c3ce:	4798      	blx	r3
                        PDS_Store(PDS_PANID_ID);
    c3d0:	2002      	movs	r0, #2
    c3d2:	4b54      	ldr	r3, [pc, #336]	; (c524 <P2PTasks+0x38c>)
    c3d4:	4798      	blx	r3
    c3d6:	e7dc      	b.n	c392 <P2PTasks+0x1fa>
                        gEstConnectionInfo.status = ALREADY_EXISTS;
    c3d8:	2106      	movs	r1, #6
    c3da:	4a56      	ldr	r2, [pc, #344]	; (c534 <P2PTasks+0x39c>)
    c3dc:	7051      	strb	r1, [r2, #1]
    c3de:	e7e2      	b.n	c3a6 <P2PTasks+0x20e>
                        gEstConnectionInfo.status = FAILURE;
    c3e0:	2101      	movs	r1, #1
    c3e2:	4a54      	ldr	r2, [pc, #336]	; (c534 <P2PTasks+0x39c>)
    c3e4:	7051      	strb	r1, [r2, #1]
    c3e6:	e7de      	b.n	c3a6 <P2PTasks+0x20e>
                if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    c3e8:	4b46      	ldr	r3, [pc, #280]	; (c504 <P2PTasks+0x36c>)
    c3ea:	781b      	ldrb	r3, [r3, #0]
    c3ec:	2b02      	cmp	r3, #2
    c3ee:	d900      	bls.n	c3f2 <P2PTasks+0x25a>
    c3f0:	e0e6      	b.n	c5c0 <P2PTasks+0x428>
                if( currentChannel != rxMessage.Payload[1] )
    c3f2:	784a      	ldrb	r2, [r1, #1]
    c3f4:	4b44      	ldr	r3, [pc, #272]	; (c508 <P2PTasks+0x370>)
    c3f6:	781b      	ldrb	r3, [r3, #0]
    c3f8:	429a      	cmp	r2, r3
    c3fa:	d000      	beq.n	c3fe <P2PTasks+0x266>
    c3fc:	e0e0      	b.n	c5c0 <P2PTasks+0x428>
                dataPtr = MiMem_Alloc(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE);
    c3fe:	2003      	movs	r0, #3
    c400:	4b45      	ldr	r3, [pc, #276]	; (c518 <P2PTasks+0x380>)
    c402:	4798      	blx	r3
                if (NULL == dataPtr)
    c404:	2800      	cmp	r0, #0
    c406:	d100      	bne.n	c40a <P2PTasks+0x272>
    c408:	e0da      	b.n	c5c0 <P2PTasks+0x428>
                dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    c40a:	2397      	movs	r3, #151	; 0x97
    c40c:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = P2PCapacityInfo;
    c40e:	4b46      	ldr	r3, [pc, #280]	; (c528 <P2PTasks+0x390>)
    c410:	781b      	ldrb	r3, [r3, #0]
    c412:	7043      	strb	r3, [r0, #1]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->AdditionalNodeID[i]);
    c414:	4b45      	ldr	r3, [pc, #276]	; (c52c <P2PTasks+0x394>)
    c416:	681b      	ldr	r3, [r3, #0]
    c418:	689b      	ldr	r3, [r3, #8]
    c41a:	781b      	ldrb	r3, [r3, #0]
    c41c:	7083      	strb	r3, [r0, #2]
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    c41e:	4b37      	ldr	r3, [pc, #220]	; (c4fc <P2PTasks+0x364>)
    c420:	685a      	ldr	r2, [r3, #4]
    c422:	8859      	ldrh	r1, [r3, #2]
    c424:	4c46      	ldr	r4, [pc, #280]	; (c540 <P2PTasks+0x3a8>)
    c426:	9405      	str	r4, [sp, #20]
    c428:	2401      	movs	r4, #1
    c42a:	9404      	str	r4, [sp, #16]
    c42c:	2400      	movs	r4, #0
    c42e:	9403      	str	r4, [sp, #12]
    c430:	9002      	str	r0, [sp, #8]
    c432:	2003      	movs	r0, #3
    c434:	9001      	str	r0, [sp, #4]
    c436:	781b      	ldrb	r3, [r3, #0]
    c438:	071b      	lsls	r3, r3, #28
    c43a:	0fdb      	lsrs	r3, r3, #31
    c43c:	9300      	str	r3, [sp, #0]
    c43e:	2301      	movs	r3, #1
    c440:	2000      	movs	r0, #0
    c442:	4c37      	ldr	r4, [pc, #220]	; (c520 <P2PTasks+0x388>)
    c444:	47a0      	blx	r4
    c446:	e0bb      	b.n	c5c0 <P2PTasks+0x428>
                if(RESYNC_IN_PROGRESS == p2pStarCurrentState)
    c448:	4b39      	ldr	r3, [pc, #228]	; (c530 <P2PTasks+0x398>)
    c44a:	781b      	ldrb	r3, [r3, #0]
    c44c:	2b09      	cmp	r3, #9
    c44e:	d000      	beq.n	c452 <P2PTasks+0x2ba>
    c450:	e0b6      	b.n	c5c0 <P2PTasks+0x428>
                    resyncInfo.resyncTimes = 0;
    c452:	4c3c      	ldr	r4, [pc, #240]	; (c544 <P2PTasks+0x3ac>)
    c454:	2500      	movs	r5, #0
    c456:	7065      	strb	r5, [r4, #1]
                    p2pStarCurrentState = IN_NETWORK_STATE;
    c458:	2207      	movs	r2, #7
    c45a:	4b35      	ldr	r3, [pc, #212]	; (c530 <P2PTasks+0x398>)
    c45c:	701a      	strb	r2, [r3, #0]
                    resyncInfo.confCallback(currentChannel, SUCCESS);
    c45e:	4b2a      	ldr	r3, [pc, #168]	; (c508 <P2PTasks+0x370>)
    c460:	7818      	ldrb	r0, [r3, #0]
    c462:	2100      	movs	r1, #0
    c464:	68e3      	ldr	r3, [r4, #12]
    c466:	4798      	blx	r3
                    resyncInfo.confCallback = NULL;
    c468:	60e5      	str	r5, [r4, #12]
    c46a:	e0a9      	b.n	c5c0 <P2PTasks+0x428>
                dataPtr = MiMem_Alloc(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE);
    c46c:	2002      	movs	r0, #2
    c46e:	4b2a      	ldr	r3, [pc, #168]	; (c518 <P2PTasks+0x380>)
    c470:	4798      	blx	r3
    c472:	1e07      	subs	r7, r0, #0
                if (NULL == dataPtr)
    c474:	d100      	bne.n	c478 <P2PTasks+0x2e0>
    c476:	e0a3      	b.n	c5c0 <P2PTasks+0x428>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    c478:	2392      	movs	r3, #146	; 0x92
    c47a:	7003      	strb	r3, [r0, #0]
                        if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    c47c:	4b1f      	ldr	r3, [pc, #124]	; (c4fc <P2PTasks+0x364>)
    c47e:	685e      	ldr	r6, [r3, #4]
                    if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c480:	4b2a      	ldr	r3, [pc, #168]	; (c52c <P2PTasks+0x394>)
    c482:	681b      	ldr	r3, [r3, #0]
    c484:	681d      	ldr	r5, [r3, #0]
                for(i = 0; i < CONNECTION_SIZE; i++)
    c486:	2400      	movs	r4, #0
    c488:	e004      	b.n	c494 <P2PTasks+0x2fc>
    c48a:	3401      	adds	r4, #1
    c48c:	b2e4      	uxtb	r4, r4
    c48e:	350a      	adds	r5, #10
    c490:	2c05      	cmp	r4, #5
    c492:	d05b      	beq.n	c54c <P2PTasks+0x3b4>
                    if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c494:	9507      	str	r5, [sp, #28]
    c496:	7a2b      	ldrb	r3, [r5, #8]
    c498:	2b7f      	cmp	r3, #127	; 0x7f
    c49a:	d9f6      	bls.n	c48a <P2PTasks+0x2f2>
                        if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    c49c:	0029      	movs	r1, r5
    c49e:	0030      	movs	r0, r6
    c4a0:	4b29      	ldr	r3, [pc, #164]	; (c548 <P2PTasks+0x3b0>)
    c4a2:	4798      	blx	r3
    c4a4:	2800      	cmp	r0, #0
    c4a6:	d0f0      	beq.n	c48a <P2PTasks+0x2f2>
                            miwiDefaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    c4a8:	2500      	movs	r5, #0
    c4aa:	9b07      	ldr	r3, [sp, #28]
    c4ac:	721d      	strb	r5, [r3, #8]
                            PDS_Store(PDS_CONNECTION_TABLE_ID);
    c4ae:	2006      	movs	r0, #6
    c4b0:	4b1c      	ldr	r3, [pc, #112]	; (c524 <P2PTasks+0x38c>)
    c4b2:	4798      	blx	r3
                            dataPtr[dataLen++] = STATUS_SUCCESS;
    c4b4:	707d      	strb	r5, [r7, #1]
                if( i == CONNECTION_SIZE )
    c4b6:	2c05      	cmp	r4, #5
    c4b8:	d05f      	beq.n	c57a <P2PTasks+0x3e2>
                            dataPtr[dataLen++] = STATUS_SUCCESS;
    c4ba:	2402      	movs	r4, #2
    c4bc:	e04a      	b.n	c554 <P2PTasks+0x3bc>
    c4be:	46c0      	nop			; (mov r8, r8)
    c4c0:	0000ca75 	.word	0x0000ca75
    c4c4:	20001f84 	.word	0x20001f84
    c4c8:	20000018 	.word	0x20000018
    c4cc:	0000b02d 	.word	0x0000b02d
    c4d0:	0000b4c9 	.word	0x0000b4c9
    c4d4:	0000c9e9 	.word	0x0000c9e9
    c4d8:	200003ec 	.word	0x200003ec
    c4dc:	0000cac5 	.word	0x0000cac5
    c4e0:	2000040c 	.word	0x2000040c
    c4e4:	0000c859 	.word	0x0000c859
    c4e8:	20001fd4 	.word	0x20001fd4
    c4ec:	0000b4c5 	.word	0x0000b4c5
    c4f0:	0000b965 	.word	0x0000b965
    c4f4:	0000acdd 	.word	0x0000acdd
    c4f8:	20001f48 	.word	0x20001f48
    c4fc:	20001fc4 	.word	0x20001fc4
    c500:	00012670 	.word	0x00012670
    c504:	2000000b 	.word	0x2000000b
    c508:	2000000d 	.word	0x2000000d
    c50c:	0000ffff 	.word	0x0000ffff
    c510:	20001f6c 	.word	0x20001f6c
    c514:	0000bced 	.word	0x0000bced
    c518:	0000c645 	.word	0x0000c645
    c51c:	0000b999 	.word	0x0000b999
    c520:	0000bde9 	.word	0x0000bde9
    c524:	0000a471 	.word	0x0000a471
    c528:	2000000c 	.word	0x2000000c
    c52c:	20001f5c 	.word	0x20001f5c
    c530:	200003f0 	.word	0x200003f0
    c534:	20001f98 	.word	0x20001f98
    c538:	00004001 	.word	0x00004001
    c53c:	0000a7d1 	.word	0x0000a7d1
    c540:	0000b955 	.word	0x0000b955
    c544:	20001fb4 	.word	0x20001fb4
    c548:	0000bcc5 	.word	0x0000bcc5
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    c54c:	2301      	movs	r3, #1
                    dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    c54e:	1c5c      	adds	r4, r3, #1
    c550:	22f0      	movs	r2, #240	; 0xf0
    c552:	54fa      	strb	r2, [r7, r3]
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    c554:	4b22      	ldr	r3, [pc, #136]	; (c5e0 <P2PTasks+0x448>)
    c556:	685a      	ldr	r2, [r3, #4]
    c558:	8859      	ldrh	r1, [r3, #2]
    c55a:	4822      	ldr	r0, [pc, #136]	; (c5e4 <P2PTasks+0x44c>)
    c55c:	9005      	str	r0, [sp, #20]
    c55e:	2001      	movs	r0, #1
    c560:	9004      	str	r0, [sp, #16]
    c562:	2000      	movs	r0, #0
    c564:	9003      	str	r0, [sp, #12]
    c566:	9702      	str	r7, [sp, #8]
    c568:	9401      	str	r4, [sp, #4]
    c56a:	781b      	ldrb	r3, [r3, #0]
    c56c:	071b      	lsls	r3, r3, #28
    c56e:	0fdb      	lsrs	r3, r3, #31
    c570:	9300      	str	r3, [sp, #0]
    c572:	2301      	movs	r3, #1
    c574:	4c1c      	ldr	r4, [pc, #112]	; (c5e8 <P2PTasks+0x450>)
    c576:	47a0      	blx	r4
    c578:	e022      	b.n	c5c0 <P2PTasks+0x428>
                            dataPtr[dataLen++] = STATUS_SUCCESS;
    c57a:	2302      	movs	r3, #2
    c57c:	e7e7      	b.n	c54e <P2PTasks+0x3b6>
                if( rxMessage.Payload[1] == STATUS_SUCCESS )
    c57e:	784b      	ldrb	r3, [r1, #1]
    c580:	2b00      	cmp	r3, #0
    c582:	d11d      	bne.n	c5c0 <P2PTasks+0x428>
                        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c584:	4b19      	ldr	r3, [pc, #100]	; (c5ec <P2PTasks+0x454>)
    c586:	681b      	ldr	r3, [r3, #0]
    c588:	681d      	ldr	r5, [r3, #0]
                            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    c58a:	4b15      	ldr	r3, [pc, #84]	; (c5e0 <P2PTasks+0x448>)
    c58c:	685f      	ldr	r7, [r3, #4]
    c58e:	002c      	movs	r4, r5
    c590:	3532      	adds	r5, #50	; 0x32
    c592:	e002      	b.n	c59a <P2PTasks+0x402>
    c594:	340a      	adds	r4, #10
                    for(i = 0; i < CONNECTION_SIZE; i++)
    c596:	42a5      	cmp	r5, r4
    c598:	d012      	beq.n	c5c0 <P2PTasks+0x428>
                        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c59a:	7a23      	ldrb	r3, [r4, #8]
    c59c:	2b7f      	cmp	r3, #127	; 0x7f
    c59e:	d9f9      	bls.n	c594 <P2PTasks+0x3fc>
                            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    c5a0:	0021      	movs	r1, r4
    c5a2:	0038      	movs	r0, r7
    c5a4:	4b12      	ldr	r3, [pc, #72]	; (c5f0 <P2PTasks+0x458>)
    c5a6:	4798      	blx	r3
    c5a8:	2800      	cmp	r0, #0
    c5aa:	d0f3      	beq.n	c594 <P2PTasks+0x3fc>
                                miwiDefaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    c5ac:	2300      	movs	r3, #0
    c5ae:	7223      	strb	r3, [r4, #8]
                                PDS_Store(PDS_CONNECTION_TABLE_ID);
    c5b0:	2006      	movs	r0, #6
    c5b2:	4b10      	ldr	r3, [pc, #64]	; (c5f4 <P2PTasks+0x45c>)
    c5b4:	4798      	blx	r3
    c5b6:	e003      	b.n	c5c0 <P2PTasks+0x428>
		if (IN_NETWORK_STATE == p2pStarCurrentState)
    c5b8:	4b0f      	ldr	r3, [pc, #60]	; (c5f8 <P2PTasks+0x460>)
    c5ba:	781b      	ldrb	r3, [r3, #0]
    c5bc:	2b07      	cmp	r3, #7
    c5be:	d002      	beq.n	c5c6 <P2PTasks+0x42e>
        MiMAC_DiscardPacket();
    c5c0:	4b0e      	ldr	r3, [pc, #56]	; (c5fc <P2PTasks+0x464>)
    c5c2:	4798      	blx	r3
    c5c4:	e5f9      	b.n	c1ba <P2PTasks+0x22>
			pktRxcallback(&rxMessage);
    c5c6:	4b0e      	ldr	r3, [pc, #56]	; (c600 <P2PTasks+0x468>)
    c5c8:	681b      	ldr	r3, [r3, #0]
    c5ca:	4805      	ldr	r0, [pc, #20]	; (c5e0 <P2PTasks+0x448>)
    c5cc:	4798      	blx	r3
    c5ce:	e7f7      	b.n	c5c0 <P2PTasks+0x428>
                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    c5d0:	4b0c      	ldr	r3, [pc, #48]	; (c604 <P2PTasks+0x46c>)
    c5d2:	781b      	ldrb	r3, [r3, #0]
    c5d4:	2b01      	cmp	r3, #1
    c5d6:	d100      	bne.n	c5da <P2PTasks+0x442>
    c5d8:	e6a6      	b.n	c328 <P2PTasks+0x190>
                    status = STATUS_NOT_SAME_PAN;
    c5da:	24f2      	movs	r4, #242	; 0xf2
    c5dc:	e67a      	b.n	c2d4 <P2PTasks+0x13c>
    c5de:	46c0      	nop			; (mov r8, r8)
    c5e0:	20001fc4 	.word	0x20001fc4
    c5e4:	0000b955 	.word	0x0000b955
    c5e8:	0000bde9 	.word	0x0000bde9
    c5ec:	20001f5c 	.word	0x20001f5c
    c5f0:	0000bcc5 	.word	0x0000bcc5
    c5f4:	0000a471 	.word	0x0000a471
    c5f8:	200003f0 	.word	0x200003f0
    c5fc:	0000b011 	.word	0x0000b011
    c600:	200003f4 	.word	0x200003f4
    c604:	2000000b 	.word	0x2000000b

0000c608 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    c608:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    c60a:	4a0b      	ldr	r2, [pc, #44]	; (c638 <MiMem_Init+0x30>)
    c60c:	1e50      	subs	r0, r2, #1
    c60e:	2403      	movs	r4, #3
    c610:	43a0      	bics	r0, r4
    c612:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    c614:	4b09      	ldr	r3, [pc, #36]	; (c63c <MiMem_Init+0x34>)
    c616:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    c618:	4253      	negs	r3, r2
    c61a:	43a3      	bics	r3, r4
    c61c:	24c0      	movs	r4, #192	; 0xc0
    c61e:	0164      	lsls	r4, r4, #5
    c620:	46a4      	mov	ip, r4
    c622:	4462      	add	r2, ip
    c624:	189b      	adds	r3, r3, r2
    c626:	4a06      	ldr	r2, [pc, #24]	; (c640 <MiMem_Init+0x38>)
    c628:	6013      	str	r3, [r2, #0]
    c62a:	60c3      	str	r3, [r0, #12]
	base->free = true;
    c62c:	2301      	movs	r3, #1
    c62e:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    c630:	2300      	movs	r3, #0
    c632:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    c634:	6083      	str	r3, [r0, #8]
}
    c636:	bd10      	pop	{r4, pc}
    c638:	20000414 	.word	0x20000414
    c63c:	20000410 	.word	0x20000410
    c640:	20001c14 	.word	0x20001c14

0000c644 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    c644:	b570      	push	{r4, r5, r6, lr}
    c646:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    c648:	4b29      	ldr	r3, [pc, #164]	; (c6f0 <MiMem_Alloc+0xac>)
    c64a:	681b      	ldr	r3, [r3, #0]
    c64c:	2b00      	cmp	r3, #0
    c64e:	d012      	beq.n	c676 <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    c650:	2d00      	cmp	r5, #0
    c652:	d047      	beq.n	c6e4 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    c654:	0029      	movs	r1, r5
    c656:	310f      	adds	r1, #15
    c658:	2303      	movs	r3, #3
    c65a:	4399      	bics	r1, r3
    c65c:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    c65e:	4b25      	ldr	r3, [pc, #148]	; (c6f4 <MiMem_Alloc+0xb0>)
    c660:	6818      	ldr	r0, [r3, #0]
    c662:	4281      	cmp	r1, r0
    c664:	d840      	bhi.n	c6e8 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    c666:	4b22      	ldr	r3, [pc, #136]	; (c6f0 <MiMem_Alloc+0xac>)
    c668:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    c66a:	2b00      	cmp	r3, #0
    c66c:	d03e      	beq.n	c6ec <MiMem_Alloc+0xa8>
    c66e:	2600      	movs	r6, #0
    c670:	2401      	movs	r4, #1
    c672:	4264      	negs	r4, r4
    c674:	e005      	b.n	c682 <MiMem_Alloc+0x3e>
		MiMem_Init();
    c676:	4b20      	ldr	r3, [pc, #128]	; (c6f8 <MiMem_Alloc+0xb4>)
    c678:	4798      	blx	r3
    c67a:	e7e9      	b.n	c650 <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    c67c:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    c67e:	2b00      	cmp	r3, #0
    c680:	d00a      	beq.n	c698 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    c682:	7b1a      	ldrb	r2, [r3, #12]
    c684:	2a00      	cmp	r2, #0
    c686:	d0f9      	beq.n	c67c <MiMem_Alloc+0x38>
    c688:	689a      	ldr	r2, [r3, #8]
    c68a:	4291      	cmp	r1, r2
    c68c:	d8f6      	bhi.n	c67c <MiMem_Alloc+0x38>
    c68e:	42a2      	cmp	r2, r4
    c690:	d2f4      	bcs.n	c67c <MiMem_Alloc+0x38>
    c692:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    c694:	0014      	movs	r4, r2
    c696:	e7f1      	b.n	c67c <MiMem_Alloc+0x38>
    c698:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    c69a:	2e00      	cmp	r6, #0
    c69c:	d012      	beq.n	c6c4 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    c69e:	68b3      	ldr	r3, [r6, #8]
    c6a0:	1a5b      	subs	r3, r3, r1
    c6a2:	2b14      	cmp	r3, #20
    c6a4:	d810      	bhi.n	c6c8 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    c6a6:	2300      	movs	r3, #0
    c6a8:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    c6aa:	68b3      	ldr	r3, [r6, #8]
    c6ac:	1ac0      	subs	r0, r0, r3
    c6ae:	4b11      	ldr	r3, [pc, #68]	; (c6f4 <MiMem_Alloc+0xb0>)
    c6b0:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    c6b2:	0034      	movs	r4, r6
    c6b4:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    c6b6:	2c00      	cmp	r4, #0
    c6b8:	d004      	beq.n	c6c4 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    c6ba:	002a      	movs	r2, r5
    c6bc:	2100      	movs	r1, #0
    c6be:	0020      	movs	r0, r4
    c6c0:	4b0e      	ldr	r3, [pc, #56]	; (c6fc <MiMem_Alloc+0xb8>)
    c6c2:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    c6c4:	0020      	movs	r0, r4
    c6c6:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    c6c8:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    c6ca:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    c6cc:	6833      	ldr	r3, [r6, #0]
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d000      	beq.n	c6d4 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    c6d2:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    c6d4:	6833      	ldr	r3, [r6, #0]
    c6d6:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    c6d8:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    c6da:	2301      	movs	r3, #1
    c6dc:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    c6de:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    c6e0:	60b1      	str	r1, [r6, #8]
    c6e2:	e7e0      	b.n	c6a6 <MiMem_Alloc+0x62>
    c6e4:	2400      	movs	r4, #0
    c6e6:	e7ed      	b.n	c6c4 <MiMem_Alloc+0x80>
    c6e8:	2400      	movs	r4, #0
    c6ea:	e7eb      	b.n	c6c4 <MiMem_Alloc+0x80>
			while (blockPtr)
    c6ec:	2400      	movs	r4, #0
    c6ee:	e7e9      	b.n	c6c4 <MiMem_Alloc+0x80>
    c6f0:	20000410 	.word	0x20000410
    c6f4:	20001c14 	.word	0x20001c14
    c6f8:	0000c609 	.word	0x0000c609
    c6fc:	00010cc1 	.word	0x00010cc1

0000c700 <MiMem_Free>:
	Block_t* blockPtr = base;
    c700:	4b1c      	ldr	r3, [pc, #112]	; (c774 <MiMem_Free+0x74>)
    c702:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    c704:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    c706:	2b00      	cmp	r3, #0
    c708:	d030      	beq.n	c76c <MiMem_Free+0x6c>
    c70a:	4283      	cmp	r3, r0
    c70c:	d02f      	beq.n	c76e <MiMem_Free+0x6e>
    c70e:	681b      	ldr	r3, [r3, #0]
    c710:	2b00      	cmp	r3, #0
    c712:	d02b      	beq.n	c76c <MiMem_Free+0x6c>
    c714:	4298      	cmp	r0, r3
    c716:	d1fa      	bne.n	c70e <MiMem_Free+0xe>
		blockPtr->free = true;
    c718:	2301      	movs	r3, #1
    c71a:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    c71c:	6881      	ldr	r1, [r0, #8]
    c71e:	4a16      	ldr	r2, [pc, #88]	; (c778 <MiMem_Free+0x78>)
    c720:	6813      	ldr	r3, [r2, #0]
    c722:	185b      	adds	r3, r3, r1
    c724:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    c726:	6843      	ldr	r3, [r0, #4]
    c728:	2b00      	cmp	r3, #0
    c72a:	d00f      	beq.n	c74c <MiMem_Free+0x4c>
    c72c:	7b1a      	ldrb	r2, [r3, #12]
    c72e:	2a00      	cmp	r2, #0
    c730:	d00c      	beq.n	c74c <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    c732:	689a      	ldr	r2, [r3, #8]
    c734:	4694      	mov	ip, r2
    c736:	4461      	add	r1, ip
    c738:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    c73a:	6803      	ldr	r3, [r0, #0]
    c73c:	2b00      	cmp	r3, #0
    c73e:	d001      	beq.n	c744 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    c740:	6842      	ldr	r2, [r0, #4]
    c742:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    c744:	6843      	ldr	r3, [r0, #4]
    c746:	6802      	ldr	r2, [r0, #0]
    c748:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    c74a:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    c74c:	6803      	ldr	r3, [r0, #0]
    c74e:	2b00      	cmp	r3, #0
    c750:	d00c      	beq.n	c76c <MiMem_Free+0x6c>
    c752:	7b1a      	ldrb	r2, [r3, #12]
    c754:	2a00      	cmp	r2, #0
    c756:	d009      	beq.n	c76c <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    c758:	6882      	ldr	r2, [r0, #8]
    c75a:	6899      	ldr	r1, [r3, #8]
    c75c:	468c      	mov	ip, r1
    c75e:	4462      	add	r2, ip
    c760:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    c762:	681b      	ldr	r3, [r3, #0]
    c764:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    c766:	2b00      	cmp	r3, #0
    c768:	d000      	beq.n	c76c <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    c76a:	6058      	str	r0, [r3, #4]
}
    c76c:	4770      	bx	lr
	Block_t* blockPtr = base;
    c76e:	0018      	movs	r0, r3
    c770:	e7d2      	b.n	c718 <MiMem_Free+0x18>
    c772:	46c0      	nop			; (mov r8, r8)
    c774:	20000410 	.word	0x20000410
    c778:	20001c14 	.word	0x20001c14

0000c77c <miQueueReadOrRemove>:
 *         removed or read, otherwise NULL is returned.
 * \ingroup group_qmm
 */
static miQueueBuffer_t *miQueueReadOrRemove(MiQueue_t *q,
						buffer_mode_t mode,search_t *search)
{
    c77c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c77e:	46c6      	mov	lr, r8
    c780:	b500      	push	{lr}
    c782:	0007      	movs	r7, r0
    c784:	4688      	mov	r8, r1
    c786:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
    c788:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    c78a:	f3bf 8f5f 	dmb	sy
	miQueueBuffer_t *buffer_current = NULL;
	miQueueBuffer_t *buffer_previous;

	cpu_irq_disable();
    c78e:	2200      	movs	r2, #0
    c790:	4b1f      	ldr	r3, [pc, #124]	; (c810 <miQueueReadOrRemove+0x94>)
    c792:	701a      	strb	r2, [r3, #0]
	/* Check whether queue is empty */
	if (q->size != 0) {
    c794:	7a03      	ldrb	r3, [r0, #8]
    c796:	2b00      	cmp	r3, #0
    c798:	d037      	beq.n	c80a <miQueueReadOrRemove+0x8e>
		buffer_current = q->head;
    c79a:	6804      	ldr	r4, [r0, #0]
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    c79c:	2d00      	cmp	r5, #0
    c79e:	d019      	beq.n	c7d4 <miQueueReadOrRemove+0x58>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    c7a0:	2c00      	cmp	r4, #0
    c7a2:	d00c      	beq.n	c7be <miQueueReadOrRemove+0x42>
    c7a4:	0026      	movs	r6, r4
    c7a6:	e000      	b.n	c7aa <miQueueReadOrRemove+0x2e>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->nextItem;
    c7a8:	001c      	movs	r4, r3
				match = search->criteria_func(
    c7aa:	6869      	ldr	r1, [r5, #4]
    c7ac:	6860      	ldr	r0, [r4, #4]
    c7ae:	682b      	ldr	r3, [r5, #0]
    c7b0:	4798      	blx	r3
				if (match) {
    c7b2:	2800      	cmp	r0, #0
    c7b4:	d10f      	bne.n	c7d6 <miQueueReadOrRemove+0x5a>
				buffer_current = buffer_current->nextItem;
    c7b6:	6823      	ldr	r3, [r4, #0]
    c7b8:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	d1f4      	bne.n	c7a8 <miQueueReadOrRemove+0x2c>
	miQueueBuffer_t *buffer_current = NULL;
    c7be:	2400      	movs	r4, #0
				**/
			}
		}
	} /* q->size != 0 */

	cpu_irq_enable();
    c7c0:	2201      	movs	r2, #1
    c7c2:	4b13      	ldr	r3, [pc, #76]	; (c810 <miQueueReadOrRemove+0x94>)
    c7c4:	701a      	strb	r2, [r3, #0]
    c7c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c7ca:	b662      	cpsie	i

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    c7cc:	0020      	movs	r0, r4
    c7ce:	bc04      	pop	{r2}
    c7d0:	4690      	mov	r8, r2
    c7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    c7d4:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    c7d6:	2c00      	cmp	r4, #0
    c7d8:	d0f2      	beq.n	c7c0 <miQueueReadOrRemove+0x44>
			if (REMOVE_MODE == mode) {
    c7da:	4643      	mov	r3, r8
    c7dc:	2b00      	cmp	r3, #0
    c7de:	d1ef      	bne.n	c7c0 <miQueueReadOrRemove+0x44>
				if (buffer_current == q->head) {
    c7e0:	683b      	ldr	r3, [r7, #0]
    c7e2:	429c      	cmp	r4, r3
    c7e4:	d00c      	beq.n	c800 <miQueueReadOrRemove+0x84>
						= buffer_current->nextItem;
    c7e6:	6823      	ldr	r3, [r4, #0]
    c7e8:	6033      	str	r3, [r6, #0]
				if (buffer_current == q->tail) {
    c7ea:	687b      	ldr	r3, [r7, #4]
    c7ec:	429c      	cmp	r4, r3
    c7ee:	d00a      	beq.n	c806 <miQueueReadOrRemove+0x8a>
				q->size--;
    c7f0:	7a3b      	ldrb	r3, [r7, #8]
    c7f2:	3b01      	subs	r3, #1
    c7f4:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    c7f6:	683b      	ldr	r3, [r7, #0]
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	d1e1      	bne.n	c7c0 <miQueueReadOrRemove+0x44>
					q->tail = NULL;
    c7fc:	607b      	str	r3, [r7, #4]
    c7fe:	e7df      	b.n	c7c0 <miQueueReadOrRemove+0x44>
					q->head = buffer_current->nextItem;
    c800:	6823      	ldr	r3, [r4, #0]
    c802:	603b      	str	r3, [r7, #0]
    c804:	e7f1      	b.n	c7ea <miQueueReadOrRemove+0x6e>
					q->tail = buffer_previous;
    c806:	607e      	str	r6, [r7, #4]
    c808:	e7f2      	b.n	c7f0 <miQueueReadOrRemove+0x74>
	miQueueBuffer_t *buffer_current = NULL;
    c80a:	2400      	movs	r4, #0
    c80c:	e7d8      	b.n	c7c0 <miQueueReadOrRemove+0x44>
    c80e:	46c0      	nop			; (mov r8, r8)
    c810:	20000008 	.word	0x20000008

0000c814 <miQueueInit>:
	q->head = NULL;
    c814:	2300      	movs	r3, #0
    c816:	6003      	str	r3, [r0, #0]
	q->tail = NULL;
    c818:	6043      	str	r3, [r0, #4]
	q->size = 0;
    c81a:	7203      	strb	r3, [r0, #8]
}
    c81c:	4770      	bx	lr
    c81e:	Address 0x0000c81e is out of bounds.


0000c820 <miQueueAppend>:
  __ASM volatile ("cpsid i" : : : "memory");
    c820:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    c822:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c826:	2200      	movs	r2, #0
    c828:	4b0a      	ldr	r3, [pc, #40]	; (c854 <miQueueAppend+0x34>)
    c82a:	701a      	strb	r2, [r3, #0]
	if (q->size == 0) {
    c82c:	7a03      	ldrb	r3, [r0, #8]
    c82e:	2b00      	cmp	r3, #0
    c830:	d00e      	beq.n	c850 <miQueueAppend+0x30>
		q->tail->nextItem = bufPtr;
    c832:	6843      	ldr	r3, [r0, #4]
    c834:	6019      	str	r1, [r3, #0]
	q->tail = bufPtr;
    c836:	6041      	str	r1, [r0, #4]
	bufPtr->nextItem = NULL;
    c838:	2300      	movs	r3, #0
    c83a:	600b      	str	r3, [r1, #0]
	q->size++;
    c83c:	7a03      	ldrb	r3, [r0, #8]
    c83e:	3301      	adds	r3, #1
    c840:	7203      	strb	r3, [r0, #8]
	cpu_irq_enable();
    c842:	2201      	movs	r2, #1
    c844:	4b03      	ldr	r3, [pc, #12]	; (c854 <miQueueAppend+0x34>)
    c846:	701a      	strb	r2, [r3, #0]
    c848:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c84c:	b662      	cpsie	i
} /* miQueueAppend */
    c84e:	4770      	bx	lr
		q->head = bufPtr;
    c850:	6001      	str	r1, [r0, #0]
    c852:	e7f0      	b.n	c836 <miQueueAppend+0x16>
    c854:	20000008 	.word	0x20000008

0000c858 <miQueueRemove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
miQueueBuffer_t *miQueueRemove(MiQueue_t *q, search_t *search)
{
    c858:	b510      	push	{r4, lr}
    c85a:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, REMOVE_MODE, search));
    c85c:	2100      	movs	r1, #0
    c85e:	4b01      	ldr	r3, [pc, #4]	; (c864 <miQueueRemove+0xc>)
    c860:	4798      	blx	r3
}
    c862:	bd10      	pop	{r4, pc}
    c864:	0000c77d 	.word	0x0000c77d

0000c868 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    c868:	b530      	push	{r4, r5, lr}
	if (timers) {
    c86a:	4b14      	ldr	r3, [pc, #80]	; (c8bc <placeTimer+0x54>)
    c86c:	681d      	ldr	r5, [r3, #0]
    c86e:	2d00      	cmp	r5, #0
    c870:	d01c      	beq.n	c8ac <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    c872:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    c874:	6869      	ldr	r1, [r5, #4]
    c876:	428a      	cmp	r2, r1
    c878:	d309      	bcc.n	c88e <placeTimer+0x26>
    c87a:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    c87c:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    c87e:	6823      	ldr	r3, [r4, #0]
    c880:	2b00      	cmp	r3, #0
    c882:	d008      	beq.n	c896 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    c884:	6859      	ldr	r1, [r3, #4]
    c886:	4291      	cmp	r1, r2
    c888:	d803      	bhi.n	c892 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    c88a:	001c      	movs	r4, r3
    c88c:	e7f6      	b.n	c87c <placeTimer+0x14>
    c88e:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    c890:	2400      	movs	r4, #0
				t->timeout -= timeout;
    c892:	1a89      	subs	r1, r1, r2
    c894:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    c896:	6042      	str	r2, [r0, #4]

		if (prev) {
    c898:	2c00      	cmp	r4, #0
    c89a:	d003      	beq.n	c8a4 <placeTimer+0x3c>
			timer->next = prev->next;
    c89c:	6823      	ldr	r3, [r4, #0]
    c89e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    c8a0:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    c8a2:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    c8a4:	6005      	str	r5, [r0, #0]
			timers = timer;
    c8a6:	4b05      	ldr	r3, [pc, #20]	; (c8bc <placeTimer+0x54>)
    c8a8:	6018      	str	r0, [r3, #0]
    c8aa:	e7fa      	b.n	c8a2 <placeTimer+0x3a>
		timer->next = NULL;
    c8ac:	2300      	movs	r3, #0
    c8ae:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    c8b0:	6883      	ldr	r3, [r0, #8]
    c8b2:	6043      	str	r3, [r0, #4]
		timers = timer;
    c8b4:	4b01      	ldr	r3, [pc, #4]	; (c8bc <placeTimer+0x54>)
    c8b6:	6018      	str	r0, [r3, #0]
}
    c8b8:	e7f3      	b.n	c8a2 <placeTimer+0x3a>
    c8ba:	46c0      	nop			; (mov r8, r8)
    c8bc:	20001c18 	.word	0x20001c18

0000c8c0 <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

static void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    c8c0:	4a06      	ldr	r2, [pc, #24]	; (c8dc <SYS_HwOverflow_Cb+0x1c>)
    c8c2:	7813      	ldrb	r3, [r2, #0]
    c8c4:	3301      	adds	r3, #1
    c8c6:	b2db      	uxtb	r3, r3
    c8c8:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    c8ca:	7813      	ldrb	r3, [r2, #0]
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	d104      	bne.n	c8da <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    c8d0:	4a03      	ldr	r2, [pc, #12]	; (c8e0 <SYS_HwOverflow_Cb+0x20>)
    c8d2:	7813      	ldrb	r3, [r2, #0]
    c8d4:	3301      	adds	r3, #1
    c8d6:	b2db      	uxtb	r3, r3
    c8d8:	7013      	strb	r3, [r2, #0]
	}
}
    c8da:	4770      	bx	lr
    c8dc:	20001fdc 	.word	0x20001fdc
    c8e0:	20001fdd 	.word	0x20001fdd

0000c8e4 <SYS_HwExpiry_Cb>:
{
    c8e4:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    c8e6:	4a04      	ldr	r2, [pc, #16]	; (c8f8 <SYS_HwExpiry_Cb+0x14>)
    c8e8:	6813      	ldr	r3, [r2, #0]
    c8ea:	3301      	adds	r3, #1
    c8ec:	6013      	str	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    c8ee:	4803      	ldr	r0, [pc, #12]	; (c8fc <SYS_HwExpiry_Cb+0x18>)
    c8f0:	4b03      	ldr	r3, [pc, #12]	; (c900 <SYS_HwExpiry_Cb+0x1c>)
    c8f2:	4798      	blx	r3
}
    c8f4:	bd10      	pop	{r4, pc}
    c8f6:	46c0      	nop			; (mov r8, r8)
    c8f8:	20001fd8 	.word	0x20001fd8
    c8fc:	00002710 	.word	0x00002710
    c900:	0000e331 	.word	0x0000e331

0000c904 <SYS_TimerInit>:
{
    c904:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    c906:	2400      	movs	r4, #0
    c908:	4b09      	ldr	r3, [pc, #36]	; (c930 <SYS_TimerInit+0x2c>)
    c90a:	601c      	str	r4, [r3, #0]
    timerExtension1 = 0;
    c90c:	4b09      	ldr	r3, [pc, #36]	; (c934 <SYS_TimerInit+0x30>)
    c90e:	701c      	strb	r4, [r3, #0]
    timerExtension2 = 0;
    c910:	4b09      	ldr	r3, [pc, #36]	; (c938 <SYS_TimerInit+0x34>)
    c912:	701c      	strb	r4, [r3, #0]
    set_common_tc_overflow_callback(SYS_HwOverflow_Cb);
    c914:	4809      	ldr	r0, [pc, #36]	; (c93c <SYS_TimerInit+0x38>)
    c916:	4b0a      	ldr	r3, [pc, #40]	; (c940 <SYS_TimerInit+0x3c>)
    c918:	4798      	blx	r3
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    c91a:	480a      	ldr	r0, [pc, #40]	; (c944 <SYS_TimerInit+0x40>)
    c91c:	4b0a      	ldr	r3, [pc, #40]	; (c948 <SYS_TimerInit+0x44>)
    c91e:	4798      	blx	r3
	common_tc_init();
    c920:	4b0a      	ldr	r3, [pc, #40]	; (c94c <SYS_TimerInit+0x48>)
    c922:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    c924:	480a      	ldr	r0, [pc, #40]	; (c950 <SYS_TimerInit+0x4c>)
    c926:	4b0b      	ldr	r3, [pc, #44]	; (c954 <SYS_TimerInit+0x50>)
    c928:	4798      	blx	r3
	timers = NULL;
    c92a:	4b0b      	ldr	r3, [pc, #44]	; (c958 <SYS_TimerInit+0x54>)
    c92c:	601c      	str	r4, [r3, #0]
}
    c92e:	bd10      	pop	{r4, pc}
    c930:	20001fd8 	.word	0x20001fd8
    c934:	20001fdc 	.word	0x20001fdc
    c938:	20001fdd 	.word	0x20001fdd
    c93c:	0000c8c1 	.word	0x0000c8c1
    c940:	0000e421 	.word	0x0000e421
    c944:	0000c8e5 	.word	0x0000c8e5
    c948:	0000e42d 	.word	0x0000e42d
    c94c:	0000e39d 	.word	0x0000e39d
    c950:	00002710 	.word	0x00002710
    c954:	0000e331 	.word	0x0000e331
    c958:	20001c18 	.word	0x20001c18

0000c95c <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c95c:	4b0e      	ldr	r3, [pc, #56]	; (c998 <SYS_TimerStop+0x3c>)
    c95e:	681a      	ldr	r2, [r3, #0]
    c960:	2a00      	cmp	r2, #0
    c962:	d014      	beq.n	c98e <SYS_TimerStop+0x32>
		if (t == timer) {
    c964:	4282      	cmp	r2, r0
    c966:	d013      	beq.n	c990 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c968:	6813      	ldr	r3, [r2, #0]
    c96a:	2b00      	cmp	r3, #0
    c96c:	d00f      	beq.n	c98e <SYS_TimerStop+0x32>
		if (t == timer) {
    c96e:	4298      	cmp	r0, r3
    c970:	d001      	beq.n	c976 <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c972:	001a      	movs	r2, r3
    c974:	e7f8      	b.n	c968 <SYS_TimerStop+0xc>
			if (prev) {
    c976:	2a00      	cmp	r2, #0
    c978:	d00a      	beq.n	c990 <SYS_TimerStop+0x34>
				prev->next = t->next;
    c97a:	6803      	ldr	r3, [r0, #0]
    c97c:	6013      	str	r3, [r2, #0]
			if (t->next) {
    c97e:	6803      	ldr	r3, [r0, #0]
    c980:	2b00      	cmp	r3, #0
    c982:	d004      	beq.n	c98e <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    c984:	6842      	ldr	r2, [r0, #4]
    c986:	6859      	ldr	r1, [r3, #4]
    c988:	468c      	mov	ip, r1
    c98a:	4462      	add	r2, ip
    c98c:	605a      	str	r2, [r3, #4]
}
    c98e:	4770      	bx	lr
				timers = t->next;
    c990:	4b01      	ldr	r3, [pc, #4]	; (c998 <SYS_TimerStop+0x3c>)
    c992:	6802      	ldr	r2, [r0, #0]
    c994:	601a      	str	r2, [r3, #0]
    c996:	e7f2      	b.n	c97e <SYS_TimerStop+0x22>
    c998:	20001c18 	.word	0x20001c18

0000c99c <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c99c:	4b09      	ldr	r3, [pc, #36]	; (c9c4 <SYS_TimerStarted+0x28>)
    c99e:	681b      	ldr	r3, [r3, #0]
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	d00a      	beq.n	c9ba <SYS_TimerStarted+0x1e>
		if (t == timer) {
    c9a4:	4283      	cmp	r3, r0
    c9a6:	d00a      	beq.n	c9be <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    c9a8:	681b      	ldr	r3, [r3, #0]
    c9aa:	2b00      	cmp	r3, #0
    c9ac:	d003      	beq.n	c9b6 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    c9ae:	4298      	cmp	r0, r3
    c9b0:	d1fa      	bne.n	c9a8 <SYS_TimerStarted+0xc>
			return true;
    c9b2:	2001      	movs	r0, #1
    c9b4:	e000      	b.n	c9b8 <SYS_TimerStarted+0x1c>
	return false;
    c9b6:	2000      	movs	r0, #0
}
    c9b8:	4770      	bx	lr
	return false;
    c9ba:	2000      	movs	r0, #0
    c9bc:	e7fc      	b.n	c9b8 <SYS_TimerStarted+0x1c>
			return true;
    c9be:	2001      	movs	r0, #1
    c9c0:	e7fa      	b.n	c9b8 <SYS_TimerStarted+0x1c>
    c9c2:	46c0      	nop			; (mov r8, r8)
    c9c4:	20001c18 	.word	0x20001c18

0000c9c8 <SYS_TimerStart>:
{
    c9c8:	b510      	push	{r4, lr}
    c9ca:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    c9cc:	4b04      	ldr	r3, [pc, #16]	; (c9e0 <SYS_TimerStart+0x18>)
    c9ce:	4798      	blx	r3
    c9d0:	2800      	cmp	r0, #0
    c9d2:	d000      	beq.n	c9d6 <SYS_TimerStart+0xe>
}
    c9d4:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    c9d6:	0020      	movs	r0, r4
    c9d8:	4b02      	ldr	r3, [pc, #8]	; (c9e4 <SYS_TimerStart+0x1c>)
    c9da:	4798      	blx	r3
}
    c9dc:	e7fa      	b.n	c9d4 <SYS_TimerStart+0xc>
    c9de:	46c0      	nop			; (mov r8, r8)
    c9e0:	0000c99d 	.word	0x0000c99d
    c9e4:	0000c869 	.word	0x0000c869

0000c9e8 <SYS_TimerTaskHandler>:
{
    c9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9ea:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    c9ec:	4b1d      	ldr	r3, [pc, #116]	; (ca64 <SYS_TimerTaskHandler+0x7c>)
    c9ee:	681b      	ldr	r3, [r3, #0]
    c9f0:	2b00      	cmp	r3, #0
    c9f2:	d034      	beq.n	ca5e <SYS_TimerTaskHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    c9f4:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c9f8:	4253      	negs	r3, r2
    c9fa:	4153      	adcs	r3, r2
    c9fc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c9fe:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    ca00:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ca04:	2100      	movs	r1, #0
    ca06:	4b18      	ldr	r3, [pc, #96]	; (ca68 <SYS_TimerTaskHandler+0x80>)
    ca08:	7019      	strb	r1, [r3, #0]
	return flags;
    ca0a:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    ca0c:	4a15      	ldr	r2, [pc, #84]	; (ca64 <SYS_TimerTaskHandler+0x7c>)
    ca0e:	6813      	ldr	r3, [r2, #0]
	SysTimerIrqCount = 0;
    ca10:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    ca12:	2800      	cmp	r0, #0
    ca14:	d005      	beq.n	ca22 <SYS_TimerTaskHandler+0x3a>
		cpu_irq_enable();
    ca16:	3101      	adds	r1, #1
    ca18:	4a13      	ldr	r2, [pc, #76]	; (ca68 <SYS_TimerTaskHandler+0x80>)
    ca1a:	7011      	strb	r1, [r2, #0]
    ca1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ca20:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    ca22:	009d      	lsls	r5, r3, #2
    ca24:	18ed      	adds	r5, r5, r3
    ca26:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    ca28:	4e10      	ldr	r6, [pc, #64]	; (ca6c <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    ca2a:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    ca2c:	e005      	b.n	ca3a <SYS_TimerTaskHandler+0x52>
			placeTimer(timer);
    ca2e:	0020      	movs	r0, r4
    ca30:	4b0f      	ldr	r3, [pc, #60]	; (ca70 <SYS_TimerTaskHandler+0x88>)
    ca32:	4798      	blx	r3
    ca34:	e00d      	b.n	ca52 <SYS_TimerTaskHandler+0x6a>
			timer->handler(timer);
    ca36:	0020      	movs	r0, r4
    ca38:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    ca3a:	6834      	ldr	r4, [r6, #0]
    ca3c:	2c00      	cmp	r4, #0
    ca3e:	d00e      	beq.n	ca5e <SYS_TimerTaskHandler+0x76>
    ca40:	6863      	ldr	r3, [r4, #4]
    ca42:	429d      	cmp	r5, r3
    ca44:	d309      	bcc.n	ca5a <SYS_TimerTaskHandler+0x72>
		elapsed -= timers->timeout;
    ca46:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    ca48:	6823      	ldr	r3, [r4, #0]
    ca4a:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    ca4c:	7b23      	ldrb	r3, [r4, #12]
    ca4e:	2b01      	cmp	r3, #1
    ca50:	d0ed      	beq.n	ca2e <SYS_TimerTaskHandler+0x46>
		if (timer->handler) {
    ca52:	6923      	ldr	r3, [r4, #16]
    ca54:	2b00      	cmp	r3, #0
    ca56:	d1ee      	bne.n	ca36 <SYS_TimerTaskHandler+0x4e>
    ca58:	e7ef      	b.n	ca3a <SYS_TimerTaskHandler+0x52>
		timers->timeout -= elapsed;
    ca5a:	1b5d      	subs	r5, r3, r5
    ca5c:	6065      	str	r5, [r4, #4]
}
    ca5e:	b003      	add	sp, #12
    ca60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca62:	46c0      	nop			; (mov r8, r8)
    ca64:	20001fd8 	.word	0x20001fd8
    ca68:	20000008 	.word	0x20000008
    ca6c:	20001c18 	.word	0x20001c18
    ca70:	0000c869 	.word	0x0000c869

0000ca74 <MiWi_TickGet>:
{
    ca74:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    ca76:	4e0f      	ldr	r6, [pc, #60]	; (cab4 <MiWi_TickGet+0x40>)
    ca78:	7835      	ldrb	r5, [r6, #0]
    ca7a:	b2ed      	uxtb	r5, r5
	currentTime.word.w0 = common_tc_read_count();
    ca7c:	4b0e      	ldr	r3, [pc, #56]	; (cab8 <MiWi_TickGet+0x44>)
    ca7e:	4798      	blx	r3
    ca80:	0004      	movs	r4, r0
	nop();
    ca82:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    ca84:	7833      	ldrb	r3, [r6, #0]
    ca86:	b2db      	uxtb	r3, r3
    ca88:	429d      	cmp	r5, r3
    ca8a:	d004      	beq.n	ca96 <MiWi_TickGet+0x22>
		currentTime.word.w0 = common_tc_read_count();
    ca8c:	4b0a      	ldr	r3, [pc, #40]	; (cab8 <MiWi_TickGet+0x44>)
    ca8e:	4798      	blx	r3
    ca90:	0c24      	lsrs	r4, r4, #16
    ca92:	0424      	lsls	r4, r4, #16
    ca94:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    ca96:	4b07      	ldr	r3, [pc, #28]	; (cab4 <MiWi_TickGet+0x40>)
    ca98:	781b      	ldrb	r3, [r3, #0]
    ca9a:	041b      	lsls	r3, r3, #16
    ca9c:	4807      	ldr	r0, [pc, #28]	; (cabc <MiWi_TickGet+0x48>)
    ca9e:	4004      	ands	r4, r0
    caa0:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    caa2:	4b07      	ldr	r3, [pc, #28]	; (cac0 <MiWi_TickGet+0x4c>)
    caa4:	781b      	ldrb	r3, [r3, #0]
    caa6:	061b      	lsls	r3, r3, #24
    caa8:	0224      	lsls	r4, r4, #8
    caaa:	0a24      	lsrs	r4, r4, #8
    caac:	431c      	orrs	r4, r3
}
    caae:	0020      	movs	r0, r4
    cab0:	bd70      	pop	{r4, r5, r6, pc}
    cab2:	46c0      	nop			; (mov r8, r8)
    cab4:	20001fdc 	.word	0x20001fdc
    cab8:	0000e2e5 	.word	0x0000e2e5
    cabc:	ff00ffff 	.word	0xff00ffff
    cac0:	20001fdd 	.word	0x20001fdd

0000cac4 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    cac4:	4288      	cmp	r0, r1
    cac6:	d802      	bhi.n	cace <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    cac8:	3801      	subs	r0, #1
    caca:	1a40      	subs	r0, r0, r1
}
    cacc:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    cace:	1a40      	subs	r0, r0, r1
    cad0:	e7fc      	b.n	cacc <MiWi_TickGetDiff+0x8>
    cad2:	Address 0x0000cad2 is out of bounds.


0000cad4 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    cad4:	b510      	push	{r4, lr}
	tmr_cca_callback();
    cad6:	4b01      	ldr	r3, [pc, #4]	; (cadc <tc_cca_callback+0x8>)
    cad8:	4798      	blx	r3
}
    cada:	bd10      	pop	{r4, pc}
    cadc:	0000e405 	.word	0x0000e405

0000cae0 <tc_ovf_callback>:
{
    cae0:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    cae2:	4b01      	ldr	r3, [pc, #4]	; (cae8 <tc_ovf_callback+0x8>)
    cae4:	4798      	blx	r3
}
    cae6:	bd10      	pop	{r4, pc}
    cae8:	0000e3bd 	.word	0x0000e3bd

0000caec <tmr_read_count>:
{
    caec:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    caee:	4802      	ldr	r0, [pc, #8]	; (caf8 <tmr_read_count+0xc>)
    caf0:	4b02      	ldr	r3, [pc, #8]	; (cafc <tmr_read_count+0x10>)
    caf2:	4798      	blx	r3
    caf4:	b280      	uxth	r0, r0
}
    caf6:	bd10      	pop	{r4, pc}
    caf8:	20002014 	.word	0x20002014
    cafc:	000088f5 	.word	0x000088f5

0000cb00 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    cb00:	4b03      	ldr	r3, [pc, #12]	; (cb10 <tmr_disable_cc_interrupt+0x10>)
    cb02:	2110      	movs	r1, #16
    cb04:	681a      	ldr	r2, [r3, #0]
    cb06:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    cb08:	7e5a      	ldrb	r2, [r3, #25]
    cb0a:	438a      	bics	r2, r1
    cb0c:	765a      	strb	r2, [r3, #25]
}
    cb0e:	4770      	bx	lr
    cb10:	20002014 	.word	0x20002014

0000cb14 <tmr_enable_cc_interrupt>:
{
    cb14:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    cb16:	4c0b      	ldr	r4, [pc, #44]	; (cb44 <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    cb18:	2510      	movs	r5, #16
    cb1a:	6823      	ldr	r3, [r4, #0]
    cb1c:	739d      	strb	r5, [r3, #14]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    cb1e:	0018      	movs	r0, r3
    cb20:	4b09      	ldr	r3, [pc, #36]	; (cb48 <tmr_enable_cc_interrupt+0x34>)
    cb22:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    cb24:	4b09      	ldr	r3, [pc, #36]	; (cb4c <tmr_enable_cc_interrupt+0x38>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cb26:	5c1b      	ldrb	r3, [r3, r0]
    cb28:	221f      	movs	r2, #31
    cb2a:	401a      	ands	r2, r3
    cb2c:	2301      	movs	r3, #1
    cb2e:	4093      	lsls	r3, r2
    cb30:	4a07      	ldr	r2, [pc, #28]	; (cb50 <tmr_enable_cc_interrupt+0x3c>)
    cb32:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    cb34:	7e63      	ldrb	r3, [r4, #25]
    cb36:	2210      	movs	r2, #16
    cb38:	4313      	orrs	r3, r2
    cb3a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    cb3c:	6823      	ldr	r3, [r4, #0]
    cb3e:	735d      	strb	r5, [r3, #13]
}
    cb40:	bd70      	pop	{r4, r5, r6, pc}
    cb42:	46c0      	nop			; (mov r8, r8)
    cb44:	20002014 	.word	0x20002014
    cb48:	00008681 	.word	0x00008681
    cb4c:	000126cc 	.word	0x000126cc
    cb50:	e000e100 	.word	0xe000e100

0000cb54 <tmr_write_cmpreg>:
{
    cb54:	b510      	push	{r4, lr}
    cb56:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    cb58:	2100      	movs	r1, #0
    cb5a:	4802      	ldr	r0, [pc, #8]	; (cb64 <tmr_write_cmpreg+0x10>)
    cb5c:	4b02      	ldr	r3, [pc, #8]	; (cb68 <tmr_write_cmpreg+0x14>)
    cb5e:	4798      	blx	r3
}
    cb60:	bd10      	pop	{r4, pc}
    cb62:	46c0      	nop			; (mov r8, r8)
    cb64:	20002014 	.word	0x20002014
    cb68:	00008921 	.word	0x00008921

0000cb6c <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    cb6c:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    cb6e:	4a30      	ldr	r2, [pc, #192]	; (cc30 <tmr_init+0xc4>)
    cb70:	2300      	movs	r3, #0
    cb72:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    cb74:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    cb76:	2100      	movs	r1, #0
    cb78:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    cb7a:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    cb7c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    cb7e:	7051      	strb	r1, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    cb80:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    cb82:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    cb84:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    cb86:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    cb88:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    cb8a:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    cb8c:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    cb8e:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    cb90:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    cb92:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    cb94:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    cb96:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    cb98:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    cb9a:	3b01      	subs	r3, #1
    cb9c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    cb9e:	4c25      	ldr	r4, [pc, #148]	; (cc34 <tmr_init+0xc8>)
    cba0:	4925      	ldr	r1, [pc, #148]	; (cc38 <tmr_init+0xcc>)
    cba2:	0020      	movs	r0, r4
    cba4:	4b25      	ldr	r3, [pc, #148]	; (cc3c <tmr_init+0xd0>)
    cba6:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    cba8:	2200      	movs	r2, #0
    cbaa:	4925      	ldr	r1, [pc, #148]	; (cc40 <tmr_init+0xd4>)
    cbac:	0020      	movs	r0, r4
    cbae:	4d25      	ldr	r5, [pc, #148]	; (cc44 <tmr_init+0xd8>)
    cbb0:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    cbb2:	2202      	movs	r2, #2
    cbb4:	4924      	ldr	r1, [pc, #144]	; (cc48 <tmr_init+0xdc>)
    cbb6:	0020      	movs	r0, r4
    cbb8:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    cbba:	6820      	ldr	r0, [r4, #0]
    cbbc:	4b23      	ldr	r3, [pc, #140]	; (cc4c <tmr_init+0xe0>)
    cbbe:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    cbc0:	4b23      	ldr	r3, [pc, #140]	; (cc50 <tmr_init+0xe4>)
    cbc2:	5c1a      	ldrb	r2, [r3, r0]
    cbc4:	231f      	movs	r3, #31
    cbc6:	4013      	ands	r3, r2
    cbc8:	2101      	movs	r1, #1
    cbca:	000a      	movs	r2, r1
    cbcc:	409a      	lsls	r2, r3
    cbce:	4b21      	ldr	r3, [pc, #132]	; (cc54 <tmr_init+0xe8>)
    cbd0:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    cbd2:	7e63      	ldrb	r3, [r4, #25]
    cbd4:	2201      	movs	r2, #1
    cbd6:	4313      	orrs	r3, r2
    cbd8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    cbda:	6822      	ldr	r2, [r4, #0]
    cbdc:	7351      	strb	r1, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    cbde:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    cbe0:	b25b      	sxtb	r3, r3
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	dbfb      	blt.n	cbde <tmr_init+0x72>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    cbe6:	8813      	ldrh	r3, [r2, #0]
    cbe8:	2102      	movs	r1, #2
    cbea:	430b      	orrs	r3, r1
    cbec:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    cbee:	2000      	movs	r0, #0
    cbf0:	4b19      	ldr	r3, [pc, #100]	; (cc58 <tmr_init+0xec>)
    cbf2:	4798      	blx	r3
    cbf4:	4d19      	ldr	r5, [pc, #100]	; (cc5c <tmr_init+0xf0>)
    cbf6:	47a8      	blx	r5
    cbf8:	4919      	ldr	r1, [pc, #100]	; (cc60 <tmr_init+0xf4>)
    cbfa:	4b1a      	ldr	r3, [pc, #104]	; (cc64 <tmr_init+0xf8>)
    cbfc:	4798      	blx	r3
    cbfe:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    cc00:	4b19      	ldr	r3, [pc, #100]	; (cc68 <tmr_init+0xfc>)
    cc02:	4798      	blx	r3
    cc04:	47a8      	blx	r5
    cc06:	1c01      	adds	r1, r0, #0
    cc08:	1c20      	adds	r0, r4, #0
    cc0a:	4b18      	ldr	r3, [pc, #96]	; (cc6c <tmr_init+0x100>)
    cc0c:	4798      	blx	r3
    cc0e:	21fc      	movs	r1, #252	; 0xfc
    cc10:	0589      	lsls	r1, r1, #22
    cc12:	4b17      	ldr	r3, [pc, #92]	; (cc70 <tmr_init+0x104>)
    cc14:	4798      	blx	r3
    cc16:	2800      	cmp	r0, #0
    cc18:	d005      	beq.n	cc26 <tmr_init+0xba>
	{
		timer_multiplier += 1.0f;
    cc1a:	21fe      	movs	r1, #254	; 0xfe
    cc1c:	0589      	lsls	r1, r1, #22
    cc1e:	1c20      	adds	r0, r4, #0
    cc20:	4b14      	ldr	r3, [pc, #80]	; (cc74 <tmr_init+0x108>)
    cc22:	4798      	blx	r3
    cc24:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    cc26:	1c20      	adds	r0, r4, #0
    cc28:	4b0f      	ldr	r3, [pc, #60]	; (cc68 <tmr_init+0xfc>)
    cc2a:	4798      	blx	r3
    cc2c:	b2c0      	uxtb	r0, r0
}
    cc2e:	bd70      	pop	{r4, r5, r6, pc}
    cc30:	20001fe0 	.word	0x20001fe0
    cc34:	20002014 	.word	0x20002014
    cc38:	42002c00 	.word	0x42002c00
    cc3c:	000086b9 	.word	0x000086b9
    cc40:	0000cae1 	.word	0x0000cae1
    cc44:	000085b9 	.word	0x000085b9
    cc48:	0000cad5 	.word	0x0000cad5
    cc4c:	00008681 	.word	0x00008681
    cc50:	000126cc 	.word	0x000126cc
    cc54:	e000e100 	.word	0xe000e100
    cc58:	00008349 	.word	0x00008349
    cc5c:	0000f299 	.word	0x0000f299
    cc60:	49742400 	.word	0x49742400
    cc64:	0000eb41 	.word	0x0000eb41
    cc68:	0000e7ed 	.word	0x0000e7ed
    cc6c:	0000ef21 	.word	0x0000ef21
    cc70:	0000e785 	.word	0x0000e785
    cc74:	0000e81d 	.word	0x0000e81d

0000cc78 <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
    cc78:	b570      	push	{r4, r5, r6, lr}
    cc7a:	b090      	sub	sp, #64	; 0x40
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    cc7c:	aa03      	add	r2, sp, #12
    cc7e:	2364      	movs	r3, #100	; 0x64
    cc80:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    cc82:	4b4d      	ldr	r3, [pc, #308]	; (cdb8 <edbg_eui_read_eui64+0x140>)
    cc84:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    cc86:	2300      	movs	r3, #0
    cc88:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    cc8a:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    cc8c:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    cc8e:	2180      	movs	r1, #128	; 0x80
    cc90:	0389      	lsls	r1, r1, #14
    cc92:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    cc94:	2101      	movs	r1, #1
    cc96:	4249      	negs	r1, r1
    cc98:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    cc9a:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    cc9c:	3125      	adds	r1, #37	; 0x25
    cc9e:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    cca0:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    cca2:	3108      	adds	r1, #8
    cca4:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    cca6:	3101      	adds	r1, #1
    cca8:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    ccaa:	3101      	adds	r1, #1
    ccac:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    ccae:	33d7      	adds	r3, #215	; 0xd7
    ccb0:	8613      	strh	r3, [r2, #48]	; 0x30
  int timeout2 = 0;
  bool random_mac_address = false;
  uint8_t edbg_status = 0xFF;
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    ccb2:	4b42      	ldr	r3, [pc, #264]	; (cdbc <edbg_eui_read_eui64+0x144>)
    ccb4:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    ccb6:	4b42      	ldr	r3, [pc, #264]	; (cdc0 <edbg_eui_read_eui64+0x148>)
    ccb8:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
    ccba:	4c42      	ldr	r4, [pc, #264]	; (cdc4 <edbg_eui_read_eui64+0x14c>)
    ccbc:	4942      	ldr	r1, [pc, #264]	; (cdc8 <edbg_eui_read_eui64+0x150>)
    ccbe:	0020      	movs	r0, r4
    ccc0:	4b42      	ldr	r3, [pc, #264]	; (cdcc <edbg_eui_read_eui64+0x154>)
    ccc2:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    ccc4:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    ccc6:	2107      	movs	r1, #7
    ccc8:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    ccca:	4219      	tst	r1, r3
    cccc:	d1fc      	bne.n	ccc8 <edbg_eui_read_eui64+0x50>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    ccce:	6813      	ldr	r3, [r2, #0]
    ccd0:	2102      	movs	r1, #2
    ccd2:	430b      	orrs	r3, r1
    ccd4:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    ccd6:	4b3b      	ldr	r3, [pc, #236]	; (cdc4 <edbg_eui_read_eui64+0x14c>)
    ccd8:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    ccda:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    ccdc:	2010      	movs	r0, #16
    ccde:	8b51      	ldrh	r1, [r2, #26]
    cce0:	4201      	tst	r1, r0
    cce2:	d104      	bne.n	ccee <edbg_eui_read_eui64+0x76>
		timeout_counter++;
    cce4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    cce6:	42a3      	cmp	r3, r4
    cce8:	d3f9      	bcc.n	ccde <edbg_eui_read_eui64+0x66>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    ccea:	2310      	movs	r3, #16
    ccec:	8353      	strh	r3, [r2, #26]

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
    ccee:	466a      	mov	r2, sp
    ccf0:	4b37      	ldr	r3, [pc, #220]	; (cdd0 <edbg_eui_read_eui64+0x158>)
    ccf2:	cb13      	ldmia	r3!, {r0, r1, r4}
    ccf4:	c213      	stmia	r2!, {r0, r1, r4}
  int timeout2 = 0;
    ccf6:	2600      	movs	r6, #0
    .hs_master_code  = 0x0,
  };
   
    do
    {
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    ccf8:	4c32      	ldr	r4, [pc, #200]	; (cdc4 <edbg_eui_read_eui64+0x14c>)
    ccfa:	4d36      	ldr	r5, [pc, #216]	; (cdd4 <edbg_eui_read_eui64+0x15c>)
    ccfc:	e003      	b.n	cd06 <edbg_eui_read_eui64+0x8e>
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
		{
			if(timeout2++ == SLAVE_WAIT_TIMEOUT)
    ccfe:	1c73      	adds	r3, r6, #1
    cd00:	2e0a      	cmp	r6, #10
    cd02:	d033      	beq.n	cd6c <edbg_eui_read_eui64+0xf4>
    cd04:	001e      	movs	r6, r3
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    cd06:	4669      	mov	r1, sp
    cd08:	0020      	movs	r0, r4
    cd0a:	47a8      	blx	r5
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
    cd0c:	2818      	cmp	r0, #24
    cd0e:	d0f6      	beq.n	ccfe <edbg_eui_read_eui64+0x86>
				random_mac_address = true;
				timeout2 = 0;
				break;
			}
		}
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    cd10:	2812      	cmp	r0, #18
    cd12:	d02b      	beq.n	cd6c <edbg_eui_read_eui64+0xf4>
		PRINTF("Timeout 1\n");
		random_mac_address = true;	
		break;
		}
    } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    cd14:	3801      	subs	r0, #1
    cd16:	b2c0      	uxtb	r0, r0
    cd18:	28fd      	cmp	r0, #253	; 0xfd
    cd1a:	d9f4      	bls.n	cd06 <edbg_eui_read_eui64+0x8e>
	
  packet.data = readbuf;
    cd1c:	4b2e      	ldr	r3, [pc, #184]	; (cdd8 <edbg_eui_read_eui64+0x160>)
    cd1e:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    cd20:	2380      	movs	r3, #128	; 0x80
    cd22:	005b      	lsls	r3, r3, #1
    cd24:	466a      	mov	r2, sp
    cd26:	8053      	strh	r3, [r2, #2]
if(random_mac_address == false)
{
  do 
  {
	  edbg_status = i2c_master_read_packet_wait(&i2c_master_instance, &packet) ;
    cd28:	4c26      	ldr	r4, [pc, #152]	; (cdc4 <edbg_eui_read_eui64+0x14c>)
    cd2a:	4d2c      	ldr	r5, [pc, #176]	; (cddc <edbg_eui_read_eui64+0x164>)
    cd2c:	4669      	mov	r1, sp
    cd2e:	0020      	movs	r0, r4
    cd30:	47a8      	blx	r5
	    if(edbg_status==STATUS_ERR_BAD_ADDRESS)
    cd32:	2818      	cmp	r0, #24
    cd34:	d03c      	beq.n	cdb0 <edbg_eui_read_eui64+0x138>
	    {			
			PRINTF("I2C Slave Not Available");
			random_mac_address = true;	
		    break;
	    }
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    cd36:	2812      	cmp	r0, #18
    cd38:	d03a      	beq.n	cdb0 <edbg_eui_read_eui64+0x138>
			random_mac_address = true;	
			PRINTF("Timeout 2\n");
			break;
		}		
  } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    cd3a:	3801      	subs	r0, #1
    cd3c:	b2c0      	uxtb	r0, r0
    cd3e:	28fd      	cmp	r0, #253	; 0xfd
    cd40:	d9f4      	bls.n	cd2c <edbg_eui_read_eui64+0xb4>
}
  i2c_master_reset(&i2c_master_instance);
    cd42:	4820      	ldr	r0, [pc, #128]	; (cdc4 <edbg_eui_read_eui64+0x14c>)
    cd44:	4b26      	ldr	r3, [pc, #152]	; (cde0 <edbg_eui_read_eui64+0x168>)
    cd46:	4798      	blx	r3
  if(random_mac_address || !(readbuf[0] ^ readbuf[1] ^ readbuf[2] ^ readbuf[3] ^ readbuf[4] ^ readbuf[5] ^ readbuf[6] ^ readbuf[7]))
    cd48:	4a23      	ldr	r2, [pc, #140]	; (cdd8 <edbg_eui_read_eui64+0x160>)
    cd4a:	7813      	ldrb	r3, [r2, #0]
    cd4c:	7851      	ldrb	r1, [r2, #1]
    cd4e:	404b      	eors	r3, r1
    cd50:	7891      	ldrb	r1, [r2, #2]
    cd52:	404b      	eors	r3, r1
    cd54:	78d1      	ldrb	r1, [r2, #3]
    cd56:	404b      	eors	r3, r1
    cd58:	7911      	ldrb	r1, [r2, #4]
    cd5a:	404b      	eors	r3, r1
    cd5c:	7951      	ldrb	r1, [r2, #5]
    cd5e:	404b      	eors	r3, r1
    cd60:	7991      	ldrb	r1, [r2, #6]
    cd62:	79d2      	ldrb	r2, [r2, #7]
    cd64:	404b      	eors	r3, r1
    cd66:	429a      	cmp	r2, r3
    cd68:	d11f      	bne.n	cdaa <edbg_eui_read_eui64+0x132>
    cd6a:	e008      	b.n	cd7e <edbg_eui_read_eui64+0x106>
  packet.data = readbuf;
    cd6c:	4b1a      	ldr	r3, [pc, #104]	; (cdd8 <edbg_eui_read_eui64+0x160>)
    cd6e:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    cd70:	2380      	movs	r3, #128	; 0x80
    cd72:	005b      	lsls	r3, r3, #1
    cd74:	466a      	mov	r2, sp
    cd76:	8053      	strh	r3, [r2, #2]
  i2c_master_reset(&i2c_master_instance);
    cd78:	4812      	ldr	r0, [pc, #72]	; (cdc4 <edbg_eui_read_eui64+0x14c>)
    cd7a:	4b19      	ldr	r3, [pc, #100]	; (cde0 <edbg_eui_read_eui64+0x168>)
    cd7c:	4798      	blx	r3
  {
	  unsigned int seed;
	  seed = ((*S_NO_WORD0) ^ (*S_NO_WORD1) ^ (*S_NO_WORD2) ^ (*S_NO_WORD3));
    cd7e:	4b19      	ldr	r3, [pc, #100]	; (cde4 <edbg_eui_read_eui64+0x16c>)
    cd80:	6818      	ldr	r0, [r3, #0]
    cd82:	4b19      	ldr	r3, [pc, #100]	; (cde8 <edbg_eui_read_eui64+0x170>)
    cd84:	681b      	ldr	r3, [r3, #0]
    cd86:	4058      	eors	r0, r3
    cd88:	4b18      	ldr	r3, [pc, #96]	; (cdec <edbg_eui_read_eui64+0x174>)
    cd8a:	681b      	ldr	r3, [r3, #0]
    cd8c:	4058      	eors	r0, r3
    cd8e:	4b18      	ldr	r3, [pc, #96]	; (cdf0 <edbg_eui_read_eui64+0x178>)
    cd90:	681b      	ldr	r3, [r3, #0]
    cd92:	4058      	eors	r0, r3
	  srand(seed);
    cd94:	4b17      	ldr	r3, [pc, #92]	; (cdf4 <edbg_eui_read_eui64+0x17c>)
    cd96:	4798      	blx	r3
    cd98:	4c0f      	ldr	r4, [pc, #60]	; (cdd8 <edbg_eui_read_eui64+0x160>)
    cd9a:	0026      	movs	r6, r4
    cd9c:	3608      	adds	r6, #8
	  //printf("\r\n Generating Random MAC \r\n");
	  for (uint8_t i = 0; i < 8; i++) {
		  *(readbuf+i) = rand();
    cd9e:	4d16      	ldr	r5, [pc, #88]	; (cdf8 <edbg_eui_read_eui64+0x180>)
    cda0:	47a8      	blx	r5
    cda2:	7020      	strb	r0, [r4, #0]
    cda4:	3401      	adds	r4, #1
	  for (uint8_t i = 0; i < 8; i++) {
    cda6:	42a6      	cmp	r6, r4
    cda8:	d1fa      	bne.n	cda0 <edbg_eui_read_eui64+0x128>
	  }
	  
  }
  return readbuf;
}
    cdaa:	480b      	ldr	r0, [pc, #44]	; (cdd8 <edbg_eui_read_eui64+0x160>)
    cdac:	b010      	add	sp, #64	; 0x40
    cdae:	bd70      	pop	{r4, r5, r6, pc}
  i2c_master_reset(&i2c_master_instance);
    cdb0:	4804      	ldr	r0, [pc, #16]	; (cdc4 <edbg_eui_read_eui64+0x14c>)
    cdb2:	4b0b      	ldr	r3, [pc, #44]	; (cde0 <edbg_eui_read_eui64+0x168>)
    cdb4:	4798      	blx	r3
    cdb6:	e7e2      	b.n	cd7e <edbg_eui_read_eui64+0x106>
    cdb8:	00000d48 	.word	0x00000d48
    cdbc:	00100002 	.word	0x00100002
    cdc0:	00110002 	.word	0x00110002
    cdc4:	20002130 	.word	0x20002130
    cdc8:	42000c00 	.word	0x42000c00
    cdcc:	00006839 	.word	0x00006839
    cdd0:	000126d0 	.word	0x000126d0
    cdd4:	00006e51 	.word	0x00006e51
    cdd8:	20002030 	.word	0x20002030
    cddc:	00006e3d 	.word	0x00006e3d
    cde0:	00006b01 	.word	0x00006b01
    cde4:	0080a00c 	.word	0x0080a00c
    cde8:	0080a040 	.word	0x0080a040
    cdec:	0080a044 	.word	0x0080a044
    cdf0:	0080a048 	.word	0x0080a048
    cdf4:	00011371 	.word	0x00011371
    cdf8:	000113cd 	.word	0x000113cd

0000cdfc <nvm_init>:

	return STATUS_OK;
}

status_code_t nvm_init(mem_type_t mem)
{
    cdfc:	b500      	push	{lr}
    cdfe:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    ce00:	2800      	cmp	r0, #0
    ce02:	d110      	bne.n	ce26 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    ce04:	2300      	movs	r3, #0
    ce06:	466a      	mov	r2, sp
    ce08:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    ce0a:	4a08      	ldr	r2, [pc, #32]	; (ce2c <nvm_init+0x30>)
    ce0c:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    ce0e:	466a      	mov	r2, sp
    ce10:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    ce12:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    ce14:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    ce16:	3302      	adds	r3, #2
    ce18:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    ce1a:	4668      	mov	r0, sp
    ce1c:	4b04      	ldr	r3, [pc, #16]	; (ce30 <nvm_init+0x34>)
    ce1e:	4798      	blx	r3

		return STATUS_OK;
    ce20:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    ce22:	b003      	add	sp, #12
    ce24:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    ce26:	2008      	movs	r0, #8
    ce28:	4240      	negs	r0, r0
    ce2a:	e7fa      	b.n	ce22 <nvm_init+0x26>
    ce2c:	41004000 	.word	0x41004000
    ce30:	00006585 	.word	0x00006585

0000ce34 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    ce34:	b570      	push	{r4, r5, r6, lr}
    ce36:	0003      	movs	r3, r0
    ce38:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    ce3a:	4c14      	ldr	r4, [pc, #80]	; (ce8c <sal_aes_wrrd+0x58>)
    ce3c:	1c60      	adds	r0, r4, #1
    ce3e:	2210      	movs	r2, #16
    ce40:	0019      	movs	r1, r3
    ce42:	4b13      	ldr	r3, [pc, #76]	; (ce90 <sal_aes_wrrd+0x5c>)
    ce44:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    ce46:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    ce48:	4b12      	ldr	r3, [pc, #72]	; (ce94 <sal_aes_wrrd+0x60>)
    ce4a:	781b      	ldrb	r3, [r3, #0]
    ce4c:	2b00      	cmp	r3, #0
    ce4e:	d015      	beq.n	ce7c <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    ce50:	2212      	movs	r2, #18
    ce52:	490e      	ldr	r1, [pc, #56]	; (ce8c <sal_aes_wrrd+0x58>)
    ce54:	2083      	movs	r0, #131	; 0x83
    ce56:	4b10      	ldr	r3, [pc, #64]	; (ce98 <sal_aes_wrrd+0x64>)
    ce58:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    ce5a:	2200      	movs	r2, #0
    ce5c:	4b0d      	ldr	r3, [pc, #52]	; (ce94 <sal_aes_wrrd+0x60>)
    ce5e:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    ce60:	2d00      	cmp	r5, #0
    ce62:	d005      	beq.n	ce70 <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    ce64:	2210      	movs	r2, #16
    ce66:	4909      	ldr	r1, [pc, #36]	; (ce8c <sal_aes_wrrd+0x58>)
    ce68:	3101      	adds	r1, #1
    ce6a:	0028      	movs	r0, r5
    ce6c:	4b08      	ldr	r3, [pc, #32]	; (ce90 <sal_aes_wrrd+0x5c>)
    ce6e:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    ce70:	4b06      	ldr	r3, [pc, #24]	; (ce8c <sal_aes_wrrd+0x58>)
    ce72:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    ce74:	2018      	movs	r0, #24
    ce76:	4b09      	ldr	r3, [pc, #36]	; (ce9c <sal_aes_wrrd+0x68>)
    ce78:	4798      	blx	r3
}
    ce7a:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    ce7c:	2211      	movs	r2, #17
    ce7e:	4903      	ldr	r1, [pc, #12]	; (ce8c <sal_aes_wrrd+0x58>)
    ce80:	3101      	adds	r1, #1
    ce82:	2084      	movs	r0, #132	; 0x84
    ce84:	4b04      	ldr	r3, [pc, #16]	; (ce98 <sal_aes_wrrd+0x64>)
    ce86:	4798      	blx	r3
    ce88:	e7ea      	b.n	ce60 <sal_aes_wrrd+0x2c>
    ce8a:	46c0      	nop			; (mov r8, r8)
    ce8c:	20001c1c 	.word	0x20001c1c
    ce90:	00010caf 	.word	0x00010caf
    ce94:	20001c50 	.word	0x20001c50
    ce98:	0000d891 	.word	0x0000d891
    ce9c:	00006219 	.word	0x00006219

0000cea0 <sal_aes_setup>:
{
    cea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cea2:	46c6      	mov	lr, r8
    cea4:	b500      	push	{lr}
    cea6:	b084      	sub	sp, #16
    cea8:	0005      	movs	r5, r0
    ceaa:	000e      	movs	r6, r1
    ceac:	0014      	movs	r4, r2
	if (key != NULL) {
    ceae:	2800      	cmp	r0, #0
    ceb0:	d017      	beq.n	cee2 <sal_aes_setup+0x42>
		dec_initialized = false;
    ceb2:	2200      	movs	r2, #0
    ceb4:	4b3e      	ldr	r3, [pc, #248]	; (cfb0 <sal_aes_setup+0x110>)
    ceb6:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    ceb8:	3202      	adds	r2, #2
    ceba:	4b3e      	ldr	r3, [pc, #248]	; (cfb4 <sal_aes_setup+0x114>)
    cebc:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    cebe:	320e      	adds	r2, #14
    cec0:	0001      	movs	r1, r0
    cec2:	483d      	ldr	r0, [pc, #244]	; (cfb8 <sal_aes_setup+0x118>)
    cec4:	4b3d      	ldr	r3, [pc, #244]	; (cfbc <sal_aes_setup+0x11c>)
    cec6:	4698      	mov	r8, r3
    cec8:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    ceca:	4f3d      	ldr	r7, [pc, #244]	; (cfc0 <sal_aes_setup+0x120>)
    cecc:	2310      	movs	r3, #16
    cece:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    ced0:	1c78      	adds	r0, r7, #1
    ced2:	2210      	movs	r2, #16
    ced4:	0029      	movs	r1, r5
    ced6:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    ced8:	2211      	movs	r2, #17
    ceda:	0039      	movs	r1, r7
    cedc:	2083      	movs	r0, #131	; 0x83
    cede:	4b39      	ldr	r3, [pc, #228]	; (cfc4 <sal_aes_setup+0x124>)
    cee0:	4798      	blx	r3
	switch (dir) {
    cee2:	2c00      	cmp	r4, #0
    cee4:	d003      	beq.n	ceee <sal_aes_setup+0x4e>
    cee6:	2c01      	cmp	r4, #1
    cee8:	d02f      	beq.n	cf4a <sal_aes_setup+0xaa>
		return false;
    ceea:	2000      	movs	r0, #0
    ceec:	e01b      	b.n	cf26 <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    ceee:	4b31      	ldr	r3, [pc, #196]	; (cfb4 <sal_aes_setup+0x114>)
    cef0:	781b      	ldrb	r3, [r3, #0]
    cef2:	2b01      	cmp	r3, #1
    cef4:	d01b      	beq.n	cf2e <sal_aes_setup+0x8e>
	last_dir = dir;
    cef6:	4b2f      	ldr	r3, [pc, #188]	; (cfb4 <sal_aes_setup+0x114>)
    cef8:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    cefa:	2e00      	cmp	r6, #0
    cefc:	d002      	beq.n	cf04 <sal_aes_setup+0x64>
		return (false);
    cefe:	2000      	movs	r0, #0
	switch (enc_mode) {
    cf00:	2e02      	cmp	r6, #2
    cf02:	d110      	bne.n	cf26 <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    cf04:	0136      	lsls	r6, r6, #4
    cf06:	2370      	movs	r3, #112	; 0x70
    cf08:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    cf0a:	00e4      	lsls	r4, r4, #3
    cf0c:	3b68      	subs	r3, #104	; 0x68
    cf0e:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    cf10:	4334      	orrs	r4, r6
    cf12:	4b2b      	ldr	r3, [pc, #172]	; (cfc0 <sal_aes_setup+0x120>)
    cf14:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    cf16:	2680      	movs	r6, #128	; 0x80
    cf18:	4276      	negs	r6, r6
    cf1a:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    cf1c:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    cf1e:	2201      	movs	r2, #1
    cf20:	4b29      	ldr	r3, [pc, #164]	; (cfc8 <sal_aes_setup+0x128>)
    cf22:	701a      	strb	r2, [r3, #0]
	return (true);
    cf24:	2001      	movs	r0, #1
}
    cf26:	b004      	add	sp, #16
    cf28:	bc04      	pop	{r2}
    cf2a:	4690      	mov	r8, r2
    cf2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    cf2e:	4d24      	ldr	r5, [pc, #144]	; (cfc0 <sal_aes_setup+0x120>)
    cf30:	330f      	adds	r3, #15
    cf32:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    cf34:	1c68      	adds	r0, r5, #1
    cf36:	2210      	movs	r2, #16
    cf38:	491f      	ldr	r1, [pc, #124]	; (cfb8 <sal_aes_setup+0x118>)
    cf3a:	4b20      	ldr	r3, [pc, #128]	; (cfbc <sal_aes_setup+0x11c>)
    cf3c:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    cf3e:	2211      	movs	r2, #17
    cf40:	0029      	movs	r1, r5
    cf42:	2083      	movs	r0, #131	; 0x83
    cf44:	4b1f      	ldr	r3, [pc, #124]	; (cfc4 <sal_aes_setup+0x124>)
    cf46:	4798      	blx	r3
    cf48:	e7d5      	b.n	cef6 <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    cf4a:	4b1a      	ldr	r3, [pc, #104]	; (cfb4 <sal_aes_setup+0x114>)
    cf4c:	781b      	ldrb	r3, [r3, #0]
    cf4e:	2b01      	cmp	r3, #1
    cf50:	d0d1      	beq.n	cef6 <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    cf52:	2210      	movs	r2, #16
    cf54:	4b1a      	ldr	r3, [pc, #104]	; (cfc0 <sal_aes_setup+0x120>)
    cf56:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    cf58:	4b15      	ldr	r3, [pc, #84]	; (cfb0 <sal_aes_setup+0x110>)
    cf5a:	781b      	ldrb	r3, [r3, #0]
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d00e      	beq.n	cf7e <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    cf60:	4d17      	ldr	r5, [pc, #92]	; (cfc0 <sal_aes_setup+0x120>)
    cf62:	1c68      	adds	r0, r5, #1
    cf64:	2210      	movs	r2, #16
    cf66:	4919      	ldr	r1, [pc, #100]	; (cfcc <sal_aes_setup+0x12c>)
    cf68:	4b14      	ldr	r3, [pc, #80]	; (cfbc <sal_aes_setup+0x11c>)
    cf6a:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    cf6c:	2211      	movs	r2, #17
    cf6e:	0029      	movs	r1, r5
    cf70:	2083      	movs	r0, #131	; 0x83
    cf72:	4b14      	ldr	r3, [pc, #80]	; (cfc4 <sal_aes_setup+0x124>)
    cf74:	4798      	blx	r3
			dec_initialized = true;
    cf76:	4b0e      	ldr	r3, [pc, #56]	; (cfb0 <sal_aes_setup+0x110>)
    cf78:	2201      	movs	r2, #1
    cf7a:	701a      	strb	r2, [r3, #0]
    cf7c:	e7bb      	b.n	cef6 <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    cf7e:	4d10      	ldr	r5, [pc, #64]	; (cfc0 <sal_aes_setup+0x120>)
    cf80:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    cf82:	3380      	adds	r3, #128	; 0x80
    cf84:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    cf86:	3a0f      	subs	r2, #15
    cf88:	4b0f      	ldr	r3, [pc, #60]	; (cfc8 <sal_aes_setup+0x128>)
    cf8a:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    cf8c:	2100      	movs	r1, #0
    cf8e:	4668      	mov	r0, sp
    cf90:	4b0f      	ldr	r3, [pc, #60]	; (cfd0 <sal_aes_setup+0x130>)
    cf92:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    cf94:	2310      	movs	r3, #16
    cf96:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    cf98:	2201      	movs	r2, #1
    cf9a:	0029      	movs	r1, r5
    cf9c:	2083      	movs	r0, #131	; 0x83
    cf9e:	4b09      	ldr	r3, [pc, #36]	; (cfc4 <sal_aes_setup+0x124>)
    cfa0:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    cfa2:	2210      	movs	r2, #16
    cfa4:	4909      	ldr	r1, [pc, #36]	; (cfcc <sal_aes_setup+0x12c>)
    cfa6:	2084      	movs	r0, #132	; 0x84
    cfa8:	4b0a      	ldr	r3, [pc, #40]	; (cfd4 <sal_aes_setup+0x134>)
    cfaa:	4798      	blx	r3
    cfac:	e7d8      	b.n	cf60 <sal_aes_setup+0xc0>
    cfae:	46c0      	nop			; (mov r8, r8)
    cfb0:	20001c2e 	.word	0x20001c2e
    cfb4:	2000001e 	.word	0x2000001e
    cfb8:	20001c40 	.word	0x20001c40
    cfbc:	00010caf 	.word	0x00010caf
    cfc0:	20001c1c 	.word	0x20001c1c
    cfc4:	0000d59d 	.word	0x0000d59d
    cfc8:	20001c50 	.word	0x20001c50
    cfcc:	20001c30 	.word	0x20001c30
    cfd0:	0000ce35 	.word	0x0000ce35
    cfd4:	0000d709 	.word	0x0000d709

0000cfd8 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    cfd8:	b510      	push	{r4, lr}
    cfda:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    cfdc:	2210      	movs	r2, #16
    cfde:	2084      	movs	r0, #132	; 0x84
    cfe0:	4b01      	ldr	r3, [pc, #4]	; (cfe8 <sal_aes_read+0x10>)
    cfe2:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    cfe4:	bd10      	pop	{r4, pc}
    cfe6:	46c0      	nop			; (mov r8, r8)
    cfe8:	0000d709 	.word	0x0000d709

0000cfec <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    cfec:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    cfee:	2201      	movs	r2, #1
    cff0:	4b03      	ldr	r3, [pc, #12]	; (d000 <AT86RFX_ISR+0x14>)
    cff2:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    cff4:	4b03      	ldr	r3, [pc, #12]	; (d004 <AT86RFX_ISR+0x18>)
    cff6:	681b      	ldr	r3, [r3, #0]
    cff8:	2b00      	cmp	r3, #0
    cffa:	d000      	beq.n	cffe <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    cffc:	4798      	blx	r3
	}
}
    cffe:	bd10      	pop	{r4, pc}
    d000:	40001800 	.word	0x40001800
    d004:	20001c54 	.word	0x20001c54

0000d008 <trx_spi_init>:

void trx_spi_init(void)
{
    d008:	b530      	push	{r4, r5, lr}
    d00a:	b085      	sub	sp, #20
	config->address_enabled = false;
    d00c:	4a34      	ldr	r2, [pc, #208]	; (d0e0 <trx_spi_init+0xd8>)
    d00e:	2300      	movs	r3, #0
    d010:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    d012:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    d014:	213f      	movs	r1, #63	; 0x3f
    d016:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    d018:	4c32      	ldr	r4, [pc, #200]	; (d0e4 <trx_spi_init+0xdc>)
    d01a:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    d01c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    d01e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    d020:	2201      	movs	r2, #1
    d022:	4669      	mov	r1, sp
    d024:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    d026:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    d028:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    d02a:	203f      	movs	r0, #63	; 0x3f
    d02c:	4b2e      	ldr	r3, [pc, #184]	; (d0e8 <trx_spi_init+0xe0>)
    d02e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    d030:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    d032:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d034:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d036:	2900      	cmp	r1, #0
    d038:	d104      	bne.n	d044 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    d03a:	0953      	lsrs	r3, r2, #5
    d03c:	01db      	lsls	r3, r3, #7
    d03e:	492b      	ldr	r1, [pc, #172]	; (d0ec <trx_spi_init+0xe4>)
    d040:	468c      	mov	ip, r1
    d042:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d044:	211f      	movs	r1, #31
    d046:	4011      	ands	r1, r2
    d048:	2201      	movs	r2, #1
    d04a:	0010      	movs	r0, r2
    d04c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    d04e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    d050:	4c27      	ldr	r4, [pc, #156]	; (d0f0 <trx_spi_init+0xe8>)
    d052:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    d054:	2300      	movs	r3, #0
    d056:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    d058:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    d05a:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    d05c:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    d05e:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    d060:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    d062:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    d064:	3223      	adds	r2, #35	; 0x23
    d066:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    d068:	0020      	movs	r0, r4
    d06a:	3018      	adds	r0, #24
    d06c:	3a18      	subs	r2, #24
    d06e:	2100      	movs	r1, #0
    d070:	4b20      	ldr	r3, [pc, #128]	; (d0f4 <trx_spi_init+0xec>)
    d072:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    d074:	2380      	movs	r3, #128	; 0x80
    d076:	025b      	lsls	r3, r3, #9
    d078:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    d07a:	4b1f      	ldr	r3, [pc, #124]	; (d0f8 <trx_spi_init+0xf0>)
    d07c:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    d07e:	4b1f      	ldr	r3, [pc, #124]	; (d0fc <trx_spi_init+0xf4>)
    d080:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    d082:	2301      	movs	r3, #1
    d084:	425b      	negs	r3, r3
    d086:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    d088:	4b1d      	ldr	r3, [pc, #116]	; (d100 <trx_spi_init+0xf8>)
    d08a:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    d08c:	4b1d      	ldr	r3, [pc, #116]	; (d104 <trx_spi_init+0xfc>)
    d08e:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    d090:	4d1d      	ldr	r5, [pc, #116]	; (d108 <trx_spi_init+0x100>)
    d092:	0022      	movs	r2, r4
    d094:	491d      	ldr	r1, [pc, #116]	; (d10c <trx_spi_init+0x104>)
    d096:	0028      	movs	r0, r5
    d098:	4b1d      	ldr	r3, [pc, #116]	; (d110 <trx_spi_init+0x108>)
    d09a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d09c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    d09e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	d1fc      	bne.n	d09e <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    d0a4:	6813      	ldr	r3, [r2, #0]
    d0a6:	2502      	movs	r5, #2
    d0a8:	432b      	orrs	r3, r5
    d0aa:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    d0ac:	ac01      	add	r4, sp, #4
    d0ae:	0020      	movs	r0, r4
    d0b0:	4b18      	ldr	r3, [pc, #96]	; (d114 <trx_spi_init+0x10c>)
    d0b2:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    d0b4:	2320      	movs	r3, #32
    d0b6:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    d0b8:	2380      	movs	r3, #128	; 0x80
    d0ba:	039b      	lsls	r3, r3, #14
    d0bc:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    d0be:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    d0c0:	2301      	movs	r3, #1
    d0c2:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    d0c4:	2200      	movs	r2, #0
    d0c6:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    d0c8:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    d0ca:	0021      	movs	r1, r4
    d0cc:	2000      	movs	r0, #0
    d0ce:	4b12      	ldr	r3, [pc, #72]	; (d118 <trx_spi_init+0x110>)
    d0d0:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    d0d2:	2200      	movs	r2, #0
    d0d4:	2100      	movs	r1, #0
    d0d6:	4811      	ldr	r0, [pc, #68]	; (d11c <trx_spi_init+0x114>)
    d0d8:	4b11      	ldr	r3, [pc, #68]	; (d120 <trx_spi_init+0x118>)
    d0da:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    d0dc:	b005      	add	sp, #20
    d0de:	bd30      	pop	{r4, r5, pc}
    d0e0:	20002140 	.word	0x20002140
    d0e4:	20002144 	.word	0x20002144
    d0e8:	000067b1 	.word	0x000067b1
    d0ec:	41004400 	.word	0x41004400
    d0f0:	20002148 	.word	0x20002148
    d0f4:	00010cc1 	.word	0x00010cc1
    d0f8:	003d0900 	.word	0x003d0900
    d0fc:	00530005 	.word	0x00530005
    d100:	003e0005 	.word	0x003e0005
    d104:	00520005 	.word	0x00520005
    d108:	20002180 	.word	0x20002180
    d10c:	42001800 	.word	0x42001800
    d110:	000072a9 	.word	0x000072a9
    d114:	000064f9 	.word	0x000064f9
    d118:	0000650d 	.word	0x0000650d
    d11c:	0000cfed 	.word	0x0000cfed
    d120:	000063b5 	.word	0x000063b5

0000d124 <PhyReset>:

void PhyReset(void)
{
    d124:	b570      	push	{r4, r5, r6, lr}
    d126:	4c08      	ldr	r4, [pc, #32]	; (d148 <PhyReset+0x24>)
    d128:	2580      	movs	r5, #128	; 0x80
    d12a:	022d      	lsls	r5, r5, #8
    d12c:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    d12e:	2280      	movs	r2, #128	; 0x80
    d130:	0352      	lsls	r2, r2, #13
    d132:	4b06      	ldr	r3, [pc, #24]	; (d14c <PhyReset+0x28>)
    d134:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    d136:	20a5      	movs	r0, #165	; 0xa5
    d138:	0040      	lsls	r0, r0, #1
    d13a:	4e05      	ldr	r6, [pc, #20]	; (d150 <PhyReset+0x2c>)
    d13c:	47b0      	blx	r6
    d13e:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    d140:	200a      	movs	r0, #10
    d142:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    d144:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    d146:	bd70      	pop	{r4, r5, r6, pc}
    d148:	41004480 	.word	0x41004480
    d14c:	41004400 	.word	0x41004400
    d150:	00006219 	.word	0x00006219

0000d154 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    d154:	b570      	push	{r4, r5, r6, lr}
    d156:	b082      	sub	sp, #8
    d158:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d15a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d15e:	425a      	negs	r2, r3
    d160:	4153      	adcs	r3, r2
    d162:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d164:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d166:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d16a:	2200      	movs	r2, #0
    d16c:	4b33      	ldr	r3, [pc, #204]	; (d23c <trx_reg_read+0xe8>)
    d16e:	701a      	strb	r2, [r3, #0]
	return flags;
    d170:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d172:	4e33      	ldr	r6, [pc, #204]	; (d240 <trx_reg_read+0xec>)
    d174:	3201      	adds	r2, #1
    d176:	4933      	ldr	r1, [pc, #204]	; (d244 <trx_reg_read+0xf0>)
    d178:	0030      	movs	r0, r6
    d17a:	4b33      	ldr	r3, [pc, #204]	; (d248 <trx_reg_read+0xf4>)
    d17c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d17e:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    d180:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d182:	7e1a      	ldrb	r2, [r3, #24]
    d184:	420a      	tst	r2, r1
    d186:	d0fc      	beq.n	d182 <trx_reg_read+0x2e>
    d188:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d18a:	07d2      	lsls	r2, r2, #31
    d18c:	d502      	bpl.n	d194 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d18e:	2280      	movs	r2, #128	; 0x80
    d190:	4315      	orrs	r5, r2
    d192:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    d194:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d196:	7e1a      	ldrb	r2, [r3, #24]
    d198:	420a      	tst	r2, r1
    d19a:	d0fc      	beq.n	d196 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d19c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d19e:	7e1a      	ldrb	r2, [r3, #24]
    d1a0:	420a      	tst	r2, r1
    d1a2:	d0fc      	beq.n	d19e <trx_reg_read+0x4a>
    d1a4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d1a6:	0752      	lsls	r2, r2, #29
    d1a8:	d50c      	bpl.n	d1c4 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d1aa:	8b5a      	ldrh	r2, [r3, #26]
    d1ac:	0752      	lsls	r2, r2, #29
    d1ae:	d501      	bpl.n	d1b4 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d1b0:	2204      	movs	r2, #4
    d1b2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d1b4:	4a22      	ldr	r2, [pc, #136]	; (d240 <trx_reg_read+0xec>)
    d1b6:	7992      	ldrb	r2, [r2, #6]
    d1b8:	2a01      	cmp	r2, #1
    d1ba:	d034      	beq.n	d226 <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d1bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d1be:	b2d2      	uxtb	r2, r2
    d1c0:	4922      	ldr	r1, [pc, #136]	; (d24c <trx_reg_read+0xf8>)
    d1c2:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    d1c4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d1c6:	7e1a      	ldrb	r2, [r3, #24]
    d1c8:	420a      	tst	r2, r1
    d1ca:	d0fc      	beq.n	d1c6 <trx_reg_read+0x72>
    d1cc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d1ce:	07d2      	lsls	r2, r2, #31
    d1d0:	d501      	bpl.n	d1d6 <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d1d2:	2200      	movs	r2, #0
    d1d4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    d1d6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d1d8:	7e1a      	ldrb	r2, [r3, #24]
    d1da:	420a      	tst	r2, r1
    d1dc:	d0fc      	beq.n	d1d8 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    d1de:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d1e0:	7e1a      	ldrb	r2, [r3, #24]
    d1e2:	420a      	tst	r2, r1
    d1e4:	d0fc      	beq.n	d1e0 <trx_reg_read+0x8c>
    d1e6:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    d1e8:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    d1ea:	0752      	lsls	r2, r2, #29
    d1ec:	d50a      	bpl.n	d204 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d1ee:	8b5a      	ldrh	r2, [r3, #26]
    d1f0:	0752      	lsls	r2, r2, #29
    d1f2:	d501      	bpl.n	d1f8 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d1f4:	2204      	movs	r2, #4
    d1f6:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d1f8:	4a11      	ldr	r2, [pc, #68]	; (d240 <trx_reg_read+0xec>)
    d1fa:	7992      	ldrb	r2, [r2, #6]
    d1fc:	2a01      	cmp	r2, #1
    d1fe:	d018      	beq.n	d232 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d200:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    d202:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d204:	2200      	movs	r2, #0
    d206:	490f      	ldr	r1, [pc, #60]	; (d244 <trx_reg_read+0xf0>)
    d208:	480d      	ldr	r0, [pc, #52]	; (d240 <trx_reg_read+0xec>)
    d20a:	4b0f      	ldr	r3, [pc, #60]	; (d248 <trx_reg_read+0xf4>)
    d20c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d20e:	23ff      	movs	r3, #255	; 0xff
    d210:	4223      	tst	r3, r4
    d212:	d005      	beq.n	d220 <trx_reg_read+0xcc>
		cpu_irq_enable();
    d214:	2201      	movs	r2, #1
    d216:	4b09      	ldr	r3, [pc, #36]	; (d23c <trx_reg_read+0xe8>)
    d218:	701a      	strb	r2, [r3, #0]
    d21a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d21e:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    d220:	b2e8      	uxtb	r0, r5
}
    d222:	b002      	add	sp, #8
    d224:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d228:	05d2      	lsls	r2, r2, #23
    d22a:	0dd2      	lsrs	r2, r2, #23
    d22c:	4907      	ldr	r1, [pc, #28]	; (d24c <trx_reg_read+0xf8>)
    d22e:	800a      	strh	r2, [r1, #0]
    d230:	e7c8      	b.n	d1c4 <trx_reg_read+0x70>
    d232:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    d234:	05ed      	lsls	r5, r5, #23
    d236:	0ded      	lsrs	r5, r5, #23
    d238:	e7e4      	b.n	d204 <trx_reg_read+0xb0>
    d23a:	46c0      	nop			; (mov r8, r8)
    d23c:	20000008 	.word	0x20000008
    d240:	20002180 	.word	0x20002180
    d244:	20002144 	.word	0x20002144
    d248:	0000756d 	.word	0x0000756d
    d24c:	2000213c 	.word	0x2000213c

0000d250 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    d250:	b5f0      	push	{r4, r5, r6, r7, lr}
    d252:	b083      	sub	sp, #12
    d254:	0006      	movs	r6, r0
    d256:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d258:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d25c:	425a      	negs	r2, r3
    d25e:	4153      	adcs	r3, r2
    d260:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d262:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d264:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d268:	2200      	movs	r2, #0
    d26a:	4b34      	ldr	r3, [pc, #208]	; (d33c <trx_reg_write+0xec>)
    d26c:	701a      	strb	r2, [r3, #0]
	return flags;
    d26e:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d270:	4f33      	ldr	r7, [pc, #204]	; (d340 <trx_reg_write+0xf0>)
    d272:	3201      	adds	r2, #1
    d274:	4933      	ldr	r1, [pc, #204]	; (d344 <trx_reg_write+0xf4>)
    d276:	0038      	movs	r0, r7
    d278:	4b33      	ldr	r3, [pc, #204]	; (d348 <trx_reg_write+0xf8>)
    d27a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d27c:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    d27e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d280:	7e1a      	ldrb	r2, [r3, #24]
    d282:	420a      	tst	r2, r1
    d284:	d0fc      	beq.n	d280 <trx_reg_write+0x30>
    d286:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d288:	07d2      	lsls	r2, r2, #31
    d28a:	d502      	bpl.n	d292 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d28c:	22c0      	movs	r2, #192	; 0xc0
    d28e:	4316      	orrs	r6, r2
    d290:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    d292:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d294:	7e1a      	ldrb	r2, [r3, #24]
    d296:	420a      	tst	r2, r1
    d298:	d0fc      	beq.n	d294 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d29a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d29c:	7e1a      	ldrb	r2, [r3, #24]
    d29e:	420a      	tst	r2, r1
    d2a0:	d0fc      	beq.n	d29c <trx_reg_write+0x4c>
    d2a2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d2a4:	0752      	lsls	r2, r2, #29
    d2a6:	d50c      	bpl.n	d2c2 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d2a8:	8b5a      	ldrh	r2, [r3, #26]
    d2aa:	0752      	lsls	r2, r2, #29
    d2ac:	d501      	bpl.n	d2b2 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d2ae:	2204      	movs	r2, #4
    d2b0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d2b2:	4a23      	ldr	r2, [pc, #140]	; (d340 <trx_reg_write+0xf0>)
    d2b4:	7992      	ldrb	r2, [r2, #6]
    d2b6:	2a01      	cmp	r2, #1
    d2b8:	d033      	beq.n	d322 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d2ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d2bc:	b2d2      	uxtb	r2, r2
    d2be:	4923      	ldr	r1, [pc, #140]	; (d34c <trx_reg_write+0xfc>)
    d2c0:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    d2c2:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d2c4:	7e1a      	ldrb	r2, [r3, #24]
    d2c6:	420a      	tst	r2, r1
    d2c8:	d0fc      	beq.n	d2c4 <trx_reg_write+0x74>
    d2ca:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d2cc:	07d2      	lsls	r2, r2, #31
    d2ce:	d500      	bpl.n	d2d2 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d2d0:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    d2d2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d2d4:	7e1a      	ldrb	r2, [r3, #24]
    d2d6:	420a      	tst	r2, r1
    d2d8:	d0fc      	beq.n	d2d4 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d2da:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d2dc:	7e1a      	ldrb	r2, [r3, #24]
    d2de:	420a      	tst	r2, r1
    d2e0:	d0fc      	beq.n	d2dc <trx_reg_write+0x8c>
    d2e2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d2e4:	0752      	lsls	r2, r2, #29
    d2e6:	d50c      	bpl.n	d302 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d2e8:	8b5a      	ldrh	r2, [r3, #26]
    d2ea:	0752      	lsls	r2, r2, #29
    d2ec:	d501      	bpl.n	d2f2 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d2ee:	2204      	movs	r2, #4
    d2f0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d2f2:	4a13      	ldr	r2, [pc, #76]	; (d340 <trx_reg_write+0xf0>)
    d2f4:	7992      	ldrb	r2, [r2, #6]
    d2f6:	2a01      	cmp	r2, #1
    d2f8:	d019      	beq.n	d32e <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d2fc:	b2db      	uxtb	r3, r3
    d2fe:	4a13      	ldr	r2, [pc, #76]	; (d34c <trx_reg_write+0xfc>)
    d300:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d302:	2200      	movs	r2, #0
    d304:	490f      	ldr	r1, [pc, #60]	; (d344 <trx_reg_write+0xf4>)
    d306:	480e      	ldr	r0, [pc, #56]	; (d340 <trx_reg_write+0xf0>)
    d308:	4b0f      	ldr	r3, [pc, #60]	; (d348 <trx_reg_write+0xf8>)
    d30a:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d30c:	23ff      	movs	r3, #255	; 0xff
    d30e:	422b      	tst	r3, r5
    d310:	d005      	beq.n	d31e <trx_reg_write+0xce>
		cpu_irq_enable();
    d312:	2201      	movs	r2, #1
    d314:	4b09      	ldr	r3, [pc, #36]	; (d33c <trx_reg_write+0xec>)
    d316:	701a      	strb	r2, [r3, #0]
    d318:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d31c:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    d31e:	b003      	add	sp, #12
    d320:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d324:	05d2      	lsls	r2, r2, #23
    d326:	0dd2      	lsrs	r2, r2, #23
    d328:	4908      	ldr	r1, [pc, #32]	; (d34c <trx_reg_write+0xfc>)
    d32a:	800a      	strh	r2, [r1, #0]
    d32c:	e7c9      	b.n	d2c2 <trx_reg_write+0x72>
    d32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d330:	05db      	lsls	r3, r3, #23
    d332:	0ddb      	lsrs	r3, r3, #23
    d334:	4a05      	ldr	r2, [pc, #20]	; (d34c <trx_reg_write+0xfc>)
    d336:	8013      	strh	r3, [r2, #0]
    d338:	e7e3      	b.n	d302 <trx_reg_write+0xb2>
    d33a:	46c0      	nop			; (mov r8, r8)
    d33c:	20000008 	.word	0x20000008
    d340:	20002180 	.word	0x20002180
    d344:	20002144 	.word	0x20002144
    d348:	0000756d 	.word	0x0000756d
    d34c:	2000213c 	.word	0x2000213c

0000d350 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    d350:	b5f0      	push	{r4, r5, r6, r7, lr}
    d352:	46d6      	mov	lr, sl
    d354:	464f      	mov	r7, r9
    d356:	4646      	mov	r6, r8
    d358:	b5c0      	push	{r6, r7, lr}
    d35a:	b082      	sub	sp, #8
    d35c:	0005      	movs	r5, r0
    d35e:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d360:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d364:	425a      	negs	r2, r3
    d366:	4153      	adcs	r3, r2
    d368:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d36a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d36c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d370:	2200      	movs	r2, #0
    d372:	4b3e      	ldr	r3, [pc, #248]	; (d46c <trx_frame_read+0x11c>)
    d374:	701a      	strb	r2, [r3, #0]
	return flags;
    d376:	9b01      	ldr	r3, [sp, #4]
    d378:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d37a:	4f3d      	ldr	r7, [pc, #244]	; (d470 <trx_frame_read+0x120>)
    d37c:	3201      	adds	r2, #1
    d37e:	493d      	ldr	r1, [pc, #244]	; (d474 <trx_frame_read+0x124>)
    d380:	0038      	movs	r0, r7
    d382:	4b3d      	ldr	r3, [pc, #244]	; (d478 <trx_frame_read+0x128>)
    d384:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d386:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    d388:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d38a:	7e1a      	ldrb	r2, [r3, #24]
    d38c:	420a      	tst	r2, r1
    d38e:	d0fc      	beq.n	d38a <trx_frame_read+0x3a>
    d390:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d392:	07d2      	lsls	r2, r2, #31
    d394:	d501      	bpl.n	d39a <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d396:	2220      	movs	r2, #32
    d398:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    d39a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d39c:	7e1a      	ldrb	r2, [r3, #24]
    d39e:	420a      	tst	r2, r1
    d3a0:	d0fc      	beq.n	d39c <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d3a2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d3a4:	7e1a      	ldrb	r2, [r3, #24]
    d3a6:	420a      	tst	r2, r1
    d3a8:	d0fc      	beq.n	d3a4 <trx_frame_read+0x54>
    d3aa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d3ac:	0752      	lsls	r2, r2, #29
    d3ae:	d50c      	bpl.n	d3ca <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d3b0:	8b5a      	ldrh	r2, [r3, #26]
    d3b2:	0752      	lsls	r2, r2, #29
    d3b4:	d501      	bpl.n	d3ba <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d3b6:	2204      	movs	r2, #4
    d3b8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d3ba:	4a2d      	ldr	r2, [pc, #180]	; (d470 <trx_frame_read+0x120>)
    d3bc:	7992      	ldrb	r2, [r2, #6]
    d3be:	2a01      	cmp	r2, #1
    d3c0:	d013      	beq.n	d3ea <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d3c4:	b2db      	uxtb	r3, r3
    d3c6:	4a2d      	ldr	r2, [pc, #180]	; (d47c <trx_frame_read+0x12c>)
    d3c8:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    d3ca:	1e63      	subs	r3, r4, #1
    d3cc:	b2db      	uxtb	r3, r3
    d3ce:	2c00      	cmp	r4, #0
    d3d0:	d036      	beq.n	d440 <trx_frame_read+0xf0>
    d3d2:	3301      	adds	r3, #1
    d3d4:	469c      	mov	ip, r3
    d3d6:	44ac      	add	ip, r5
    d3d8:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    d3da:	4e25      	ldr	r6, [pc, #148]	; (d470 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    d3dc:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d3de:	2300      	movs	r3, #0
    d3e0:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    d3e2:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    d3e4:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d3e6:	46b1      	mov	r9, r6
    d3e8:	e00f      	b.n	d40a <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d3ec:	05db      	lsls	r3, r3, #23
    d3ee:	0ddb      	lsrs	r3, r3, #23
    d3f0:	4a22      	ldr	r2, [pc, #136]	; (d47c <trx_frame_read+0x12c>)
    d3f2:	8013      	strh	r3, [r2, #0]
    d3f4:	e7e9      	b.n	d3ca <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d3f6:	464a      	mov	r2, r9
    d3f8:	7992      	ldrb	r2, [r2, #6]
    d3fa:	2a01      	cmp	r2, #1
    d3fc:	d01c      	beq.n	d438 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d3fe:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d400:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    d402:	702f      	strb	r7, [r5, #0]
		data++;
    d404:	3501      	adds	r5, #1
	while (length--) {
    d406:	4565      	cmp	r5, ip
    d408:	d01a      	beq.n	d440 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d40a:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d40c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    d40e:	4202      	tst	r2, r0
    d410:	d0fc      	beq.n	d40c <trx_frame_read+0xbc>
    d412:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d414:	4202      	tst	r2, r0
    d416:	d001      	beq.n	d41c <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d418:	4652      	mov	r2, sl
    d41a:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d41c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    d41e:	4222      	tst	r2, r4
    d420:	d0fc      	beq.n	d41c <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d422:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    d424:	420a      	tst	r2, r1
    d426:	d0fc      	beq.n	d422 <trx_frame_read+0xd2>
    d428:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d42a:	420a      	tst	r2, r1
    d42c:	d0e9      	beq.n	d402 <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d42e:	8b5a      	ldrh	r2, [r3, #26]
    d430:	420a      	tst	r2, r1
    d432:	d0e0      	beq.n	d3f6 <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d434:	8359      	strh	r1, [r3, #26]
    d436:	e7de      	b.n	d3f6 <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d438:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d43a:	05ff      	lsls	r7, r7, #23
    d43c:	0dff      	lsrs	r7, r7, #23
    d43e:	e7e0      	b.n	d402 <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d440:	2200      	movs	r2, #0
    d442:	490c      	ldr	r1, [pc, #48]	; (d474 <trx_frame_read+0x124>)
    d444:	480a      	ldr	r0, [pc, #40]	; (d470 <trx_frame_read+0x120>)
    d446:	4b0c      	ldr	r3, [pc, #48]	; (d478 <trx_frame_read+0x128>)
    d448:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d44a:	23ff      	movs	r3, #255	; 0xff
    d44c:	4642      	mov	r2, r8
    d44e:	4213      	tst	r3, r2
    d450:	d005      	beq.n	d45e <trx_frame_read+0x10e>
		cpu_irq_enable();
    d452:	2201      	movs	r2, #1
    d454:	4b05      	ldr	r3, [pc, #20]	; (d46c <trx_frame_read+0x11c>)
    d456:	701a      	strb	r2, [r3, #0]
    d458:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d45c:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    d45e:	b002      	add	sp, #8
    d460:	bc1c      	pop	{r2, r3, r4}
    d462:	4690      	mov	r8, r2
    d464:	4699      	mov	r9, r3
    d466:	46a2      	mov	sl, r4
    d468:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d46a:	46c0      	nop			; (mov r8, r8)
    d46c:	20000008 	.word	0x20000008
    d470:	20002180 	.word	0x20002180
    d474:	20002144 	.word	0x20002144
    d478:	0000756d 	.word	0x0000756d
    d47c:	2000213c 	.word	0x2000213c

0000d480 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    d480:	b5f0      	push	{r4, r5, r6, r7, lr}
    d482:	46c6      	mov	lr, r8
    d484:	b500      	push	{lr}
    d486:	b082      	sub	sp, #8
    d488:	0004      	movs	r4, r0
    d48a:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d48c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d490:	425a      	negs	r2, r3
    d492:	4153      	adcs	r3, r2
    d494:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d496:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d498:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d49c:	2200      	movs	r2, #0
    d49e:	4b3a      	ldr	r3, [pc, #232]	; (d588 <trx_frame_write+0x108>)
    d4a0:	701a      	strb	r2, [r3, #0]
	return flags;
    d4a2:	9b01      	ldr	r3, [sp, #4]
    d4a4:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d4a6:	4f39      	ldr	r7, [pc, #228]	; (d58c <trx_frame_write+0x10c>)
    d4a8:	3201      	adds	r2, #1
    d4aa:	4939      	ldr	r1, [pc, #228]	; (d590 <trx_frame_write+0x110>)
    d4ac:	0038      	movs	r0, r7
    d4ae:	4b39      	ldr	r3, [pc, #228]	; (d594 <trx_frame_write+0x114>)
    d4b0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d4b2:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    d4b4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d4b6:	7e1a      	ldrb	r2, [r3, #24]
    d4b8:	420a      	tst	r2, r1
    d4ba:	d0fc      	beq.n	d4b6 <trx_frame_write+0x36>
    d4bc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d4be:	07d2      	lsls	r2, r2, #31
    d4c0:	d501      	bpl.n	d4c6 <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d4c2:	2260      	movs	r2, #96	; 0x60
    d4c4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    d4c6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d4c8:	7e1a      	ldrb	r2, [r3, #24]
    d4ca:	420a      	tst	r2, r1
    d4cc:	d0fc      	beq.n	d4c8 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d4ce:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d4d0:	7e1a      	ldrb	r2, [r3, #24]
    d4d2:	420a      	tst	r2, r1
    d4d4:	d0fc      	beq.n	d4d0 <trx_frame_write+0x50>
    d4d6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d4d8:	0752      	lsls	r2, r2, #29
    d4da:	d50c      	bpl.n	d4f6 <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d4dc:	8b5a      	ldrh	r2, [r3, #26]
    d4de:	0752      	lsls	r2, r2, #29
    d4e0:	d501      	bpl.n	d4e6 <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d4e2:	2204      	movs	r2, #4
    d4e4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d4e6:	4a29      	ldr	r2, [pc, #164]	; (d58c <trx_frame_write+0x10c>)
    d4e8:	7992      	ldrb	r2, [r2, #6]
    d4ea:	2a01      	cmp	r2, #1
    d4ec:	d00b      	beq.n	d506 <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d4ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d4f0:	b2d2      	uxtb	r2, r2
    d4f2:	4929      	ldr	r1, [pc, #164]	; (d598 <trx_frame_write+0x118>)
    d4f4:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d4f6:	4a25      	ldr	r2, [pc, #148]	; (d58c <trx_frame_write+0x10c>)
    d4f8:	7992      	ldrb	r2, [r2, #6]
    d4fa:	4694      	mov	ip, r2
    d4fc:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    d4fe:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    d500:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    d502:	2404      	movs	r4, #4
    d504:	e00d      	b.n	d522 <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d508:	05d2      	lsls	r2, r2, #23
    d50a:	0dd2      	lsrs	r2, r2, #23
    d50c:	4922      	ldr	r1, [pc, #136]	; (d598 <trx_frame_write+0x118>)
    d50e:	800a      	strh	r2, [r1, #0]
    d510:	e7f1      	b.n	d4f6 <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d512:	4662      	mov	r2, ip
    d514:	2a01      	cmp	r2, #1
    d516:	d01e      	beq.n	d556 <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d51a:	b2d2      	uxtb	r2, r2
    d51c:	4e1e      	ldr	r6, [pc, #120]	; (d598 <trx_frame_write+0x118>)
    d51e:	8032      	strh	r2, [r6, #0]
    d520:	3101      	adds	r1, #1
	while (length--) {
    d522:	3d01      	subs	r5, #1
    d524:	b2ed      	uxtb	r5, r5
    d526:	2dff      	cmp	r5, #255	; 0xff
    d528:	d01b      	beq.n	d562 <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d52a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    d52c:	423a      	tst	r2, r7
    d52e:	d0fc      	beq.n	d52a <trx_frame_write+0xaa>
    d530:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d532:	423a      	tst	r2, r7
    d534:	d001      	beq.n	d53a <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d536:	780a      	ldrb	r2, [r1, #0]
    d538:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d53a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    d53c:	4202      	tst	r2, r0
    d53e:	d0fc      	beq.n	d53a <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d540:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    d542:	4222      	tst	r2, r4
    d544:	d0fc      	beq.n	d540 <trx_frame_write+0xc0>
    d546:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d548:	4222      	tst	r2, r4
    d54a:	d0e9      	beq.n	d520 <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d54c:	8b5a      	ldrh	r2, [r3, #26]
    d54e:	4222      	tst	r2, r4
    d550:	d0df      	beq.n	d512 <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d552:	835c      	strh	r4, [r3, #26]
    d554:	e7dd      	b.n	d512 <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d558:	05d2      	lsls	r2, r2, #23
    d55a:	0dd2      	lsrs	r2, r2, #23
    d55c:	4e0e      	ldr	r6, [pc, #56]	; (d598 <trx_frame_write+0x118>)
    d55e:	8032      	strh	r2, [r6, #0]
    d560:	e7de      	b.n	d520 <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d562:	2200      	movs	r2, #0
    d564:	490a      	ldr	r1, [pc, #40]	; (d590 <trx_frame_write+0x110>)
    d566:	4809      	ldr	r0, [pc, #36]	; (d58c <trx_frame_write+0x10c>)
    d568:	4b0a      	ldr	r3, [pc, #40]	; (d594 <trx_frame_write+0x114>)
    d56a:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d56c:	23ff      	movs	r3, #255	; 0xff
    d56e:	4642      	mov	r2, r8
    d570:	4213      	tst	r3, r2
    d572:	d005      	beq.n	d580 <trx_frame_write+0x100>
		cpu_irq_enable();
    d574:	2201      	movs	r2, #1
    d576:	4b04      	ldr	r3, [pc, #16]	; (d588 <trx_frame_write+0x108>)
    d578:	701a      	strb	r2, [r3, #0]
    d57a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d57e:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    d580:	b002      	add	sp, #8
    d582:	bc04      	pop	{r2}
    d584:	4690      	mov	r8, r2
    d586:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d588:	20000008 	.word	0x20000008
    d58c:	20002180 	.word	0x20002180
    d590:	20002144 	.word	0x20002144
    d594:	0000756d 	.word	0x0000756d
    d598:	2000213c 	.word	0x2000213c

0000d59c <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    d59c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d59e:	46c6      	mov	lr, r8
    d5a0:	b500      	push	{lr}
    d5a2:	b082      	sub	sp, #8
    d5a4:	0006      	movs	r6, r0
    d5a6:	000d      	movs	r5, r1
    d5a8:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d5aa:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d5ae:	425a      	negs	r2, r3
    d5b0:	4153      	adcs	r3, r2
    d5b2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d5b4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d5b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d5ba:	2200      	movs	r2, #0
    d5bc:	4b4d      	ldr	r3, [pc, #308]	; (d6f4 <trx_sram_write+0x158>)
    d5be:	701a      	strb	r2, [r3, #0]
	return flags;
    d5c0:	9b01      	ldr	r3, [sp, #4]
    d5c2:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d5c4:	4f4c      	ldr	r7, [pc, #304]	; (d6f8 <trx_sram_write+0x15c>)
    d5c6:	3201      	adds	r2, #1
    d5c8:	494c      	ldr	r1, [pc, #304]	; (d6fc <trx_sram_write+0x160>)
    d5ca:	0038      	movs	r0, r7
    d5cc:	4b4c      	ldr	r3, [pc, #304]	; (d700 <trx_sram_write+0x164>)
    d5ce:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d5d0:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    d5d2:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d5d4:	7e1a      	ldrb	r2, [r3, #24]
    d5d6:	420a      	tst	r2, r1
    d5d8:	d0fc      	beq.n	d5d4 <trx_sram_write+0x38>
    d5da:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d5dc:	07d2      	lsls	r2, r2, #31
    d5de:	d501      	bpl.n	d5e4 <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d5e0:	2240      	movs	r2, #64	; 0x40
    d5e2:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    d5e4:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d5e6:	7e1a      	ldrb	r2, [r3, #24]
    d5e8:	420a      	tst	r2, r1
    d5ea:	d0fc      	beq.n	d5e6 <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d5ec:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d5ee:	7e1a      	ldrb	r2, [r3, #24]
    d5f0:	420a      	tst	r2, r1
    d5f2:	d0fc      	beq.n	d5ee <trx_sram_write+0x52>
    d5f4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d5f6:	0752      	lsls	r2, r2, #29
    d5f8:	d50c      	bpl.n	d614 <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d5fa:	8b5a      	ldrh	r2, [r3, #26]
    d5fc:	0752      	lsls	r2, r2, #29
    d5fe:	d501      	bpl.n	d604 <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d600:	2204      	movs	r2, #4
    d602:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d604:	4a3c      	ldr	r2, [pc, #240]	; (d6f8 <trx_sram_write+0x15c>)
    d606:	7992      	ldrb	r2, [r2, #6]
    d608:	2a01      	cmp	r2, #1
    d60a:	d02b      	beq.n	d664 <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d60c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d60e:	b2d2      	uxtb	r2, r2
    d610:	493c      	ldr	r1, [pc, #240]	; (d704 <trx_sram_write+0x168>)
    d612:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    d614:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d616:	7e1a      	ldrb	r2, [r3, #24]
    d618:	420a      	tst	r2, r1
    d61a:	d0fc      	beq.n	d616 <trx_sram_write+0x7a>
    d61c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d61e:	07d2      	lsls	r2, r2, #31
    d620:	d500      	bpl.n	d624 <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d622:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    d624:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d626:	7e1a      	ldrb	r2, [r3, #24]
    d628:	420a      	tst	r2, r1
    d62a:	d0fc      	beq.n	d626 <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d62c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d62e:	7e1a      	ldrb	r2, [r3, #24]
    d630:	420a      	tst	r2, r1
    d632:	d0fc      	beq.n	d62e <trx_sram_write+0x92>
    d634:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d636:	0752      	lsls	r2, r2, #29
    d638:	d50c      	bpl.n	d654 <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d63a:	8b5a      	ldrh	r2, [r3, #26]
    d63c:	0752      	lsls	r2, r2, #29
    d63e:	d501      	bpl.n	d644 <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d640:	2204      	movs	r2, #4
    d642:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d644:	4a2c      	ldr	r2, [pc, #176]	; (d6f8 <trx_sram_write+0x15c>)
    d646:	7992      	ldrb	r2, [r2, #6]
    d648:	2a01      	cmp	r2, #1
    d64a:	d011      	beq.n	d670 <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d64c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d64e:	b2d2      	uxtb	r2, r2
    d650:	492c      	ldr	r1, [pc, #176]	; (d704 <trx_sram_write+0x168>)
    d652:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d654:	4a28      	ldr	r2, [pc, #160]	; (d6f8 <trx_sram_write+0x15c>)
    d656:	7992      	ldrb	r2, [r2, #6]
    d658:	4694      	mov	ip, r2
    d65a:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    d65c:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    d65e:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    d660:	2104      	movs	r1, #4
    d662:	e013      	b.n	d68c <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d666:	05d2      	lsls	r2, r2, #23
    d668:	0dd2      	lsrs	r2, r2, #23
    d66a:	4926      	ldr	r1, [pc, #152]	; (d704 <trx_sram_write+0x168>)
    d66c:	800a      	strh	r2, [r1, #0]
    d66e:	e7d1      	b.n	d614 <trx_sram_write+0x78>
    d670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d672:	05d2      	lsls	r2, r2, #23
    d674:	0dd2      	lsrs	r2, r2, #23
    d676:	4923      	ldr	r1, [pc, #140]	; (d704 <trx_sram_write+0x168>)
    d678:	800a      	strh	r2, [r1, #0]
    d67a:	e7eb      	b.n	d654 <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d67c:	4662      	mov	r2, ip
    d67e:	2a01      	cmp	r2, #1
    d680:	d01e      	beq.n	d6c0 <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d682:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d684:	b2d2      	uxtb	r2, r2
    d686:	4f1f      	ldr	r7, [pc, #124]	; (d704 <trx_sram_write+0x168>)
    d688:	803a      	strh	r2, [r7, #0]
    d68a:	3001      	adds	r0, #1
	while (length--) {
    d68c:	3c01      	subs	r4, #1
    d68e:	b2e4      	uxtb	r4, r4
    d690:	2cff      	cmp	r4, #255	; 0xff
    d692:	d01b      	beq.n	d6cc <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d694:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    d696:	4232      	tst	r2, r6
    d698:	d0fc      	beq.n	d694 <trx_sram_write+0xf8>
    d69a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d69c:	4232      	tst	r2, r6
    d69e:	d001      	beq.n	d6a4 <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d6a0:	7802      	ldrb	r2, [r0, #0]
    d6a2:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d6a4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    d6a6:	422a      	tst	r2, r5
    d6a8:	d0fc      	beq.n	d6a4 <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d6aa:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    d6ac:	420a      	tst	r2, r1
    d6ae:	d0fc      	beq.n	d6aa <trx_sram_write+0x10e>
    d6b0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d6b2:	420a      	tst	r2, r1
    d6b4:	d0e9      	beq.n	d68a <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d6b6:	8b5a      	ldrh	r2, [r3, #26]
    d6b8:	420a      	tst	r2, r1
    d6ba:	d0df      	beq.n	d67c <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d6bc:	8359      	strh	r1, [r3, #26]
    d6be:	e7dd      	b.n	d67c <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d6c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d6c2:	05d2      	lsls	r2, r2, #23
    d6c4:	0dd2      	lsrs	r2, r2, #23
    d6c6:	4f0f      	ldr	r7, [pc, #60]	; (d704 <trx_sram_write+0x168>)
    d6c8:	803a      	strh	r2, [r7, #0]
    d6ca:	e7de      	b.n	d68a <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d6cc:	2200      	movs	r2, #0
    d6ce:	490b      	ldr	r1, [pc, #44]	; (d6fc <trx_sram_write+0x160>)
    d6d0:	4809      	ldr	r0, [pc, #36]	; (d6f8 <trx_sram_write+0x15c>)
    d6d2:	4b0b      	ldr	r3, [pc, #44]	; (d700 <trx_sram_write+0x164>)
    d6d4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d6d6:	23ff      	movs	r3, #255	; 0xff
    d6d8:	4642      	mov	r2, r8
    d6da:	4213      	tst	r3, r2
    d6dc:	d005      	beq.n	d6ea <trx_sram_write+0x14e>
		cpu_irq_enable();
    d6de:	2201      	movs	r2, #1
    d6e0:	4b04      	ldr	r3, [pc, #16]	; (d6f4 <trx_sram_write+0x158>)
    d6e2:	701a      	strb	r2, [r3, #0]
    d6e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d6e8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    d6ea:	b002      	add	sp, #8
    d6ec:	bc04      	pop	{r2}
    d6ee:	4690      	mov	r8, r2
    d6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d6f2:	46c0      	nop			; (mov r8, r8)
    d6f4:	20000008 	.word	0x20000008
    d6f8:	20002180 	.word	0x20002180
    d6fc:	20002144 	.word	0x20002144
    d700:	0000756d 	.word	0x0000756d
    d704:	2000213c 	.word	0x2000213c

0000d708 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    d708:	b5f0      	push	{r4, r5, r6, r7, lr}
    d70a:	46d6      	mov	lr, sl
    d70c:	464f      	mov	r7, r9
    d70e:	4646      	mov	r6, r8
    d710:	b5c0      	push	{r6, r7, lr}
    d712:	b082      	sub	sp, #8
    d714:	0004      	movs	r4, r0
    d716:	000d      	movs	r5, r1
    d718:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    d71a:	2001      	movs	r0, #1
    d71c:	4b56      	ldr	r3, [pc, #344]	; (d878 <trx_sram_read+0x170>)
    d71e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d720:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d724:	425a      	negs	r2, r3
    d726:	4153      	adcs	r3, r2
    d728:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d72a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d72c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d730:	2200      	movs	r2, #0
    d732:	4b52      	ldr	r3, [pc, #328]	; (d87c <trx_sram_read+0x174>)
    d734:	701a      	strb	r2, [r3, #0]
	return flags;
    d736:	9b01      	ldr	r3, [sp, #4]
    d738:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d73a:	4e51      	ldr	r6, [pc, #324]	; (d880 <trx_sram_read+0x178>)
    d73c:	3201      	adds	r2, #1
    d73e:	4951      	ldr	r1, [pc, #324]	; (d884 <trx_sram_read+0x17c>)
    d740:	0030      	movs	r0, r6
    d742:	4b51      	ldr	r3, [pc, #324]	; (d888 <trx_sram_read+0x180>)
    d744:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d746:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    d748:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d74a:	7e1a      	ldrb	r2, [r3, #24]
    d74c:	420a      	tst	r2, r1
    d74e:	d0fc      	beq.n	d74a <trx_sram_read+0x42>
    d750:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d752:	07d2      	lsls	r2, r2, #31
    d754:	d501      	bpl.n	d75a <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d756:	2200      	movs	r2, #0
    d758:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    d75a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d75c:	7e1a      	ldrb	r2, [r3, #24]
    d75e:	420a      	tst	r2, r1
    d760:	d0fc      	beq.n	d75c <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d762:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d764:	7e1a      	ldrb	r2, [r3, #24]
    d766:	420a      	tst	r2, r1
    d768:	d0fc      	beq.n	d764 <trx_sram_read+0x5c>
    d76a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d76c:	0752      	lsls	r2, r2, #29
    d76e:	d50c      	bpl.n	d78a <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d770:	8b5a      	ldrh	r2, [r3, #26]
    d772:	0752      	lsls	r2, r2, #29
    d774:	d501      	bpl.n	d77a <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d776:	2204      	movs	r2, #4
    d778:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d77a:	4a41      	ldr	r2, [pc, #260]	; (d880 <trx_sram_read+0x178>)
    d77c:	7992      	ldrb	r2, [r2, #6]
    d77e:	2a01      	cmp	r2, #1
    d780:	d033      	beq.n	d7ea <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d784:	b2d2      	uxtb	r2, r2
    d786:	4941      	ldr	r1, [pc, #260]	; (d88c <trx_sram_read+0x184>)
    d788:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    d78a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d78c:	7e1a      	ldrb	r2, [r3, #24]
    d78e:	420a      	tst	r2, r1
    d790:	d0fc      	beq.n	d78c <trx_sram_read+0x84>
    d792:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d794:	07d2      	lsls	r2, r2, #31
    d796:	d500      	bpl.n	d79a <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d798:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    d79a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d79c:	7e1a      	ldrb	r2, [r3, #24]
    d79e:	420a      	tst	r2, r1
    d7a0:	d0fc      	beq.n	d79c <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d7a2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d7a4:	7e1a      	ldrb	r2, [r3, #24]
    d7a6:	420a      	tst	r2, r1
    d7a8:	d0fc      	beq.n	d7a4 <trx_sram_read+0x9c>
    d7aa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d7ac:	0752      	lsls	r2, r2, #29
    d7ae:	d50c      	bpl.n	d7ca <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d7b0:	8b5a      	ldrh	r2, [r3, #26]
    d7b2:	0752      	lsls	r2, r2, #29
    d7b4:	d501      	bpl.n	d7ba <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d7b6:	2204      	movs	r2, #4
    d7b8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d7ba:	4a31      	ldr	r2, [pc, #196]	; (d880 <trx_sram_read+0x178>)
    d7bc:	7992      	ldrb	r2, [r2, #6]
    d7be:	2a01      	cmp	r2, #1
    d7c0:	d019      	beq.n	d7f6 <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7c4:	b2db      	uxtb	r3, r3
    d7c6:	4a31      	ldr	r2, [pc, #196]	; (d88c <trx_sram_read+0x184>)
    d7c8:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    d7ca:	1e7b      	subs	r3, r7, #1
    d7cc:	b2db      	uxtb	r3, r3
    d7ce:	2f00      	cmp	r7, #0
    d7d0:	d03c      	beq.n	d84c <trx_sram_read+0x144>
    d7d2:	3301      	adds	r3, #1
    d7d4:	469c      	mov	ip, r3
    d7d6:	44ac      	add	ip, r5
    d7d8:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    d7da:	4e29      	ldr	r6, [pc, #164]	; (d880 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    d7dc:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d7de:	2300      	movs	r3, #0
    d7e0:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    d7e2:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    d7e4:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d7e6:	46b1      	mov	r9, r6
    d7e8:	e015      	b.n	d816 <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d7ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d7ec:	05d2      	lsls	r2, r2, #23
    d7ee:	0dd2      	lsrs	r2, r2, #23
    d7f0:	4926      	ldr	r1, [pc, #152]	; (d88c <trx_sram_read+0x184>)
    d7f2:	800a      	strh	r2, [r1, #0]
    d7f4:	e7c9      	b.n	d78a <trx_sram_read+0x82>
    d7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7f8:	05db      	lsls	r3, r3, #23
    d7fa:	0ddb      	lsrs	r3, r3, #23
    d7fc:	4a23      	ldr	r2, [pc, #140]	; (d88c <trx_sram_read+0x184>)
    d7fe:	8013      	strh	r3, [r2, #0]
    d800:	e7e3      	b.n	d7ca <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d802:	464a      	mov	r2, r9
    d804:	7992      	ldrb	r2, [r2, #6]
    d806:	2a01      	cmp	r2, #1
    d808:	d01c      	beq.n	d844 <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d80a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d80c:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    d80e:	702f      	strb	r7, [r5, #0]
		data++;
    d810:	3501      	adds	r5, #1
	while (length--) {
    d812:	4565      	cmp	r5, ip
    d814:	d01a      	beq.n	d84c <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d816:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d818:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    d81a:	4202      	tst	r2, r0
    d81c:	d0fc      	beq.n	d818 <trx_sram_read+0x110>
    d81e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d820:	4202      	tst	r2, r0
    d822:	d001      	beq.n	d828 <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d824:	4652      	mov	r2, sl
    d826:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d828:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    d82a:	4222      	tst	r2, r4
    d82c:	d0fc      	beq.n	d828 <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d82e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    d830:	420a      	tst	r2, r1
    d832:	d0fc      	beq.n	d82e <trx_sram_read+0x126>
    d834:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d836:	420a      	tst	r2, r1
    d838:	d0e9      	beq.n	d80e <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d83a:	8b5a      	ldrh	r2, [r3, #26]
    d83c:	420a      	tst	r2, r1
    d83e:	d0e0      	beq.n	d802 <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d840:	8359      	strh	r1, [r3, #26]
    d842:	e7de      	b.n	d802 <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d844:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d846:	05ff      	lsls	r7, r7, #23
    d848:	0dff      	lsrs	r7, r7, #23
    d84a:	e7e0      	b.n	d80e <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d84c:	2200      	movs	r2, #0
    d84e:	490d      	ldr	r1, [pc, #52]	; (d884 <trx_sram_read+0x17c>)
    d850:	480b      	ldr	r0, [pc, #44]	; (d880 <trx_sram_read+0x178>)
    d852:	4b0d      	ldr	r3, [pc, #52]	; (d888 <trx_sram_read+0x180>)
    d854:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d856:	23ff      	movs	r3, #255	; 0xff
    d858:	4642      	mov	r2, r8
    d85a:	4213      	tst	r3, r2
    d85c:	d005      	beq.n	d86a <trx_sram_read+0x162>
		cpu_irq_enable();
    d85e:	2201      	movs	r2, #1
    d860:	4b06      	ldr	r3, [pc, #24]	; (d87c <trx_sram_read+0x174>)
    d862:	701a      	strb	r2, [r3, #0]
    d864:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d868:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    d86a:	b002      	add	sp, #8
    d86c:	bc1c      	pop	{r2, r3, r4}
    d86e:	4690      	mov	r8, r2
    d870:	4699      	mov	r9, r3
    d872:	46a2      	mov	sl, r4
    d874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d876:	46c0      	nop			; (mov r8, r8)
    d878:	00006219 	.word	0x00006219
    d87c:	20000008 	.word	0x20000008
    d880:	20002180 	.word	0x20002180
    d884:	20002144 	.word	0x20002144
    d888:	0000756d 	.word	0x0000756d
    d88c:	2000213c 	.word	0x2000213c

0000d890 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    d890:	b5f0      	push	{r4, r5, r6, r7, lr}
    d892:	46d6      	mov	lr, sl
    d894:	464f      	mov	r7, r9
    d896:	4646      	mov	r6, r8
    d898:	b5c0      	push	{r6, r7, lr}
    d89a:	0006      	movs	r6, r0
    d89c:	468a      	mov	sl, r1
    d89e:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    d8a0:	2001      	movs	r0, #1
    d8a2:	4b76      	ldr	r3, [pc, #472]	; (da7c <trx_aes_wrrd+0x1ec>)
    d8a4:	4798      	blx	r3

	ENTER_TRX_REGION();
    d8a6:	2100      	movs	r1, #0
    d8a8:	2000      	movs	r0, #0
    d8aa:	4b75      	ldr	r3, [pc, #468]	; (da80 <trx_aes_wrrd+0x1f0>)
    d8ac:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d8ae:	4f75      	ldr	r7, [pc, #468]	; (da84 <trx_aes_wrrd+0x1f4>)
    d8b0:	2201      	movs	r2, #1
    d8b2:	4975      	ldr	r1, [pc, #468]	; (da88 <trx_aes_wrrd+0x1f8>)
    d8b4:	0038      	movs	r0, r7
    d8b6:	4b75      	ldr	r3, [pc, #468]	; (da8c <trx_aes_wrrd+0x1fc>)
    d8b8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d8ba:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    d8bc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d8be:	7e1a      	ldrb	r2, [r3, #24]
    d8c0:	420a      	tst	r2, r1
    d8c2:	d0fc      	beq.n	d8be <trx_aes_wrrd+0x2e>
    d8c4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d8c6:	07d2      	lsls	r2, r2, #31
    d8c8:	d501      	bpl.n	d8ce <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d8ca:	2240      	movs	r2, #64	; 0x40
    d8cc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    d8ce:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d8d0:	7e1a      	ldrb	r2, [r3, #24]
    d8d2:	420a      	tst	r2, r1
    d8d4:	d0fc      	beq.n	d8d0 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d8d6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d8d8:	7e1a      	ldrb	r2, [r3, #24]
    d8da:	420a      	tst	r2, r1
    d8dc:	d0fc      	beq.n	d8d8 <trx_aes_wrrd+0x48>
    d8de:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d8e0:	0752      	lsls	r2, r2, #29
    d8e2:	d50c      	bpl.n	d8fe <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d8e4:	8b5a      	ldrh	r2, [r3, #26]
    d8e6:	0752      	lsls	r2, r2, #29
    d8e8:	d501      	bpl.n	d8ee <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d8ea:	2204      	movs	r2, #4
    d8ec:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d8ee:	4a65      	ldr	r2, [pc, #404]	; (da84 <trx_aes_wrrd+0x1f4>)
    d8f0:	7992      	ldrb	r2, [r2, #6]
    d8f2:	2a01      	cmp	r2, #1
    d8f4:	d055      	beq.n	d9a2 <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d8f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d8f8:	b2d2      	uxtb	r2, r2
    d8fa:	4965      	ldr	r1, [pc, #404]	; (da90 <trx_aes_wrrd+0x200>)
    d8fc:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    d8fe:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d900:	7e1a      	ldrb	r2, [r3, #24]
    d902:	420a      	tst	r2, r1
    d904:	d0fc      	beq.n	d900 <trx_aes_wrrd+0x70>
    d906:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d908:	07d2      	lsls	r2, r2, #31
    d90a:	d500      	bpl.n	d90e <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d90c:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    d90e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d910:	7e1a      	ldrb	r2, [r3, #24]
    d912:	420a      	tst	r2, r1
    d914:	d0fc      	beq.n	d910 <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d916:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d918:	7e1a      	ldrb	r2, [r3, #24]
    d91a:	420a      	tst	r2, r1
    d91c:	d0fc      	beq.n	d918 <trx_aes_wrrd+0x88>
    d91e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d920:	0752      	lsls	r2, r2, #29
    d922:	d50c      	bpl.n	d93e <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d924:	8b5a      	ldrh	r2, [r3, #26]
    d926:	0752      	lsls	r2, r2, #29
    d928:	d501      	bpl.n	d92e <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d92a:	2204      	movs	r2, #4
    d92c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d92e:	4a55      	ldr	r2, [pc, #340]	; (da84 <trx_aes_wrrd+0x1f4>)
    d930:	7992      	ldrb	r2, [r2, #6]
    d932:	2a01      	cmp	r2, #1
    d934:	d03b      	beq.n	d9ae <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d938:	b2d2      	uxtb	r2, r2
    d93a:	4955      	ldr	r1, [pc, #340]	; (da90 <trx_aes_wrrd+0x200>)
    d93c:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    d93e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d940:	7e1a      	ldrb	r2, [r3, #24]
    d942:	420a      	tst	r2, r1
    d944:	d0fc      	beq.n	d940 <trx_aes_wrrd+0xb0>
    d946:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d948:	07d2      	lsls	r2, r2, #31
    d94a:	d502      	bpl.n	d952 <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d94c:	4652      	mov	r2, sl
    d94e:	7812      	ldrb	r2, [r2, #0]
    d950:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    d952:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d954:	7e1a      	ldrb	r2, [r3, #24]
    d956:	420a      	tst	r2, r1
    d958:	d0fc      	beq.n	d954 <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d95a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d95c:	7e1a      	ldrb	r2, [r3, #24]
    d95e:	420a      	tst	r2, r1
    d960:	d0fc      	beq.n	d95c <trx_aes_wrrd+0xcc>
    d962:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d964:	0752      	lsls	r2, r2, #29
    d966:	d50c      	bpl.n	d982 <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d968:	8b5a      	ldrh	r2, [r3, #26]
    d96a:	0752      	lsls	r2, r2, #29
    d96c:	d501      	bpl.n	d972 <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d96e:	2204      	movs	r2, #4
    d970:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d972:	4a44      	ldr	r2, [pc, #272]	; (da84 <trx_aes_wrrd+0x1f4>)
    d974:	7992      	ldrb	r2, [r2, #6]
    d976:	2a01      	cmp	r2, #1
    d978:	d01f      	beq.n	d9ba <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d97c:	b2db      	uxtb	r3, r3
    d97e:	4a44      	ldr	r2, [pc, #272]	; (da90 <trx_aes_wrrd+0x200>)
    d980:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    d982:	2700      	movs	r7, #0
    d984:	2c00      	cmp	r4, #0
    d986:	d043      	beq.n	da10 <trx_aes_wrrd+0x180>
    d988:	4656      	mov	r6, sl
    d98a:	3c01      	subs	r4, #1
    d98c:	b2e4      	uxtb	r4, r4
    d98e:	3401      	adds	r4, #1
    d990:	44a2      	add	sl, r4
    d992:	46d0      	mov	r8, sl
    d994:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    d996:	4d3b      	ldr	r5, [pc, #236]	; (da84 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    d998:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    d99a:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    d99c:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d99e:	46a9      	mov	r9, r5
    d9a0:	e01b      	b.n	d9da <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d9a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d9a4:	05d2      	lsls	r2, r2, #23
    d9a6:	0dd2      	lsrs	r2, r2, #23
    d9a8:	4939      	ldr	r1, [pc, #228]	; (da90 <trx_aes_wrrd+0x200>)
    d9aa:	800a      	strh	r2, [r1, #0]
    d9ac:	e7a7      	b.n	d8fe <trx_aes_wrrd+0x6e>
    d9ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d9b0:	05d2      	lsls	r2, r2, #23
    d9b2:	0dd2      	lsrs	r2, r2, #23
    d9b4:	4936      	ldr	r1, [pc, #216]	; (da90 <trx_aes_wrrd+0x200>)
    d9b6:	800a      	strh	r2, [r1, #0]
    d9b8:	e7c1      	b.n	d93e <trx_aes_wrrd+0xae>
    d9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d9bc:	05db      	lsls	r3, r3, #23
    d9be:	0ddb      	lsrs	r3, r3, #23
    d9c0:	4a33      	ldr	r2, [pc, #204]	; (da90 <trx_aes_wrrd+0x200>)
    d9c2:	8013      	strh	r3, [r2, #0]
    d9c4:	e7dd      	b.n	d982 <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d9c6:	464a      	mov	r2, r9
    d9c8:	7992      	ldrb	r2, [r2, #6]
    d9ca:	2a01      	cmp	r2, #1
    d9cc:	d01c      	beq.n	da08 <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d9ce:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d9d0:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    d9d2:	7037      	strb	r7, [r6, #0]
    d9d4:	3601      	adds	r6, #1
	while (length > 0) {
    d9d6:	45b0      	cmp	r8, r6
    d9d8:	d01a      	beq.n	da10 <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d9da:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d9dc:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    d9de:	4202      	tst	r2, r0
    d9e0:	d0fc      	beq.n	d9dc <trx_aes_wrrd+0x14c>
    d9e2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d9e4:	4202      	tst	r2, r0
    d9e6:	d001      	beq.n	d9ec <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d9e8:	7872      	ldrb	r2, [r6, #1]
    d9ea:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d9ec:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    d9ee:	4222      	tst	r2, r4
    d9f0:	d0fc      	beq.n	d9ec <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d9f2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    d9f4:	420a      	tst	r2, r1
    d9f6:	d0fc      	beq.n	d9f2 <trx_aes_wrrd+0x162>
    d9f8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d9fa:	420a      	tst	r2, r1
    d9fc:	d0e9      	beq.n	d9d2 <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d9fe:	8b5a      	ldrh	r2, [r3, #26]
    da00:	420a      	tst	r2, r1
    da02:	d0e0      	beq.n	d9c6 <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    da04:	8359      	strh	r1, [r3, #26]
    da06:	e7de      	b.n	d9c6 <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    da08:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    da0a:	05ff      	lsls	r7, r7, #23
    da0c:	0dff      	lsrs	r7, r7, #23
    da0e:	e7e0      	b.n	d9d2 <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    da10:	4b1c      	ldr	r3, [pc, #112]	; (da84 <trx_aes_wrrd+0x1f4>)
    da12:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    da14:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    da16:	7e1a      	ldrb	r2, [r3, #24]
    da18:	420a      	tst	r2, r1
    da1a:	d0fc      	beq.n	da16 <trx_aes_wrrd+0x186>
    da1c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    da1e:	07d2      	lsls	r2, r2, #31
    da20:	d501      	bpl.n	da26 <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    da22:	2200      	movs	r2, #0
    da24:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    da26:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    da28:	7e1a      	ldrb	r2, [r3, #24]
    da2a:	420a      	tst	r2, r1
    da2c:	d0fc      	beq.n	da28 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    da2e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    da30:	7e1a      	ldrb	r2, [r3, #24]
    da32:	420a      	tst	r2, r1
    da34:	d0fc      	beq.n	da30 <trx_aes_wrrd+0x1a0>
    da36:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    da38:	0752      	lsls	r2, r2, #29
    da3a:	d50a      	bpl.n	da52 <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    da3c:	8b5a      	ldrh	r2, [r3, #26]
    da3e:	0752      	lsls	r2, r2, #29
    da40:	d501      	bpl.n	da46 <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    da42:	2204      	movs	r2, #4
    da44:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    da46:	4a0f      	ldr	r2, [pc, #60]	; (da84 <trx_aes_wrrd+0x1f4>)
    da48:	7992      	ldrb	r2, [r2, #6]
    da4a:	2a01      	cmp	r2, #1
    da4c:	d011      	beq.n	da72 <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    da4e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    da50:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    da52:	4653      	mov	r3, sl
    da54:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    da56:	2200      	movs	r2, #0
    da58:	490b      	ldr	r1, [pc, #44]	; (da88 <trx_aes_wrrd+0x1f8>)
    da5a:	480a      	ldr	r0, [pc, #40]	; (da84 <trx_aes_wrrd+0x1f4>)
    da5c:	4b0b      	ldr	r3, [pc, #44]	; (da8c <trx_aes_wrrd+0x1fc>)
    da5e:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    da60:	2100      	movs	r1, #0
    da62:	2000      	movs	r0, #0
    da64:	4b0b      	ldr	r3, [pc, #44]	; (da94 <trx_aes_wrrd+0x204>)
    da66:	4798      	blx	r3
}
    da68:	bc1c      	pop	{r2, r3, r4}
    da6a:	4690      	mov	r8, r2
    da6c:	4699      	mov	r9, r3
    da6e:	46a2      	mov	sl, r4
    da70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    da72:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    da74:	05ff      	lsls	r7, r7, #23
    da76:	0dff      	lsrs	r7, r7, #23
    da78:	e7eb      	b.n	da52 <trx_aes_wrrd+0x1c2>
    da7a:	46c0      	nop			; (mov r8, r8)
    da7c:	00006219 	.word	0x00006219
    da80:	00006401 	.word	0x00006401
    da84:	20002180 	.word	0x20002180
    da88:	20002144 	.word	0x20002144
    da8c:	0000756d 	.word	0x0000756d
    da90:	2000213c 	.word	0x2000213c
    da94:	000063e1 	.word	0x000063e1

0000da98 <DemoOutput_Greeting>:

bool PUSH_BUTTON_pressed;
MIWI_TICK PUSH_BUTTON_press_time;

void DemoOutput_Greeting(void)
{    
    da98:	b510      	push	{r4, lr}
        #endif
    #endif
#endif
    #if defined (ENABLE_CONSOLE)
        #if defined(PROTOCOL_P2P)
            printf("\r\nStarting Node 1 of Simple Demo for MiWi(TM) P2P Stack ...");  
    da9a:	4809      	ldr	r0, [pc, #36]	; (dac0 <DemoOutput_Greeting+0x28>)
    da9c:	4c09      	ldr	r4, [pc, #36]	; (dac4 <DemoOutput_Greeting+0x2c>)
    da9e:	47a0      	blx	r4
            printf("\r\nStarting Node 1 of Simple Demo for MiWi(TM) PRO Stack ...");  
        #endif 
    #endif
    #if defined(ENABLE_CONSOLE)   
        #if defined(PHY_AT86RF233)
        printf("\r\n     RF Transceiver: AT86RF233");
    daa0:	4809      	ldr	r0, [pc, #36]	; (dac8 <DemoOutput_Greeting+0x30>)
    daa2:	47a0      	blx	r4
        printf("\r\n   Demo Instruction:");
    daa4:	4809      	ldr	r0, [pc, #36]	; (dacc <DemoOutput_Greeting+0x34>)
    daa6:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    daa8:	4809      	ldr	r0, [pc, #36]	; (dad0 <DemoOutput_Greeting+0x38>)
    daaa:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer. ");
    daac:	4809      	ldr	r0, [pc, #36]	; (dad4 <DemoOutput_Greeting+0x3c>)
    daae:	47a0      	blx	r4
        printf("\r\n                     Push SW Button to broadcast message. ");
    dab0:	4809      	ldr	r0, [pc, #36]	; (dad8 <DemoOutput_Greeting+0x40>)
    dab2:	47a0      	blx	r4
#if defined (CONF_BOARD_JOYSTICK)		
        printf("\r\n                     Press Joystick CENTER Button to unicast encrypted message.");
#endif		
        printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    dab4:	4809      	ldr	r0, [pc, #36]	; (dadc <DemoOutput_Greeting+0x44>)
    dab6:	47a0      	blx	r4
        printf("\r\n\r\n");		
    dab8:	4809      	ldr	r0, [pc, #36]	; (dae0 <DemoOutput_Greeting+0x48>)
    daba:	4b0a      	ldr	r3, [pc, #40]	; (dae4 <DemoOutput_Greeting+0x4c>)
    dabc:	4798      	blx	r3
		printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
        printf("\r\n\r\n");		
        #endif
 
    #endif 
}        
    dabe:	bd10      	pop	{r4, pc}
    dac0:	000127ac 	.word	0x000127ac
    dac4:	00011269 	.word	0x00011269
    dac8:	000127e8 	.word	0x000127e8
    dacc:	0001280c 	.word	0x0001280c
    dad0:	00012824 	.word	0x00012824
    dad4:	00012864 	.word	0x00012864
    dad8:	000128a0 	.word	0x000128a0
    dadc:	000128e0 	.word	0x000128e0
    dae0:	00012928 	.word	0x00012928
    dae4:	0001135d 	.word	0x0001135d

0000dae8 <demo_output_freezer_options>:
	#elif defined(PHY_AT86RF212B)
	LCDDisplay((char *)"SW: Use Nwk Freezer \nPress in 5 sec", 0, false);
	#endif
	delay_ms(1000);
#endif
}
    dae8:	4770      	bx	lr
    daea:	Address 0x0000daea is out of bounds.


0000daec <DemoOutput_Channel>:
void DemoOutput_Channel(uint8_t channel, uint8_t Step)
{
    daec:	b570      	push	{r4, r5, r6, lr}
    daee:	0004      	movs	r4, r0
    if( Step == 0 )
    daf0:	2900      	cmp	r1, #0
    daf2:	d009      	beq.n	db08 <DemoOutput_Channel+0x1c>
#if defined (ENABLE_LCD)
        LCDDisplay((char *)"Connected Peer on \n Channel ", channel, true);
#endif
#if defined (ENABLE_CONSOLE)
        #if !defined(MIWIKIT)
        printf("\r\nConnected Peer on Channel ");
    daf4:	4809      	ldr	r0, [pc, #36]	; (db1c <DemoOutput_Channel+0x30>)
    daf6:	4d0a      	ldr	r5, [pc, #40]	; (db20 <DemoOutput_Channel+0x34>)
    daf8:	47a8      	blx	r5
        printf("%d",channel);
    dafa:	0021      	movs	r1, r4
    dafc:	4809      	ldr	r0, [pc, #36]	; (db24 <DemoOutput_Channel+0x38>)
    dafe:	47a8      	blx	r5
        printf("\r\n");
    db00:	4809      	ldr	r0, [pc, #36]	; (db28 <DemoOutput_Channel+0x3c>)
    db02:	4b0a      	ldr	r3, [pc, #40]	; (db2c <DemoOutput_Channel+0x40>)
    db04:	4798      	blx	r3
        #endif
#endif
    }
}    
    db06:	bd70      	pop	{r4, r5, r6, pc}
        printf("\r\nConnecting Peer on Channel ");
    db08:	4809      	ldr	r0, [pc, #36]	; (db30 <DemoOutput_Channel+0x44>)
    db0a:	4d05      	ldr	r5, [pc, #20]	; (db20 <DemoOutput_Channel+0x34>)
    db0c:	47a8      	blx	r5
        printf("%d",channel);
    db0e:	0021      	movs	r1, r4
    db10:	4804      	ldr	r0, [pc, #16]	; (db24 <DemoOutput_Channel+0x38>)
    db12:	47a8      	blx	r5
        printf("\r\n");
    db14:	4804      	ldr	r0, [pc, #16]	; (db28 <DemoOutput_Channel+0x3c>)
    db16:	4b05      	ldr	r3, [pc, #20]	; (db2c <DemoOutput_Channel+0x40>)
    db18:	4798      	blx	r3
    db1a:	e7f4      	b.n	db06 <DemoOutput_Channel+0x1a>
    db1c:	00012744 	.word	0x00012744
    db20:	00011269 	.word	0x00011269
    db24:	00012740 	.word	0x00012740
    db28:	00012998 	.word	0x00012998
    db2c:	0001135d 	.word	0x0001135d
    db30:	00012720 	.word	0x00012720

0000db34 <DemoOutput_Instruction>:
	  LCDDisplay((char *)"SW     : Broadcast \nBUTTON1: Unicast", 0, false);
#elif ((BOARD == SAMR21_XPLAINED_PRO) || (BOARD == SAMR30_XPLAINED_PRO))
	  LCDDisplay((char *)"SW: Broadcast", 0, false);
#endif
#endif
}
    db34:	4770      	bx	lr
    db36:	Address 0x0000db36 is out of bounds.


0000db38 <DemoOutput_HandleMessage>:


void DemoOutput_HandleMessage(void)
{
    db38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;

    if( rxMessage.flags.bits.secEn )
    db3a:	4b28      	ldr	r3, [pc, #160]	; (dbdc <DemoOutput_HandleMessage+0xa4>)
    db3c:	781b      	ldrb	r3, [r3, #0]
    db3e:	071b      	lsls	r3, r3, #28
    db40:	d423      	bmi.n	db8a <DemoOutput_HandleMessage+0x52>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    db42:	4b26      	ldr	r3, [pc, #152]	; (dbdc <DemoOutput_HandleMessage+0xa4>)
    db44:	781b      	ldrb	r3, [r3, #0]
    db46:	079b      	lsls	r3, r3, #30
    db48:	d024      	beq.n	db94 <DemoOutput_HandleMessage+0x5c>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    db4a:	211c      	movs	r1, #28
    db4c:	4824      	ldr	r0, [pc, #144]	; (dbe0 <DemoOutput_HandleMessage+0xa8>)
    db4e:	4b25      	ldr	r3, [pc, #148]	; (dbe4 <DemoOutput_HandleMessage+0xac>)
    db50:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    db52:	4c22      	ldr	r4, [pc, #136]	; (dbdc <DemoOutput_HandleMessage+0xa4>)
    db54:	7b61      	ldrb	r1, [r4, #13]
    db56:	4824      	ldr	r0, [pc, #144]	; (dbe8 <DemoOutput_HandleMessage+0xb0>)
    db58:	4b24      	ldr	r3, [pc, #144]	; (dbec <DemoOutput_HandleMessage+0xb4>)
    db5a:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    db5c:	7823      	ldrb	r3, [r4, #0]
    db5e:	065b      	lsls	r3, r3, #25
    db60:	d41d      	bmi.n	db9e <DemoOutput_HandleMessage+0x66>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    db62:	2103      	movs	r1, #3
    db64:	4822      	ldr	r0, [pc, #136]	; (dbf0 <DemoOutput_HandleMessage+0xb8>)
    db66:	4b1f      	ldr	r3, [pc, #124]	; (dbe4 <DemoOutput_HandleMessage+0xac>)
    db68:	4798      	blx	r3
    
    for(i = 0; i < rxMessage.PayloadSize; i++)
    db6a:	4b1c      	ldr	r3, [pc, #112]	; (dbdc <DemoOutput_HandleMessage+0xa4>)
    db6c:	7b1b      	ldrb	r3, [r3, #12]
    db6e:	2b00      	cmp	r3, #0
    db70:	d00a      	beq.n	db88 <DemoOutput_HandleMessage+0x50>
    db72:	2400      	movs	r4, #0
    {
        sio2host_putchar(rxMessage.Payload[i]);
    db74:	4d19      	ldr	r5, [pc, #100]	; (dbdc <DemoOutput_HandleMessage+0xa4>)
    db76:	4e1f      	ldr	r6, [pc, #124]	; (dbf4 <DemoOutput_HandleMessage+0xbc>)
    db78:	68ab      	ldr	r3, [r5, #8]
    db7a:	5d18      	ldrb	r0, [r3, r4]
    db7c:	47b0      	blx	r6
    for(i = 0; i < rxMessage.PayloadSize; i++)
    db7e:	3401      	adds	r4, #1
    db80:	b2e4      	uxtb	r4, r4
    db82:	7b2b      	ldrb	r3, [r5, #12]
    db84:	42a3      	cmp	r3, r4
    db86:	d8f7      	bhi.n	db78 <DemoOutput_HandleMessage+0x40>
    }       
} 
    db88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    db8a:	2109      	movs	r1, #9
    db8c:	481a      	ldr	r0, [pc, #104]	; (dbf8 <DemoOutput_HandleMessage+0xc0>)
    db8e:	4b15      	ldr	r3, [pc, #84]	; (dbe4 <DemoOutput_HandleMessage+0xac>)
    db90:	4798      	blx	r3
    db92:	e7d6      	b.n	db42 <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    db94:	211a      	movs	r1, #26
    db96:	4819      	ldr	r0, [pc, #100]	; (dbfc <DemoOutput_HandleMessage+0xc4>)
    db98:	4b12      	ldr	r3, [pc, #72]	; (dbe4 <DemoOutput_HandleMessage+0xac>)
    db9a:	4798      	blx	r3
    db9c:	e7d9      	b.n	db52 <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    db9e:	2107      	movs	r1, #7
    dba0:	4817      	ldr	r0, [pc, #92]	; (dc00 <DemoOutput_HandleMessage+0xc8>)
    dba2:	4b10      	ldr	r3, [pc, #64]	; (dbe4 <DemoOutput_HandleMessage+0xac>)
    dba4:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    dba6:	4b0d      	ldr	r3, [pc, #52]	; (dbdc <DemoOutput_HandleMessage+0xa4>)
    dba8:	781b      	ldrb	r3, [r3, #0]
    dbaa:	2407      	movs	r4, #7
    dbac:	2b7f      	cmp	r3, #127	; 0x7f
    dbae:	d809      	bhi.n	dbc4 <DemoOutput_HandleMessage+0x8c>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    dbb0:	4f0a      	ldr	r7, [pc, #40]	; (dbdc <DemoOutput_HandleMessage+0xa4>)
    dbb2:	4e14      	ldr	r6, [pc, #80]	; (dc04 <DemoOutput_HandleMessage+0xcc>)
    dbb4:	4d0d      	ldr	r5, [pc, #52]	; (dbec <DemoOutput_HandleMessage+0xb4>)
    dbb6:	687b      	ldr	r3, [r7, #4]
    dbb8:	5d19      	ldrb	r1, [r3, r4]
    dbba:	0030      	movs	r0, r6
    dbbc:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    dbbe:	3c01      	subs	r4, #1
    dbc0:	d2f9      	bcs.n	dbb6 <DemoOutput_HandleMessage+0x7e>
    dbc2:	e7ce      	b.n	db62 <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    dbc4:	4e05      	ldr	r6, [pc, #20]	; (dbdc <DemoOutput_HandleMessage+0xa4>)
    dbc6:	6873      	ldr	r3, [r6, #4]
    dbc8:	7859      	ldrb	r1, [r3, #1]
    dbca:	4d0e      	ldr	r5, [pc, #56]	; (dc04 <DemoOutput_HandleMessage+0xcc>)
    dbcc:	0028      	movs	r0, r5
    dbce:	4c07      	ldr	r4, [pc, #28]	; (dbec <DemoOutput_HandleMessage+0xb4>)
    dbd0:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    dbd2:	6873      	ldr	r3, [r6, #4]
    dbd4:	7819      	ldrb	r1, [r3, #0]
    dbd6:	0028      	movs	r0, r5
    dbd8:	47a0      	blx	r4
    dbda:	e7c2      	b.n	db62 <DemoOutput_HandleMessage+0x2a>
    dbdc:	20001fc4 	.word	0x20001fc4
    dbe0:	00012938 	.word	0x00012938
    dbe4:	00008d29 	.word	0x00008d29
    dbe8:	00012970 	.word	0x00012970
    dbec:	00011269 	.word	0x00011269
    dbf0:	00012984 	.word	0x00012984
    dbf4:	00008d55 	.word	0x00008d55
    dbf8:	0001292c 	.word	0x0001292c
    dbfc:	00012954 	.word	0x00012954
    dc00:	00012978 	.word	0x00012978
    dc04:	00012980 	.word	0x00012980

0000dc08 <DemoOutput_UpdateTxRx>:
void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
#if defined (ENABLE_LCD)
    LCDTRXCount(TxNum, RxNum);  
#endif
}
    dc08:	4770      	bx	lr
    dc0a:	Address 0x0000dc0a is out of bounds.


0000dc0c <DemoOutput_ChannelError>:

void DemoOutput_ChannelError(uint8_t channel)
{
    dc0c:	b570      	push	{r4, r5, r6, lr}
    dc0e:	0005      	movs	r5, r0
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
    dc10:	4804      	ldr	r0, [pc, #16]	; (dc24 <DemoOutput_ChannelError+0x18>)
    dc12:	4c05      	ldr	r4, [pc, #20]	; (dc28 <DemoOutput_ChannelError+0x1c>)
    dc14:	47a0      	blx	r4
        printf("%d", channel);
    dc16:	0029      	movs	r1, r5
    dc18:	4804      	ldr	r0, [pc, #16]	; (dc2c <DemoOutput_ChannelError+0x20>)
    dc1a:	47a0      	blx	r4
        printf(" is not supported in current configuration.\r\n");
    dc1c:	4804      	ldr	r0, [pc, #16]	; (dc30 <DemoOutput_ChannelError+0x24>)
    dc1e:	4b05      	ldr	r3, [pc, #20]	; (dc34 <DemoOutput_ChannelError+0x28>)
    dc20:	4798      	blx	r3
    #endif
}
    dc22:	bd70      	pop	{r4, r5, r6, pc}
    dc24:	00012764 	.word	0x00012764
    dc28:	00011269 	.word	0x00011269
    dc2c:	00012740 	.word	0x00012740
    dc30:	0001277c 	.word	0x0001277c
    dc34:	0001135d 	.word	0x0001135d

0000dc38 <DemoOutput_UnicastFail>:

void DemoOutput_UnicastFail(void)
{
    dc38:	b510      	push	{r4, lr}
    #if defined (ENABLE_CONSOLE)
        printf("\r\nUnicast Failed\r\n");
    dc3a:	4802      	ldr	r0, [pc, #8]	; (dc44 <DemoOutput_UnicastFail+0xc>)
    dc3c:	4b02      	ldr	r3, [pc, #8]	; (dc48 <DemoOutput_UnicastFail+0x10>)
    dc3e:	4798      	blx	r3
    #endif
#if defined (ENABLE_LCD)
    LCDDisplay((char *)" Unicast Failed", 0, true);
#endif
}    
    dc40:	bd10      	pop	{r4, pc}
    dc42:	46c0      	nop			; (mov r8, r8)
    dc44:	00012988 	.word	0x00012988
    dc48:	0001135d 	.word	0x0001135d

0000dc4c <ButtonPressed>:
 *
 * Note:
 ********************************************************************/

uint8_t ButtonPressed(void)
{
    dc4c:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    dc4e:	4b10      	ldr	r3, [pc, #64]	; (dc90 <ButtonPressed+0x44>)
    dc50:	6a1b      	ldr	r3, [r3, #32]
#if (BOARD == SAMR21_XPLAINED_PRO) || (BOARD == SAMR21ZLL_EK) || (BOARD == SAMR30_XPLAINED_PRO)
    MIWI_TICK tickDifference;
    if(!port_pin_get_input_level(BUTTON_0_PIN))
    dc52:	00db      	lsls	r3, r3, #3
    dc54:	d40e      	bmi.n	dc74 <ButtonPressed+0x28>
    {
        //if the button was previously not pressed
        if(PUSH_BUTTON_pressed == false)
    dc56:	4b0f      	ldr	r3, [pc, #60]	; (dc94 <ButtonPressed+0x48>)
    dc58:	781b      	ldrb	r3, [r3, #0]
        {
            PUSH_BUTTON_pressed = false;
        }
    }
#endif
    return 0;
    dc5a:	2000      	movs	r0, #0
        if(PUSH_BUTTON_pressed == false)
    dc5c:	2b00      	cmp	r3, #0
    dc5e:	d000      	beq.n	dc62 <ButtonPressed+0x16>
}
    dc60:	bd10      	pop	{r4, pc}
            PUSH_BUTTON_pressed = true;
    dc62:	2201      	movs	r2, #1
    dc64:	4b0b      	ldr	r3, [pc, #44]	; (dc94 <ButtonPressed+0x48>)
    dc66:	701a      	strb	r2, [r3, #0]
            PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    dc68:	4b0b      	ldr	r3, [pc, #44]	; (dc98 <ButtonPressed+0x4c>)
    dc6a:	4798      	blx	r3
    dc6c:	4b0b      	ldr	r3, [pc, #44]	; (dc9c <ButtonPressed+0x50>)
    dc6e:	6018      	str	r0, [r3, #0]
            return 1;
    dc70:	2001      	movs	r0, #1
    dc72:	e7f5      	b.n	dc60 <ButtonPressed+0x14>
		t.Val = MiWi_TickGet();
    dc74:	4b08      	ldr	r3, [pc, #32]	; (dc98 <ButtonPressed+0x4c>)
    dc76:	4798      	blx	r3
        tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
    dc78:	4b08      	ldr	r3, [pc, #32]	; (dc9c <ButtonPressed+0x50>)
    dc7a:	6819      	ldr	r1, [r3, #0]
    dc7c:	4b08      	ldr	r3, [pc, #32]	; (dca0 <ButtonPressed+0x54>)
    dc7e:	4798      	blx	r3
        if(tickDifference.Val > DEBOUNCE_TIME)
    dc80:	4b08      	ldr	r3, [pc, #32]	; (dca4 <ButtonPressed+0x58>)
    dc82:	4298      	cmp	r0, r3
    dc84:	d902      	bls.n	dc8c <ButtonPressed+0x40>
            PUSH_BUTTON_pressed = false;
    dc86:	2200      	movs	r2, #0
    dc88:	4b02      	ldr	r3, [pc, #8]	; (dc94 <ButtonPressed+0x48>)
    dc8a:	701a      	strb	r2, [r3, #0]
    return 0;
    dc8c:	2000      	movs	r0, #0
    dc8e:	e7e7      	b.n	dc60 <ButtonPressed+0x14>
    dc90:	41004400 	.word	0x41004400
    dc94:	2000218c 	.word	0x2000218c
    dc98:	0000ca75 	.word	0x0000ca75
    dc9c:	20002190 	.word	0x20002190
    dca0:	0000cac5 	.word	0x0000cac5
    dca4:	00003fff 	.word	0x00003fff

0000dca8 <ReadMacAddress>:
* Overview:            Uses the MAC Address from the EEPROM for addressing
*
* Note:
**********************************************************************/
void ReadMacAddress(void)
{
    dca8:	b510      	push	{r4, lr}
   {
     myLongAddress[i] = (NVM_UID_ADDRESS[j] & 0xFF);
     myLongAddress[i + 1] = (NVM_UID_ADDRESS[j] >> 8);
   }
#elif ((BOARD == SAMR30_XPLAINED_PRO) || (BOARD == SAMR21_XPLAINED_PRO))
   uint8_t* peui64 = edbg_eui_read_eui64();
    dcaa:	4b06      	ldr	r3, [pc, #24]	; (dcc4 <ReadMacAddress+0x1c>)
    dcac:	4798      	blx	r3
    dcae:	1dc3      	adds	r3, r0, #7
    dcb0:	4a05      	ldr	r2, [pc, #20]	; (dcc8 <ReadMacAddress+0x20>)
    dcb2:	3801      	subs	r0, #1
    for(uint8_t k=0; k<MY_ADDRESS_LENGTH; k++)
   {
        myLongAddress[k] = peui64[MY_ADDRESS_LENGTH-k-1];
    dcb4:	7819      	ldrb	r1, [r3, #0]
    dcb6:	7011      	strb	r1, [r2, #0]
    dcb8:	3b01      	subs	r3, #1
    dcba:	3201      	adds	r2, #1
    for(uint8_t k=0; k<MY_ADDRESS_LENGTH; k++)
    dcbc:	4283      	cmp	r3, r0
    dcbe:	d1f9      	bne.n	dcb4 <ReadMacAddress+0xc>
   }
#endif
}
    dcc0:	bd10      	pop	{r4, pc}
    dcc2:	46c0      	nop			; (mov r8, r8)
    dcc4:	0000cc79 	.word	0x0000cc79
    dcc8:	20000010 	.word	0x20000010

0000dccc <main>:
{
    dccc:	b510      	push	{r4, lr}
    system_init();
    dcce:	4b10      	ldr	r3, [pc, #64]	; (dd10 <main+0x44>)
    dcd0:	4798      	blx	r3
    delay_init();
    dcd2:	4b10      	ldr	r3, [pc, #64]	; (dd14 <main+0x48>)
    dcd4:	4798      	blx	r3
    cpu_irq_enable();
    dcd6:	2201      	movs	r2, #1
    dcd8:	4b0f      	ldr	r3, [pc, #60]	; (dd18 <main+0x4c>)
    dcda:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    dcdc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    dce0:	b662      	cpsie	i
    sio2host_init();
    dce2:	4b0e      	ldr	r3, [pc, #56]	; (dd1c <main+0x50>)
    dce4:	4798      	blx	r3
    ReadMacAddress();
    dce6:	4b0e      	ldr	r3, [pc, #56]	; (dd20 <main+0x54>)
    dce8:	4798      	blx	r3
    SYS_TimerInit();
    dcea:	4c0e      	ldr	r4, [pc, #56]	; (dd24 <main+0x58>)
    dcec:	47a0      	blx	r4
    DemoOutput_Greeting();
    dcee:	4b0e      	ldr	r3, [pc, #56]	; (dd28 <main+0x5c>)
    dcf0:	4798      	blx	r3
    SYS_TimerInit();
    dcf2:	47a0      	blx	r4
    nvm_init(INT_FLASH);
    dcf4:	2000      	movs	r0, #0
    dcf6:	4b0d      	ldr	r3, [pc, #52]	; (dd2c <main+0x60>)
    dcf8:	4798      	blx	r3
    PDS_Init();
    dcfa:	4b0d      	ldr	r3, [pc, #52]	; (dd30 <main+0x64>)
    dcfc:	4798      	blx	r3
    demo_output_freezer_options();
    dcfe:	4b0d      	ldr	r3, [pc, #52]	; (dd34 <main+0x68>)
    dd00:	4798      	blx	r3
    freezer_enable = freezer_feature();
    dd02:	4b0d      	ldr	r3, [pc, #52]	; (dd38 <main+0x6c>)
    dd04:	4798      	blx	r3
    Initialize_Demo(freezer_enable);
    dd06:	4b0d      	ldr	r3, [pc, #52]	; (dd3c <main+0x70>)
    dd08:	4798      	blx	r3
        Run_Demo();
    dd0a:	4c0d      	ldr	r4, [pc, #52]	; (dd40 <main+0x74>)
    dd0c:	47a0      	blx	r4
    dd0e:	e7fd      	b.n	dd0c <main+0x40>
    dd10:	0000858d 	.word	0x0000858d
    dd14:	000061d9 	.word	0x000061d9
    dd18:	20000008 	.word	0x20000008
    dd1c:	00008bd9 	.word	0x00008bd9
    dd20:	0000dca9 	.word	0x0000dca9
    dd24:	0000c905 	.word	0x0000c905
    dd28:	0000da99 	.word	0x0000da99
    dd2c:	0000cdfd 	.word	0x0000cdfd
    dd30:	0000a615 	.word	0x0000a615
    dd34:	0000dae9 	.word	0x0000dae9
    dd38:	0000df39 	.word	0x0000df39
    dd3c:	0000df75 	.word	0x0000df75
    dd40:	0000e0c9 	.word	0x0000e0c9

0000dd44 <dataConfcb>:
* Overview: Confirmation Callback for MiApp_SendData
*
* Parameters:  handle - message handle, miwi_status_t status of data send
****************************************************************************/
static void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    dd44:	b510      	push	{r4, lr}
    if (SUCCESS == status)
    dd46:	2900      	cmp	r1, #0
    dd48:	d002      	beq.n	dd50 <dataConfcb+0xc>
        DemoOutput_UpdateTxRx(++TxNum, RxNum);
        /* Delay for Display */
        delay_ms(100);
    }
    /* After Displaying TX and RX Counts , Switch back to showing Demo Instructions */
    DemoOutput_Instruction ();
    dd4a:	4b08      	ldr	r3, [pc, #32]	; (dd6c <dataConfcb+0x28>)
    dd4c:	4798      	blx	r3
}
    dd4e:	bd10      	pop	{r4, pc}
        DemoOutput_UpdateTxRx(++TxNum, RxNum);
    dd50:	4b07      	ldr	r3, [pc, #28]	; (dd70 <dataConfcb+0x2c>)
    dd52:	7818      	ldrb	r0, [r3, #0]
    dd54:	3001      	adds	r0, #1
    dd56:	b2c0      	uxtb	r0, r0
    dd58:	7018      	strb	r0, [r3, #0]
    dd5a:	4b06      	ldr	r3, [pc, #24]	; (dd74 <dataConfcb+0x30>)
    dd5c:	7819      	ldrb	r1, [r3, #0]
    dd5e:	4b06      	ldr	r3, [pc, #24]	; (dd78 <dataConfcb+0x34>)
    dd60:	4798      	blx	r3
        delay_ms(100);
    dd62:	2064      	movs	r0, #100	; 0x64
    dd64:	4b05      	ldr	r3, [pc, #20]	; (dd7c <dataConfcb+0x38>)
    dd66:	4798      	blx	r3
    dd68:	e7ef      	b.n	dd4a <dataConfcb+0x6>
    dd6a:	46c0      	nop			; (mov r8, r8)
    dd6c:	0000db35 	.word	0x0000db35
    dd70:	20001c59 	.word	0x20001c59
    dd74:	20001c58 	.word	0x20001c58
    dd78:	0000dc09 	.word	0x0000dc09
    dd7c:	00006245 	.word	0x00006245

0000dd80 <run_p2p_demo>:
* Overview: runs the demo based on input
*
* Parameters: None
*********************************************************************/
void run_p2p_demo(void)
{
    dd80:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd82:	46c6      	mov	lr, r8
    dd84:	b500      	push	{lr}
    dd86:	b086      	sub	sp, #24
            default:
            break;
        }
#endif

        uint8_t PressedButton = ButtonPressed();
    dd88:	4b49      	ldr	r3, [pc, #292]	; (deb0 <run_p2p_demo+0x130>)
    dd8a:	4798      	blx	r3
        switch( PressedButton )
    dd8c:	2801      	cmp	r0, #1
    dd8e:	d005      	beq.n	dd9c <run_p2p_demo+0x1c>
    dd90:	2802      	cmp	r0, #2
    dd92:	d029      	beq.n	dde8 <run_p2p_demo+0x68>
                break;
        }

    }

}
    dd94:	b006      	add	sp, #24
    dd96:	bc04      	pop	{r2}
    dd98:	4690      	mov	r8, r2
    dd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                uint16_t broadcastAddress = 0xFFFF;
    dd9c:	2416      	movs	r4, #22
    dd9e:	446c      	add	r4, sp
    dda0:	2301      	movs	r3, #1
    dda2:	425b      	negs	r3, r3
    dda4:	8023      	strh	r3, [r4, #0]
                mac_ack_status = MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, MIWI_TEXT_LEN, (uint8_t *)&MiWi[(TxSynCount%6)][0], msghandledemo++, true, dataConfcb);
    dda6:	4b43      	ldr	r3, [pc, #268]	; (deb4 <run_p2p_demo+0x134>)
    dda8:	7818      	ldrb	r0, [r3, #0]
    ddaa:	2106      	movs	r1, #6
    ddac:	4b42      	ldr	r3, [pc, #264]	; (deb8 <run_p2p_demo+0x138>)
    ddae:	4798      	blx	r3
    ddb0:	b2ca      	uxtb	r2, r1
    ddb2:	0053      	lsls	r3, r2, #1
    ddb4:	189a      	adds	r2, r3, r2
    ddb6:	00d3      	lsls	r3, r2, #3
    ddb8:	1a9b      	subs	r3, r3, r2
    ddba:	4a40      	ldr	r2, [pc, #256]	; (debc <run_p2p_demo+0x13c>)
    ddbc:	189b      	adds	r3, r3, r2
    ddbe:	4940      	ldr	r1, [pc, #256]	; (dec0 <run_p2p_demo+0x140>)
    ddc0:	780a      	ldrb	r2, [r1, #0]
    ddc2:	1c50      	adds	r0, r2, #1
    ddc4:	7008      	strb	r0, [r1, #0]
    ddc6:	493f      	ldr	r1, [pc, #252]	; (dec4 <run_p2p_demo+0x144>)
    ddc8:	9102      	str	r1, [sp, #8]
    ddca:	2101      	movs	r1, #1
    ddcc:	9101      	str	r1, [sp, #4]
    ddce:	9200      	str	r2, [sp, #0]
    ddd0:	2215      	movs	r2, #21
    ddd2:	0021      	movs	r1, r4
    ddd4:	2002      	movs	r0, #2
    ddd6:	4c3c      	ldr	r4, [pc, #240]	; (dec8 <run_p2p_demo+0x148>)
    ddd8:	47a0      	blx	r4
                if (mac_ack_status)
    ddda:	2800      	cmp	r0, #0
    dddc:	d0da      	beq.n	dd94 <run_p2p_demo+0x14>
                    TxSynCount++;
    ddde:	4a35      	ldr	r2, [pc, #212]	; (deb4 <run_p2p_demo+0x134>)
    dde0:	7813      	ldrb	r3, [r2, #0]
    dde2:	3301      	adds	r3, #1
    dde4:	7013      	strb	r3, [r2, #0]
            break;
    dde6:	e7d5      	b.n	dd94 <run_p2p_demo+0x14>
                chk_sel_status = true;
    dde8:	2301      	movs	r3, #1
    ddea:	4a38      	ldr	r2, [pc, #224]	; (decc <run_p2p_demo+0x14c>)
    ddec:	7013      	strb	r3, [r2, #0]
                select_ed =0;
    ddee:	2100      	movs	r1, #0
    ddf0:	4a37      	ldr	r2, [pc, #220]	; (ded0 <run_p2p_demo+0x150>)
    ddf2:	7011      	strb	r1, [r2, #0]
                update_ed = true;
    ddf4:	4a37      	ldr	r2, [pc, #220]	; (ded4 <run_p2p_demo+0x154>)
    ddf6:	7013      	strb	r3, [r2, #0]
                        uint8_t switch_val = ButtonPressed();
    ddf8:	4b2d      	ldr	r3, [pc, #180]	; (deb0 <run_p2p_demo+0x130>)
    ddfa:	4698      	mov	r8, r3
                        P2PTasks();
    ddfc:	4f36      	ldr	r7, [pc, #216]	; (ded8 <run_p2p_demo+0x158>)
                while(update_ed == true)
    ddfe:	e02e      	b.n	de5e <run_p2p_demo+0xde>
                            update_ed = false;
    de00:	2300      	movs	r3, #0
    de02:	4a34      	ldr	r2, [pc, #208]	; (ded4 <run_p2p_demo+0x154>)
    de04:	7013      	strb	r3, [r2, #0]
                            chk_sel_status = false;
    de06:	4a31      	ldr	r2, [pc, #196]	; (decc <run_p2p_demo+0x14c>)
    de08:	7013      	strb	r3, [r2, #0]
                            if( MiApp_SendData(LONG_ADDR_LEN, connectionTable[select_ed].Address, DE_LEN, (uint8_t*)&DE[(TxSynCount2%6)][i], msghandledemo++, 1, dataConfcb) == false)
    de0a:	4b31      	ldr	r3, [pc, #196]	; (ded0 <run_p2p_demo+0x150>)
    de0c:	781b      	ldrb	r3, [r3, #0]
    de0e:	009c      	lsls	r4, r3, #2
    de10:	18e4      	adds	r4, r4, r3
    de12:	0064      	lsls	r4, r4, #1
    de14:	4b31      	ldr	r3, [pc, #196]	; (dedc <run_p2p_demo+0x15c>)
    de16:	18e4      	adds	r4, r4, r3
    de18:	4b31      	ldr	r3, [pc, #196]	; (dee0 <run_p2p_demo+0x160>)
    de1a:	7818      	ldrb	r0, [r3, #0]
    de1c:	2106      	movs	r1, #6
    de1e:	4b26      	ldr	r3, [pc, #152]	; (deb8 <run_p2p_demo+0x138>)
    de20:	4798      	blx	r3
    de22:	b2c9      	uxtb	r1, r1
    de24:	008b      	lsls	r3, r1, #2
    de26:	185b      	adds	r3, r3, r1
    de28:	005b      	lsls	r3, r3, #1
    de2a:	185b      	adds	r3, r3, r1
    de2c:	4a2d      	ldr	r2, [pc, #180]	; (dee4 <run_p2p_demo+0x164>)
    de2e:	7811      	ldrb	r1, [r2, #0]
    de30:	185b      	adds	r3, r3, r1
    de32:	4a2d      	ldr	r2, [pc, #180]	; (dee8 <run_p2p_demo+0x168>)
    de34:	189b      	adds	r3, r3, r2
    de36:	4922      	ldr	r1, [pc, #136]	; (dec0 <run_p2p_demo+0x140>)
    de38:	780a      	ldrb	r2, [r1, #0]
    de3a:	1c50      	adds	r0, r2, #1
    de3c:	7008      	strb	r0, [r1, #0]
    de3e:	4921      	ldr	r1, [pc, #132]	; (dec4 <run_p2p_demo+0x144>)
    de40:	9102      	str	r1, [sp, #8]
    de42:	2101      	movs	r1, #1
    de44:	9101      	str	r1, [sp, #4]
    de46:	9200      	str	r2, [sp, #0]
    de48:	220b      	movs	r2, #11
    de4a:	0021      	movs	r1, r4
    de4c:	2008      	movs	r0, #8
    de4e:	4c1e      	ldr	r4, [pc, #120]	; (dec8 <run_p2p_demo+0x148>)
    de50:	47a0      	blx	r4
    de52:	2800      	cmp	r0, #0
    de54:	d025      	beq.n	dea2 <run_p2p_demo+0x122>
                                TxSynCount2++;
    de56:	4a22      	ldr	r2, [pc, #136]	; (dee0 <run_p2p_demo+0x160>)
    de58:	7813      	ldrb	r3, [r2, #0]
    de5a:	3301      	adds	r3, #1
    de5c:	7013      	strb	r3, [r2, #0]
                while(update_ed == true)
    de5e:	4b1d      	ldr	r3, [pc, #116]	; (ded4 <run_p2p_demo+0x154>)
    de60:	781b      	ldrb	r3, [r3, #0]
    de62:	2b00      	cmp	r3, #0
    de64:	d096      	beq.n	dd94 <run_p2p_demo+0x14>
                    chk_sel_status = true;
    de66:	2201      	movs	r2, #1
    de68:	4b18      	ldr	r3, [pc, #96]	; (decc <run_p2p_demo+0x14c>)
    de6a:	701a      	strb	r2, [r3, #0]
                    while(chk_sel_status)
    de6c:	001d      	movs	r5, r3
                        PDS_TaskHandler();
    de6e:	4e1f      	ldr	r6, [pc, #124]	; (deec <run_p2p_demo+0x16c>)
                    while(chk_sel_status)
    de70:	782b      	ldrb	r3, [r5, #0]
    de72:	2b00      	cmp	r3, #0
    de74:	d0f3      	beq.n	de5e <run_p2p_demo+0xde>
                        uint8_t switch_val = ButtonPressed();
    de76:	47c0      	blx	r8
    de78:	0004      	movs	r4, r0
                        P2PTasks();
    de7a:	47b8      	blx	r7
                        PDS_TaskHandler();
    de7c:	47b0      	blx	r6
                        if(switch_val == 1)
    de7e:	2c01      	cmp	r4, #1
    de80:	d0be      	beq.n	de00 <run_p2p_demo+0x80>
                        else if(switch_val == 2)
    de82:	2c02      	cmp	r4, #2
    de84:	d1f4      	bne.n	de70 <run_p2p_demo+0xf0>
                            if (select_ed > conn_size-2)
    de86:	4b12      	ldr	r3, [pc, #72]	; (ded0 <run_p2p_demo+0x150>)
    de88:	781a      	ldrb	r2, [r3, #0]
    de8a:	4b19      	ldr	r3, [pc, #100]	; (def0 <run_p2p_demo+0x170>)
    de8c:	781b      	ldrb	r3, [r3, #0]
    de8e:	3b02      	subs	r3, #2
    de90:	429a      	cmp	r2, r3
    de92:	dd09      	ble.n	dea8 <run_p2p_demo+0x128>
                                select_ed = 0;
    de94:	2200      	movs	r2, #0
    de96:	4b0e      	ldr	r3, [pc, #56]	; (ded0 <run_p2p_demo+0x150>)
    de98:	701a      	strb	r2, [r3, #0]
                            chk_sel_status = false;
    de9a:	2200      	movs	r2, #0
    de9c:	4b0b      	ldr	r3, [pc, #44]	; (decc <run_p2p_demo+0x14c>)
    de9e:	701a      	strb	r2, [r3, #0]
    dea0:	e7e6      	b.n	de70 <run_p2p_demo+0xf0>
                                DemoOutput_UnicastFail();
    dea2:	4b14      	ldr	r3, [pc, #80]	; (def4 <run_p2p_demo+0x174>)
    dea4:	4798      	blx	r3
    dea6:	e7da      	b.n	de5e <run_p2p_demo+0xde>
                                select_ed = select_ed+1;
    dea8:	3201      	adds	r2, #1
    deaa:	4b09      	ldr	r3, [pc, #36]	; (ded0 <run_p2p_demo+0x150>)
    deac:	701a      	strb	r2, [r3, #0]
    deae:	e7f4      	b.n	de9a <run_p2p_demo+0x11a>
    deb0:	0000dc4d 	.word	0x0000dc4d
    deb4:	20001c5a 	.word	0x20001c5a
    deb8:	0000e545 	.word	0x0000e545
    debc:	0001299c 	.word	0x0001299c
    dec0:	20001c5c 	.word	0x20001c5c
    dec4:	0000dd45 	.word	0x0000dd45
    dec8:	0000c075 	.word	0x0000c075
    decc:	2000001f 	.word	0x2000001f
    ded0:	20002195 	.word	0x20002195
    ded4:	20002194 	.word	0x20002194
    ded8:	0000c199 	.word	0x0000c199
    dedc:	20002198 	.word	0x20002198
    dee0:	20001c5b 	.word	0x20001c5b
    dee4:	20002196 	.word	0x20002196
    dee8:	000126dc 	.word	0x000126dc
    deec:	0000a6a9 	.word	0x0000a6a9
    def0:	200003e6 	.word	0x200003e6
    def4:	0000dc39 	.word	0x0000dc39

0000def8 <ReceivedDataIndication>:
* PreCondition: MiApp_ProtocolInit
*
* Input:  RECEIVED_MESSAGE *ind - Indication structure
********************************************************************/
void ReceivedDataIndication (RECEIVED_MESSAGE *ind)
{
    def8:	b510      	push	{r4, lr}
#if defined(ENABLE_CONSOLE)
    /* Print the received information via Console */
    DemoOutput_HandleMessage();
    defa:	4b09      	ldr	r3, [pc, #36]	; (df20 <ReceivedDataIndication+0x28>)
    defc:	4798      	blx	r3
#endif

    /* Update the TX AND RX Counts on the display */
    DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    defe:	4b09      	ldr	r3, [pc, #36]	; (df24 <ReceivedDataIndication+0x2c>)
    df00:	7818      	ldrb	r0, [r3, #0]
    df02:	4b09      	ldr	r3, [pc, #36]	; (df28 <ReceivedDataIndication+0x30>)
    df04:	7819      	ldrb	r1, [r3, #0]
    df06:	3101      	adds	r1, #1
    df08:	b2c9      	uxtb	r1, r1
    df0a:	7019      	strb	r1, [r3, #0]
    df0c:	4b07      	ldr	r3, [pc, #28]	; (df2c <ReceivedDataIndication+0x34>)
    df0e:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    df10:	2280      	movs	r2, #128	; 0x80
    df12:	0312      	lsls	r2, r2, #12
    df14:	4b06      	ldr	r3, [pc, #24]	; (df30 <ReceivedDataIndication+0x38>)
    df16:	61da      	str	r2, [r3, #28]
    /* Toggle LED2 to indicate receiving a packet */
    LED_Toggle(LED0);
#endif

    /* Display the Instructions message */
    DemoOutput_Instruction();
    df18:	4b06      	ldr	r3, [pc, #24]	; (df34 <ReceivedDataIndication+0x3c>)
    df1a:	4798      	blx	r3
}
    df1c:	bd10      	pop	{r4, pc}
    df1e:	46c0      	nop			; (mov r8, r8)
    df20:	0000db39 	.word	0x0000db39
    df24:	20001c59 	.word	0x20001c59
    df28:	20001c58 	.word	0x20001c58
    df2c:	0000dc09 	.word	0x0000dc09
    df30:	41004400 	.word	0x41004400
    df34:	0000db35 	.word	0x0000db35

0000df38 <freezer_feature>:
* Overview: Allows user to select network freezer restore
*
* Return:  true if network freezer to be used for restoring
********************************************************************/
bool freezer_feature(void)
{
    df38:	b570      	push	{r4, r5, r6, lr}
    MIWI_TICK tick1, tick2;
    uint8_t switch_val;
    tick1.Val = MiWi_TickGet();
    df3a:	4c0a      	ldr	r4, [pc, #40]	; (df64 <freezer_feature+0x2c>)
    df3c:	47a0      	blx	r4
    df3e:	0005      	movs	r5, r0
    while(1)
    {
        tick2.Val = MiWi_TickGet();
    df40:	47a0      	blx	r4
        if(MiWi_TickGetDiff(tick2, tick1) > (ONE_SECOND * 4))
    df42:	0029      	movs	r1, r5
    df44:	4b08      	ldr	r3, [pc, #32]	; (df68 <freezer_feature+0x30>)
    df46:	4798      	blx	r3
    df48:	4a08      	ldr	r2, [pc, #32]	; (df6c <freezer_feature+0x34>)
        {
            return false;
        }

    }
    return false;
    df4a:	2300      	movs	r3, #0
        if(MiWi_TickGetDiff(tick2, tick1) > (ONE_SECOND * 4))
    df4c:	4290      	cmp	r0, r2
    df4e:	d901      	bls.n	df54 <freezer_feature+0x1c>
}
    df50:	0018      	movs	r0, r3
    df52:	bd70      	pop	{r4, r5, r6, pc}
        switch_val = ButtonPressed ();
    df54:	4b06      	ldr	r3, [pc, #24]	; (df70 <freezer_feature+0x38>)
    df56:	4798      	blx	r3
        if(switch_val == 1)
    df58:	3801      	subs	r0, #1
    df5a:	4243      	negs	r3, r0
    df5c:	4143      	adcs	r3, r0
    df5e:	b2db      	uxtb	r3, r3
    df60:	e7f6      	b.n	df50 <freezer_feature+0x18>
    df62:	46c0      	nop			; (mov r8, r8)
    df64:	0000ca75 	.word	0x0000ca75
    df68:	0000cac5 	.word	0x0000cac5
    df6c:	003d0900 	.word	0x003d0900
    df70:	0000dc4d 	.word	0x0000dc4d

0000df74 <Initialize_Demo>:
*
* Overview: Initializes the demo by initializing protocol, required
            components and initiates connection
********************************************************************/
bool Initialize_Demo(bool freezer_enable)
{
    df74:	b570      	push	{r4, r5, r6, lr}
    df76:	b086      	sub	sp, #24
    df78:	0004      	movs	r4, r0
    uint16_t broadcastAddr = 0xFFFF;
    df7a:	2201      	movs	r2, #1
    df7c:	4252      	negs	r2, r2
    df7e:	2316      	movs	r3, #22
    df80:	446b      	add	r3, sp
    df82:	801a      	strh	r2, [r3, #0]
    /* Subscribe for data indication */
    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    df84:	4835      	ldr	r0, [pc, #212]	; (e05c <Initialize_Demo+0xe8>)
    df86:	4b36      	ldr	r3, [pc, #216]	; (e060 <Initialize_Demo+0xec>)
    df88:	4798      	blx	r3
    /* Sleep manager initialization */
    sleepMgr_init();
#endif

    /* Update NetworkFreezerRestore parameter whether to restore from network freezer or not */
    defaultParamsRomOrRam.networkFreezerRestore = freezer_enable;
    df8a:	4836      	ldr	r0, [pc, #216]	; (e064 <Initialize_Demo+0xf0>)
    df8c:	7304      	strb	r4, [r0, #12]

    /* Initialize the P2P and Star Protocol */
    if (MiApp_ProtocolInit(&defaultParamsRomOrRam, &defaultParamsRamOnly) == RECONNECTED)
    df8e:	4936      	ldr	r1, [pc, #216]	; (e068 <Initialize_Demo+0xf4>)
    df90:	4b36      	ldr	r3, [pc, #216]	; (e06c <Initialize_Demo+0xf8>)
    df92:	4798      	blx	r3
    df94:	280f      	cmp	r0, #15
    df96:	d047      	beq.n	e028 <Initialize_Demo+0xb4>
    srand(PHY_RandomReq());
    df98:	4b35      	ldr	r3, [pc, #212]	; (e070 <Initialize_Demo+0xfc>)
    df9a:	4798      	blx	r3
    df9c:	4b35      	ldr	r3, [pc, #212]	; (e074 <Initialize_Demo+0x100>)
    df9e:	4798      	blx	r3
    memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    dfa0:	2200      	movs	r2, #0
    dfa2:	2300      	movs	r3, #0
    dfa4:	9202      	str	r2, [sp, #8]
    dfa6:	9303      	str	r3, [sp, #12]
    if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    dfa8:	4e33      	ldr	r6, [pc, #204]	; (e078 <Initialize_Demo+0x104>)
    dfaa:	3208      	adds	r2, #8
    dfac:	0031      	movs	r1, r6
    dfae:	a802      	add	r0, sp, #8
    dfb0:	4d32      	ldr	r5, [pc, #200]	; (e07c <Initialize_Demo+0x108>)
    dfb2:	47a8      	blx	r5
    dfb4:	0004      	movs	r4, r0
    memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    dfb6:	2201      	movs	r2, #1
    dfb8:	4252      	negs	r2, r2
    dfba:	17d3      	asrs	r3, r2, #31
    dfbc:	9202      	str	r2, [sp, #8]
    dfbe:	9303      	str	r3, [sp, #12]
    if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    dfc0:	3209      	adds	r2, #9
    dfc2:	0031      	movs	r1, r6
    dfc4:	a802      	add	r0, sp, #8
    dfc6:	47a8      	blx	r5
    dfc8:	2800      	cmp	r0, #0
    dfca:	d001      	beq.n	dfd0 <Initialize_Demo+0x5c>
    if (invalidIEEEAddrFlag)
    dfcc:	2c00      	cmp	r4, #0
    dfce:	d108      	bne.n	dfe2 <Initialize_Demo+0x6e>
    dfd0:	4c29      	ldr	r4, [pc, #164]	; (e078 <Initialize_Demo+0x104>)
    dfd2:	0026      	movs	r6, r4
    dfd4:	3608      	adds	r6, #8
            *peui64++ = (uint8_t)rand();
    dfd6:	4d2a      	ldr	r5, [pc, #168]	; (e080 <Initialize_Demo+0x10c>)
    dfd8:	47a8      	blx	r5
    dfda:	7020      	strb	r0, [r4, #0]
    dfdc:	3401      	adds	r4, #1
        for(uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    dfde:	42b4      	cmp	r4, r6
    dfe0:	d1fa      	bne.n	dfd8 <Initialize_Demo+0x64>
    PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    dfe2:	4825      	ldr	r0, [pc, #148]	; (e078 <Initialize_Demo+0x104>)
    dfe4:	4b27      	ldr	r3, [pc, #156]	; (e084 <Initialize_Demo+0x110>)
    dfe6:	4798      	blx	r3
    /* Unable to boot from the Network Freezer parameters, so initiate connection */
    /* Check Valid address is found , else update with random */
    longAddressValidationAndUpdation();

    /* Enable all kinds of connection */
    MiApp_ConnectionMode(ENABLE_ALL_CONN);
    dfe8:	2000      	movs	r0, #0
    dfea:	4b27      	ldr	r3, [pc, #156]	; (e088 <Initialize_Demo+0x114>)
    dfec:	4798      	blx	r3

    // Set default channel
    if( MiApp_Set(CHANNEL, &myChannel) == false )
    dfee:	4927      	ldr	r1, [pc, #156]	; (e08c <Initialize_Demo+0x118>)
    dff0:	2000      	movs	r0, #0
    dff2:	4b27      	ldr	r3, [pc, #156]	; (e090 <Initialize_Demo+0x11c>)
    dff4:	4798      	blx	r3
    dff6:	1e04      	subs	r4, r0, #0
    dff8:	d02b      	beq.n	e052 <Initialize_Demo+0xde>
    {
        DemoOutput_ChannelError(myChannel);
        return false;
    }

    DemoOutput_Channel(myChannel, 0);
    dffa:	4c24      	ldr	r4, [pc, #144]	; (e08c <Initialize_Demo+0x118>)
    dffc:	7820      	ldrb	r0, [r4, #0]
    dffe:	2100      	movs	r1, #0
    e000:	4b24      	ldr	r3, [pc, #144]	; (e094 <Initialize_Demo+0x120>)
    e002:	4798      	blx	r3

    startNetwork =  false;
    e004:	2200      	movs	r2, #0
    e006:	4b24      	ldr	r3, [pc, #144]	; (e098 <Initialize_Demo+0x124>)
    e008:	701a      	strb	r2, [r3, #0]

    /* Try to establish a new connection with peer device by broadcast Connection Request */
    return MiApp_EstablishConnection(myChannel, 2, (uint8_t*)&broadcastAddr, 0, Connection_Confirm);
    e00a:	7820      	ldrb	r0, [r4, #0]
    e00c:	4b23      	ldr	r3, [pc, #140]	; (e09c <Initialize_Demo+0x128>)
    e00e:	9300      	str	r3, [sp, #0]
    e010:	2300      	movs	r3, #0
    e012:	3216      	adds	r2, #22
    e014:	446a      	add	r2, sp
    e016:	2102      	movs	r1, #2
    e018:	4c21      	ldr	r4, [pc, #132]	; (e0a0 <Initialize_Demo+0x12c>)
    e01a:	47a0      	blx	r4
    e01c:	1e44      	subs	r4, r0, #1
    e01e:	41a0      	sbcs	r0, r4
    e020:	b2c4      	uxtb	r4, r0
}
    e022:	0020      	movs	r0, r4
    e024:	b006      	add	sp, #24
    e026:	bd70      	pop	{r4, r5, r6, pc}
        printf("\r\nPANID:");
    e028:	481e      	ldr	r0, [pc, #120]	; (e0a4 <Initialize_Demo+0x130>)
    e02a:	4c1f      	ldr	r4, [pc, #124]	; (e0a8 <Initialize_Demo+0x134>)
    e02c:	47a0      	blx	r4
        printf("%x",myPANID.v[1]);
    e02e:	4e1f      	ldr	r6, [pc, #124]	; (e0ac <Initialize_Demo+0x138>)
    e030:	7871      	ldrb	r1, [r6, #1]
    e032:	4d1f      	ldr	r5, [pc, #124]	; (e0b0 <Initialize_Demo+0x13c>)
    e034:	0028      	movs	r0, r5
    e036:	47a0      	blx	r4
        printf("%x",myPANID.v[0]);
    e038:	7831      	ldrb	r1, [r6, #0]
    e03a:	0028      	movs	r0, r5
    e03c:	47a0      	blx	r4
        printf(" Channel:");
    e03e:	481d      	ldr	r0, [pc, #116]	; (e0b4 <Initialize_Demo+0x140>)
    e040:	47a0      	blx	r4
        printf("%d",currentChannel);
    e042:	4b1d      	ldr	r3, [pc, #116]	; (e0b8 <Initialize_Demo+0x144>)
    e044:	7819      	ldrb	r1, [r3, #0]
    e046:	481d      	ldr	r0, [pc, #116]	; (e0bc <Initialize_Demo+0x148>)
    e048:	47a0      	blx	r4
        DemoOutput_Instruction();
    e04a:	4b1d      	ldr	r3, [pc, #116]	; (e0c0 <Initialize_Demo+0x14c>)
    e04c:	4798      	blx	r3
        return true;
    e04e:	2401      	movs	r4, #1
    e050:	e7e7      	b.n	e022 <Initialize_Demo+0xae>
        DemoOutput_ChannelError(myChannel);
    e052:	4b0e      	ldr	r3, [pc, #56]	; (e08c <Initialize_Demo+0x118>)
    e054:	7818      	ldrb	r0, [r3, #0]
    e056:	4b1b      	ldr	r3, [pc, #108]	; (e0c4 <Initialize_Demo+0x150>)
    e058:	4798      	blx	r3
        return false;
    e05a:	e7e2      	b.n	e022 <Initialize_Demo+0xae>
    e05c:	0000def9 	.word	0x0000def9
    e060:	0000bc89 	.word	0x0000bc89
    e064:	20000024 	.word	0x20000024
    e068:	20001c60 	.word	0x20001c60
    e06c:	0000ba15 	.word	0x0000ba15
    e070:	0000b679 	.word	0x0000b679
    e074:	00011371 	.word	0x00011371
    e078:	20000010 	.word	0x20000010
    e07c:	00010c91 	.word	0x00010c91
    e080:	000113cd 	.word	0x000113cd
    e084:	0000b811 	.word	0x0000b811
    e088:	0000bb91 	.word	0x0000bb91
    e08c:	20000034 	.word	0x20000034
    e090:	0000b9e5 	.word	0x0000b9e5
    e094:	0000daed 	.word	0x0000daed
    e098:	20001c61 	.word	0x20001c61
    e09c:	0000e24d 	.word	0x0000e24d
    e0a0:	0000c00d 	.word	0x0000c00d
    e0a4:	00012afc 	.word	0x00012afc
    e0a8:	00011269 	.word	0x00011269
    e0ac:	20001f6c 	.word	0x20001f6c
    e0b0:	00012980 	.word	0x00012980
    e0b4:	00012b08 	.word	0x00012b08
    e0b8:	2000000d 	.word	0x2000000d
    e0bc:	00012740 	.word	0x00012740
    e0c0:	0000db35 	.word	0x0000db35
    e0c4:	0000dc0d 	.word	0x0000dc0d

0000e0c8 <Run_Demo>:
* Function: void Run_Demo(void)
*
* Overview: runs the demo based on user input
********************************************************************/
void Run_Demo(void)
{
    e0c8:	b510      	push	{r4, lr}
    P2PTasks();
    e0ca:	4b03      	ldr	r3, [pc, #12]	; (e0d8 <Run_Demo+0x10>)
    e0cc:	4798      	blx	r3
#if defined(ENABLE_NETWORK_FREEZER)
#if PDS_ENABLE_WEAR_LEVELING
    PDS_TaskHandler();
    e0ce:	4b03      	ldr	r3, [pc, #12]	; (e0dc <Run_Demo+0x14>)
    e0d0:	4798      	blx	r3
#endif
#endif
    run_p2p_demo();
    e0d2:	4b03      	ldr	r3, [pc, #12]	; (e0e0 <Run_Demo+0x18>)
    e0d4:	4798      	blx	r3
}
    e0d6:	bd10      	pop	{r4, pc}
    e0d8:	0000c199 	.word	0x0000c199
    e0dc:	0000a6a9 	.word	0x0000a6a9
    e0e0:	0000dd81 	.word	0x0000dd81

0000e0e4 <DumpConnection>:
    * Side Effects:    The content of the connection pointed by the index 
    *                  of the P2P Connection Entry will be printed out
    *
    ********************************************************************/
void DumpConnection(INPUT uint8_t index)
{
    e0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0e6:	46de      	mov	lr, fp
    e0e8:	4647      	mov	r7, r8
    e0ea:	b580      	push	{r7, lr}
    e0ec:	0005      	movs	r5, r0
    uint8_t i, j;
        
    if( index > CONNECTION_SIZE )
    e0ee:	2805      	cmp	r0, #5
    e0f0:	d810      	bhi.n	e114 <DumpConnection+0x30>
        #endif
        printf("  Channel: ");
        printf("%d",currentChannel);
    }
            
    if( index < CONNECTION_SIZE )
    e0f2:	2d04      	cmp	r5, #4
    e0f4:	d851      	bhi.n	e19a <DumpConnection+0xb6>
    {
        printf("\r\nConnection \tPeerLongAddress \tPeerInfo\r\n");  
    e0f6:	4841      	ldr	r0, [pc, #260]	; (e1fc <DumpConnection+0x118>)
    e0f8:	4b41      	ldr	r3, [pc, #260]	; (e200 <DumpConnection+0x11c>)
    e0fa:	4798      	blx	r3
        if( connectionTable[index].status.bits.isValid )
    e0fc:	00ab      	lsls	r3, r5, #2
    e0fe:	195b      	adds	r3, r3, r5
    e100:	005b      	lsls	r3, r3, #1
    e102:	4a40      	ldr	r2, [pc, #256]	; (e204 <DumpConnection+0x120>)
    e104:	18d3      	adds	r3, r2, r3
    e106:	7a1b      	ldrb	r3, [r3, #8]
    e108:	09db      	lsrs	r3, r3, #7
    e10a:	d122      	bne.n	e152 <DumpConnection+0x6e>
#endif
                printf("\r\n");
            }  
        }
    }
}
    e10c:	bc0c      	pop	{r2, r3}
    e10e:	4690      	mov	r8, r2
    e110:	469b      	mov	fp, r3
    e112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        printf("\r\n\r\nMy Address: 0x");
    e114:	483c      	ldr	r0, [pc, #240]	; (e208 <DumpConnection+0x124>)
    e116:	4b3d      	ldr	r3, [pc, #244]	; (e20c <DumpConnection+0x128>)
    e118:	4798      	blx	r3
    e11a:	4c3d      	ldr	r4, [pc, #244]	; (e210 <DumpConnection+0x12c>)
    e11c:	0026      	movs	r6, r4
    e11e:	3e08      	subs	r6, #8
            printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    e120:	4f3a      	ldr	r7, [pc, #232]	; (e20c <DumpConnection+0x128>)
    e122:	79e1      	ldrb	r1, [r4, #7]
    e124:	483b      	ldr	r0, [pc, #236]	; (e214 <DumpConnection+0x130>)
    e126:	47b8      	blx	r7
    e128:	3c01      	subs	r4, #1
        for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    e12a:	42b4      	cmp	r4, r6
    e12c:	d1f9      	bne.n	e122 <DumpConnection+0x3e>
            printf("  PANID: 0x");
    e12e:	483a      	ldr	r0, [pc, #232]	; (e218 <DumpConnection+0x134>)
    e130:	4c36      	ldr	r4, [pc, #216]	; (e20c <DumpConnection+0x128>)
    e132:	47a0      	blx	r4
            printf("%x",myPANID.v[1]);
    e134:	4f39      	ldr	r7, [pc, #228]	; (e21c <DumpConnection+0x138>)
    e136:	7879      	ldrb	r1, [r7, #1]
    e138:	4e39      	ldr	r6, [pc, #228]	; (e220 <DumpConnection+0x13c>)
    e13a:	0030      	movs	r0, r6
    e13c:	47a0      	blx	r4
            printf("%x",myPANID.v[0]);
    e13e:	7839      	ldrb	r1, [r7, #0]
    e140:	0030      	movs	r0, r6
    e142:	47a0      	blx	r4
        printf("  Channel: ");
    e144:	4837      	ldr	r0, [pc, #220]	; (e224 <DumpConnection+0x140>)
    e146:	47a0      	blx	r4
        printf("%d",currentChannel);
    e148:	4b37      	ldr	r3, [pc, #220]	; (e228 <DumpConnection+0x144>)
    e14a:	7819      	ldrb	r1, [r3, #0]
    e14c:	4837      	ldr	r0, [pc, #220]	; (e22c <DumpConnection+0x148>)
    e14e:	47a0      	blx	r4
    e150:	e7cf      	b.n	e0f2 <DumpConnection+0xe>
            printf("%02x",index);
    e152:	0029      	movs	r1, r5
    e154:	482f      	ldr	r0, [pc, #188]	; (e214 <DumpConnection+0x130>)
    e156:	4c2d      	ldr	r4, [pc, #180]	; (e20c <DumpConnection+0x128>)
    e158:	47a0      	blx	r4
            printf("\t\t\t");
    e15a:	4835      	ldr	r0, [pc, #212]	; (e230 <DumpConnection+0x14c>)
    e15c:	47a0      	blx	r4
    e15e:	00ae      	lsls	r6, r5, #2
    e160:	1976      	adds	r6, r6, r5
    e162:	0076      	lsls	r6, r6, #1
    e164:	1df4      	adds	r4, r6, #7
    e166:	4b27      	ldr	r3, [pc, #156]	; (e204 <DumpConnection+0x120>)
    e168:	18e4      	adds	r4, r4, r3
    e16a:	3e01      	subs	r6, #1
    e16c:	18f6      	adds	r6, r6, r3
                    printf("%02x", connectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    e16e:	4f27      	ldr	r7, [pc, #156]	; (e20c <DumpConnection+0x128>)
    e170:	7821      	ldrb	r1, [r4, #0]
    e172:	4828      	ldr	r0, [pc, #160]	; (e214 <DumpConnection+0x130>)
    e174:	47b8      	blx	r7
    e176:	3c01      	subs	r4, #1
            for(i = 0; i < 8; i++)
    e178:	42b4      	cmp	r4, r6
    e17a:	d1f9      	bne.n	e170 <DumpConnection+0x8c>
            printf("/t");
    e17c:	482d      	ldr	r0, [pc, #180]	; (e234 <DumpConnection+0x150>)
    e17e:	4c23      	ldr	r4, [pc, #140]	; (e20c <DumpConnection+0x128>)
    e180:	47a0      	blx	r4
                    printf("%02x", connectionTable[index].PeerInfo[i] );
    e182:	00ab      	lsls	r3, r5, #2
    e184:	195d      	adds	r5, r3, r5
    e186:	006d      	lsls	r5, r5, #1
    e188:	4b1e      	ldr	r3, [pc, #120]	; (e204 <DumpConnection+0x120>)
    e18a:	195d      	adds	r5, r3, r5
    e18c:	7a69      	ldrb	r1, [r5, #9]
    e18e:	4821      	ldr	r0, [pc, #132]	; (e214 <DumpConnection+0x130>)
    e190:	47a0      	blx	r4
            printf("\r\n");
    e192:	4829      	ldr	r0, [pc, #164]	; (e238 <DumpConnection+0x154>)
    e194:	4b1a      	ldr	r3, [pc, #104]	; (e200 <DumpConnection+0x11c>)
    e196:	4798      	blx	r3
    e198:	e7b8      	b.n	e10c <DumpConnection+0x28>
        printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\r\n");  
    e19a:	4828      	ldr	r0, [pc, #160]	; (e23c <DumpConnection+0x158>)
    e19c:	4b18      	ldr	r3, [pc, #96]	; (e200 <DumpConnection+0x11c>)
    e19e:	4798      	blx	r3
    e1a0:	4f27      	ldr	r7, [pc, #156]	; (e240 <DumpConnection+0x15c>)
    e1a2:	2600      	movs	r6, #0
            if( connectionTable[i].status.bits.isValid )
    e1a4:	4b17      	ldr	r3, [pc, #92]	; (e204 <DumpConnection+0x120>)
    e1a6:	4698      	mov	r8, r3
    e1a8:	e00c      	b.n	e1c4 <DumpConnection+0xe0>
                printf("    ");
    e1aa:	4826      	ldr	r0, [pc, #152]	; (e244 <DumpConnection+0x160>)
    e1ac:	4c17      	ldr	r4, [pc, #92]	; (e20c <DumpConnection+0x128>)
    e1ae:	47a0      	blx	r4
                        printf("%02x", connectionTable[i].PeerInfo[j] );
    e1b0:	78b9      	ldrb	r1, [r7, #2]
    e1b2:	4818      	ldr	r0, [pc, #96]	; (e214 <DumpConnection+0x130>)
    e1b4:	47a0      	blx	r4
                printf("\r\n");
    e1b6:	4820      	ldr	r0, [pc, #128]	; (e238 <DumpConnection+0x154>)
    e1b8:	4b11      	ldr	r3, [pc, #68]	; (e200 <DumpConnection+0x11c>)
    e1ba:	4798      	blx	r3
    e1bc:	3601      	adds	r6, #1
    e1be:	370a      	adds	r7, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    e1c0:	2e05      	cmp	r6, #5
    e1c2:	d0a3      	beq.n	e10c <DumpConnection+0x28>
            if( connectionTable[i].status.bits.isValid )
    e1c4:	00b3      	lsls	r3, r6, #2
    e1c6:	199b      	adds	r3, r3, r6
    e1c8:	005b      	lsls	r3, r3, #1
    e1ca:	4443      	add	r3, r8
    e1cc:	7a1b      	ldrb	r3, [r3, #8]
    e1ce:	09db      	lsrs	r3, r3, #7
    e1d0:	d0f4      	beq.n	e1bc <DumpConnection+0xd8>
                printf("%02x",i);
    e1d2:	0031      	movs	r1, r6
    e1d4:	480f      	ldr	r0, [pc, #60]	; (e214 <DumpConnection+0x130>)
    e1d6:	4b0d      	ldr	r3, [pc, #52]	; (e20c <DumpConnection+0x128>)
    e1d8:	4798      	blx	r3
                printf("             ");
    e1da:	481b      	ldr	r0, [pc, #108]	; (e248 <DumpConnection+0x164>)
    e1dc:	4b0b      	ldr	r3, [pc, #44]	; (e20c <DumpConnection+0x128>)
    e1de:	4798      	blx	r3
    e1e0:	2308      	movs	r3, #8
    e1e2:	425b      	negs	r3, r3
    e1e4:	469b      	mov	fp, r3
    e1e6:	44bb      	add	fp, r7
    e1e8:	003c      	movs	r4, r7
                        printf("%02x", connectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    e1ea:	4d08      	ldr	r5, [pc, #32]	; (e20c <DumpConnection+0x128>)
    e1ec:	7821      	ldrb	r1, [r4, #0]
    e1ee:	4809      	ldr	r0, [pc, #36]	; (e214 <DumpConnection+0x130>)
    e1f0:	47a8      	blx	r5
    e1f2:	3c01      	subs	r4, #1
                for(j = 0; j < 8; j++)
    e1f4:	455c      	cmp	r4, fp
    e1f6:	d1f9      	bne.n	e1ec <DumpConnection+0x108>
    e1f8:	e7d7      	b.n	e1aa <DumpConnection+0xc6>
    e1fa:	46c0      	nop			; (mov r8, r8)
    e1fc:	00012a7c 	.word	0x00012a7c
    e200:	0001135d 	.word	0x0001135d
    e204:	20002198 	.word	0x20002198
    e208:	00012a50 	.word	0x00012a50
    e20c:	00011269 	.word	0x00011269
    e210:	20000010 	.word	0x20000010
    e214:	00012970 	.word	0x00012970
    e218:	00012a64 	.word	0x00012a64
    e21c:	20001f6c 	.word	0x20001f6c
    e220:	00012980 	.word	0x00012980
    e224:	00012a70 	.word	0x00012a70
    e228:	2000000d 	.word	0x2000000d
    e22c:	00012740 	.word	0x00012740
    e230:	00012aa8 	.word	0x00012aa8
    e234:	00012aac 	.word	0x00012aac
    e238:	00012998 	.word	0x00012998
    e23c:	00012ab0 	.word	0x00012ab0
    e240:	2000219f 	.word	0x2000219f
    e244:	00012af4 	.word	0x00012af4
    e248:	00012ae4 	.word	0x00012ae4

0000e24c <Connection_Confirm>:
{
    e24c:	b510      	push	{r4, lr}
    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    e24e:	2800      	cmp	r0, #0
    e250:	d00d      	beq.n	e26e <Connection_Confirm+0x22>
    e252:	2806      	cmp	r0, #6
    e254:	d00b      	beq.n	e26e <Connection_Confirm+0x22>
        startNetwork = true;
    e256:	2201      	movs	r2, #1
    e258:	4b14      	ldr	r3, [pc, #80]	; (e2ac <Connection_Confirm+0x60>)
    e25a:	701a      	strb	r2, [r3, #0]
        MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    e25c:	4b14      	ldr	r3, [pc, #80]	; (e2b0 <Connection_Confirm+0x64>)
    e25e:	781b      	ldrb	r3, [r3, #0]
    e260:	409a      	lsls	r2, r3
    e262:	4b14      	ldr	r3, [pc, #80]	; (e2b4 <Connection_Confirm+0x68>)
    e264:	210a      	movs	r1, #10
    e266:	2000      	movs	r0, #0
    e268:	4c13      	ldr	r4, [pc, #76]	; (e2b8 <Connection_Confirm+0x6c>)
    e26a:	47a0      	blx	r4
}
    e26c:	e011      	b.n	e292 <Connection_Confirm+0x46>
		port_base->OUTCLR.reg = pin_mask;
    e26e:	2280      	movs	r2, #128	; 0x80
    e270:	0312      	lsls	r2, r2, #12
    e272:	4b12      	ldr	r3, [pc, #72]	; (e2bc <Connection_Confirm+0x70>)
    e274:	615a      	str	r2, [r3, #20]
        if (!startNetwork)
    e276:	4b0d      	ldr	r3, [pc, #52]	; (e2ac <Connection_Confirm+0x60>)
    e278:	781b      	ldrb	r3, [r3, #0]
    e27a:	2b00      	cmp	r3, #0
    e27c:	d10a      	bne.n	e294 <Connection_Confirm+0x48>
            DemoOutput_Channel(myChannel, 1);
    e27e:	4b0c      	ldr	r3, [pc, #48]	; (e2b0 <Connection_Confirm+0x64>)
    e280:	7818      	ldrb	r0, [r3, #0]
    e282:	2101      	movs	r1, #1
    e284:	4b0e      	ldr	r3, [pc, #56]	; (e2c0 <Connection_Confirm+0x74>)
    e286:	4798      	blx	r3
        DemoOutput_Instruction();
    e288:	4b0e      	ldr	r3, [pc, #56]	; (e2c4 <Connection_Confirm+0x78>)
    e28a:	4798      	blx	r3
        DumpConnection(0xFF);
    e28c:	20ff      	movs	r0, #255	; 0xff
    e28e:	4b0e      	ldr	r3, [pc, #56]	; (e2c8 <Connection_Confirm+0x7c>)
    e290:	4798      	blx	r3
}
    e292:	bd10      	pop	{r4, pc}
            printf("\r\nStarted Wireless Communication on Channel ");
    e294:	480d      	ldr	r0, [pc, #52]	; (e2cc <Connection_Confirm+0x80>)
    e296:	4c0e      	ldr	r4, [pc, #56]	; (e2d0 <Connection_Confirm+0x84>)
    e298:	47a0      	blx	r4
            printf("%u",currentChannel);
    e29a:	4b0e      	ldr	r3, [pc, #56]	; (e2d4 <Connection_Confirm+0x88>)
    e29c:	7819      	ldrb	r1, [r3, #0]
    e29e:	480e      	ldr	r0, [pc, #56]	; (e2d8 <Connection_Confirm+0x8c>)
    e2a0:	47a0      	blx	r4
            printf("\r\n");
    e2a2:	480e      	ldr	r0, [pc, #56]	; (e2dc <Connection_Confirm+0x90>)
    e2a4:	4b0e      	ldr	r3, [pc, #56]	; (e2e0 <Connection_Confirm+0x94>)
    e2a6:	4798      	blx	r3
    e2a8:	e7ee      	b.n	e288 <Connection_Confirm+0x3c>
    e2aa:	46c0      	nop			; (mov r8, r8)
    e2ac:	20001c61 	.word	0x20001c61
    e2b0:	20000034 	.word	0x20000034
    e2b4:	0000e24d 	.word	0x0000e24d
    e2b8:	0000bbc1 	.word	0x0000bbc1
    e2bc:	41004400 	.word	0x41004400
    e2c0:	0000daed 	.word	0x0000daed
    e2c4:	0000db35 	.word	0x0000db35
    e2c8:	0000e0e5 	.word	0x0000e0e5
    e2cc:	00012a1c 	.word	0x00012a1c
    e2d0:	00011269 	.word	0x00011269
    e2d4:	2000000d 	.word	0x2000000d
    e2d8:	00012a4c 	.word	0x00012a4c
    e2dc:	00012998 	.word	0x00012998
    e2e0:	0001135d 	.word	0x0001135d

0000e2e4 <common_tc_read_count>:
    e2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2e6:	4b0d      	ldr	r3, [pc, #52]	; (e31c <common_tc_read_count+0x38>)
    e2e8:	4798      	blx	r3
    e2ea:	4b0d      	ldr	r3, [pc, #52]	; (e320 <common_tc_read_count+0x3c>)
    e2ec:	781b      	ldrb	r3, [r3, #0]
    e2ee:	2b00      	cmp	r3, #0
    e2f0:	d00e      	beq.n	e310 <common_tc_read_count+0x2c>
    e2f2:	4b0c      	ldr	r3, [pc, #48]	; (e324 <common_tc_read_count+0x40>)
    e2f4:	781d      	ldrb	r5, [r3, #0]
    e2f6:	4b0a      	ldr	r3, [pc, #40]	; (e320 <common_tc_read_count+0x3c>)
    e2f8:	781f      	ldrb	r7, [r3, #0]
    e2fa:	4c0b      	ldr	r4, [pc, #44]	; (e328 <common_tc_read_count+0x44>)
    e2fc:	1c29      	adds	r1, r5, #0
    e2fe:	47a0      	blx	r4
    e300:	1c06      	adds	r6, r0, #0
    e302:	480a      	ldr	r0, [pc, #40]	; (e32c <common_tc_read_count+0x48>)
    e304:	1c29      	adds	r1, r5, #0
    e306:	47a0      	blx	r4
    e308:	4378      	muls	r0, r7
    e30a:	1830      	adds	r0, r6, r0
    e30c:	b280      	uxth	r0, r0
    e30e:	e004      	b.n	e31a <common_tc_read_count+0x36>
    e310:	4b04      	ldr	r3, [pc, #16]	; (e324 <common_tc_read_count+0x40>)
    e312:	7819      	ldrb	r1, [r3, #0]
    e314:	4b04      	ldr	r3, [pc, #16]	; (e328 <common_tc_read_count+0x44>)
    e316:	4798      	blx	r3
    e318:	b280      	uxth	r0, r0
    e31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e31c:	0000caed 	.word	0x0000caed
    e320:	20001c64 	.word	0x20001c64
    e324:	200021ca 	.word	0x200021ca
    e328:	0000e54d 	.word	0x0000e54d
    e32c:	0000ffff 	.word	0x0000ffff

0000e330 <common_tc_delay>:
    e330:	b510      	push	{r4, lr}
    e332:	1c04      	adds	r4, r0, #0
    e334:	4b13      	ldr	r3, [pc, #76]	; (e384 <common_tc_delay+0x54>)
    e336:	4798      	blx	r3
    e338:	4b13      	ldr	r3, [pc, #76]	; (e388 <common_tc_delay+0x58>)
    e33a:	781a      	ldrb	r2, [r3, #0]
    e33c:	4362      	muls	r2, r4
    e33e:	1881      	adds	r1, r0, r2
    e340:	4b12      	ldr	r3, [pc, #72]	; (e38c <common_tc_delay+0x5c>)
    e342:	6059      	str	r1, [r3, #4]
    e344:	6859      	ldr	r1, [r3, #4]
    e346:	0c09      	lsrs	r1, r1, #16
    e348:	6059      	str	r1, [r3, #4]
    e34a:	685b      	ldr	r3, [r3, #4]
    e34c:	2b00      	cmp	r3, #0
    e34e:	d007      	beq.n	e360 <common_tc_delay+0x30>
    e350:	4b0e      	ldr	r3, [pc, #56]	; (e38c <common_tc_delay+0x5c>)
    e352:	6859      	ldr	r1, [r3, #4]
    e354:	3201      	adds	r2, #1
    e356:	1880      	adds	r0, r0, r2
    e358:	8118      	strh	r0, [r3, #8]
    e35a:	4b0d      	ldr	r3, [pc, #52]	; (e390 <common_tc_delay+0x60>)
    e35c:	4798      	blx	r3
    e35e:	e004      	b.n	e36a <common_tc_delay+0x3a>
    e360:	1882      	adds	r2, r0, r2
    e362:	4b0a      	ldr	r3, [pc, #40]	; (e38c <common_tc_delay+0x5c>)
    e364:	811a      	strh	r2, [r3, #8]
    e366:	4b0b      	ldr	r3, [pc, #44]	; (e394 <common_tc_delay+0x64>)
    e368:	4798      	blx	r3
    e36a:	4b08      	ldr	r3, [pc, #32]	; (e38c <common_tc_delay+0x5c>)
    e36c:	891b      	ldrh	r3, [r3, #8]
    e36e:	2b63      	cmp	r3, #99	; 0x63
    e370:	d802      	bhi.n	e378 <common_tc_delay+0x48>
    e372:	3364      	adds	r3, #100	; 0x64
    e374:	4a05      	ldr	r2, [pc, #20]	; (e38c <common_tc_delay+0x5c>)
    e376:	8113      	strh	r3, [r2, #8]
    e378:	4b04      	ldr	r3, [pc, #16]	; (e38c <common_tc_delay+0x5c>)
    e37a:	8918      	ldrh	r0, [r3, #8]
    e37c:	4b06      	ldr	r3, [pc, #24]	; (e398 <common_tc_delay+0x68>)
    e37e:	4798      	blx	r3
    e380:	bd10      	pop	{r4, pc}
    e382:	46c0      	nop			; (mov r8, r8)
    e384:	0000caed 	.word	0x0000caed
    e388:	200021ca 	.word	0x200021ca
    e38c:	20001c64 	.word	0x20001c64
    e390:	0000cb01 	.word	0x0000cb01
    e394:	0000cb15 	.word	0x0000cb15
    e398:	0000cb55 	.word	0x0000cb55

0000e39c <common_tc_init>:
    e39c:	b508      	push	{r3, lr}
    e39e:	2200      	movs	r2, #0
    e3a0:	4b03      	ldr	r3, [pc, #12]	; (e3b0 <common_tc_init+0x14>)
    e3a2:	701a      	strb	r2, [r3, #0]
    e3a4:	4b03      	ldr	r3, [pc, #12]	; (e3b4 <common_tc_init+0x18>)
    e3a6:	4798      	blx	r3
    e3a8:	4b03      	ldr	r3, [pc, #12]	; (e3b8 <common_tc_init+0x1c>)
    e3aa:	7018      	strb	r0, [r3, #0]
    e3ac:	bd08      	pop	{r3, pc}
    e3ae:	46c0      	nop			; (mov r8, r8)
    e3b0:	20001c64 	.word	0x20001c64
    e3b4:	0000cb6d 	.word	0x0000cb6d
    e3b8:	200021ca 	.word	0x200021ca

0000e3bc <tmr_ovf_callback>:
    e3bc:	b508      	push	{r3, lr}
    e3be:	4b0e      	ldr	r3, [pc, #56]	; (e3f8 <tmr_ovf_callback+0x3c>)
    e3c0:	685b      	ldr	r3, [r3, #4]
    e3c2:	2b00      	cmp	r3, #0
    e3c4:	d007      	beq.n	e3d6 <tmr_ovf_callback+0x1a>
    e3c6:	4a0c      	ldr	r2, [pc, #48]	; (e3f8 <tmr_ovf_callback+0x3c>)
    e3c8:	6853      	ldr	r3, [r2, #4]
    e3ca:	3b01      	subs	r3, #1
    e3cc:	6053      	str	r3, [r2, #4]
    e3ce:	2b00      	cmp	r3, #0
    e3d0:	d101      	bne.n	e3d6 <tmr_ovf_callback+0x1a>
    e3d2:	4b0a      	ldr	r3, [pc, #40]	; (e3fc <tmr_ovf_callback+0x40>)
    e3d4:	4798      	blx	r3
    e3d6:	4a08      	ldr	r2, [pc, #32]	; (e3f8 <tmr_ovf_callback+0x3c>)
    e3d8:	7813      	ldrb	r3, [r2, #0]
    e3da:	3301      	adds	r3, #1
    e3dc:	b2db      	uxtb	r3, r3
    e3de:	7013      	strb	r3, [r2, #0]
    e3e0:	4a07      	ldr	r2, [pc, #28]	; (e400 <tmr_ovf_callback+0x44>)
    e3e2:	7812      	ldrb	r2, [r2, #0]
    e3e4:	429a      	cmp	r2, r3
    e3e6:	d806      	bhi.n	e3f6 <tmr_ovf_callback+0x3a>
    e3e8:	4b03      	ldr	r3, [pc, #12]	; (e3f8 <tmr_ovf_callback+0x3c>)
    e3ea:	2200      	movs	r2, #0
    e3ec:	701a      	strb	r2, [r3, #0]
    e3ee:	68db      	ldr	r3, [r3, #12]
    e3f0:	2b00      	cmp	r3, #0
    e3f2:	d000      	beq.n	e3f6 <tmr_ovf_callback+0x3a>
    e3f4:	4798      	blx	r3
    e3f6:	bd08      	pop	{r3, pc}
    e3f8:	20001c64 	.word	0x20001c64
    e3fc:	0000cb15 	.word	0x0000cb15
    e400:	200021ca 	.word	0x200021ca

0000e404 <tmr_cca_callback>:
    e404:	b508      	push	{r3, lr}
    e406:	4b04      	ldr	r3, [pc, #16]	; (e418 <tmr_cca_callback+0x14>)
    e408:	4798      	blx	r3
    e40a:	4b04      	ldr	r3, [pc, #16]	; (e41c <tmr_cca_callback+0x18>)
    e40c:	691b      	ldr	r3, [r3, #16]
    e40e:	2b00      	cmp	r3, #0
    e410:	d000      	beq.n	e414 <tmr_cca_callback+0x10>
    e412:	4798      	blx	r3
    e414:	bd08      	pop	{r3, pc}
    e416:	46c0      	nop			; (mov r8, r8)
    e418:	0000cb01 	.word	0x0000cb01
    e41c:	20001c64 	.word	0x20001c64

0000e420 <set_common_tc_overflow_callback>:
    e420:	4b01      	ldr	r3, [pc, #4]	; (e428 <set_common_tc_overflow_callback+0x8>)
    e422:	60d8      	str	r0, [r3, #12]
    e424:	4770      	bx	lr
    e426:	46c0      	nop			; (mov r8, r8)
    e428:	20001c64 	.word	0x20001c64

0000e42c <set_common_tc_expiry_callback>:
    e42c:	4b01      	ldr	r3, [pc, #4]	; (e434 <set_common_tc_expiry_callback+0x8>)
    e42e:	6118      	str	r0, [r3, #16]
    e430:	4770      	bx	lr
    e432:	46c0      	nop			; (mov r8, r8)
    e434:	20001c64 	.word	0x20001c64

0000e438 <__udivsi3>:
    e438:	2200      	movs	r2, #0
    e43a:	0843      	lsrs	r3, r0, #1
    e43c:	428b      	cmp	r3, r1
    e43e:	d374      	bcc.n	e52a <__udivsi3+0xf2>
    e440:	0903      	lsrs	r3, r0, #4
    e442:	428b      	cmp	r3, r1
    e444:	d35f      	bcc.n	e506 <__udivsi3+0xce>
    e446:	0a03      	lsrs	r3, r0, #8
    e448:	428b      	cmp	r3, r1
    e44a:	d344      	bcc.n	e4d6 <__udivsi3+0x9e>
    e44c:	0b03      	lsrs	r3, r0, #12
    e44e:	428b      	cmp	r3, r1
    e450:	d328      	bcc.n	e4a4 <__udivsi3+0x6c>
    e452:	0c03      	lsrs	r3, r0, #16
    e454:	428b      	cmp	r3, r1
    e456:	d30d      	bcc.n	e474 <__udivsi3+0x3c>
    e458:	22ff      	movs	r2, #255	; 0xff
    e45a:	0209      	lsls	r1, r1, #8
    e45c:	ba12      	rev	r2, r2
    e45e:	0c03      	lsrs	r3, r0, #16
    e460:	428b      	cmp	r3, r1
    e462:	d302      	bcc.n	e46a <__udivsi3+0x32>
    e464:	1212      	asrs	r2, r2, #8
    e466:	0209      	lsls	r1, r1, #8
    e468:	d065      	beq.n	e536 <__udivsi3+0xfe>
    e46a:	0b03      	lsrs	r3, r0, #12
    e46c:	428b      	cmp	r3, r1
    e46e:	d319      	bcc.n	e4a4 <__udivsi3+0x6c>
    e470:	e000      	b.n	e474 <__udivsi3+0x3c>
    e472:	0a09      	lsrs	r1, r1, #8
    e474:	0bc3      	lsrs	r3, r0, #15
    e476:	428b      	cmp	r3, r1
    e478:	d301      	bcc.n	e47e <__udivsi3+0x46>
    e47a:	03cb      	lsls	r3, r1, #15
    e47c:	1ac0      	subs	r0, r0, r3
    e47e:	4152      	adcs	r2, r2
    e480:	0b83      	lsrs	r3, r0, #14
    e482:	428b      	cmp	r3, r1
    e484:	d301      	bcc.n	e48a <__udivsi3+0x52>
    e486:	038b      	lsls	r3, r1, #14
    e488:	1ac0      	subs	r0, r0, r3
    e48a:	4152      	adcs	r2, r2
    e48c:	0b43      	lsrs	r3, r0, #13
    e48e:	428b      	cmp	r3, r1
    e490:	d301      	bcc.n	e496 <__udivsi3+0x5e>
    e492:	034b      	lsls	r3, r1, #13
    e494:	1ac0      	subs	r0, r0, r3
    e496:	4152      	adcs	r2, r2
    e498:	0b03      	lsrs	r3, r0, #12
    e49a:	428b      	cmp	r3, r1
    e49c:	d301      	bcc.n	e4a2 <__udivsi3+0x6a>
    e49e:	030b      	lsls	r3, r1, #12
    e4a0:	1ac0      	subs	r0, r0, r3
    e4a2:	4152      	adcs	r2, r2
    e4a4:	0ac3      	lsrs	r3, r0, #11
    e4a6:	428b      	cmp	r3, r1
    e4a8:	d301      	bcc.n	e4ae <__udivsi3+0x76>
    e4aa:	02cb      	lsls	r3, r1, #11
    e4ac:	1ac0      	subs	r0, r0, r3
    e4ae:	4152      	adcs	r2, r2
    e4b0:	0a83      	lsrs	r3, r0, #10
    e4b2:	428b      	cmp	r3, r1
    e4b4:	d301      	bcc.n	e4ba <__udivsi3+0x82>
    e4b6:	028b      	lsls	r3, r1, #10
    e4b8:	1ac0      	subs	r0, r0, r3
    e4ba:	4152      	adcs	r2, r2
    e4bc:	0a43      	lsrs	r3, r0, #9
    e4be:	428b      	cmp	r3, r1
    e4c0:	d301      	bcc.n	e4c6 <__udivsi3+0x8e>
    e4c2:	024b      	lsls	r3, r1, #9
    e4c4:	1ac0      	subs	r0, r0, r3
    e4c6:	4152      	adcs	r2, r2
    e4c8:	0a03      	lsrs	r3, r0, #8
    e4ca:	428b      	cmp	r3, r1
    e4cc:	d301      	bcc.n	e4d2 <__udivsi3+0x9a>
    e4ce:	020b      	lsls	r3, r1, #8
    e4d0:	1ac0      	subs	r0, r0, r3
    e4d2:	4152      	adcs	r2, r2
    e4d4:	d2cd      	bcs.n	e472 <__udivsi3+0x3a>
    e4d6:	09c3      	lsrs	r3, r0, #7
    e4d8:	428b      	cmp	r3, r1
    e4da:	d301      	bcc.n	e4e0 <__udivsi3+0xa8>
    e4dc:	01cb      	lsls	r3, r1, #7
    e4de:	1ac0      	subs	r0, r0, r3
    e4e0:	4152      	adcs	r2, r2
    e4e2:	0983      	lsrs	r3, r0, #6
    e4e4:	428b      	cmp	r3, r1
    e4e6:	d301      	bcc.n	e4ec <__udivsi3+0xb4>
    e4e8:	018b      	lsls	r3, r1, #6
    e4ea:	1ac0      	subs	r0, r0, r3
    e4ec:	4152      	adcs	r2, r2
    e4ee:	0943      	lsrs	r3, r0, #5
    e4f0:	428b      	cmp	r3, r1
    e4f2:	d301      	bcc.n	e4f8 <__udivsi3+0xc0>
    e4f4:	014b      	lsls	r3, r1, #5
    e4f6:	1ac0      	subs	r0, r0, r3
    e4f8:	4152      	adcs	r2, r2
    e4fa:	0903      	lsrs	r3, r0, #4
    e4fc:	428b      	cmp	r3, r1
    e4fe:	d301      	bcc.n	e504 <__udivsi3+0xcc>
    e500:	010b      	lsls	r3, r1, #4
    e502:	1ac0      	subs	r0, r0, r3
    e504:	4152      	adcs	r2, r2
    e506:	08c3      	lsrs	r3, r0, #3
    e508:	428b      	cmp	r3, r1
    e50a:	d301      	bcc.n	e510 <__udivsi3+0xd8>
    e50c:	00cb      	lsls	r3, r1, #3
    e50e:	1ac0      	subs	r0, r0, r3
    e510:	4152      	adcs	r2, r2
    e512:	0883      	lsrs	r3, r0, #2
    e514:	428b      	cmp	r3, r1
    e516:	d301      	bcc.n	e51c <__udivsi3+0xe4>
    e518:	008b      	lsls	r3, r1, #2
    e51a:	1ac0      	subs	r0, r0, r3
    e51c:	4152      	adcs	r2, r2
    e51e:	0843      	lsrs	r3, r0, #1
    e520:	428b      	cmp	r3, r1
    e522:	d301      	bcc.n	e528 <__udivsi3+0xf0>
    e524:	004b      	lsls	r3, r1, #1
    e526:	1ac0      	subs	r0, r0, r3
    e528:	4152      	adcs	r2, r2
    e52a:	1a41      	subs	r1, r0, r1
    e52c:	d200      	bcs.n	e530 <__udivsi3+0xf8>
    e52e:	4601      	mov	r1, r0
    e530:	4152      	adcs	r2, r2
    e532:	4610      	mov	r0, r2
    e534:	4770      	bx	lr
    e536:	e7ff      	b.n	e538 <__udivsi3+0x100>
    e538:	b501      	push	{r0, lr}
    e53a:	2000      	movs	r0, #0
    e53c:	f000 f8f0 	bl	e720 <__aeabi_idiv0>
    e540:	bd02      	pop	{r1, pc}
    e542:	46c0      	nop			; (mov r8, r8)

0000e544 <__aeabi_uidivmod>:
    e544:	2900      	cmp	r1, #0
    e546:	d0f7      	beq.n	e538 <__udivsi3+0x100>
    e548:	e776      	b.n	e438 <__udivsi3>
    e54a:	4770      	bx	lr

0000e54c <__divsi3>:
    e54c:	4603      	mov	r3, r0
    e54e:	430b      	orrs	r3, r1
    e550:	d47f      	bmi.n	e652 <__divsi3+0x106>
    e552:	2200      	movs	r2, #0
    e554:	0843      	lsrs	r3, r0, #1
    e556:	428b      	cmp	r3, r1
    e558:	d374      	bcc.n	e644 <__divsi3+0xf8>
    e55a:	0903      	lsrs	r3, r0, #4
    e55c:	428b      	cmp	r3, r1
    e55e:	d35f      	bcc.n	e620 <__divsi3+0xd4>
    e560:	0a03      	lsrs	r3, r0, #8
    e562:	428b      	cmp	r3, r1
    e564:	d344      	bcc.n	e5f0 <__divsi3+0xa4>
    e566:	0b03      	lsrs	r3, r0, #12
    e568:	428b      	cmp	r3, r1
    e56a:	d328      	bcc.n	e5be <__divsi3+0x72>
    e56c:	0c03      	lsrs	r3, r0, #16
    e56e:	428b      	cmp	r3, r1
    e570:	d30d      	bcc.n	e58e <__divsi3+0x42>
    e572:	22ff      	movs	r2, #255	; 0xff
    e574:	0209      	lsls	r1, r1, #8
    e576:	ba12      	rev	r2, r2
    e578:	0c03      	lsrs	r3, r0, #16
    e57a:	428b      	cmp	r3, r1
    e57c:	d302      	bcc.n	e584 <__divsi3+0x38>
    e57e:	1212      	asrs	r2, r2, #8
    e580:	0209      	lsls	r1, r1, #8
    e582:	d065      	beq.n	e650 <__divsi3+0x104>
    e584:	0b03      	lsrs	r3, r0, #12
    e586:	428b      	cmp	r3, r1
    e588:	d319      	bcc.n	e5be <__divsi3+0x72>
    e58a:	e000      	b.n	e58e <__divsi3+0x42>
    e58c:	0a09      	lsrs	r1, r1, #8
    e58e:	0bc3      	lsrs	r3, r0, #15
    e590:	428b      	cmp	r3, r1
    e592:	d301      	bcc.n	e598 <__divsi3+0x4c>
    e594:	03cb      	lsls	r3, r1, #15
    e596:	1ac0      	subs	r0, r0, r3
    e598:	4152      	adcs	r2, r2
    e59a:	0b83      	lsrs	r3, r0, #14
    e59c:	428b      	cmp	r3, r1
    e59e:	d301      	bcc.n	e5a4 <__divsi3+0x58>
    e5a0:	038b      	lsls	r3, r1, #14
    e5a2:	1ac0      	subs	r0, r0, r3
    e5a4:	4152      	adcs	r2, r2
    e5a6:	0b43      	lsrs	r3, r0, #13
    e5a8:	428b      	cmp	r3, r1
    e5aa:	d301      	bcc.n	e5b0 <__divsi3+0x64>
    e5ac:	034b      	lsls	r3, r1, #13
    e5ae:	1ac0      	subs	r0, r0, r3
    e5b0:	4152      	adcs	r2, r2
    e5b2:	0b03      	lsrs	r3, r0, #12
    e5b4:	428b      	cmp	r3, r1
    e5b6:	d301      	bcc.n	e5bc <__divsi3+0x70>
    e5b8:	030b      	lsls	r3, r1, #12
    e5ba:	1ac0      	subs	r0, r0, r3
    e5bc:	4152      	adcs	r2, r2
    e5be:	0ac3      	lsrs	r3, r0, #11
    e5c0:	428b      	cmp	r3, r1
    e5c2:	d301      	bcc.n	e5c8 <__divsi3+0x7c>
    e5c4:	02cb      	lsls	r3, r1, #11
    e5c6:	1ac0      	subs	r0, r0, r3
    e5c8:	4152      	adcs	r2, r2
    e5ca:	0a83      	lsrs	r3, r0, #10
    e5cc:	428b      	cmp	r3, r1
    e5ce:	d301      	bcc.n	e5d4 <__divsi3+0x88>
    e5d0:	028b      	lsls	r3, r1, #10
    e5d2:	1ac0      	subs	r0, r0, r3
    e5d4:	4152      	adcs	r2, r2
    e5d6:	0a43      	lsrs	r3, r0, #9
    e5d8:	428b      	cmp	r3, r1
    e5da:	d301      	bcc.n	e5e0 <__divsi3+0x94>
    e5dc:	024b      	lsls	r3, r1, #9
    e5de:	1ac0      	subs	r0, r0, r3
    e5e0:	4152      	adcs	r2, r2
    e5e2:	0a03      	lsrs	r3, r0, #8
    e5e4:	428b      	cmp	r3, r1
    e5e6:	d301      	bcc.n	e5ec <__divsi3+0xa0>
    e5e8:	020b      	lsls	r3, r1, #8
    e5ea:	1ac0      	subs	r0, r0, r3
    e5ec:	4152      	adcs	r2, r2
    e5ee:	d2cd      	bcs.n	e58c <__divsi3+0x40>
    e5f0:	09c3      	lsrs	r3, r0, #7
    e5f2:	428b      	cmp	r3, r1
    e5f4:	d301      	bcc.n	e5fa <__divsi3+0xae>
    e5f6:	01cb      	lsls	r3, r1, #7
    e5f8:	1ac0      	subs	r0, r0, r3
    e5fa:	4152      	adcs	r2, r2
    e5fc:	0983      	lsrs	r3, r0, #6
    e5fe:	428b      	cmp	r3, r1
    e600:	d301      	bcc.n	e606 <__divsi3+0xba>
    e602:	018b      	lsls	r3, r1, #6
    e604:	1ac0      	subs	r0, r0, r3
    e606:	4152      	adcs	r2, r2
    e608:	0943      	lsrs	r3, r0, #5
    e60a:	428b      	cmp	r3, r1
    e60c:	d301      	bcc.n	e612 <__divsi3+0xc6>
    e60e:	014b      	lsls	r3, r1, #5
    e610:	1ac0      	subs	r0, r0, r3
    e612:	4152      	adcs	r2, r2
    e614:	0903      	lsrs	r3, r0, #4
    e616:	428b      	cmp	r3, r1
    e618:	d301      	bcc.n	e61e <__divsi3+0xd2>
    e61a:	010b      	lsls	r3, r1, #4
    e61c:	1ac0      	subs	r0, r0, r3
    e61e:	4152      	adcs	r2, r2
    e620:	08c3      	lsrs	r3, r0, #3
    e622:	428b      	cmp	r3, r1
    e624:	d301      	bcc.n	e62a <__divsi3+0xde>
    e626:	00cb      	lsls	r3, r1, #3
    e628:	1ac0      	subs	r0, r0, r3
    e62a:	4152      	adcs	r2, r2
    e62c:	0883      	lsrs	r3, r0, #2
    e62e:	428b      	cmp	r3, r1
    e630:	d301      	bcc.n	e636 <__divsi3+0xea>
    e632:	008b      	lsls	r3, r1, #2
    e634:	1ac0      	subs	r0, r0, r3
    e636:	4152      	adcs	r2, r2
    e638:	0843      	lsrs	r3, r0, #1
    e63a:	428b      	cmp	r3, r1
    e63c:	d301      	bcc.n	e642 <__divsi3+0xf6>
    e63e:	004b      	lsls	r3, r1, #1
    e640:	1ac0      	subs	r0, r0, r3
    e642:	4152      	adcs	r2, r2
    e644:	1a41      	subs	r1, r0, r1
    e646:	d200      	bcs.n	e64a <__divsi3+0xfe>
    e648:	4601      	mov	r1, r0
    e64a:	4152      	adcs	r2, r2
    e64c:	4610      	mov	r0, r2
    e64e:	4770      	bx	lr
    e650:	e05d      	b.n	e70e <__divsi3+0x1c2>
    e652:	0fca      	lsrs	r2, r1, #31
    e654:	d000      	beq.n	e658 <__divsi3+0x10c>
    e656:	4249      	negs	r1, r1
    e658:	1003      	asrs	r3, r0, #32
    e65a:	d300      	bcc.n	e65e <__divsi3+0x112>
    e65c:	4240      	negs	r0, r0
    e65e:	4053      	eors	r3, r2
    e660:	2200      	movs	r2, #0
    e662:	469c      	mov	ip, r3
    e664:	0903      	lsrs	r3, r0, #4
    e666:	428b      	cmp	r3, r1
    e668:	d32d      	bcc.n	e6c6 <__divsi3+0x17a>
    e66a:	0a03      	lsrs	r3, r0, #8
    e66c:	428b      	cmp	r3, r1
    e66e:	d312      	bcc.n	e696 <__divsi3+0x14a>
    e670:	22fc      	movs	r2, #252	; 0xfc
    e672:	0189      	lsls	r1, r1, #6
    e674:	ba12      	rev	r2, r2
    e676:	0a03      	lsrs	r3, r0, #8
    e678:	428b      	cmp	r3, r1
    e67a:	d30c      	bcc.n	e696 <__divsi3+0x14a>
    e67c:	0189      	lsls	r1, r1, #6
    e67e:	1192      	asrs	r2, r2, #6
    e680:	428b      	cmp	r3, r1
    e682:	d308      	bcc.n	e696 <__divsi3+0x14a>
    e684:	0189      	lsls	r1, r1, #6
    e686:	1192      	asrs	r2, r2, #6
    e688:	428b      	cmp	r3, r1
    e68a:	d304      	bcc.n	e696 <__divsi3+0x14a>
    e68c:	0189      	lsls	r1, r1, #6
    e68e:	d03a      	beq.n	e706 <__divsi3+0x1ba>
    e690:	1192      	asrs	r2, r2, #6
    e692:	e000      	b.n	e696 <__divsi3+0x14a>
    e694:	0989      	lsrs	r1, r1, #6
    e696:	09c3      	lsrs	r3, r0, #7
    e698:	428b      	cmp	r3, r1
    e69a:	d301      	bcc.n	e6a0 <__divsi3+0x154>
    e69c:	01cb      	lsls	r3, r1, #7
    e69e:	1ac0      	subs	r0, r0, r3
    e6a0:	4152      	adcs	r2, r2
    e6a2:	0983      	lsrs	r3, r0, #6
    e6a4:	428b      	cmp	r3, r1
    e6a6:	d301      	bcc.n	e6ac <__divsi3+0x160>
    e6a8:	018b      	lsls	r3, r1, #6
    e6aa:	1ac0      	subs	r0, r0, r3
    e6ac:	4152      	adcs	r2, r2
    e6ae:	0943      	lsrs	r3, r0, #5
    e6b0:	428b      	cmp	r3, r1
    e6b2:	d301      	bcc.n	e6b8 <__divsi3+0x16c>
    e6b4:	014b      	lsls	r3, r1, #5
    e6b6:	1ac0      	subs	r0, r0, r3
    e6b8:	4152      	adcs	r2, r2
    e6ba:	0903      	lsrs	r3, r0, #4
    e6bc:	428b      	cmp	r3, r1
    e6be:	d301      	bcc.n	e6c4 <__divsi3+0x178>
    e6c0:	010b      	lsls	r3, r1, #4
    e6c2:	1ac0      	subs	r0, r0, r3
    e6c4:	4152      	adcs	r2, r2
    e6c6:	08c3      	lsrs	r3, r0, #3
    e6c8:	428b      	cmp	r3, r1
    e6ca:	d301      	bcc.n	e6d0 <__divsi3+0x184>
    e6cc:	00cb      	lsls	r3, r1, #3
    e6ce:	1ac0      	subs	r0, r0, r3
    e6d0:	4152      	adcs	r2, r2
    e6d2:	0883      	lsrs	r3, r0, #2
    e6d4:	428b      	cmp	r3, r1
    e6d6:	d301      	bcc.n	e6dc <__divsi3+0x190>
    e6d8:	008b      	lsls	r3, r1, #2
    e6da:	1ac0      	subs	r0, r0, r3
    e6dc:	4152      	adcs	r2, r2
    e6de:	d2d9      	bcs.n	e694 <__divsi3+0x148>
    e6e0:	0843      	lsrs	r3, r0, #1
    e6e2:	428b      	cmp	r3, r1
    e6e4:	d301      	bcc.n	e6ea <__divsi3+0x19e>
    e6e6:	004b      	lsls	r3, r1, #1
    e6e8:	1ac0      	subs	r0, r0, r3
    e6ea:	4152      	adcs	r2, r2
    e6ec:	1a41      	subs	r1, r0, r1
    e6ee:	d200      	bcs.n	e6f2 <__divsi3+0x1a6>
    e6f0:	4601      	mov	r1, r0
    e6f2:	4663      	mov	r3, ip
    e6f4:	4152      	adcs	r2, r2
    e6f6:	105b      	asrs	r3, r3, #1
    e6f8:	4610      	mov	r0, r2
    e6fa:	d301      	bcc.n	e700 <__divsi3+0x1b4>
    e6fc:	4240      	negs	r0, r0
    e6fe:	2b00      	cmp	r3, #0
    e700:	d500      	bpl.n	e704 <__divsi3+0x1b8>
    e702:	4249      	negs	r1, r1
    e704:	4770      	bx	lr
    e706:	4663      	mov	r3, ip
    e708:	105b      	asrs	r3, r3, #1
    e70a:	d300      	bcc.n	e70e <__divsi3+0x1c2>
    e70c:	4240      	negs	r0, r0
    e70e:	b501      	push	{r0, lr}
    e710:	2000      	movs	r0, #0
    e712:	f000 f805 	bl	e720 <__aeabi_idiv0>
    e716:	bd02      	pop	{r1, pc}

0000e718 <__aeabi_idivmod>:
    e718:	2900      	cmp	r1, #0
    e71a:	d0f8      	beq.n	e70e <__divsi3+0x1c2>
    e71c:	e716      	b.n	e54c <__divsi3>
    e71e:	4770      	bx	lr

0000e720 <__aeabi_idiv0>:
    e720:	4770      	bx	lr
    e722:	46c0      	nop			; (mov r8, r8)

0000e724 <__aeabi_cfrcmple>:
    e724:	4684      	mov	ip, r0
    e726:	1c08      	adds	r0, r1, #0
    e728:	4661      	mov	r1, ip
    e72a:	e7ff      	b.n	e72c <__aeabi_cfcmpeq>

0000e72c <__aeabi_cfcmpeq>:
    e72c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e72e:	f000 fbb5 	bl	ee9c <__lesf2>
    e732:	2800      	cmp	r0, #0
    e734:	d401      	bmi.n	e73a <__aeabi_cfcmpeq+0xe>
    e736:	2100      	movs	r1, #0
    e738:	42c8      	cmn	r0, r1
    e73a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000e73c <__aeabi_fcmpeq>:
    e73c:	b510      	push	{r4, lr}
    e73e:	f000 fb47 	bl	edd0 <__eqsf2>
    e742:	4240      	negs	r0, r0
    e744:	3001      	adds	r0, #1
    e746:	bd10      	pop	{r4, pc}

0000e748 <__aeabi_fcmplt>:
    e748:	b510      	push	{r4, lr}
    e74a:	f000 fba7 	bl	ee9c <__lesf2>
    e74e:	2800      	cmp	r0, #0
    e750:	db01      	blt.n	e756 <__aeabi_fcmplt+0xe>
    e752:	2000      	movs	r0, #0
    e754:	bd10      	pop	{r4, pc}
    e756:	2001      	movs	r0, #1
    e758:	bd10      	pop	{r4, pc}
    e75a:	46c0      	nop			; (mov r8, r8)

0000e75c <__aeabi_fcmple>:
    e75c:	b510      	push	{r4, lr}
    e75e:	f000 fb9d 	bl	ee9c <__lesf2>
    e762:	2800      	cmp	r0, #0
    e764:	dd01      	ble.n	e76a <__aeabi_fcmple+0xe>
    e766:	2000      	movs	r0, #0
    e768:	bd10      	pop	{r4, pc}
    e76a:	2001      	movs	r0, #1
    e76c:	bd10      	pop	{r4, pc}
    e76e:	46c0      	nop			; (mov r8, r8)

0000e770 <__aeabi_fcmpgt>:
    e770:	b510      	push	{r4, lr}
    e772:	f000 fb53 	bl	ee1c <__gesf2>
    e776:	2800      	cmp	r0, #0
    e778:	dc01      	bgt.n	e77e <__aeabi_fcmpgt+0xe>
    e77a:	2000      	movs	r0, #0
    e77c:	bd10      	pop	{r4, pc}
    e77e:	2001      	movs	r0, #1
    e780:	bd10      	pop	{r4, pc}
    e782:	46c0      	nop			; (mov r8, r8)

0000e784 <__aeabi_fcmpge>:
    e784:	b510      	push	{r4, lr}
    e786:	f000 fb49 	bl	ee1c <__gesf2>
    e78a:	2800      	cmp	r0, #0
    e78c:	da01      	bge.n	e792 <__aeabi_fcmpge+0xe>
    e78e:	2000      	movs	r0, #0
    e790:	bd10      	pop	{r4, pc}
    e792:	2001      	movs	r0, #1
    e794:	bd10      	pop	{r4, pc}
    e796:	46c0      	nop			; (mov r8, r8)

0000e798 <__aeabi_lmul>:
    e798:	b5f0      	push	{r4, r5, r6, r7, lr}
    e79a:	46ce      	mov	lr, r9
    e79c:	4647      	mov	r7, r8
    e79e:	0415      	lsls	r5, r2, #16
    e7a0:	0c2d      	lsrs	r5, r5, #16
    e7a2:	002e      	movs	r6, r5
    e7a4:	b580      	push	{r7, lr}
    e7a6:	0407      	lsls	r7, r0, #16
    e7a8:	0c14      	lsrs	r4, r2, #16
    e7aa:	0c3f      	lsrs	r7, r7, #16
    e7ac:	4699      	mov	r9, r3
    e7ae:	0c03      	lsrs	r3, r0, #16
    e7b0:	437e      	muls	r6, r7
    e7b2:	435d      	muls	r5, r3
    e7b4:	4367      	muls	r7, r4
    e7b6:	4363      	muls	r3, r4
    e7b8:	197f      	adds	r7, r7, r5
    e7ba:	0c34      	lsrs	r4, r6, #16
    e7bc:	19e4      	adds	r4, r4, r7
    e7be:	469c      	mov	ip, r3
    e7c0:	42a5      	cmp	r5, r4
    e7c2:	d903      	bls.n	e7cc <__aeabi_lmul+0x34>
    e7c4:	2380      	movs	r3, #128	; 0x80
    e7c6:	025b      	lsls	r3, r3, #9
    e7c8:	4698      	mov	r8, r3
    e7ca:	44c4      	add	ip, r8
    e7cc:	464b      	mov	r3, r9
    e7ce:	4351      	muls	r1, r2
    e7d0:	4343      	muls	r3, r0
    e7d2:	0436      	lsls	r6, r6, #16
    e7d4:	0c36      	lsrs	r6, r6, #16
    e7d6:	0c25      	lsrs	r5, r4, #16
    e7d8:	0424      	lsls	r4, r4, #16
    e7da:	4465      	add	r5, ip
    e7dc:	19a4      	adds	r4, r4, r6
    e7de:	1859      	adds	r1, r3, r1
    e7e0:	1949      	adds	r1, r1, r5
    e7e2:	0020      	movs	r0, r4
    e7e4:	bc0c      	pop	{r2, r3}
    e7e6:	4690      	mov	r8, r2
    e7e8:	4699      	mov	r9, r3
    e7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e7ec <__aeabi_f2uiz>:
    e7ec:	219e      	movs	r1, #158	; 0x9e
    e7ee:	b510      	push	{r4, lr}
    e7f0:	05c9      	lsls	r1, r1, #23
    e7f2:	1c04      	adds	r4, r0, #0
    e7f4:	f7ff ffc6 	bl	e784 <__aeabi_fcmpge>
    e7f8:	2800      	cmp	r0, #0
    e7fa:	d103      	bne.n	e804 <__aeabi_f2uiz+0x18>
    e7fc:	1c20      	adds	r0, r4, #0
    e7fe:	f000 fd2b 	bl	f258 <__aeabi_f2iz>
    e802:	bd10      	pop	{r4, pc}
    e804:	219e      	movs	r1, #158	; 0x9e
    e806:	1c20      	adds	r0, r4, #0
    e808:	05c9      	lsls	r1, r1, #23
    e80a:	f000 fb89 	bl	ef20 <__aeabi_fsub>
    e80e:	f000 fd23 	bl	f258 <__aeabi_f2iz>
    e812:	2380      	movs	r3, #128	; 0x80
    e814:	061b      	lsls	r3, r3, #24
    e816:	469c      	mov	ip, r3
    e818:	4460      	add	r0, ip
    e81a:	e7f2      	b.n	e802 <__aeabi_f2uiz+0x16>

0000e81c <__aeabi_fadd>:
    e81c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e81e:	46c6      	mov	lr, r8
    e820:	024e      	lsls	r6, r1, #9
    e822:	0247      	lsls	r7, r0, #9
    e824:	0a76      	lsrs	r6, r6, #9
    e826:	0a7b      	lsrs	r3, r7, #9
    e828:	0044      	lsls	r4, r0, #1
    e82a:	0fc5      	lsrs	r5, r0, #31
    e82c:	00f7      	lsls	r7, r6, #3
    e82e:	0048      	lsls	r0, r1, #1
    e830:	4698      	mov	r8, r3
    e832:	b500      	push	{lr}
    e834:	0e24      	lsrs	r4, r4, #24
    e836:	002a      	movs	r2, r5
    e838:	00db      	lsls	r3, r3, #3
    e83a:	0e00      	lsrs	r0, r0, #24
    e83c:	0fc9      	lsrs	r1, r1, #31
    e83e:	46bc      	mov	ip, r7
    e840:	428d      	cmp	r5, r1
    e842:	d067      	beq.n	e914 <__aeabi_fadd+0xf8>
    e844:	1a22      	subs	r2, r4, r0
    e846:	2a00      	cmp	r2, #0
    e848:	dc00      	bgt.n	e84c <__aeabi_fadd+0x30>
    e84a:	e0a5      	b.n	e998 <__aeabi_fadd+0x17c>
    e84c:	2800      	cmp	r0, #0
    e84e:	d13a      	bne.n	e8c6 <__aeabi_fadd+0xaa>
    e850:	2f00      	cmp	r7, #0
    e852:	d100      	bne.n	e856 <__aeabi_fadd+0x3a>
    e854:	e093      	b.n	e97e <__aeabi_fadd+0x162>
    e856:	1e51      	subs	r1, r2, #1
    e858:	2900      	cmp	r1, #0
    e85a:	d000      	beq.n	e85e <__aeabi_fadd+0x42>
    e85c:	e0bc      	b.n	e9d8 <__aeabi_fadd+0x1bc>
    e85e:	2401      	movs	r4, #1
    e860:	1bdb      	subs	r3, r3, r7
    e862:	015a      	lsls	r2, r3, #5
    e864:	d546      	bpl.n	e8f4 <__aeabi_fadd+0xd8>
    e866:	019b      	lsls	r3, r3, #6
    e868:	099e      	lsrs	r6, r3, #6
    e86a:	0030      	movs	r0, r6
    e86c:	f002 f9a0 	bl	10bb0 <__clzsi2>
    e870:	3805      	subs	r0, #5
    e872:	4086      	lsls	r6, r0
    e874:	4284      	cmp	r4, r0
    e876:	dd00      	ble.n	e87a <__aeabi_fadd+0x5e>
    e878:	e09d      	b.n	e9b6 <__aeabi_fadd+0x19a>
    e87a:	1b04      	subs	r4, r0, r4
    e87c:	0032      	movs	r2, r6
    e87e:	2020      	movs	r0, #32
    e880:	3401      	adds	r4, #1
    e882:	40e2      	lsrs	r2, r4
    e884:	1b04      	subs	r4, r0, r4
    e886:	40a6      	lsls	r6, r4
    e888:	0033      	movs	r3, r6
    e88a:	1e5e      	subs	r6, r3, #1
    e88c:	41b3      	sbcs	r3, r6
    e88e:	2400      	movs	r4, #0
    e890:	4313      	orrs	r3, r2
    e892:	075a      	lsls	r2, r3, #29
    e894:	d004      	beq.n	e8a0 <__aeabi_fadd+0x84>
    e896:	220f      	movs	r2, #15
    e898:	401a      	ands	r2, r3
    e89a:	2a04      	cmp	r2, #4
    e89c:	d000      	beq.n	e8a0 <__aeabi_fadd+0x84>
    e89e:	3304      	adds	r3, #4
    e8a0:	015a      	lsls	r2, r3, #5
    e8a2:	d529      	bpl.n	e8f8 <__aeabi_fadd+0xdc>
    e8a4:	3401      	adds	r4, #1
    e8a6:	2cff      	cmp	r4, #255	; 0xff
    e8a8:	d100      	bne.n	e8ac <__aeabi_fadd+0x90>
    e8aa:	e081      	b.n	e9b0 <__aeabi_fadd+0x194>
    e8ac:	002a      	movs	r2, r5
    e8ae:	019b      	lsls	r3, r3, #6
    e8b0:	0a5b      	lsrs	r3, r3, #9
    e8b2:	b2e4      	uxtb	r4, r4
    e8b4:	025b      	lsls	r3, r3, #9
    e8b6:	05e4      	lsls	r4, r4, #23
    e8b8:	0a58      	lsrs	r0, r3, #9
    e8ba:	07d2      	lsls	r2, r2, #31
    e8bc:	4320      	orrs	r0, r4
    e8be:	4310      	orrs	r0, r2
    e8c0:	bc04      	pop	{r2}
    e8c2:	4690      	mov	r8, r2
    e8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8c6:	2cff      	cmp	r4, #255	; 0xff
    e8c8:	d0e3      	beq.n	e892 <__aeabi_fadd+0x76>
    e8ca:	2180      	movs	r1, #128	; 0x80
    e8cc:	0038      	movs	r0, r7
    e8ce:	04c9      	lsls	r1, r1, #19
    e8d0:	4308      	orrs	r0, r1
    e8d2:	4684      	mov	ip, r0
    e8d4:	2a1b      	cmp	r2, #27
    e8d6:	dd00      	ble.n	e8da <__aeabi_fadd+0xbe>
    e8d8:	e082      	b.n	e9e0 <__aeabi_fadd+0x1c4>
    e8da:	2020      	movs	r0, #32
    e8dc:	4661      	mov	r1, ip
    e8de:	40d1      	lsrs	r1, r2
    e8e0:	1a82      	subs	r2, r0, r2
    e8e2:	4660      	mov	r0, ip
    e8e4:	4090      	lsls	r0, r2
    e8e6:	0002      	movs	r2, r0
    e8e8:	1e50      	subs	r0, r2, #1
    e8ea:	4182      	sbcs	r2, r0
    e8ec:	430a      	orrs	r2, r1
    e8ee:	1a9b      	subs	r3, r3, r2
    e8f0:	015a      	lsls	r2, r3, #5
    e8f2:	d4b8      	bmi.n	e866 <__aeabi_fadd+0x4a>
    e8f4:	075a      	lsls	r2, r3, #29
    e8f6:	d1ce      	bne.n	e896 <__aeabi_fadd+0x7a>
    e8f8:	08de      	lsrs	r6, r3, #3
    e8fa:	002a      	movs	r2, r5
    e8fc:	2cff      	cmp	r4, #255	; 0xff
    e8fe:	d13a      	bne.n	e976 <__aeabi_fadd+0x15a>
    e900:	2e00      	cmp	r6, #0
    e902:	d100      	bne.n	e906 <__aeabi_fadd+0xea>
    e904:	e0ae      	b.n	ea64 <__aeabi_fadd+0x248>
    e906:	2380      	movs	r3, #128	; 0x80
    e908:	03db      	lsls	r3, r3, #15
    e90a:	4333      	orrs	r3, r6
    e90c:	025b      	lsls	r3, r3, #9
    e90e:	0a5b      	lsrs	r3, r3, #9
    e910:	24ff      	movs	r4, #255	; 0xff
    e912:	e7cf      	b.n	e8b4 <__aeabi_fadd+0x98>
    e914:	1a21      	subs	r1, r4, r0
    e916:	2900      	cmp	r1, #0
    e918:	dd52      	ble.n	e9c0 <__aeabi_fadd+0x1a4>
    e91a:	2800      	cmp	r0, #0
    e91c:	d031      	beq.n	e982 <__aeabi_fadd+0x166>
    e91e:	2cff      	cmp	r4, #255	; 0xff
    e920:	d0b7      	beq.n	e892 <__aeabi_fadd+0x76>
    e922:	2080      	movs	r0, #128	; 0x80
    e924:	003e      	movs	r6, r7
    e926:	04c0      	lsls	r0, r0, #19
    e928:	4306      	orrs	r6, r0
    e92a:	46b4      	mov	ip, r6
    e92c:	291b      	cmp	r1, #27
    e92e:	dd00      	ble.n	e932 <__aeabi_fadd+0x116>
    e930:	e0aa      	b.n	ea88 <__aeabi_fadd+0x26c>
    e932:	2620      	movs	r6, #32
    e934:	4660      	mov	r0, ip
    e936:	40c8      	lsrs	r0, r1
    e938:	1a71      	subs	r1, r6, r1
    e93a:	4666      	mov	r6, ip
    e93c:	408e      	lsls	r6, r1
    e93e:	0031      	movs	r1, r6
    e940:	1e4e      	subs	r6, r1, #1
    e942:	41b1      	sbcs	r1, r6
    e944:	4301      	orrs	r1, r0
    e946:	185b      	adds	r3, r3, r1
    e948:	0159      	lsls	r1, r3, #5
    e94a:	d5d3      	bpl.n	e8f4 <__aeabi_fadd+0xd8>
    e94c:	3401      	adds	r4, #1
    e94e:	2cff      	cmp	r4, #255	; 0xff
    e950:	d100      	bne.n	e954 <__aeabi_fadd+0x138>
    e952:	e087      	b.n	ea64 <__aeabi_fadd+0x248>
    e954:	2201      	movs	r2, #1
    e956:	4978      	ldr	r1, [pc, #480]	; (eb38 <__aeabi_fadd+0x31c>)
    e958:	401a      	ands	r2, r3
    e95a:	085b      	lsrs	r3, r3, #1
    e95c:	400b      	ands	r3, r1
    e95e:	4313      	orrs	r3, r2
    e960:	e797      	b.n	e892 <__aeabi_fadd+0x76>
    e962:	2c00      	cmp	r4, #0
    e964:	d000      	beq.n	e968 <__aeabi_fadd+0x14c>
    e966:	e0a7      	b.n	eab8 <__aeabi_fadd+0x29c>
    e968:	2b00      	cmp	r3, #0
    e96a:	d000      	beq.n	e96e <__aeabi_fadd+0x152>
    e96c:	e0b6      	b.n	eadc <__aeabi_fadd+0x2c0>
    e96e:	1e3b      	subs	r3, r7, #0
    e970:	d162      	bne.n	ea38 <__aeabi_fadd+0x21c>
    e972:	2600      	movs	r6, #0
    e974:	2200      	movs	r2, #0
    e976:	0273      	lsls	r3, r6, #9
    e978:	0a5b      	lsrs	r3, r3, #9
    e97a:	b2e4      	uxtb	r4, r4
    e97c:	e79a      	b.n	e8b4 <__aeabi_fadd+0x98>
    e97e:	0014      	movs	r4, r2
    e980:	e787      	b.n	e892 <__aeabi_fadd+0x76>
    e982:	2f00      	cmp	r7, #0
    e984:	d04d      	beq.n	ea22 <__aeabi_fadd+0x206>
    e986:	1e48      	subs	r0, r1, #1
    e988:	2800      	cmp	r0, #0
    e98a:	d157      	bne.n	ea3c <__aeabi_fadd+0x220>
    e98c:	4463      	add	r3, ip
    e98e:	2401      	movs	r4, #1
    e990:	015a      	lsls	r2, r3, #5
    e992:	d5af      	bpl.n	e8f4 <__aeabi_fadd+0xd8>
    e994:	2402      	movs	r4, #2
    e996:	e7dd      	b.n	e954 <__aeabi_fadd+0x138>
    e998:	2a00      	cmp	r2, #0
    e99a:	d124      	bne.n	e9e6 <__aeabi_fadd+0x1ca>
    e99c:	1c62      	adds	r2, r4, #1
    e99e:	b2d2      	uxtb	r2, r2
    e9a0:	2a01      	cmp	r2, #1
    e9a2:	ddde      	ble.n	e962 <__aeabi_fadd+0x146>
    e9a4:	1bde      	subs	r6, r3, r7
    e9a6:	0172      	lsls	r2, r6, #5
    e9a8:	d535      	bpl.n	ea16 <__aeabi_fadd+0x1fa>
    e9aa:	1afe      	subs	r6, r7, r3
    e9ac:	000d      	movs	r5, r1
    e9ae:	e75c      	b.n	e86a <__aeabi_fadd+0x4e>
    e9b0:	002a      	movs	r2, r5
    e9b2:	2300      	movs	r3, #0
    e9b4:	e77e      	b.n	e8b4 <__aeabi_fadd+0x98>
    e9b6:	0033      	movs	r3, r6
    e9b8:	4a60      	ldr	r2, [pc, #384]	; (eb3c <__aeabi_fadd+0x320>)
    e9ba:	1a24      	subs	r4, r4, r0
    e9bc:	4013      	ands	r3, r2
    e9be:	e768      	b.n	e892 <__aeabi_fadd+0x76>
    e9c0:	2900      	cmp	r1, #0
    e9c2:	d163      	bne.n	ea8c <__aeabi_fadd+0x270>
    e9c4:	1c61      	adds	r1, r4, #1
    e9c6:	b2c8      	uxtb	r0, r1
    e9c8:	2801      	cmp	r0, #1
    e9ca:	dd4e      	ble.n	ea6a <__aeabi_fadd+0x24e>
    e9cc:	29ff      	cmp	r1, #255	; 0xff
    e9ce:	d049      	beq.n	ea64 <__aeabi_fadd+0x248>
    e9d0:	4463      	add	r3, ip
    e9d2:	085b      	lsrs	r3, r3, #1
    e9d4:	000c      	movs	r4, r1
    e9d6:	e75c      	b.n	e892 <__aeabi_fadd+0x76>
    e9d8:	2aff      	cmp	r2, #255	; 0xff
    e9da:	d041      	beq.n	ea60 <__aeabi_fadd+0x244>
    e9dc:	000a      	movs	r2, r1
    e9de:	e779      	b.n	e8d4 <__aeabi_fadd+0xb8>
    e9e0:	2201      	movs	r2, #1
    e9e2:	1a9b      	subs	r3, r3, r2
    e9e4:	e784      	b.n	e8f0 <__aeabi_fadd+0xd4>
    e9e6:	2c00      	cmp	r4, #0
    e9e8:	d01d      	beq.n	ea26 <__aeabi_fadd+0x20a>
    e9ea:	28ff      	cmp	r0, #255	; 0xff
    e9ec:	d022      	beq.n	ea34 <__aeabi_fadd+0x218>
    e9ee:	2480      	movs	r4, #128	; 0x80
    e9f0:	04e4      	lsls	r4, r4, #19
    e9f2:	4252      	negs	r2, r2
    e9f4:	4323      	orrs	r3, r4
    e9f6:	2a1b      	cmp	r2, #27
    e9f8:	dd00      	ble.n	e9fc <__aeabi_fadd+0x1e0>
    e9fa:	e08a      	b.n	eb12 <__aeabi_fadd+0x2f6>
    e9fc:	001c      	movs	r4, r3
    e9fe:	2520      	movs	r5, #32
    ea00:	40d4      	lsrs	r4, r2
    ea02:	1aaa      	subs	r2, r5, r2
    ea04:	4093      	lsls	r3, r2
    ea06:	1e5a      	subs	r2, r3, #1
    ea08:	4193      	sbcs	r3, r2
    ea0a:	4323      	orrs	r3, r4
    ea0c:	4662      	mov	r2, ip
    ea0e:	0004      	movs	r4, r0
    ea10:	1ad3      	subs	r3, r2, r3
    ea12:	000d      	movs	r5, r1
    ea14:	e725      	b.n	e862 <__aeabi_fadd+0x46>
    ea16:	2e00      	cmp	r6, #0
    ea18:	d000      	beq.n	ea1c <__aeabi_fadd+0x200>
    ea1a:	e726      	b.n	e86a <__aeabi_fadd+0x4e>
    ea1c:	2200      	movs	r2, #0
    ea1e:	2400      	movs	r4, #0
    ea20:	e7a9      	b.n	e976 <__aeabi_fadd+0x15a>
    ea22:	000c      	movs	r4, r1
    ea24:	e735      	b.n	e892 <__aeabi_fadd+0x76>
    ea26:	2b00      	cmp	r3, #0
    ea28:	d04d      	beq.n	eac6 <__aeabi_fadd+0x2aa>
    ea2a:	43d2      	mvns	r2, r2
    ea2c:	2a00      	cmp	r2, #0
    ea2e:	d0ed      	beq.n	ea0c <__aeabi_fadd+0x1f0>
    ea30:	28ff      	cmp	r0, #255	; 0xff
    ea32:	d1e0      	bne.n	e9f6 <__aeabi_fadd+0x1da>
    ea34:	4663      	mov	r3, ip
    ea36:	24ff      	movs	r4, #255	; 0xff
    ea38:	000d      	movs	r5, r1
    ea3a:	e72a      	b.n	e892 <__aeabi_fadd+0x76>
    ea3c:	29ff      	cmp	r1, #255	; 0xff
    ea3e:	d00f      	beq.n	ea60 <__aeabi_fadd+0x244>
    ea40:	0001      	movs	r1, r0
    ea42:	e773      	b.n	e92c <__aeabi_fadd+0x110>
    ea44:	2b00      	cmp	r3, #0
    ea46:	d061      	beq.n	eb0c <__aeabi_fadd+0x2f0>
    ea48:	24ff      	movs	r4, #255	; 0xff
    ea4a:	2f00      	cmp	r7, #0
    ea4c:	d100      	bne.n	ea50 <__aeabi_fadd+0x234>
    ea4e:	e720      	b.n	e892 <__aeabi_fadd+0x76>
    ea50:	2280      	movs	r2, #128	; 0x80
    ea52:	4641      	mov	r1, r8
    ea54:	03d2      	lsls	r2, r2, #15
    ea56:	4211      	tst	r1, r2
    ea58:	d002      	beq.n	ea60 <__aeabi_fadd+0x244>
    ea5a:	4216      	tst	r6, r2
    ea5c:	d100      	bne.n	ea60 <__aeabi_fadd+0x244>
    ea5e:	003b      	movs	r3, r7
    ea60:	24ff      	movs	r4, #255	; 0xff
    ea62:	e716      	b.n	e892 <__aeabi_fadd+0x76>
    ea64:	24ff      	movs	r4, #255	; 0xff
    ea66:	2300      	movs	r3, #0
    ea68:	e724      	b.n	e8b4 <__aeabi_fadd+0x98>
    ea6a:	2c00      	cmp	r4, #0
    ea6c:	d1ea      	bne.n	ea44 <__aeabi_fadd+0x228>
    ea6e:	2b00      	cmp	r3, #0
    ea70:	d058      	beq.n	eb24 <__aeabi_fadd+0x308>
    ea72:	2f00      	cmp	r7, #0
    ea74:	d100      	bne.n	ea78 <__aeabi_fadd+0x25c>
    ea76:	e70c      	b.n	e892 <__aeabi_fadd+0x76>
    ea78:	4463      	add	r3, ip
    ea7a:	015a      	lsls	r2, r3, #5
    ea7c:	d400      	bmi.n	ea80 <__aeabi_fadd+0x264>
    ea7e:	e739      	b.n	e8f4 <__aeabi_fadd+0xd8>
    ea80:	4a2e      	ldr	r2, [pc, #184]	; (eb3c <__aeabi_fadd+0x320>)
    ea82:	000c      	movs	r4, r1
    ea84:	4013      	ands	r3, r2
    ea86:	e704      	b.n	e892 <__aeabi_fadd+0x76>
    ea88:	2101      	movs	r1, #1
    ea8a:	e75c      	b.n	e946 <__aeabi_fadd+0x12a>
    ea8c:	2c00      	cmp	r4, #0
    ea8e:	d11e      	bne.n	eace <__aeabi_fadd+0x2b2>
    ea90:	2b00      	cmp	r3, #0
    ea92:	d040      	beq.n	eb16 <__aeabi_fadd+0x2fa>
    ea94:	43c9      	mvns	r1, r1
    ea96:	2900      	cmp	r1, #0
    ea98:	d00b      	beq.n	eab2 <__aeabi_fadd+0x296>
    ea9a:	28ff      	cmp	r0, #255	; 0xff
    ea9c:	d036      	beq.n	eb0c <__aeabi_fadd+0x2f0>
    ea9e:	291b      	cmp	r1, #27
    eaa0:	dc47      	bgt.n	eb32 <__aeabi_fadd+0x316>
    eaa2:	001c      	movs	r4, r3
    eaa4:	2620      	movs	r6, #32
    eaa6:	40cc      	lsrs	r4, r1
    eaa8:	1a71      	subs	r1, r6, r1
    eaaa:	408b      	lsls	r3, r1
    eaac:	1e59      	subs	r1, r3, #1
    eaae:	418b      	sbcs	r3, r1
    eab0:	4323      	orrs	r3, r4
    eab2:	4463      	add	r3, ip
    eab4:	0004      	movs	r4, r0
    eab6:	e747      	b.n	e948 <__aeabi_fadd+0x12c>
    eab8:	2b00      	cmp	r3, #0
    eaba:	d118      	bne.n	eaee <__aeabi_fadd+0x2d2>
    eabc:	1e3b      	subs	r3, r7, #0
    eabe:	d02d      	beq.n	eb1c <__aeabi_fadd+0x300>
    eac0:	000d      	movs	r5, r1
    eac2:	24ff      	movs	r4, #255	; 0xff
    eac4:	e6e5      	b.n	e892 <__aeabi_fadd+0x76>
    eac6:	003b      	movs	r3, r7
    eac8:	0004      	movs	r4, r0
    eaca:	000d      	movs	r5, r1
    eacc:	e6e1      	b.n	e892 <__aeabi_fadd+0x76>
    eace:	28ff      	cmp	r0, #255	; 0xff
    ead0:	d01c      	beq.n	eb0c <__aeabi_fadd+0x2f0>
    ead2:	2480      	movs	r4, #128	; 0x80
    ead4:	04e4      	lsls	r4, r4, #19
    ead6:	4249      	negs	r1, r1
    ead8:	4323      	orrs	r3, r4
    eada:	e7e0      	b.n	ea9e <__aeabi_fadd+0x282>
    eadc:	2f00      	cmp	r7, #0
    eade:	d100      	bne.n	eae2 <__aeabi_fadd+0x2c6>
    eae0:	e6d7      	b.n	e892 <__aeabi_fadd+0x76>
    eae2:	1bde      	subs	r6, r3, r7
    eae4:	0172      	lsls	r2, r6, #5
    eae6:	d51f      	bpl.n	eb28 <__aeabi_fadd+0x30c>
    eae8:	1afb      	subs	r3, r7, r3
    eaea:	000d      	movs	r5, r1
    eaec:	e6d1      	b.n	e892 <__aeabi_fadd+0x76>
    eaee:	24ff      	movs	r4, #255	; 0xff
    eaf0:	2f00      	cmp	r7, #0
    eaf2:	d100      	bne.n	eaf6 <__aeabi_fadd+0x2da>
    eaf4:	e6cd      	b.n	e892 <__aeabi_fadd+0x76>
    eaf6:	2280      	movs	r2, #128	; 0x80
    eaf8:	4640      	mov	r0, r8
    eafa:	03d2      	lsls	r2, r2, #15
    eafc:	4210      	tst	r0, r2
    eafe:	d0af      	beq.n	ea60 <__aeabi_fadd+0x244>
    eb00:	4216      	tst	r6, r2
    eb02:	d1ad      	bne.n	ea60 <__aeabi_fadd+0x244>
    eb04:	003b      	movs	r3, r7
    eb06:	000d      	movs	r5, r1
    eb08:	24ff      	movs	r4, #255	; 0xff
    eb0a:	e6c2      	b.n	e892 <__aeabi_fadd+0x76>
    eb0c:	4663      	mov	r3, ip
    eb0e:	24ff      	movs	r4, #255	; 0xff
    eb10:	e6bf      	b.n	e892 <__aeabi_fadd+0x76>
    eb12:	2301      	movs	r3, #1
    eb14:	e77a      	b.n	ea0c <__aeabi_fadd+0x1f0>
    eb16:	003b      	movs	r3, r7
    eb18:	0004      	movs	r4, r0
    eb1a:	e6ba      	b.n	e892 <__aeabi_fadd+0x76>
    eb1c:	2680      	movs	r6, #128	; 0x80
    eb1e:	2200      	movs	r2, #0
    eb20:	03f6      	lsls	r6, r6, #15
    eb22:	e6f0      	b.n	e906 <__aeabi_fadd+0xea>
    eb24:	003b      	movs	r3, r7
    eb26:	e6b4      	b.n	e892 <__aeabi_fadd+0x76>
    eb28:	1e33      	subs	r3, r6, #0
    eb2a:	d000      	beq.n	eb2e <__aeabi_fadd+0x312>
    eb2c:	e6e2      	b.n	e8f4 <__aeabi_fadd+0xd8>
    eb2e:	2200      	movs	r2, #0
    eb30:	e721      	b.n	e976 <__aeabi_fadd+0x15a>
    eb32:	2301      	movs	r3, #1
    eb34:	e7bd      	b.n	eab2 <__aeabi_fadd+0x296>
    eb36:	46c0      	nop			; (mov r8, r8)
    eb38:	7dffffff 	.word	0x7dffffff
    eb3c:	fbffffff 	.word	0xfbffffff

0000eb40 <__aeabi_fdiv>:
    eb40:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb42:	4657      	mov	r7, sl
    eb44:	464e      	mov	r6, r9
    eb46:	46de      	mov	lr, fp
    eb48:	4645      	mov	r5, r8
    eb4a:	b5e0      	push	{r5, r6, r7, lr}
    eb4c:	0244      	lsls	r4, r0, #9
    eb4e:	0043      	lsls	r3, r0, #1
    eb50:	0fc6      	lsrs	r6, r0, #31
    eb52:	b083      	sub	sp, #12
    eb54:	1c0f      	adds	r7, r1, #0
    eb56:	0a64      	lsrs	r4, r4, #9
    eb58:	0e1b      	lsrs	r3, r3, #24
    eb5a:	46b2      	mov	sl, r6
    eb5c:	d053      	beq.n	ec06 <__aeabi_fdiv+0xc6>
    eb5e:	2bff      	cmp	r3, #255	; 0xff
    eb60:	d027      	beq.n	ebb2 <__aeabi_fdiv+0x72>
    eb62:	2280      	movs	r2, #128	; 0x80
    eb64:	00e4      	lsls	r4, r4, #3
    eb66:	04d2      	lsls	r2, r2, #19
    eb68:	4314      	orrs	r4, r2
    eb6a:	227f      	movs	r2, #127	; 0x7f
    eb6c:	4252      	negs	r2, r2
    eb6e:	4690      	mov	r8, r2
    eb70:	4498      	add	r8, r3
    eb72:	2300      	movs	r3, #0
    eb74:	4699      	mov	r9, r3
    eb76:	469b      	mov	fp, r3
    eb78:	027d      	lsls	r5, r7, #9
    eb7a:	0078      	lsls	r0, r7, #1
    eb7c:	0ffb      	lsrs	r3, r7, #31
    eb7e:	0a6d      	lsrs	r5, r5, #9
    eb80:	0e00      	lsrs	r0, r0, #24
    eb82:	9300      	str	r3, [sp, #0]
    eb84:	d024      	beq.n	ebd0 <__aeabi_fdiv+0x90>
    eb86:	28ff      	cmp	r0, #255	; 0xff
    eb88:	d046      	beq.n	ec18 <__aeabi_fdiv+0xd8>
    eb8a:	2380      	movs	r3, #128	; 0x80
    eb8c:	2100      	movs	r1, #0
    eb8e:	00ed      	lsls	r5, r5, #3
    eb90:	04db      	lsls	r3, r3, #19
    eb92:	431d      	orrs	r5, r3
    eb94:	387f      	subs	r0, #127	; 0x7f
    eb96:	4647      	mov	r7, r8
    eb98:	1a38      	subs	r0, r7, r0
    eb9a:	464f      	mov	r7, r9
    eb9c:	430f      	orrs	r7, r1
    eb9e:	00bf      	lsls	r7, r7, #2
    eba0:	46b9      	mov	r9, r7
    eba2:	0033      	movs	r3, r6
    eba4:	9a00      	ldr	r2, [sp, #0]
    eba6:	4f87      	ldr	r7, [pc, #540]	; (edc4 <__aeabi_fdiv+0x284>)
    eba8:	4053      	eors	r3, r2
    ebaa:	464a      	mov	r2, r9
    ebac:	58ba      	ldr	r2, [r7, r2]
    ebae:	9301      	str	r3, [sp, #4]
    ebb0:	4697      	mov	pc, r2
    ebb2:	2c00      	cmp	r4, #0
    ebb4:	d14e      	bne.n	ec54 <__aeabi_fdiv+0x114>
    ebb6:	2308      	movs	r3, #8
    ebb8:	4699      	mov	r9, r3
    ebba:	33f7      	adds	r3, #247	; 0xf7
    ebbc:	4698      	mov	r8, r3
    ebbe:	3bfd      	subs	r3, #253	; 0xfd
    ebc0:	469b      	mov	fp, r3
    ebc2:	027d      	lsls	r5, r7, #9
    ebc4:	0078      	lsls	r0, r7, #1
    ebc6:	0ffb      	lsrs	r3, r7, #31
    ebc8:	0a6d      	lsrs	r5, r5, #9
    ebca:	0e00      	lsrs	r0, r0, #24
    ebcc:	9300      	str	r3, [sp, #0]
    ebce:	d1da      	bne.n	eb86 <__aeabi_fdiv+0x46>
    ebd0:	2d00      	cmp	r5, #0
    ebd2:	d126      	bne.n	ec22 <__aeabi_fdiv+0xe2>
    ebd4:	2000      	movs	r0, #0
    ebd6:	2101      	movs	r1, #1
    ebd8:	0033      	movs	r3, r6
    ebda:	9a00      	ldr	r2, [sp, #0]
    ebdc:	4f7a      	ldr	r7, [pc, #488]	; (edc8 <__aeabi_fdiv+0x288>)
    ebde:	4053      	eors	r3, r2
    ebe0:	4642      	mov	r2, r8
    ebe2:	1a10      	subs	r0, r2, r0
    ebe4:	464a      	mov	r2, r9
    ebe6:	430a      	orrs	r2, r1
    ebe8:	0092      	lsls	r2, r2, #2
    ebea:	58ba      	ldr	r2, [r7, r2]
    ebec:	001d      	movs	r5, r3
    ebee:	4697      	mov	pc, r2
    ebf0:	9b00      	ldr	r3, [sp, #0]
    ebf2:	002c      	movs	r4, r5
    ebf4:	469a      	mov	sl, r3
    ebf6:	468b      	mov	fp, r1
    ebf8:	465b      	mov	r3, fp
    ebfa:	2b02      	cmp	r3, #2
    ebfc:	d131      	bne.n	ec62 <__aeabi_fdiv+0x122>
    ebfe:	4653      	mov	r3, sl
    ec00:	21ff      	movs	r1, #255	; 0xff
    ec02:	2400      	movs	r4, #0
    ec04:	e038      	b.n	ec78 <__aeabi_fdiv+0x138>
    ec06:	2c00      	cmp	r4, #0
    ec08:	d117      	bne.n	ec3a <__aeabi_fdiv+0xfa>
    ec0a:	2304      	movs	r3, #4
    ec0c:	4699      	mov	r9, r3
    ec0e:	2300      	movs	r3, #0
    ec10:	4698      	mov	r8, r3
    ec12:	3301      	adds	r3, #1
    ec14:	469b      	mov	fp, r3
    ec16:	e7af      	b.n	eb78 <__aeabi_fdiv+0x38>
    ec18:	20ff      	movs	r0, #255	; 0xff
    ec1a:	2d00      	cmp	r5, #0
    ec1c:	d10b      	bne.n	ec36 <__aeabi_fdiv+0xf6>
    ec1e:	2102      	movs	r1, #2
    ec20:	e7da      	b.n	ebd8 <__aeabi_fdiv+0x98>
    ec22:	0028      	movs	r0, r5
    ec24:	f001 ffc4 	bl	10bb0 <__clzsi2>
    ec28:	1f43      	subs	r3, r0, #5
    ec2a:	409d      	lsls	r5, r3
    ec2c:	2376      	movs	r3, #118	; 0x76
    ec2e:	425b      	negs	r3, r3
    ec30:	1a18      	subs	r0, r3, r0
    ec32:	2100      	movs	r1, #0
    ec34:	e7af      	b.n	eb96 <__aeabi_fdiv+0x56>
    ec36:	2103      	movs	r1, #3
    ec38:	e7ad      	b.n	eb96 <__aeabi_fdiv+0x56>
    ec3a:	0020      	movs	r0, r4
    ec3c:	f001 ffb8 	bl	10bb0 <__clzsi2>
    ec40:	1f43      	subs	r3, r0, #5
    ec42:	409c      	lsls	r4, r3
    ec44:	2376      	movs	r3, #118	; 0x76
    ec46:	425b      	negs	r3, r3
    ec48:	1a1b      	subs	r3, r3, r0
    ec4a:	4698      	mov	r8, r3
    ec4c:	2300      	movs	r3, #0
    ec4e:	4699      	mov	r9, r3
    ec50:	469b      	mov	fp, r3
    ec52:	e791      	b.n	eb78 <__aeabi_fdiv+0x38>
    ec54:	230c      	movs	r3, #12
    ec56:	4699      	mov	r9, r3
    ec58:	33f3      	adds	r3, #243	; 0xf3
    ec5a:	4698      	mov	r8, r3
    ec5c:	3bfc      	subs	r3, #252	; 0xfc
    ec5e:	469b      	mov	fp, r3
    ec60:	e78a      	b.n	eb78 <__aeabi_fdiv+0x38>
    ec62:	2b03      	cmp	r3, #3
    ec64:	d100      	bne.n	ec68 <__aeabi_fdiv+0x128>
    ec66:	e0a5      	b.n	edb4 <__aeabi_fdiv+0x274>
    ec68:	4655      	mov	r5, sl
    ec6a:	2b01      	cmp	r3, #1
    ec6c:	d000      	beq.n	ec70 <__aeabi_fdiv+0x130>
    ec6e:	e081      	b.n	ed74 <__aeabi_fdiv+0x234>
    ec70:	2301      	movs	r3, #1
    ec72:	2100      	movs	r1, #0
    ec74:	2400      	movs	r4, #0
    ec76:	402b      	ands	r3, r5
    ec78:	0264      	lsls	r4, r4, #9
    ec7a:	05c9      	lsls	r1, r1, #23
    ec7c:	0a60      	lsrs	r0, r4, #9
    ec7e:	07db      	lsls	r3, r3, #31
    ec80:	4308      	orrs	r0, r1
    ec82:	4318      	orrs	r0, r3
    ec84:	b003      	add	sp, #12
    ec86:	bc3c      	pop	{r2, r3, r4, r5}
    ec88:	4690      	mov	r8, r2
    ec8a:	4699      	mov	r9, r3
    ec8c:	46a2      	mov	sl, r4
    ec8e:	46ab      	mov	fp, r5
    ec90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec92:	2480      	movs	r4, #128	; 0x80
    ec94:	2300      	movs	r3, #0
    ec96:	03e4      	lsls	r4, r4, #15
    ec98:	21ff      	movs	r1, #255	; 0xff
    ec9a:	e7ed      	b.n	ec78 <__aeabi_fdiv+0x138>
    ec9c:	21ff      	movs	r1, #255	; 0xff
    ec9e:	2400      	movs	r4, #0
    eca0:	e7ea      	b.n	ec78 <__aeabi_fdiv+0x138>
    eca2:	2301      	movs	r3, #1
    eca4:	1a59      	subs	r1, r3, r1
    eca6:	291b      	cmp	r1, #27
    eca8:	dd66      	ble.n	ed78 <__aeabi_fdiv+0x238>
    ecaa:	9a01      	ldr	r2, [sp, #4]
    ecac:	4013      	ands	r3, r2
    ecae:	2100      	movs	r1, #0
    ecb0:	2400      	movs	r4, #0
    ecb2:	e7e1      	b.n	ec78 <__aeabi_fdiv+0x138>
    ecb4:	2380      	movs	r3, #128	; 0x80
    ecb6:	03db      	lsls	r3, r3, #15
    ecb8:	421c      	tst	r4, r3
    ecba:	d038      	beq.n	ed2e <__aeabi_fdiv+0x1ee>
    ecbc:	421d      	tst	r5, r3
    ecbe:	d051      	beq.n	ed64 <__aeabi_fdiv+0x224>
    ecc0:	431c      	orrs	r4, r3
    ecc2:	0264      	lsls	r4, r4, #9
    ecc4:	0a64      	lsrs	r4, r4, #9
    ecc6:	0033      	movs	r3, r6
    ecc8:	21ff      	movs	r1, #255	; 0xff
    ecca:	e7d5      	b.n	ec78 <__aeabi_fdiv+0x138>
    eccc:	0163      	lsls	r3, r4, #5
    ecce:	016c      	lsls	r4, r5, #5
    ecd0:	42a3      	cmp	r3, r4
    ecd2:	d23b      	bcs.n	ed4c <__aeabi_fdiv+0x20c>
    ecd4:	261b      	movs	r6, #27
    ecd6:	2100      	movs	r1, #0
    ecd8:	3801      	subs	r0, #1
    ecda:	2501      	movs	r5, #1
    ecdc:	001f      	movs	r7, r3
    ecde:	0049      	lsls	r1, r1, #1
    ece0:	005b      	lsls	r3, r3, #1
    ece2:	2f00      	cmp	r7, #0
    ece4:	db01      	blt.n	ecea <__aeabi_fdiv+0x1aa>
    ece6:	429c      	cmp	r4, r3
    ece8:	d801      	bhi.n	ecee <__aeabi_fdiv+0x1ae>
    ecea:	1b1b      	subs	r3, r3, r4
    ecec:	4329      	orrs	r1, r5
    ecee:	3e01      	subs	r6, #1
    ecf0:	2e00      	cmp	r6, #0
    ecf2:	d1f3      	bne.n	ecdc <__aeabi_fdiv+0x19c>
    ecf4:	001c      	movs	r4, r3
    ecf6:	1e63      	subs	r3, r4, #1
    ecf8:	419c      	sbcs	r4, r3
    ecfa:	430c      	orrs	r4, r1
    ecfc:	0001      	movs	r1, r0
    ecfe:	317f      	adds	r1, #127	; 0x7f
    ed00:	2900      	cmp	r1, #0
    ed02:	ddce      	ble.n	eca2 <__aeabi_fdiv+0x162>
    ed04:	0763      	lsls	r3, r4, #29
    ed06:	d004      	beq.n	ed12 <__aeabi_fdiv+0x1d2>
    ed08:	230f      	movs	r3, #15
    ed0a:	4023      	ands	r3, r4
    ed0c:	2b04      	cmp	r3, #4
    ed0e:	d000      	beq.n	ed12 <__aeabi_fdiv+0x1d2>
    ed10:	3404      	adds	r4, #4
    ed12:	0123      	lsls	r3, r4, #4
    ed14:	d503      	bpl.n	ed1e <__aeabi_fdiv+0x1de>
    ed16:	0001      	movs	r1, r0
    ed18:	4b2c      	ldr	r3, [pc, #176]	; (edcc <__aeabi_fdiv+0x28c>)
    ed1a:	3180      	adds	r1, #128	; 0x80
    ed1c:	401c      	ands	r4, r3
    ed1e:	29fe      	cmp	r1, #254	; 0xfe
    ed20:	dd0d      	ble.n	ed3e <__aeabi_fdiv+0x1fe>
    ed22:	2301      	movs	r3, #1
    ed24:	9a01      	ldr	r2, [sp, #4]
    ed26:	21ff      	movs	r1, #255	; 0xff
    ed28:	4013      	ands	r3, r2
    ed2a:	2400      	movs	r4, #0
    ed2c:	e7a4      	b.n	ec78 <__aeabi_fdiv+0x138>
    ed2e:	2380      	movs	r3, #128	; 0x80
    ed30:	03db      	lsls	r3, r3, #15
    ed32:	431c      	orrs	r4, r3
    ed34:	0264      	lsls	r4, r4, #9
    ed36:	0a64      	lsrs	r4, r4, #9
    ed38:	0033      	movs	r3, r6
    ed3a:	21ff      	movs	r1, #255	; 0xff
    ed3c:	e79c      	b.n	ec78 <__aeabi_fdiv+0x138>
    ed3e:	2301      	movs	r3, #1
    ed40:	9a01      	ldr	r2, [sp, #4]
    ed42:	01a4      	lsls	r4, r4, #6
    ed44:	0a64      	lsrs	r4, r4, #9
    ed46:	b2c9      	uxtb	r1, r1
    ed48:	4013      	ands	r3, r2
    ed4a:	e795      	b.n	ec78 <__aeabi_fdiv+0x138>
    ed4c:	1b1b      	subs	r3, r3, r4
    ed4e:	261a      	movs	r6, #26
    ed50:	2101      	movs	r1, #1
    ed52:	e7c2      	b.n	ecda <__aeabi_fdiv+0x19a>
    ed54:	9b00      	ldr	r3, [sp, #0]
    ed56:	468b      	mov	fp, r1
    ed58:	469a      	mov	sl, r3
    ed5a:	2400      	movs	r4, #0
    ed5c:	e74c      	b.n	ebf8 <__aeabi_fdiv+0xb8>
    ed5e:	0263      	lsls	r3, r4, #9
    ed60:	d5e5      	bpl.n	ed2e <__aeabi_fdiv+0x1ee>
    ed62:	2500      	movs	r5, #0
    ed64:	2480      	movs	r4, #128	; 0x80
    ed66:	03e4      	lsls	r4, r4, #15
    ed68:	432c      	orrs	r4, r5
    ed6a:	0264      	lsls	r4, r4, #9
    ed6c:	0a64      	lsrs	r4, r4, #9
    ed6e:	9b00      	ldr	r3, [sp, #0]
    ed70:	21ff      	movs	r1, #255	; 0xff
    ed72:	e781      	b.n	ec78 <__aeabi_fdiv+0x138>
    ed74:	9501      	str	r5, [sp, #4]
    ed76:	e7c1      	b.n	ecfc <__aeabi_fdiv+0x1bc>
    ed78:	0023      	movs	r3, r4
    ed7a:	2020      	movs	r0, #32
    ed7c:	40cb      	lsrs	r3, r1
    ed7e:	1a41      	subs	r1, r0, r1
    ed80:	408c      	lsls	r4, r1
    ed82:	1e61      	subs	r1, r4, #1
    ed84:	418c      	sbcs	r4, r1
    ed86:	431c      	orrs	r4, r3
    ed88:	0763      	lsls	r3, r4, #29
    ed8a:	d004      	beq.n	ed96 <__aeabi_fdiv+0x256>
    ed8c:	230f      	movs	r3, #15
    ed8e:	4023      	ands	r3, r4
    ed90:	2b04      	cmp	r3, #4
    ed92:	d000      	beq.n	ed96 <__aeabi_fdiv+0x256>
    ed94:	3404      	adds	r4, #4
    ed96:	0163      	lsls	r3, r4, #5
    ed98:	d505      	bpl.n	eda6 <__aeabi_fdiv+0x266>
    ed9a:	2301      	movs	r3, #1
    ed9c:	9a01      	ldr	r2, [sp, #4]
    ed9e:	2101      	movs	r1, #1
    eda0:	4013      	ands	r3, r2
    eda2:	2400      	movs	r4, #0
    eda4:	e768      	b.n	ec78 <__aeabi_fdiv+0x138>
    eda6:	2301      	movs	r3, #1
    eda8:	9a01      	ldr	r2, [sp, #4]
    edaa:	01a4      	lsls	r4, r4, #6
    edac:	0a64      	lsrs	r4, r4, #9
    edae:	4013      	ands	r3, r2
    edb0:	2100      	movs	r1, #0
    edb2:	e761      	b.n	ec78 <__aeabi_fdiv+0x138>
    edb4:	2380      	movs	r3, #128	; 0x80
    edb6:	03db      	lsls	r3, r3, #15
    edb8:	431c      	orrs	r4, r3
    edba:	0264      	lsls	r4, r4, #9
    edbc:	0a64      	lsrs	r4, r4, #9
    edbe:	4653      	mov	r3, sl
    edc0:	21ff      	movs	r1, #255	; 0xff
    edc2:	e759      	b.n	ec78 <__aeabi_fdiv+0x138>
    edc4:	00012b14 	.word	0x00012b14
    edc8:	00012b54 	.word	0x00012b54
    edcc:	f7ffffff 	.word	0xf7ffffff

0000edd0 <__eqsf2>:
    edd0:	b570      	push	{r4, r5, r6, lr}
    edd2:	0042      	lsls	r2, r0, #1
    edd4:	0245      	lsls	r5, r0, #9
    edd6:	024e      	lsls	r6, r1, #9
    edd8:	004c      	lsls	r4, r1, #1
    edda:	0fc3      	lsrs	r3, r0, #31
    eddc:	0a6d      	lsrs	r5, r5, #9
    edde:	0e12      	lsrs	r2, r2, #24
    ede0:	0a76      	lsrs	r6, r6, #9
    ede2:	0e24      	lsrs	r4, r4, #24
    ede4:	0fc9      	lsrs	r1, r1, #31
    ede6:	2001      	movs	r0, #1
    ede8:	2aff      	cmp	r2, #255	; 0xff
    edea:	d006      	beq.n	edfa <__eqsf2+0x2a>
    edec:	2cff      	cmp	r4, #255	; 0xff
    edee:	d003      	beq.n	edf8 <__eqsf2+0x28>
    edf0:	42a2      	cmp	r2, r4
    edf2:	d101      	bne.n	edf8 <__eqsf2+0x28>
    edf4:	42b5      	cmp	r5, r6
    edf6:	d006      	beq.n	ee06 <__eqsf2+0x36>
    edf8:	bd70      	pop	{r4, r5, r6, pc}
    edfa:	2d00      	cmp	r5, #0
    edfc:	d1fc      	bne.n	edf8 <__eqsf2+0x28>
    edfe:	2cff      	cmp	r4, #255	; 0xff
    ee00:	d1fa      	bne.n	edf8 <__eqsf2+0x28>
    ee02:	2e00      	cmp	r6, #0
    ee04:	d1f8      	bne.n	edf8 <__eqsf2+0x28>
    ee06:	428b      	cmp	r3, r1
    ee08:	d006      	beq.n	ee18 <__eqsf2+0x48>
    ee0a:	2001      	movs	r0, #1
    ee0c:	2a00      	cmp	r2, #0
    ee0e:	d1f3      	bne.n	edf8 <__eqsf2+0x28>
    ee10:	0028      	movs	r0, r5
    ee12:	1e45      	subs	r5, r0, #1
    ee14:	41a8      	sbcs	r0, r5
    ee16:	e7ef      	b.n	edf8 <__eqsf2+0x28>
    ee18:	2000      	movs	r0, #0
    ee1a:	e7ed      	b.n	edf8 <__eqsf2+0x28>

0000ee1c <__gesf2>:
    ee1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee1e:	0042      	lsls	r2, r0, #1
    ee20:	0245      	lsls	r5, r0, #9
    ee22:	024c      	lsls	r4, r1, #9
    ee24:	0fc3      	lsrs	r3, r0, #31
    ee26:	0048      	lsls	r0, r1, #1
    ee28:	0a6d      	lsrs	r5, r5, #9
    ee2a:	0e12      	lsrs	r2, r2, #24
    ee2c:	0a64      	lsrs	r4, r4, #9
    ee2e:	0e00      	lsrs	r0, r0, #24
    ee30:	0fc9      	lsrs	r1, r1, #31
    ee32:	2aff      	cmp	r2, #255	; 0xff
    ee34:	d01e      	beq.n	ee74 <__gesf2+0x58>
    ee36:	28ff      	cmp	r0, #255	; 0xff
    ee38:	d021      	beq.n	ee7e <__gesf2+0x62>
    ee3a:	2a00      	cmp	r2, #0
    ee3c:	d10a      	bne.n	ee54 <__gesf2+0x38>
    ee3e:	426e      	negs	r6, r5
    ee40:	416e      	adcs	r6, r5
    ee42:	b2f6      	uxtb	r6, r6
    ee44:	2800      	cmp	r0, #0
    ee46:	d10f      	bne.n	ee68 <__gesf2+0x4c>
    ee48:	2c00      	cmp	r4, #0
    ee4a:	d10d      	bne.n	ee68 <__gesf2+0x4c>
    ee4c:	2000      	movs	r0, #0
    ee4e:	2d00      	cmp	r5, #0
    ee50:	d009      	beq.n	ee66 <__gesf2+0x4a>
    ee52:	e005      	b.n	ee60 <__gesf2+0x44>
    ee54:	2800      	cmp	r0, #0
    ee56:	d101      	bne.n	ee5c <__gesf2+0x40>
    ee58:	2c00      	cmp	r4, #0
    ee5a:	d001      	beq.n	ee60 <__gesf2+0x44>
    ee5c:	428b      	cmp	r3, r1
    ee5e:	d011      	beq.n	ee84 <__gesf2+0x68>
    ee60:	2101      	movs	r1, #1
    ee62:	4258      	negs	r0, r3
    ee64:	4308      	orrs	r0, r1
    ee66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee68:	2e00      	cmp	r6, #0
    ee6a:	d0f7      	beq.n	ee5c <__gesf2+0x40>
    ee6c:	2001      	movs	r0, #1
    ee6e:	3901      	subs	r1, #1
    ee70:	4308      	orrs	r0, r1
    ee72:	e7f8      	b.n	ee66 <__gesf2+0x4a>
    ee74:	2d00      	cmp	r5, #0
    ee76:	d0de      	beq.n	ee36 <__gesf2+0x1a>
    ee78:	2002      	movs	r0, #2
    ee7a:	4240      	negs	r0, r0
    ee7c:	e7f3      	b.n	ee66 <__gesf2+0x4a>
    ee7e:	2c00      	cmp	r4, #0
    ee80:	d0db      	beq.n	ee3a <__gesf2+0x1e>
    ee82:	e7f9      	b.n	ee78 <__gesf2+0x5c>
    ee84:	4282      	cmp	r2, r0
    ee86:	dceb      	bgt.n	ee60 <__gesf2+0x44>
    ee88:	db04      	blt.n	ee94 <__gesf2+0x78>
    ee8a:	42a5      	cmp	r5, r4
    ee8c:	d8e8      	bhi.n	ee60 <__gesf2+0x44>
    ee8e:	2000      	movs	r0, #0
    ee90:	42a5      	cmp	r5, r4
    ee92:	d2e8      	bcs.n	ee66 <__gesf2+0x4a>
    ee94:	2101      	movs	r1, #1
    ee96:	1e58      	subs	r0, r3, #1
    ee98:	4308      	orrs	r0, r1
    ee9a:	e7e4      	b.n	ee66 <__gesf2+0x4a>

0000ee9c <__lesf2>:
    ee9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee9e:	0042      	lsls	r2, r0, #1
    eea0:	024d      	lsls	r5, r1, #9
    eea2:	004c      	lsls	r4, r1, #1
    eea4:	0246      	lsls	r6, r0, #9
    eea6:	0a76      	lsrs	r6, r6, #9
    eea8:	0e12      	lsrs	r2, r2, #24
    eeaa:	0fc3      	lsrs	r3, r0, #31
    eeac:	0a6d      	lsrs	r5, r5, #9
    eeae:	0e24      	lsrs	r4, r4, #24
    eeb0:	0fc9      	lsrs	r1, r1, #31
    eeb2:	2aff      	cmp	r2, #255	; 0xff
    eeb4:	d016      	beq.n	eee4 <__lesf2+0x48>
    eeb6:	2cff      	cmp	r4, #255	; 0xff
    eeb8:	d018      	beq.n	eeec <__lesf2+0x50>
    eeba:	2a00      	cmp	r2, #0
    eebc:	d10a      	bne.n	eed4 <__lesf2+0x38>
    eebe:	4270      	negs	r0, r6
    eec0:	4170      	adcs	r0, r6
    eec2:	b2c0      	uxtb	r0, r0
    eec4:	2c00      	cmp	r4, #0
    eec6:	d015      	beq.n	eef4 <__lesf2+0x58>
    eec8:	2800      	cmp	r0, #0
    eeca:	d005      	beq.n	eed8 <__lesf2+0x3c>
    eecc:	2001      	movs	r0, #1
    eece:	3901      	subs	r1, #1
    eed0:	4308      	orrs	r0, r1
    eed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eed4:	2c00      	cmp	r4, #0
    eed6:	d013      	beq.n	ef00 <__lesf2+0x64>
    eed8:	4299      	cmp	r1, r3
    eeda:	d014      	beq.n	ef06 <__lesf2+0x6a>
    eedc:	2001      	movs	r0, #1
    eede:	425b      	negs	r3, r3
    eee0:	4318      	orrs	r0, r3
    eee2:	e7f6      	b.n	eed2 <__lesf2+0x36>
    eee4:	2002      	movs	r0, #2
    eee6:	2e00      	cmp	r6, #0
    eee8:	d1f3      	bne.n	eed2 <__lesf2+0x36>
    eeea:	e7e4      	b.n	eeb6 <__lesf2+0x1a>
    eeec:	2002      	movs	r0, #2
    eeee:	2d00      	cmp	r5, #0
    eef0:	d1ef      	bne.n	eed2 <__lesf2+0x36>
    eef2:	e7e2      	b.n	eeba <__lesf2+0x1e>
    eef4:	2d00      	cmp	r5, #0
    eef6:	d1e7      	bne.n	eec8 <__lesf2+0x2c>
    eef8:	2000      	movs	r0, #0
    eefa:	2e00      	cmp	r6, #0
    eefc:	d0e9      	beq.n	eed2 <__lesf2+0x36>
    eefe:	e7ed      	b.n	eedc <__lesf2+0x40>
    ef00:	2d00      	cmp	r5, #0
    ef02:	d1e9      	bne.n	eed8 <__lesf2+0x3c>
    ef04:	e7ea      	b.n	eedc <__lesf2+0x40>
    ef06:	42a2      	cmp	r2, r4
    ef08:	dc06      	bgt.n	ef18 <__lesf2+0x7c>
    ef0a:	dbdf      	blt.n	eecc <__lesf2+0x30>
    ef0c:	42ae      	cmp	r6, r5
    ef0e:	d803      	bhi.n	ef18 <__lesf2+0x7c>
    ef10:	2000      	movs	r0, #0
    ef12:	42ae      	cmp	r6, r5
    ef14:	d3da      	bcc.n	eecc <__lesf2+0x30>
    ef16:	e7dc      	b.n	eed2 <__lesf2+0x36>
    ef18:	2001      	movs	r0, #1
    ef1a:	4249      	negs	r1, r1
    ef1c:	4308      	orrs	r0, r1
    ef1e:	e7d8      	b.n	eed2 <__lesf2+0x36>

0000ef20 <__aeabi_fsub>:
    ef20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef22:	464f      	mov	r7, r9
    ef24:	46d6      	mov	lr, sl
    ef26:	4646      	mov	r6, r8
    ef28:	0044      	lsls	r4, r0, #1
    ef2a:	b5c0      	push	{r6, r7, lr}
    ef2c:	0fc2      	lsrs	r2, r0, #31
    ef2e:	0247      	lsls	r7, r0, #9
    ef30:	0248      	lsls	r0, r1, #9
    ef32:	0a40      	lsrs	r0, r0, #9
    ef34:	4684      	mov	ip, r0
    ef36:	4666      	mov	r6, ip
    ef38:	0a7b      	lsrs	r3, r7, #9
    ef3a:	0048      	lsls	r0, r1, #1
    ef3c:	0fc9      	lsrs	r1, r1, #31
    ef3e:	469a      	mov	sl, r3
    ef40:	0e24      	lsrs	r4, r4, #24
    ef42:	0015      	movs	r5, r2
    ef44:	00db      	lsls	r3, r3, #3
    ef46:	0e00      	lsrs	r0, r0, #24
    ef48:	4689      	mov	r9, r1
    ef4a:	00f6      	lsls	r6, r6, #3
    ef4c:	28ff      	cmp	r0, #255	; 0xff
    ef4e:	d100      	bne.n	ef52 <__aeabi_fsub+0x32>
    ef50:	e08f      	b.n	f072 <__aeabi_fsub+0x152>
    ef52:	2101      	movs	r1, #1
    ef54:	464f      	mov	r7, r9
    ef56:	404f      	eors	r7, r1
    ef58:	0039      	movs	r1, r7
    ef5a:	4291      	cmp	r1, r2
    ef5c:	d066      	beq.n	f02c <__aeabi_fsub+0x10c>
    ef5e:	1a22      	subs	r2, r4, r0
    ef60:	2a00      	cmp	r2, #0
    ef62:	dc00      	bgt.n	ef66 <__aeabi_fsub+0x46>
    ef64:	e09d      	b.n	f0a2 <__aeabi_fsub+0x182>
    ef66:	2800      	cmp	r0, #0
    ef68:	d13d      	bne.n	efe6 <__aeabi_fsub+0xc6>
    ef6a:	2e00      	cmp	r6, #0
    ef6c:	d100      	bne.n	ef70 <__aeabi_fsub+0x50>
    ef6e:	e08b      	b.n	f088 <__aeabi_fsub+0x168>
    ef70:	1e51      	subs	r1, r2, #1
    ef72:	2900      	cmp	r1, #0
    ef74:	d000      	beq.n	ef78 <__aeabi_fsub+0x58>
    ef76:	e0b5      	b.n	f0e4 <__aeabi_fsub+0x1c4>
    ef78:	2401      	movs	r4, #1
    ef7a:	1b9b      	subs	r3, r3, r6
    ef7c:	015a      	lsls	r2, r3, #5
    ef7e:	d544      	bpl.n	f00a <__aeabi_fsub+0xea>
    ef80:	019b      	lsls	r3, r3, #6
    ef82:	099f      	lsrs	r7, r3, #6
    ef84:	0038      	movs	r0, r7
    ef86:	f001 fe13 	bl	10bb0 <__clzsi2>
    ef8a:	3805      	subs	r0, #5
    ef8c:	4087      	lsls	r7, r0
    ef8e:	4284      	cmp	r4, r0
    ef90:	dd00      	ble.n	ef94 <__aeabi_fsub+0x74>
    ef92:	e096      	b.n	f0c2 <__aeabi_fsub+0x1a2>
    ef94:	1b04      	subs	r4, r0, r4
    ef96:	003a      	movs	r2, r7
    ef98:	2020      	movs	r0, #32
    ef9a:	3401      	adds	r4, #1
    ef9c:	40e2      	lsrs	r2, r4
    ef9e:	1b04      	subs	r4, r0, r4
    efa0:	40a7      	lsls	r7, r4
    efa2:	003b      	movs	r3, r7
    efa4:	1e5f      	subs	r7, r3, #1
    efa6:	41bb      	sbcs	r3, r7
    efa8:	2400      	movs	r4, #0
    efaa:	4313      	orrs	r3, r2
    efac:	075a      	lsls	r2, r3, #29
    efae:	d004      	beq.n	efba <__aeabi_fsub+0x9a>
    efb0:	220f      	movs	r2, #15
    efb2:	401a      	ands	r2, r3
    efb4:	2a04      	cmp	r2, #4
    efb6:	d000      	beq.n	efba <__aeabi_fsub+0x9a>
    efb8:	3304      	adds	r3, #4
    efba:	015a      	lsls	r2, r3, #5
    efbc:	d527      	bpl.n	f00e <__aeabi_fsub+0xee>
    efbe:	3401      	adds	r4, #1
    efc0:	2cff      	cmp	r4, #255	; 0xff
    efc2:	d100      	bne.n	efc6 <__aeabi_fsub+0xa6>
    efc4:	e079      	b.n	f0ba <__aeabi_fsub+0x19a>
    efc6:	2201      	movs	r2, #1
    efc8:	019b      	lsls	r3, r3, #6
    efca:	0a5b      	lsrs	r3, r3, #9
    efcc:	b2e4      	uxtb	r4, r4
    efce:	402a      	ands	r2, r5
    efd0:	025b      	lsls	r3, r3, #9
    efd2:	05e4      	lsls	r4, r4, #23
    efd4:	0a58      	lsrs	r0, r3, #9
    efd6:	07d2      	lsls	r2, r2, #31
    efd8:	4320      	orrs	r0, r4
    efda:	4310      	orrs	r0, r2
    efdc:	bc1c      	pop	{r2, r3, r4}
    efde:	4690      	mov	r8, r2
    efe0:	4699      	mov	r9, r3
    efe2:	46a2      	mov	sl, r4
    efe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efe6:	2cff      	cmp	r4, #255	; 0xff
    efe8:	d0e0      	beq.n	efac <__aeabi_fsub+0x8c>
    efea:	2180      	movs	r1, #128	; 0x80
    efec:	04c9      	lsls	r1, r1, #19
    efee:	430e      	orrs	r6, r1
    eff0:	2a1b      	cmp	r2, #27
    eff2:	dc7b      	bgt.n	f0ec <__aeabi_fsub+0x1cc>
    eff4:	0031      	movs	r1, r6
    eff6:	2020      	movs	r0, #32
    eff8:	40d1      	lsrs	r1, r2
    effa:	1a82      	subs	r2, r0, r2
    effc:	4096      	lsls	r6, r2
    effe:	1e72      	subs	r2, r6, #1
    f000:	4196      	sbcs	r6, r2
    f002:	430e      	orrs	r6, r1
    f004:	1b9b      	subs	r3, r3, r6
    f006:	015a      	lsls	r2, r3, #5
    f008:	d4ba      	bmi.n	ef80 <__aeabi_fsub+0x60>
    f00a:	075a      	lsls	r2, r3, #29
    f00c:	d1d0      	bne.n	efb0 <__aeabi_fsub+0x90>
    f00e:	2201      	movs	r2, #1
    f010:	08df      	lsrs	r7, r3, #3
    f012:	402a      	ands	r2, r5
    f014:	2cff      	cmp	r4, #255	; 0xff
    f016:	d133      	bne.n	f080 <__aeabi_fsub+0x160>
    f018:	2f00      	cmp	r7, #0
    f01a:	d100      	bne.n	f01e <__aeabi_fsub+0xfe>
    f01c:	e0a8      	b.n	f170 <__aeabi_fsub+0x250>
    f01e:	2380      	movs	r3, #128	; 0x80
    f020:	03db      	lsls	r3, r3, #15
    f022:	433b      	orrs	r3, r7
    f024:	025b      	lsls	r3, r3, #9
    f026:	0a5b      	lsrs	r3, r3, #9
    f028:	24ff      	movs	r4, #255	; 0xff
    f02a:	e7d1      	b.n	efd0 <__aeabi_fsub+0xb0>
    f02c:	1a21      	subs	r1, r4, r0
    f02e:	2900      	cmp	r1, #0
    f030:	dd4c      	ble.n	f0cc <__aeabi_fsub+0x1ac>
    f032:	2800      	cmp	r0, #0
    f034:	d02a      	beq.n	f08c <__aeabi_fsub+0x16c>
    f036:	2cff      	cmp	r4, #255	; 0xff
    f038:	d0b8      	beq.n	efac <__aeabi_fsub+0x8c>
    f03a:	2080      	movs	r0, #128	; 0x80
    f03c:	04c0      	lsls	r0, r0, #19
    f03e:	4306      	orrs	r6, r0
    f040:	291b      	cmp	r1, #27
    f042:	dd00      	ble.n	f046 <__aeabi_fsub+0x126>
    f044:	e0af      	b.n	f1a6 <__aeabi_fsub+0x286>
    f046:	0030      	movs	r0, r6
    f048:	2720      	movs	r7, #32
    f04a:	40c8      	lsrs	r0, r1
    f04c:	1a79      	subs	r1, r7, r1
    f04e:	408e      	lsls	r6, r1
    f050:	1e71      	subs	r1, r6, #1
    f052:	418e      	sbcs	r6, r1
    f054:	4306      	orrs	r6, r0
    f056:	199b      	adds	r3, r3, r6
    f058:	0159      	lsls	r1, r3, #5
    f05a:	d5d6      	bpl.n	f00a <__aeabi_fsub+0xea>
    f05c:	3401      	adds	r4, #1
    f05e:	2cff      	cmp	r4, #255	; 0xff
    f060:	d100      	bne.n	f064 <__aeabi_fsub+0x144>
    f062:	e085      	b.n	f170 <__aeabi_fsub+0x250>
    f064:	2201      	movs	r2, #1
    f066:	497a      	ldr	r1, [pc, #488]	; (f250 <__aeabi_fsub+0x330>)
    f068:	401a      	ands	r2, r3
    f06a:	085b      	lsrs	r3, r3, #1
    f06c:	400b      	ands	r3, r1
    f06e:	4313      	orrs	r3, r2
    f070:	e79c      	b.n	efac <__aeabi_fsub+0x8c>
    f072:	2e00      	cmp	r6, #0
    f074:	d000      	beq.n	f078 <__aeabi_fsub+0x158>
    f076:	e770      	b.n	ef5a <__aeabi_fsub+0x3a>
    f078:	e76b      	b.n	ef52 <__aeabi_fsub+0x32>
    f07a:	1e3b      	subs	r3, r7, #0
    f07c:	d1c5      	bne.n	f00a <__aeabi_fsub+0xea>
    f07e:	2200      	movs	r2, #0
    f080:	027b      	lsls	r3, r7, #9
    f082:	0a5b      	lsrs	r3, r3, #9
    f084:	b2e4      	uxtb	r4, r4
    f086:	e7a3      	b.n	efd0 <__aeabi_fsub+0xb0>
    f088:	0014      	movs	r4, r2
    f08a:	e78f      	b.n	efac <__aeabi_fsub+0x8c>
    f08c:	2e00      	cmp	r6, #0
    f08e:	d04d      	beq.n	f12c <__aeabi_fsub+0x20c>
    f090:	1e48      	subs	r0, r1, #1
    f092:	2800      	cmp	r0, #0
    f094:	d157      	bne.n	f146 <__aeabi_fsub+0x226>
    f096:	199b      	adds	r3, r3, r6
    f098:	2401      	movs	r4, #1
    f09a:	015a      	lsls	r2, r3, #5
    f09c:	d5b5      	bpl.n	f00a <__aeabi_fsub+0xea>
    f09e:	2402      	movs	r4, #2
    f0a0:	e7e0      	b.n	f064 <__aeabi_fsub+0x144>
    f0a2:	2a00      	cmp	r2, #0
    f0a4:	d125      	bne.n	f0f2 <__aeabi_fsub+0x1d2>
    f0a6:	1c62      	adds	r2, r4, #1
    f0a8:	b2d2      	uxtb	r2, r2
    f0aa:	2a01      	cmp	r2, #1
    f0ac:	dd72      	ble.n	f194 <__aeabi_fsub+0x274>
    f0ae:	1b9f      	subs	r7, r3, r6
    f0b0:	017a      	lsls	r2, r7, #5
    f0b2:	d535      	bpl.n	f120 <__aeabi_fsub+0x200>
    f0b4:	1af7      	subs	r7, r6, r3
    f0b6:	000d      	movs	r5, r1
    f0b8:	e764      	b.n	ef84 <__aeabi_fsub+0x64>
    f0ba:	2201      	movs	r2, #1
    f0bc:	2300      	movs	r3, #0
    f0be:	402a      	ands	r2, r5
    f0c0:	e786      	b.n	efd0 <__aeabi_fsub+0xb0>
    f0c2:	003b      	movs	r3, r7
    f0c4:	4a63      	ldr	r2, [pc, #396]	; (f254 <__aeabi_fsub+0x334>)
    f0c6:	1a24      	subs	r4, r4, r0
    f0c8:	4013      	ands	r3, r2
    f0ca:	e76f      	b.n	efac <__aeabi_fsub+0x8c>
    f0cc:	2900      	cmp	r1, #0
    f0ce:	d16c      	bne.n	f1aa <__aeabi_fsub+0x28a>
    f0d0:	1c61      	adds	r1, r4, #1
    f0d2:	b2c8      	uxtb	r0, r1
    f0d4:	2801      	cmp	r0, #1
    f0d6:	dd4e      	ble.n	f176 <__aeabi_fsub+0x256>
    f0d8:	29ff      	cmp	r1, #255	; 0xff
    f0da:	d049      	beq.n	f170 <__aeabi_fsub+0x250>
    f0dc:	199b      	adds	r3, r3, r6
    f0de:	085b      	lsrs	r3, r3, #1
    f0e0:	000c      	movs	r4, r1
    f0e2:	e763      	b.n	efac <__aeabi_fsub+0x8c>
    f0e4:	2aff      	cmp	r2, #255	; 0xff
    f0e6:	d041      	beq.n	f16c <__aeabi_fsub+0x24c>
    f0e8:	000a      	movs	r2, r1
    f0ea:	e781      	b.n	eff0 <__aeabi_fsub+0xd0>
    f0ec:	2601      	movs	r6, #1
    f0ee:	1b9b      	subs	r3, r3, r6
    f0f0:	e789      	b.n	f006 <__aeabi_fsub+0xe6>
    f0f2:	2c00      	cmp	r4, #0
    f0f4:	d01c      	beq.n	f130 <__aeabi_fsub+0x210>
    f0f6:	28ff      	cmp	r0, #255	; 0xff
    f0f8:	d021      	beq.n	f13e <__aeabi_fsub+0x21e>
    f0fa:	2480      	movs	r4, #128	; 0x80
    f0fc:	04e4      	lsls	r4, r4, #19
    f0fe:	4252      	negs	r2, r2
    f100:	4323      	orrs	r3, r4
    f102:	2a1b      	cmp	r2, #27
    f104:	dd00      	ble.n	f108 <__aeabi_fsub+0x1e8>
    f106:	e096      	b.n	f236 <__aeabi_fsub+0x316>
    f108:	001c      	movs	r4, r3
    f10a:	2520      	movs	r5, #32
    f10c:	40d4      	lsrs	r4, r2
    f10e:	1aaa      	subs	r2, r5, r2
    f110:	4093      	lsls	r3, r2
    f112:	1e5a      	subs	r2, r3, #1
    f114:	4193      	sbcs	r3, r2
    f116:	4323      	orrs	r3, r4
    f118:	1af3      	subs	r3, r6, r3
    f11a:	0004      	movs	r4, r0
    f11c:	000d      	movs	r5, r1
    f11e:	e72d      	b.n	ef7c <__aeabi_fsub+0x5c>
    f120:	2f00      	cmp	r7, #0
    f122:	d000      	beq.n	f126 <__aeabi_fsub+0x206>
    f124:	e72e      	b.n	ef84 <__aeabi_fsub+0x64>
    f126:	2200      	movs	r2, #0
    f128:	2400      	movs	r4, #0
    f12a:	e7a9      	b.n	f080 <__aeabi_fsub+0x160>
    f12c:	000c      	movs	r4, r1
    f12e:	e73d      	b.n	efac <__aeabi_fsub+0x8c>
    f130:	2b00      	cmp	r3, #0
    f132:	d058      	beq.n	f1e6 <__aeabi_fsub+0x2c6>
    f134:	43d2      	mvns	r2, r2
    f136:	2a00      	cmp	r2, #0
    f138:	d0ee      	beq.n	f118 <__aeabi_fsub+0x1f8>
    f13a:	28ff      	cmp	r0, #255	; 0xff
    f13c:	d1e1      	bne.n	f102 <__aeabi_fsub+0x1e2>
    f13e:	0033      	movs	r3, r6
    f140:	24ff      	movs	r4, #255	; 0xff
    f142:	000d      	movs	r5, r1
    f144:	e732      	b.n	efac <__aeabi_fsub+0x8c>
    f146:	29ff      	cmp	r1, #255	; 0xff
    f148:	d010      	beq.n	f16c <__aeabi_fsub+0x24c>
    f14a:	0001      	movs	r1, r0
    f14c:	e778      	b.n	f040 <__aeabi_fsub+0x120>
    f14e:	2b00      	cmp	r3, #0
    f150:	d06e      	beq.n	f230 <__aeabi_fsub+0x310>
    f152:	24ff      	movs	r4, #255	; 0xff
    f154:	2e00      	cmp	r6, #0
    f156:	d100      	bne.n	f15a <__aeabi_fsub+0x23a>
    f158:	e728      	b.n	efac <__aeabi_fsub+0x8c>
    f15a:	2280      	movs	r2, #128	; 0x80
    f15c:	4651      	mov	r1, sl
    f15e:	03d2      	lsls	r2, r2, #15
    f160:	4211      	tst	r1, r2
    f162:	d003      	beq.n	f16c <__aeabi_fsub+0x24c>
    f164:	4661      	mov	r1, ip
    f166:	4211      	tst	r1, r2
    f168:	d100      	bne.n	f16c <__aeabi_fsub+0x24c>
    f16a:	0033      	movs	r3, r6
    f16c:	24ff      	movs	r4, #255	; 0xff
    f16e:	e71d      	b.n	efac <__aeabi_fsub+0x8c>
    f170:	24ff      	movs	r4, #255	; 0xff
    f172:	2300      	movs	r3, #0
    f174:	e72c      	b.n	efd0 <__aeabi_fsub+0xb0>
    f176:	2c00      	cmp	r4, #0
    f178:	d1e9      	bne.n	f14e <__aeabi_fsub+0x22e>
    f17a:	2b00      	cmp	r3, #0
    f17c:	d063      	beq.n	f246 <__aeabi_fsub+0x326>
    f17e:	2e00      	cmp	r6, #0
    f180:	d100      	bne.n	f184 <__aeabi_fsub+0x264>
    f182:	e713      	b.n	efac <__aeabi_fsub+0x8c>
    f184:	199b      	adds	r3, r3, r6
    f186:	015a      	lsls	r2, r3, #5
    f188:	d400      	bmi.n	f18c <__aeabi_fsub+0x26c>
    f18a:	e73e      	b.n	f00a <__aeabi_fsub+0xea>
    f18c:	4a31      	ldr	r2, [pc, #196]	; (f254 <__aeabi_fsub+0x334>)
    f18e:	000c      	movs	r4, r1
    f190:	4013      	ands	r3, r2
    f192:	e70b      	b.n	efac <__aeabi_fsub+0x8c>
    f194:	2c00      	cmp	r4, #0
    f196:	d11e      	bne.n	f1d6 <__aeabi_fsub+0x2b6>
    f198:	2b00      	cmp	r3, #0
    f19a:	d12f      	bne.n	f1fc <__aeabi_fsub+0x2dc>
    f19c:	2e00      	cmp	r6, #0
    f19e:	d04f      	beq.n	f240 <__aeabi_fsub+0x320>
    f1a0:	0033      	movs	r3, r6
    f1a2:	000d      	movs	r5, r1
    f1a4:	e702      	b.n	efac <__aeabi_fsub+0x8c>
    f1a6:	2601      	movs	r6, #1
    f1a8:	e755      	b.n	f056 <__aeabi_fsub+0x136>
    f1aa:	2c00      	cmp	r4, #0
    f1ac:	d11f      	bne.n	f1ee <__aeabi_fsub+0x2ce>
    f1ae:	2b00      	cmp	r3, #0
    f1b0:	d043      	beq.n	f23a <__aeabi_fsub+0x31a>
    f1b2:	43c9      	mvns	r1, r1
    f1b4:	2900      	cmp	r1, #0
    f1b6:	d00b      	beq.n	f1d0 <__aeabi_fsub+0x2b0>
    f1b8:	28ff      	cmp	r0, #255	; 0xff
    f1ba:	d039      	beq.n	f230 <__aeabi_fsub+0x310>
    f1bc:	291b      	cmp	r1, #27
    f1be:	dc44      	bgt.n	f24a <__aeabi_fsub+0x32a>
    f1c0:	001c      	movs	r4, r3
    f1c2:	2720      	movs	r7, #32
    f1c4:	40cc      	lsrs	r4, r1
    f1c6:	1a79      	subs	r1, r7, r1
    f1c8:	408b      	lsls	r3, r1
    f1ca:	1e59      	subs	r1, r3, #1
    f1cc:	418b      	sbcs	r3, r1
    f1ce:	4323      	orrs	r3, r4
    f1d0:	199b      	adds	r3, r3, r6
    f1d2:	0004      	movs	r4, r0
    f1d4:	e740      	b.n	f058 <__aeabi_fsub+0x138>
    f1d6:	2b00      	cmp	r3, #0
    f1d8:	d11a      	bne.n	f210 <__aeabi_fsub+0x2f0>
    f1da:	2e00      	cmp	r6, #0
    f1dc:	d124      	bne.n	f228 <__aeabi_fsub+0x308>
    f1de:	2780      	movs	r7, #128	; 0x80
    f1e0:	2200      	movs	r2, #0
    f1e2:	03ff      	lsls	r7, r7, #15
    f1e4:	e71b      	b.n	f01e <__aeabi_fsub+0xfe>
    f1e6:	0033      	movs	r3, r6
    f1e8:	0004      	movs	r4, r0
    f1ea:	000d      	movs	r5, r1
    f1ec:	e6de      	b.n	efac <__aeabi_fsub+0x8c>
    f1ee:	28ff      	cmp	r0, #255	; 0xff
    f1f0:	d01e      	beq.n	f230 <__aeabi_fsub+0x310>
    f1f2:	2480      	movs	r4, #128	; 0x80
    f1f4:	04e4      	lsls	r4, r4, #19
    f1f6:	4249      	negs	r1, r1
    f1f8:	4323      	orrs	r3, r4
    f1fa:	e7df      	b.n	f1bc <__aeabi_fsub+0x29c>
    f1fc:	2e00      	cmp	r6, #0
    f1fe:	d100      	bne.n	f202 <__aeabi_fsub+0x2e2>
    f200:	e6d4      	b.n	efac <__aeabi_fsub+0x8c>
    f202:	1b9f      	subs	r7, r3, r6
    f204:	017a      	lsls	r2, r7, #5
    f206:	d400      	bmi.n	f20a <__aeabi_fsub+0x2ea>
    f208:	e737      	b.n	f07a <__aeabi_fsub+0x15a>
    f20a:	1af3      	subs	r3, r6, r3
    f20c:	000d      	movs	r5, r1
    f20e:	e6cd      	b.n	efac <__aeabi_fsub+0x8c>
    f210:	24ff      	movs	r4, #255	; 0xff
    f212:	2e00      	cmp	r6, #0
    f214:	d100      	bne.n	f218 <__aeabi_fsub+0x2f8>
    f216:	e6c9      	b.n	efac <__aeabi_fsub+0x8c>
    f218:	2280      	movs	r2, #128	; 0x80
    f21a:	4650      	mov	r0, sl
    f21c:	03d2      	lsls	r2, r2, #15
    f21e:	4210      	tst	r0, r2
    f220:	d0a4      	beq.n	f16c <__aeabi_fsub+0x24c>
    f222:	4660      	mov	r0, ip
    f224:	4210      	tst	r0, r2
    f226:	d1a1      	bne.n	f16c <__aeabi_fsub+0x24c>
    f228:	0033      	movs	r3, r6
    f22a:	000d      	movs	r5, r1
    f22c:	24ff      	movs	r4, #255	; 0xff
    f22e:	e6bd      	b.n	efac <__aeabi_fsub+0x8c>
    f230:	0033      	movs	r3, r6
    f232:	24ff      	movs	r4, #255	; 0xff
    f234:	e6ba      	b.n	efac <__aeabi_fsub+0x8c>
    f236:	2301      	movs	r3, #1
    f238:	e76e      	b.n	f118 <__aeabi_fsub+0x1f8>
    f23a:	0033      	movs	r3, r6
    f23c:	0004      	movs	r4, r0
    f23e:	e6b5      	b.n	efac <__aeabi_fsub+0x8c>
    f240:	2700      	movs	r7, #0
    f242:	2200      	movs	r2, #0
    f244:	e71c      	b.n	f080 <__aeabi_fsub+0x160>
    f246:	0033      	movs	r3, r6
    f248:	e6b0      	b.n	efac <__aeabi_fsub+0x8c>
    f24a:	2301      	movs	r3, #1
    f24c:	e7c0      	b.n	f1d0 <__aeabi_fsub+0x2b0>
    f24e:	46c0      	nop			; (mov r8, r8)
    f250:	7dffffff 	.word	0x7dffffff
    f254:	fbffffff 	.word	0xfbffffff

0000f258 <__aeabi_f2iz>:
    f258:	0241      	lsls	r1, r0, #9
    f25a:	0043      	lsls	r3, r0, #1
    f25c:	0fc2      	lsrs	r2, r0, #31
    f25e:	0a49      	lsrs	r1, r1, #9
    f260:	0e1b      	lsrs	r3, r3, #24
    f262:	2000      	movs	r0, #0
    f264:	2b7e      	cmp	r3, #126	; 0x7e
    f266:	dd0d      	ble.n	f284 <__aeabi_f2iz+0x2c>
    f268:	2b9d      	cmp	r3, #157	; 0x9d
    f26a:	dc0c      	bgt.n	f286 <__aeabi_f2iz+0x2e>
    f26c:	2080      	movs	r0, #128	; 0x80
    f26e:	0400      	lsls	r0, r0, #16
    f270:	4301      	orrs	r1, r0
    f272:	2b95      	cmp	r3, #149	; 0x95
    f274:	dc0a      	bgt.n	f28c <__aeabi_f2iz+0x34>
    f276:	2096      	movs	r0, #150	; 0x96
    f278:	1ac3      	subs	r3, r0, r3
    f27a:	40d9      	lsrs	r1, r3
    f27c:	4248      	negs	r0, r1
    f27e:	2a00      	cmp	r2, #0
    f280:	d100      	bne.n	f284 <__aeabi_f2iz+0x2c>
    f282:	0008      	movs	r0, r1
    f284:	4770      	bx	lr
    f286:	4b03      	ldr	r3, [pc, #12]	; (f294 <__aeabi_f2iz+0x3c>)
    f288:	18d0      	adds	r0, r2, r3
    f28a:	e7fb      	b.n	f284 <__aeabi_f2iz+0x2c>
    f28c:	3b96      	subs	r3, #150	; 0x96
    f28e:	4099      	lsls	r1, r3
    f290:	e7f4      	b.n	f27c <__aeabi_f2iz+0x24>
    f292:	46c0      	nop			; (mov r8, r8)
    f294:	7fffffff 	.word	0x7fffffff

0000f298 <__aeabi_ui2f>:
    f298:	b510      	push	{r4, lr}
    f29a:	1e04      	subs	r4, r0, #0
    f29c:	d027      	beq.n	f2ee <__aeabi_ui2f+0x56>
    f29e:	f001 fc87 	bl	10bb0 <__clzsi2>
    f2a2:	239e      	movs	r3, #158	; 0x9e
    f2a4:	1a1b      	subs	r3, r3, r0
    f2a6:	2b96      	cmp	r3, #150	; 0x96
    f2a8:	dc0a      	bgt.n	f2c0 <__aeabi_ui2f+0x28>
    f2aa:	2296      	movs	r2, #150	; 0x96
    f2ac:	1ad2      	subs	r2, r2, r3
    f2ae:	4094      	lsls	r4, r2
    f2b0:	0264      	lsls	r4, r4, #9
    f2b2:	0a64      	lsrs	r4, r4, #9
    f2b4:	b2db      	uxtb	r3, r3
    f2b6:	0264      	lsls	r4, r4, #9
    f2b8:	05db      	lsls	r3, r3, #23
    f2ba:	0a60      	lsrs	r0, r4, #9
    f2bc:	4318      	orrs	r0, r3
    f2be:	bd10      	pop	{r4, pc}
    f2c0:	2b99      	cmp	r3, #153	; 0x99
    f2c2:	dc17      	bgt.n	f2f4 <__aeabi_ui2f+0x5c>
    f2c4:	2299      	movs	r2, #153	; 0x99
    f2c6:	1ad2      	subs	r2, r2, r3
    f2c8:	2a00      	cmp	r2, #0
    f2ca:	dd27      	ble.n	f31c <__aeabi_ui2f+0x84>
    f2cc:	4094      	lsls	r4, r2
    f2ce:	0022      	movs	r2, r4
    f2d0:	4c13      	ldr	r4, [pc, #76]	; (f320 <__aeabi_ui2f+0x88>)
    f2d2:	4014      	ands	r4, r2
    f2d4:	0751      	lsls	r1, r2, #29
    f2d6:	d004      	beq.n	f2e2 <__aeabi_ui2f+0x4a>
    f2d8:	210f      	movs	r1, #15
    f2da:	400a      	ands	r2, r1
    f2dc:	2a04      	cmp	r2, #4
    f2de:	d000      	beq.n	f2e2 <__aeabi_ui2f+0x4a>
    f2e0:	3404      	adds	r4, #4
    f2e2:	0162      	lsls	r2, r4, #5
    f2e4:	d412      	bmi.n	f30c <__aeabi_ui2f+0x74>
    f2e6:	01a4      	lsls	r4, r4, #6
    f2e8:	0a64      	lsrs	r4, r4, #9
    f2ea:	b2db      	uxtb	r3, r3
    f2ec:	e7e3      	b.n	f2b6 <__aeabi_ui2f+0x1e>
    f2ee:	2300      	movs	r3, #0
    f2f0:	2400      	movs	r4, #0
    f2f2:	e7e0      	b.n	f2b6 <__aeabi_ui2f+0x1e>
    f2f4:	22b9      	movs	r2, #185	; 0xb9
    f2f6:	0021      	movs	r1, r4
    f2f8:	1ad2      	subs	r2, r2, r3
    f2fa:	4091      	lsls	r1, r2
    f2fc:	000a      	movs	r2, r1
    f2fe:	1e51      	subs	r1, r2, #1
    f300:	418a      	sbcs	r2, r1
    f302:	2105      	movs	r1, #5
    f304:	1a09      	subs	r1, r1, r0
    f306:	40cc      	lsrs	r4, r1
    f308:	4314      	orrs	r4, r2
    f30a:	e7db      	b.n	f2c4 <__aeabi_ui2f+0x2c>
    f30c:	4b04      	ldr	r3, [pc, #16]	; (f320 <__aeabi_ui2f+0x88>)
    f30e:	401c      	ands	r4, r3
    f310:	239f      	movs	r3, #159	; 0x9f
    f312:	01a4      	lsls	r4, r4, #6
    f314:	1a1b      	subs	r3, r3, r0
    f316:	0a64      	lsrs	r4, r4, #9
    f318:	b2db      	uxtb	r3, r3
    f31a:	e7cc      	b.n	f2b6 <__aeabi_ui2f+0x1e>
    f31c:	0022      	movs	r2, r4
    f31e:	e7d7      	b.n	f2d0 <__aeabi_ui2f+0x38>
    f320:	fbffffff 	.word	0xfbffffff

0000f324 <__aeabi_dadd>:
    f324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f326:	4645      	mov	r5, r8
    f328:	46de      	mov	lr, fp
    f32a:	4657      	mov	r7, sl
    f32c:	464e      	mov	r6, r9
    f32e:	030c      	lsls	r4, r1, #12
    f330:	b5e0      	push	{r5, r6, r7, lr}
    f332:	004e      	lsls	r6, r1, #1
    f334:	0fc9      	lsrs	r1, r1, #31
    f336:	4688      	mov	r8, r1
    f338:	000d      	movs	r5, r1
    f33a:	0a61      	lsrs	r1, r4, #9
    f33c:	0f44      	lsrs	r4, r0, #29
    f33e:	430c      	orrs	r4, r1
    f340:	00c7      	lsls	r7, r0, #3
    f342:	0319      	lsls	r1, r3, #12
    f344:	0058      	lsls	r0, r3, #1
    f346:	0fdb      	lsrs	r3, r3, #31
    f348:	469b      	mov	fp, r3
    f34a:	0a4b      	lsrs	r3, r1, #9
    f34c:	0f51      	lsrs	r1, r2, #29
    f34e:	430b      	orrs	r3, r1
    f350:	0d76      	lsrs	r6, r6, #21
    f352:	0d40      	lsrs	r0, r0, #21
    f354:	0019      	movs	r1, r3
    f356:	00d2      	lsls	r2, r2, #3
    f358:	45d8      	cmp	r8, fp
    f35a:	d100      	bne.n	f35e <__aeabi_dadd+0x3a>
    f35c:	e0ae      	b.n	f4bc <__aeabi_dadd+0x198>
    f35e:	1a35      	subs	r5, r6, r0
    f360:	2d00      	cmp	r5, #0
    f362:	dc00      	bgt.n	f366 <__aeabi_dadd+0x42>
    f364:	e0f6      	b.n	f554 <__aeabi_dadd+0x230>
    f366:	2800      	cmp	r0, #0
    f368:	d10f      	bne.n	f38a <__aeabi_dadd+0x66>
    f36a:	4313      	orrs	r3, r2
    f36c:	d100      	bne.n	f370 <__aeabi_dadd+0x4c>
    f36e:	e0db      	b.n	f528 <__aeabi_dadd+0x204>
    f370:	1e6b      	subs	r3, r5, #1
    f372:	2b00      	cmp	r3, #0
    f374:	d000      	beq.n	f378 <__aeabi_dadd+0x54>
    f376:	e137      	b.n	f5e8 <__aeabi_dadd+0x2c4>
    f378:	1aba      	subs	r2, r7, r2
    f37a:	4297      	cmp	r7, r2
    f37c:	41bf      	sbcs	r7, r7
    f37e:	1a64      	subs	r4, r4, r1
    f380:	427f      	negs	r7, r7
    f382:	1be4      	subs	r4, r4, r7
    f384:	2601      	movs	r6, #1
    f386:	0017      	movs	r7, r2
    f388:	e024      	b.n	f3d4 <__aeabi_dadd+0xb0>
    f38a:	4bc6      	ldr	r3, [pc, #792]	; (f6a4 <__aeabi_dadd+0x380>)
    f38c:	429e      	cmp	r6, r3
    f38e:	d04d      	beq.n	f42c <__aeabi_dadd+0x108>
    f390:	2380      	movs	r3, #128	; 0x80
    f392:	041b      	lsls	r3, r3, #16
    f394:	4319      	orrs	r1, r3
    f396:	2d38      	cmp	r5, #56	; 0x38
    f398:	dd00      	ble.n	f39c <__aeabi_dadd+0x78>
    f39a:	e107      	b.n	f5ac <__aeabi_dadd+0x288>
    f39c:	2d1f      	cmp	r5, #31
    f39e:	dd00      	ble.n	f3a2 <__aeabi_dadd+0x7e>
    f3a0:	e138      	b.n	f614 <__aeabi_dadd+0x2f0>
    f3a2:	2020      	movs	r0, #32
    f3a4:	1b43      	subs	r3, r0, r5
    f3a6:	469a      	mov	sl, r3
    f3a8:	000b      	movs	r3, r1
    f3aa:	4650      	mov	r0, sl
    f3ac:	4083      	lsls	r3, r0
    f3ae:	4699      	mov	r9, r3
    f3b0:	0013      	movs	r3, r2
    f3b2:	4648      	mov	r0, r9
    f3b4:	40eb      	lsrs	r3, r5
    f3b6:	4318      	orrs	r0, r3
    f3b8:	0003      	movs	r3, r0
    f3ba:	4650      	mov	r0, sl
    f3bc:	4082      	lsls	r2, r0
    f3be:	1e50      	subs	r0, r2, #1
    f3c0:	4182      	sbcs	r2, r0
    f3c2:	40e9      	lsrs	r1, r5
    f3c4:	431a      	orrs	r2, r3
    f3c6:	1aba      	subs	r2, r7, r2
    f3c8:	1a61      	subs	r1, r4, r1
    f3ca:	4297      	cmp	r7, r2
    f3cc:	41a4      	sbcs	r4, r4
    f3ce:	0017      	movs	r7, r2
    f3d0:	4264      	negs	r4, r4
    f3d2:	1b0c      	subs	r4, r1, r4
    f3d4:	0223      	lsls	r3, r4, #8
    f3d6:	d562      	bpl.n	f49e <__aeabi_dadd+0x17a>
    f3d8:	0264      	lsls	r4, r4, #9
    f3da:	0a65      	lsrs	r5, r4, #9
    f3dc:	2d00      	cmp	r5, #0
    f3de:	d100      	bne.n	f3e2 <__aeabi_dadd+0xbe>
    f3e0:	e0df      	b.n	f5a2 <__aeabi_dadd+0x27e>
    f3e2:	0028      	movs	r0, r5
    f3e4:	f001 fbe4 	bl	10bb0 <__clzsi2>
    f3e8:	0003      	movs	r3, r0
    f3ea:	3b08      	subs	r3, #8
    f3ec:	2b1f      	cmp	r3, #31
    f3ee:	dd00      	ble.n	f3f2 <__aeabi_dadd+0xce>
    f3f0:	e0d2      	b.n	f598 <__aeabi_dadd+0x274>
    f3f2:	2220      	movs	r2, #32
    f3f4:	003c      	movs	r4, r7
    f3f6:	1ad2      	subs	r2, r2, r3
    f3f8:	409d      	lsls	r5, r3
    f3fa:	40d4      	lsrs	r4, r2
    f3fc:	409f      	lsls	r7, r3
    f3fe:	4325      	orrs	r5, r4
    f400:	429e      	cmp	r6, r3
    f402:	dd00      	ble.n	f406 <__aeabi_dadd+0xe2>
    f404:	e0c4      	b.n	f590 <__aeabi_dadd+0x26c>
    f406:	1b9e      	subs	r6, r3, r6
    f408:	1c73      	adds	r3, r6, #1
    f40a:	2b1f      	cmp	r3, #31
    f40c:	dd00      	ble.n	f410 <__aeabi_dadd+0xec>
    f40e:	e0f1      	b.n	f5f4 <__aeabi_dadd+0x2d0>
    f410:	2220      	movs	r2, #32
    f412:	0038      	movs	r0, r7
    f414:	0029      	movs	r1, r5
    f416:	1ad2      	subs	r2, r2, r3
    f418:	40d8      	lsrs	r0, r3
    f41a:	4091      	lsls	r1, r2
    f41c:	4097      	lsls	r7, r2
    f41e:	002c      	movs	r4, r5
    f420:	4301      	orrs	r1, r0
    f422:	1e78      	subs	r0, r7, #1
    f424:	4187      	sbcs	r7, r0
    f426:	40dc      	lsrs	r4, r3
    f428:	2600      	movs	r6, #0
    f42a:	430f      	orrs	r7, r1
    f42c:	077b      	lsls	r3, r7, #29
    f42e:	d009      	beq.n	f444 <__aeabi_dadd+0x120>
    f430:	230f      	movs	r3, #15
    f432:	403b      	ands	r3, r7
    f434:	2b04      	cmp	r3, #4
    f436:	d005      	beq.n	f444 <__aeabi_dadd+0x120>
    f438:	1d3b      	adds	r3, r7, #4
    f43a:	42bb      	cmp	r3, r7
    f43c:	41bf      	sbcs	r7, r7
    f43e:	427f      	negs	r7, r7
    f440:	19e4      	adds	r4, r4, r7
    f442:	001f      	movs	r7, r3
    f444:	0223      	lsls	r3, r4, #8
    f446:	d52c      	bpl.n	f4a2 <__aeabi_dadd+0x17e>
    f448:	4b96      	ldr	r3, [pc, #600]	; (f6a4 <__aeabi_dadd+0x380>)
    f44a:	3601      	adds	r6, #1
    f44c:	429e      	cmp	r6, r3
    f44e:	d100      	bne.n	f452 <__aeabi_dadd+0x12e>
    f450:	e09a      	b.n	f588 <__aeabi_dadd+0x264>
    f452:	4645      	mov	r5, r8
    f454:	4b94      	ldr	r3, [pc, #592]	; (f6a8 <__aeabi_dadd+0x384>)
    f456:	08ff      	lsrs	r7, r7, #3
    f458:	401c      	ands	r4, r3
    f45a:	0760      	lsls	r0, r4, #29
    f45c:	0576      	lsls	r6, r6, #21
    f45e:	0264      	lsls	r4, r4, #9
    f460:	4307      	orrs	r7, r0
    f462:	0b24      	lsrs	r4, r4, #12
    f464:	0d76      	lsrs	r6, r6, #21
    f466:	2100      	movs	r1, #0
    f468:	0324      	lsls	r4, r4, #12
    f46a:	0b23      	lsrs	r3, r4, #12
    f46c:	0d0c      	lsrs	r4, r1, #20
    f46e:	4a8f      	ldr	r2, [pc, #572]	; (f6ac <__aeabi_dadd+0x388>)
    f470:	0524      	lsls	r4, r4, #20
    f472:	431c      	orrs	r4, r3
    f474:	4014      	ands	r4, r2
    f476:	0533      	lsls	r3, r6, #20
    f478:	4323      	orrs	r3, r4
    f47a:	005b      	lsls	r3, r3, #1
    f47c:	07ed      	lsls	r5, r5, #31
    f47e:	085b      	lsrs	r3, r3, #1
    f480:	432b      	orrs	r3, r5
    f482:	0038      	movs	r0, r7
    f484:	0019      	movs	r1, r3
    f486:	bc3c      	pop	{r2, r3, r4, r5}
    f488:	4690      	mov	r8, r2
    f48a:	4699      	mov	r9, r3
    f48c:	46a2      	mov	sl, r4
    f48e:	46ab      	mov	fp, r5
    f490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f492:	4664      	mov	r4, ip
    f494:	4304      	orrs	r4, r0
    f496:	d100      	bne.n	f49a <__aeabi_dadd+0x176>
    f498:	e211      	b.n	f8be <__aeabi_dadd+0x59a>
    f49a:	0004      	movs	r4, r0
    f49c:	4667      	mov	r7, ip
    f49e:	077b      	lsls	r3, r7, #29
    f4a0:	d1c6      	bne.n	f430 <__aeabi_dadd+0x10c>
    f4a2:	4645      	mov	r5, r8
    f4a4:	0760      	lsls	r0, r4, #29
    f4a6:	08ff      	lsrs	r7, r7, #3
    f4a8:	4307      	orrs	r7, r0
    f4aa:	08e4      	lsrs	r4, r4, #3
    f4ac:	4b7d      	ldr	r3, [pc, #500]	; (f6a4 <__aeabi_dadd+0x380>)
    f4ae:	429e      	cmp	r6, r3
    f4b0:	d030      	beq.n	f514 <__aeabi_dadd+0x1f0>
    f4b2:	0324      	lsls	r4, r4, #12
    f4b4:	0576      	lsls	r6, r6, #21
    f4b6:	0b24      	lsrs	r4, r4, #12
    f4b8:	0d76      	lsrs	r6, r6, #21
    f4ba:	e7d4      	b.n	f466 <__aeabi_dadd+0x142>
    f4bc:	1a33      	subs	r3, r6, r0
    f4be:	469a      	mov	sl, r3
    f4c0:	2b00      	cmp	r3, #0
    f4c2:	dd78      	ble.n	f5b6 <__aeabi_dadd+0x292>
    f4c4:	2800      	cmp	r0, #0
    f4c6:	d031      	beq.n	f52c <__aeabi_dadd+0x208>
    f4c8:	4876      	ldr	r0, [pc, #472]	; (f6a4 <__aeabi_dadd+0x380>)
    f4ca:	4286      	cmp	r6, r0
    f4cc:	d0ae      	beq.n	f42c <__aeabi_dadd+0x108>
    f4ce:	2080      	movs	r0, #128	; 0x80
    f4d0:	0400      	lsls	r0, r0, #16
    f4d2:	4301      	orrs	r1, r0
    f4d4:	4653      	mov	r3, sl
    f4d6:	2b38      	cmp	r3, #56	; 0x38
    f4d8:	dc00      	bgt.n	f4dc <__aeabi_dadd+0x1b8>
    f4da:	e0e9      	b.n	f6b0 <__aeabi_dadd+0x38c>
    f4dc:	430a      	orrs	r2, r1
    f4de:	1e51      	subs	r1, r2, #1
    f4e0:	418a      	sbcs	r2, r1
    f4e2:	2100      	movs	r1, #0
    f4e4:	19d2      	adds	r2, r2, r7
    f4e6:	42ba      	cmp	r2, r7
    f4e8:	41bf      	sbcs	r7, r7
    f4ea:	1909      	adds	r1, r1, r4
    f4ec:	427c      	negs	r4, r7
    f4ee:	0017      	movs	r7, r2
    f4f0:	190c      	adds	r4, r1, r4
    f4f2:	0223      	lsls	r3, r4, #8
    f4f4:	d5d3      	bpl.n	f49e <__aeabi_dadd+0x17a>
    f4f6:	4b6b      	ldr	r3, [pc, #428]	; (f6a4 <__aeabi_dadd+0x380>)
    f4f8:	3601      	adds	r6, #1
    f4fa:	429e      	cmp	r6, r3
    f4fc:	d100      	bne.n	f500 <__aeabi_dadd+0x1dc>
    f4fe:	e13a      	b.n	f776 <__aeabi_dadd+0x452>
    f500:	2001      	movs	r0, #1
    f502:	4b69      	ldr	r3, [pc, #420]	; (f6a8 <__aeabi_dadd+0x384>)
    f504:	401c      	ands	r4, r3
    f506:	087b      	lsrs	r3, r7, #1
    f508:	4007      	ands	r7, r0
    f50a:	431f      	orrs	r7, r3
    f50c:	07e0      	lsls	r0, r4, #31
    f50e:	4307      	orrs	r7, r0
    f510:	0864      	lsrs	r4, r4, #1
    f512:	e78b      	b.n	f42c <__aeabi_dadd+0x108>
    f514:	0023      	movs	r3, r4
    f516:	433b      	orrs	r3, r7
    f518:	d100      	bne.n	f51c <__aeabi_dadd+0x1f8>
    f51a:	e1cb      	b.n	f8b4 <__aeabi_dadd+0x590>
    f51c:	2280      	movs	r2, #128	; 0x80
    f51e:	0312      	lsls	r2, r2, #12
    f520:	4314      	orrs	r4, r2
    f522:	0324      	lsls	r4, r4, #12
    f524:	0b24      	lsrs	r4, r4, #12
    f526:	e79e      	b.n	f466 <__aeabi_dadd+0x142>
    f528:	002e      	movs	r6, r5
    f52a:	e77f      	b.n	f42c <__aeabi_dadd+0x108>
    f52c:	0008      	movs	r0, r1
    f52e:	4310      	orrs	r0, r2
    f530:	d100      	bne.n	f534 <__aeabi_dadd+0x210>
    f532:	e0b4      	b.n	f69e <__aeabi_dadd+0x37a>
    f534:	1e58      	subs	r0, r3, #1
    f536:	2800      	cmp	r0, #0
    f538:	d000      	beq.n	f53c <__aeabi_dadd+0x218>
    f53a:	e0de      	b.n	f6fa <__aeabi_dadd+0x3d6>
    f53c:	18ba      	adds	r2, r7, r2
    f53e:	42ba      	cmp	r2, r7
    f540:	419b      	sbcs	r3, r3
    f542:	1864      	adds	r4, r4, r1
    f544:	425b      	negs	r3, r3
    f546:	18e4      	adds	r4, r4, r3
    f548:	0017      	movs	r7, r2
    f54a:	2601      	movs	r6, #1
    f54c:	0223      	lsls	r3, r4, #8
    f54e:	d5a6      	bpl.n	f49e <__aeabi_dadd+0x17a>
    f550:	2602      	movs	r6, #2
    f552:	e7d5      	b.n	f500 <__aeabi_dadd+0x1dc>
    f554:	2d00      	cmp	r5, #0
    f556:	d16e      	bne.n	f636 <__aeabi_dadd+0x312>
    f558:	1c70      	adds	r0, r6, #1
    f55a:	0540      	lsls	r0, r0, #21
    f55c:	0d40      	lsrs	r0, r0, #21
    f55e:	2801      	cmp	r0, #1
    f560:	dc00      	bgt.n	f564 <__aeabi_dadd+0x240>
    f562:	e0f9      	b.n	f758 <__aeabi_dadd+0x434>
    f564:	1ab8      	subs	r0, r7, r2
    f566:	4684      	mov	ip, r0
    f568:	4287      	cmp	r7, r0
    f56a:	4180      	sbcs	r0, r0
    f56c:	1ae5      	subs	r5, r4, r3
    f56e:	4240      	negs	r0, r0
    f570:	1a2d      	subs	r5, r5, r0
    f572:	0228      	lsls	r0, r5, #8
    f574:	d400      	bmi.n	f578 <__aeabi_dadd+0x254>
    f576:	e089      	b.n	f68c <__aeabi_dadd+0x368>
    f578:	1bd7      	subs	r7, r2, r7
    f57a:	42ba      	cmp	r2, r7
    f57c:	4192      	sbcs	r2, r2
    f57e:	1b1c      	subs	r4, r3, r4
    f580:	4252      	negs	r2, r2
    f582:	1aa5      	subs	r5, r4, r2
    f584:	46d8      	mov	r8, fp
    f586:	e729      	b.n	f3dc <__aeabi_dadd+0xb8>
    f588:	4645      	mov	r5, r8
    f58a:	2400      	movs	r4, #0
    f58c:	2700      	movs	r7, #0
    f58e:	e76a      	b.n	f466 <__aeabi_dadd+0x142>
    f590:	4c45      	ldr	r4, [pc, #276]	; (f6a8 <__aeabi_dadd+0x384>)
    f592:	1af6      	subs	r6, r6, r3
    f594:	402c      	ands	r4, r5
    f596:	e749      	b.n	f42c <__aeabi_dadd+0x108>
    f598:	003d      	movs	r5, r7
    f59a:	3828      	subs	r0, #40	; 0x28
    f59c:	4085      	lsls	r5, r0
    f59e:	2700      	movs	r7, #0
    f5a0:	e72e      	b.n	f400 <__aeabi_dadd+0xdc>
    f5a2:	0038      	movs	r0, r7
    f5a4:	f001 fb04 	bl	10bb0 <__clzsi2>
    f5a8:	3020      	adds	r0, #32
    f5aa:	e71d      	b.n	f3e8 <__aeabi_dadd+0xc4>
    f5ac:	430a      	orrs	r2, r1
    f5ae:	1e51      	subs	r1, r2, #1
    f5b0:	418a      	sbcs	r2, r1
    f5b2:	2100      	movs	r1, #0
    f5b4:	e707      	b.n	f3c6 <__aeabi_dadd+0xa2>
    f5b6:	2b00      	cmp	r3, #0
    f5b8:	d000      	beq.n	f5bc <__aeabi_dadd+0x298>
    f5ba:	e0f3      	b.n	f7a4 <__aeabi_dadd+0x480>
    f5bc:	1c70      	adds	r0, r6, #1
    f5be:	0543      	lsls	r3, r0, #21
    f5c0:	0d5b      	lsrs	r3, r3, #21
    f5c2:	2b01      	cmp	r3, #1
    f5c4:	dc00      	bgt.n	f5c8 <__aeabi_dadd+0x2a4>
    f5c6:	e0ad      	b.n	f724 <__aeabi_dadd+0x400>
    f5c8:	4b36      	ldr	r3, [pc, #216]	; (f6a4 <__aeabi_dadd+0x380>)
    f5ca:	4298      	cmp	r0, r3
    f5cc:	d100      	bne.n	f5d0 <__aeabi_dadd+0x2ac>
    f5ce:	e0d1      	b.n	f774 <__aeabi_dadd+0x450>
    f5d0:	18ba      	adds	r2, r7, r2
    f5d2:	42ba      	cmp	r2, r7
    f5d4:	41bf      	sbcs	r7, r7
    f5d6:	1864      	adds	r4, r4, r1
    f5d8:	427f      	negs	r7, r7
    f5da:	19e4      	adds	r4, r4, r7
    f5dc:	07e7      	lsls	r7, r4, #31
    f5de:	0852      	lsrs	r2, r2, #1
    f5e0:	4317      	orrs	r7, r2
    f5e2:	0864      	lsrs	r4, r4, #1
    f5e4:	0006      	movs	r6, r0
    f5e6:	e721      	b.n	f42c <__aeabi_dadd+0x108>
    f5e8:	482e      	ldr	r0, [pc, #184]	; (f6a4 <__aeabi_dadd+0x380>)
    f5ea:	4285      	cmp	r5, r0
    f5ec:	d100      	bne.n	f5f0 <__aeabi_dadd+0x2cc>
    f5ee:	e093      	b.n	f718 <__aeabi_dadd+0x3f4>
    f5f0:	001d      	movs	r5, r3
    f5f2:	e6d0      	b.n	f396 <__aeabi_dadd+0x72>
    f5f4:	0029      	movs	r1, r5
    f5f6:	3e1f      	subs	r6, #31
    f5f8:	40f1      	lsrs	r1, r6
    f5fa:	2b20      	cmp	r3, #32
    f5fc:	d100      	bne.n	f600 <__aeabi_dadd+0x2dc>
    f5fe:	e08d      	b.n	f71c <__aeabi_dadd+0x3f8>
    f600:	2240      	movs	r2, #64	; 0x40
    f602:	1ad3      	subs	r3, r2, r3
    f604:	409d      	lsls	r5, r3
    f606:	432f      	orrs	r7, r5
    f608:	1e7d      	subs	r5, r7, #1
    f60a:	41af      	sbcs	r7, r5
    f60c:	2400      	movs	r4, #0
    f60e:	430f      	orrs	r7, r1
    f610:	2600      	movs	r6, #0
    f612:	e744      	b.n	f49e <__aeabi_dadd+0x17a>
    f614:	002b      	movs	r3, r5
    f616:	0008      	movs	r0, r1
    f618:	3b20      	subs	r3, #32
    f61a:	40d8      	lsrs	r0, r3
    f61c:	0003      	movs	r3, r0
    f61e:	2d20      	cmp	r5, #32
    f620:	d100      	bne.n	f624 <__aeabi_dadd+0x300>
    f622:	e07d      	b.n	f720 <__aeabi_dadd+0x3fc>
    f624:	2040      	movs	r0, #64	; 0x40
    f626:	1b45      	subs	r5, r0, r5
    f628:	40a9      	lsls	r1, r5
    f62a:	430a      	orrs	r2, r1
    f62c:	1e51      	subs	r1, r2, #1
    f62e:	418a      	sbcs	r2, r1
    f630:	2100      	movs	r1, #0
    f632:	431a      	orrs	r2, r3
    f634:	e6c7      	b.n	f3c6 <__aeabi_dadd+0xa2>
    f636:	2e00      	cmp	r6, #0
    f638:	d050      	beq.n	f6dc <__aeabi_dadd+0x3b8>
    f63a:	4e1a      	ldr	r6, [pc, #104]	; (f6a4 <__aeabi_dadd+0x380>)
    f63c:	42b0      	cmp	r0, r6
    f63e:	d057      	beq.n	f6f0 <__aeabi_dadd+0x3cc>
    f640:	2680      	movs	r6, #128	; 0x80
    f642:	426b      	negs	r3, r5
    f644:	4699      	mov	r9, r3
    f646:	0436      	lsls	r6, r6, #16
    f648:	4334      	orrs	r4, r6
    f64a:	464b      	mov	r3, r9
    f64c:	2b38      	cmp	r3, #56	; 0x38
    f64e:	dd00      	ble.n	f652 <__aeabi_dadd+0x32e>
    f650:	e0d6      	b.n	f800 <__aeabi_dadd+0x4dc>
    f652:	2b1f      	cmp	r3, #31
    f654:	dd00      	ble.n	f658 <__aeabi_dadd+0x334>
    f656:	e135      	b.n	f8c4 <__aeabi_dadd+0x5a0>
    f658:	2620      	movs	r6, #32
    f65a:	1af5      	subs	r5, r6, r3
    f65c:	0026      	movs	r6, r4
    f65e:	40ae      	lsls	r6, r5
    f660:	46b2      	mov	sl, r6
    f662:	003e      	movs	r6, r7
    f664:	40de      	lsrs	r6, r3
    f666:	46ac      	mov	ip, r5
    f668:	0035      	movs	r5, r6
    f66a:	4656      	mov	r6, sl
    f66c:	432e      	orrs	r6, r5
    f66e:	4665      	mov	r5, ip
    f670:	40af      	lsls	r7, r5
    f672:	1e7d      	subs	r5, r7, #1
    f674:	41af      	sbcs	r7, r5
    f676:	40dc      	lsrs	r4, r3
    f678:	4337      	orrs	r7, r6
    f67a:	1bd7      	subs	r7, r2, r7
    f67c:	42ba      	cmp	r2, r7
    f67e:	4192      	sbcs	r2, r2
    f680:	1b0c      	subs	r4, r1, r4
    f682:	4252      	negs	r2, r2
    f684:	1aa4      	subs	r4, r4, r2
    f686:	0006      	movs	r6, r0
    f688:	46d8      	mov	r8, fp
    f68a:	e6a3      	b.n	f3d4 <__aeabi_dadd+0xb0>
    f68c:	4664      	mov	r4, ip
    f68e:	4667      	mov	r7, ip
    f690:	432c      	orrs	r4, r5
    f692:	d000      	beq.n	f696 <__aeabi_dadd+0x372>
    f694:	e6a2      	b.n	f3dc <__aeabi_dadd+0xb8>
    f696:	2500      	movs	r5, #0
    f698:	2600      	movs	r6, #0
    f69a:	2700      	movs	r7, #0
    f69c:	e706      	b.n	f4ac <__aeabi_dadd+0x188>
    f69e:	001e      	movs	r6, r3
    f6a0:	e6c4      	b.n	f42c <__aeabi_dadd+0x108>
    f6a2:	46c0      	nop			; (mov r8, r8)
    f6a4:	000007ff 	.word	0x000007ff
    f6a8:	ff7fffff 	.word	0xff7fffff
    f6ac:	800fffff 	.word	0x800fffff
    f6b0:	2b1f      	cmp	r3, #31
    f6b2:	dc63      	bgt.n	f77c <__aeabi_dadd+0x458>
    f6b4:	2020      	movs	r0, #32
    f6b6:	1ac3      	subs	r3, r0, r3
    f6b8:	0008      	movs	r0, r1
    f6ba:	4098      	lsls	r0, r3
    f6bc:	469c      	mov	ip, r3
    f6be:	4683      	mov	fp, r0
    f6c0:	4653      	mov	r3, sl
    f6c2:	0010      	movs	r0, r2
    f6c4:	40d8      	lsrs	r0, r3
    f6c6:	0003      	movs	r3, r0
    f6c8:	4658      	mov	r0, fp
    f6ca:	4318      	orrs	r0, r3
    f6cc:	4663      	mov	r3, ip
    f6ce:	409a      	lsls	r2, r3
    f6d0:	1e53      	subs	r3, r2, #1
    f6d2:	419a      	sbcs	r2, r3
    f6d4:	4653      	mov	r3, sl
    f6d6:	4302      	orrs	r2, r0
    f6d8:	40d9      	lsrs	r1, r3
    f6da:	e703      	b.n	f4e4 <__aeabi_dadd+0x1c0>
    f6dc:	0026      	movs	r6, r4
    f6de:	433e      	orrs	r6, r7
    f6e0:	d006      	beq.n	f6f0 <__aeabi_dadd+0x3cc>
    f6e2:	43eb      	mvns	r3, r5
    f6e4:	4699      	mov	r9, r3
    f6e6:	2b00      	cmp	r3, #0
    f6e8:	d0c7      	beq.n	f67a <__aeabi_dadd+0x356>
    f6ea:	4e94      	ldr	r6, [pc, #592]	; (f93c <__aeabi_dadd+0x618>)
    f6ec:	42b0      	cmp	r0, r6
    f6ee:	d1ac      	bne.n	f64a <__aeabi_dadd+0x326>
    f6f0:	000c      	movs	r4, r1
    f6f2:	0017      	movs	r7, r2
    f6f4:	0006      	movs	r6, r0
    f6f6:	46d8      	mov	r8, fp
    f6f8:	e698      	b.n	f42c <__aeabi_dadd+0x108>
    f6fa:	4b90      	ldr	r3, [pc, #576]	; (f93c <__aeabi_dadd+0x618>)
    f6fc:	459a      	cmp	sl, r3
    f6fe:	d00b      	beq.n	f718 <__aeabi_dadd+0x3f4>
    f700:	4682      	mov	sl, r0
    f702:	e6e7      	b.n	f4d4 <__aeabi_dadd+0x1b0>
    f704:	2800      	cmp	r0, #0
    f706:	d000      	beq.n	f70a <__aeabi_dadd+0x3e6>
    f708:	e09e      	b.n	f848 <__aeabi_dadd+0x524>
    f70a:	0018      	movs	r0, r3
    f70c:	4310      	orrs	r0, r2
    f70e:	d100      	bne.n	f712 <__aeabi_dadd+0x3ee>
    f710:	e0e9      	b.n	f8e6 <__aeabi_dadd+0x5c2>
    f712:	001c      	movs	r4, r3
    f714:	0017      	movs	r7, r2
    f716:	46d8      	mov	r8, fp
    f718:	4e88      	ldr	r6, [pc, #544]	; (f93c <__aeabi_dadd+0x618>)
    f71a:	e687      	b.n	f42c <__aeabi_dadd+0x108>
    f71c:	2500      	movs	r5, #0
    f71e:	e772      	b.n	f606 <__aeabi_dadd+0x2e2>
    f720:	2100      	movs	r1, #0
    f722:	e782      	b.n	f62a <__aeabi_dadd+0x306>
    f724:	0023      	movs	r3, r4
    f726:	433b      	orrs	r3, r7
    f728:	2e00      	cmp	r6, #0
    f72a:	d000      	beq.n	f72e <__aeabi_dadd+0x40a>
    f72c:	e0ab      	b.n	f886 <__aeabi_dadd+0x562>
    f72e:	2b00      	cmp	r3, #0
    f730:	d100      	bne.n	f734 <__aeabi_dadd+0x410>
    f732:	e0e7      	b.n	f904 <__aeabi_dadd+0x5e0>
    f734:	000b      	movs	r3, r1
    f736:	4313      	orrs	r3, r2
    f738:	d100      	bne.n	f73c <__aeabi_dadd+0x418>
    f73a:	e677      	b.n	f42c <__aeabi_dadd+0x108>
    f73c:	18ba      	adds	r2, r7, r2
    f73e:	42ba      	cmp	r2, r7
    f740:	41bf      	sbcs	r7, r7
    f742:	1864      	adds	r4, r4, r1
    f744:	427f      	negs	r7, r7
    f746:	19e4      	adds	r4, r4, r7
    f748:	0223      	lsls	r3, r4, #8
    f74a:	d400      	bmi.n	f74e <__aeabi_dadd+0x42a>
    f74c:	e0f2      	b.n	f934 <__aeabi_dadd+0x610>
    f74e:	4b7c      	ldr	r3, [pc, #496]	; (f940 <__aeabi_dadd+0x61c>)
    f750:	0017      	movs	r7, r2
    f752:	401c      	ands	r4, r3
    f754:	0006      	movs	r6, r0
    f756:	e669      	b.n	f42c <__aeabi_dadd+0x108>
    f758:	0020      	movs	r0, r4
    f75a:	4338      	orrs	r0, r7
    f75c:	2e00      	cmp	r6, #0
    f75e:	d1d1      	bne.n	f704 <__aeabi_dadd+0x3e0>
    f760:	2800      	cmp	r0, #0
    f762:	d15b      	bne.n	f81c <__aeabi_dadd+0x4f8>
    f764:	001c      	movs	r4, r3
    f766:	4314      	orrs	r4, r2
    f768:	d100      	bne.n	f76c <__aeabi_dadd+0x448>
    f76a:	e0a8      	b.n	f8be <__aeabi_dadd+0x59a>
    f76c:	001c      	movs	r4, r3
    f76e:	0017      	movs	r7, r2
    f770:	46d8      	mov	r8, fp
    f772:	e65b      	b.n	f42c <__aeabi_dadd+0x108>
    f774:	0006      	movs	r6, r0
    f776:	2400      	movs	r4, #0
    f778:	2700      	movs	r7, #0
    f77a:	e697      	b.n	f4ac <__aeabi_dadd+0x188>
    f77c:	4650      	mov	r0, sl
    f77e:	000b      	movs	r3, r1
    f780:	3820      	subs	r0, #32
    f782:	40c3      	lsrs	r3, r0
    f784:	4699      	mov	r9, r3
    f786:	4653      	mov	r3, sl
    f788:	2b20      	cmp	r3, #32
    f78a:	d100      	bne.n	f78e <__aeabi_dadd+0x46a>
    f78c:	e095      	b.n	f8ba <__aeabi_dadd+0x596>
    f78e:	2340      	movs	r3, #64	; 0x40
    f790:	4650      	mov	r0, sl
    f792:	1a1b      	subs	r3, r3, r0
    f794:	4099      	lsls	r1, r3
    f796:	430a      	orrs	r2, r1
    f798:	1e51      	subs	r1, r2, #1
    f79a:	418a      	sbcs	r2, r1
    f79c:	464b      	mov	r3, r9
    f79e:	2100      	movs	r1, #0
    f7a0:	431a      	orrs	r2, r3
    f7a2:	e69f      	b.n	f4e4 <__aeabi_dadd+0x1c0>
    f7a4:	2e00      	cmp	r6, #0
    f7a6:	d130      	bne.n	f80a <__aeabi_dadd+0x4e6>
    f7a8:	0026      	movs	r6, r4
    f7aa:	433e      	orrs	r6, r7
    f7ac:	d067      	beq.n	f87e <__aeabi_dadd+0x55a>
    f7ae:	43db      	mvns	r3, r3
    f7b0:	469a      	mov	sl, r3
    f7b2:	2b00      	cmp	r3, #0
    f7b4:	d01c      	beq.n	f7f0 <__aeabi_dadd+0x4cc>
    f7b6:	4e61      	ldr	r6, [pc, #388]	; (f93c <__aeabi_dadd+0x618>)
    f7b8:	42b0      	cmp	r0, r6
    f7ba:	d060      	beq.n	f87e <__aeabi_dadd+0x55a>
    f7bc:	4653      	mov	r3, sl
    f7be:	2b38      	cmp	r3, #56	; 0x38
    f7c0:	dd00      	ble.n	f7c4 <__aeabi_dadd+0x4a0>
    f7c2:	e096      	b.n	f8f2 <__aeabi_dadd+0x5ce>
    f7c4:	2b1f      	cmp	r3, #31
    f7c6:	dd00      	ble.n	f7ca <__aeabi_dadd+0x4a6>
    f7c8:	e09f      	b.n	f90a <__aeabi_dadd+0x5e6>
    f7ca:	2620      	movs	r6, #32
    f7cc:	1af3      	subs	r3, r6, r3
    f7ce:	0026      	movs	r6, r4
    f7d0:	409e      	lsls	r6, r3
    f7d2:	469c      	mov	ip, r3
    f7d4:	46b3      	mov	fp, r6
    f7d6:	4653      	mov	r3, sl
    f7d8:	003e      	movs	r6, r7
    f7da:	40de      	lsrs	r6, r3
    f7dc:	0033      	movs	r3, r6
    f7de:	465e      	mov	r6, fp
    f7e0:	431e      	orrs	r6, r3
    f7e2:	4663      	mov	r3, ip
    f7e4:	409f      	lsls	r7, r3
    f7e6:	1e7b      	subs	r3, r7, #1
    f7e8:	419f      	sbcs	r7, r3
    f7ea:	4653      	mov	r3, sl
    f7ec:	40dc      	lsrs	r4, r3
    f7ee:	4337      	orrs	r7, r6
    f7f0:	18bf      	adds	r7, r7, r2
    f7f2:	4297      	cmp	r7, r2
    f7f4:	4192      	sbcs	r2, r2
    f7f6:	1864      	adds	r4, r4, r1
    f7f8:	4252      	negs	r2, r2
    f7fa:	18a4      	adds	r4, r4, r2
    f7fc:	0006      	movs	r6, r0
    f7fe:	e678      	b.n	f4f2 <__aeabi_dadd+0x1ce>
    f800:	4327      	orrs	r7, r4
    f802:	1e7c      	subs	r4, r7, #1
    f804:	41a7      	sbcs	r7, r4
    f806:	2400      	movs	r4, #0
    f808:	e737      	b.n	f67a <__aeabi_dadd+0x356>
    f80a:	4e4c      	ldr	r6, [pc, #304]	; (f93c <__aeabi_dadd+0x618>)
    f80c:	42b0      	cmp	r0, r6
    f80e:	d036      	beq.n	f87e <__aeabi_dadd+0x55a>
    f810:	2680      	movs	r6, #128	; 0x80
    f812:	425b      	negs	r3, r3
    f814:	0436      	lsls	r6, r6, #16
    f816:	469a      	mov	sl, r3
    f818:	4334      	orrs	r4, r6
    f81a:	e7cf      	b.n	f7bc <__aeabi_dadd+0x498>
    f81c:	0018      	movs	r0, r3
    f81e:	4310      	orrs	r0, r2
    f820:	d100      	bne.n	f824 <__aeabi_dadd+0x500>
    f822:	e603      	b.n	f42c <__aeabi_dadd+0x108>
    f824:	1ab8      	subs	r0, r7, r2
    f826:	4684      	mov	ip, r0
    f828:	4567      	cmp	r7, ip
    f82a:	41ad      	sbcs	r5, r5
    f82c:	1ae0      	subs	r0, r4, r3
    f82e:	426d      	negs	r5, r5
    f830:	1b40      	subs	r0, r0, r5
    f832:	0205      	lsls	r5, r0, #8
    f834:	d400      	bmi.n	f838 <__aeabi_dadd+0x514>
    f836:	e62c      	b.n	f492 <__aeabi_dadd+0x16e>
    f838:	1bd7      	subs	r7, r2, r7
    f83a:	42ba      	cmp	r2, r7
    f83c:	4192      	sbcs	r2, r2
    f83e:	1b1c      	subs	r4, r3, r4
    f840:	4252      	negs	r2, r2
    f842:	1aa4      	subs	r4, r4, r2
    f844:	46d8      	mov	r8, fp
    f846:	e5f1      	b.n	f42c <__aeabi_dadd+0x108>
    f848:	0018      	movs	r0, r3
    f84a:	4310      	orrs	r0, r2
    f84c:	d100      	bne.n	f850 <__aeabi_dadd+0x52c>
    f84e:	e763      	b.n	f718 <__aeabi_dadd+0x3f4>
    f850:	08f8      	lsrs	r0, r7, #3
    f852:	0767      	lsls	r7, r4, #29
    f854:	4307      	orrs	r7, r0
    f856:	2080      	movs	r0, #128	; 0x80
    f858:	08e4      	lsrs	r4, r4, #3
    f85a:	0300      	lsls	r0, r0, #12
    f85c:	4204      	tst	r4, r0
    f85e:	d008      	beq.n	f872 <__aeabi_dadd+0x54e>
    f860:	08dd      	lsrs	r5, r3, #3
    f862:	4205      	tst	r5, r0
    f864:	d105      	bne.n	f872 <__aeabi_dadd+0x54e>
    f866:	08d2      	lsrs	r2, r2, #3
    f868:	0759      	lsls	r1, r3, #29
    f86a:	4311      	orrs	r1, r2
    f86c:	000f      	movs	r7, r1
    f86e:	002c      	movs	r4, r5
    f870:	46d8      	mov	r8, fp
    f872:	0f7b      	lsrs	r3, r7, #29
    f874:	00e4      	lsls	r4, r4, #3
    f876:	431c      	orrs	r4, r3
    f878:	00ff      	lsls	r7, r7, #3
    f87a:	4e30      	ldr	r6, [pc, #192]	; (f93c <__aeabi_dadd+0x618>)
    f87c:	e5d6      	b.n	f42c <__aeabi_dadd+0x108>
    f87e:	000c      	movs	r4, r1
    f880:	0017      	movs	r7, r2
    f882:	0006      	movs	r6, r0
    f884:	e5d2      	b.n	f42c <__aeabi_dadd+0x108>
    f886:	2b00      	cmp	r3, #0
    f888:	d038      	beq.n	f8fc <__aeabi_dadd+0x5d8>
    f88a:	000b      	movs	r3, r1
    f88c:	4313      	orrs	r3, r2
    f88e:	d100      	bne.n	f892 <__aeabi_dadd+0x56e>
    f890:	e742      	b.n	f718 <__aeabi_dadd+0x3f4>
    f892:	08f8      	lsrs	r0, r7, #3
    f894:	0767      	lsls	r7, r4, #29
    f896:	4307      	orrs	r7, r0
    f898:	2080      	movs	r0, #128	; 0x80
    f89a:	08e4      	lsrs	r4, r4, #3
    f89c:	0300      	lsls	r0, r0, #12
    f89e:	4204      	tst	r4, r0
    f8a0:	d0e7      	beq.n	f872 <__aeabi_dadd+0x54e>
    f8a2:	08cb      	lsrs	r3, r1, #3
    f8a4:	4203      	tst	r3, r0
    f8a6:	d1e4      	bne.n	f872 <__aeabi_dadd+0x54e>
    f8a8:	08d2      	lsrs	r2, r2, #3
    f8aa:	0749      	lsls	r1, r1, #29
    f8ac:	4311      	orrs	r1, r2
    f8ae:	000f      	movs	r7, r1
    f8b0:	001c      	movs	r4, r3
    f8b2:	e7de      	b.n	f872 <__aeabi_dadd+0x54e>
    f8b4:	2700      	movs	r7, #0
    f8b6:	2400      	movs	r4, #0
    f8b8:	e5d5      	b.n	f466 <__aeabi_dadd+0x142>
    f8ba:	2100      	movs	r1, #0
    f8bc:	e76b      	b.n	f796 <__aeabi_dadd+0x472>
    f8be:	2500      	movs	r5, #0
    f8c0:	2700      	movs	r7, #0
    f8c2:	e5f3      	b.n	f4ac <__aeabi_dadd+0x188>
    f8c4:	464e      	mov	r6, r9
    f8c6:	0025      	movs	r5, r4
    f8c8:	3e20      	subs	r6, #32
    f8ca:	40f5      	lsrs	r5, r6
    f8cc:	464b      	mov	r3, r9
    f8ce:	002e      	movs	r6, r5
    f8d0:	2b20      	cmp	r3, #32
    f8d2:	d02d      	beq.n	f930 <__aeabi_dadd+0x60c>
    f8d4:	2540      	movs	r5, #64	; 0x40
    f8d6:	1aed      	subs	r5, r5, r3
    f8d8:	40ac      	lsls	r4, r5
    f8da:	4327      	orrs	r7, r4
    f8dc:	1e7c      	subs	r4, r7, #1
    f8de:	41a7      	sbcs	r7, r4
    f8e0:	2400      	movs	r4, #0
    f8e2:	4337      	orrs	r7, r6
    f8e4:	e6c9      	b.n	f67a <__aeabi_dadd+0x356>
    f8e6:	2480      	movs	r4, #128	; 0x80
    f8e8:	2500      	movs	r5, #0
    f8ea:	0324      	lsls	r4, r4, #12
    f8ec:	4e13      	ldr	r6, [pc, #76]	; (f93c <__aeabi_dadd+0x618>)
    f8ee:	2700      	movs	r7, #0
    f8f0:	e5dc      	b.n	f4ac <__aeabi_dadd+0x188>
    f8f2:	4327      	orrs	r7, r4
    f8f4:	1e7c      	subs	r4, r7, #1
    f8f6:	41a7      	sbcs	r7, r4
    f8f8:	2400      	movs	r4, #0
    f8fa:	e779      	b.n	f7f0 <__aeabi_dadd+0x4cc>
    f8fc:	000c      	movs	r4, r1
    f8fe:	0017      	movs	r7, r2
    f900:	4e0e      	ldr	r6, [pc, #56]	; (f93c <__aeabi_dadd+0x618>)
    f902:	e593      	b.n	f42c <__aeabi_dadd+0x108>
    f904:	000c      	movs	r4, r1
    f906:	0017      	movs	r7, r2
    f908:	e590      	b.n	f42c <__aeabi_dadd+0x108>
    f90a:	4656      	mov	r6, sl
    f90c:	0023      	movs	r3, r4
    f90e:	3e20      	subs	r6, #32
    f910:	40f3      	lsrs	r3, r6
    f912:	4699      	mov	r9, r3
    f914:	4653      	mov	r3, sl
    f916:	2b20      	cmp	r3, #32
    f918:	d00e      	beq.n	f938 <__aeabi_dadd+0x614>
    f91a:	2340      	movs	r3, #64	; 0x40
    f91c:	4656      	mov	r6, sl
    f91e:	1b9b      	subs	r3, r3, r6
    f920:	409c      	lsls	r4, r3
    f922:	4327      	orrs	r7, r4
    f924:	1e7c      	subs	r4, r7, #1
    f926:	41a7      	sbcs	r7, r4
    f928:	464b      	mov	r3, r9
    f92a:	2400      	movs	r4, #0
    f92c:	431f      	orrs	r7, r3
    f92e:	e75f      	b.n	f7f0 <__aeabi_dadd+0x4cc>
    f930:	2400      	movs	r4, #0
    f932:	e7d2      	b.n	f8da <__aeabi_dadd+0x5b6>
    f934:	0017      	movs	r7, r2
    f936:	e5b2      	b.n	f49e <__aeabi_dadd+0x17a>
    f938:	2400      	movs	r4, #0
    f93a:	e7f2      	b.n	f922 <__aeabi_dadd+0x5fe>
    f93c:	000007ff 	.word	0x000007ff
    f940:	ff7fffff 	.word	0xff7fffff

0000f944 <__aeabi_ddiv>:
    f944:	b5f0      	push	{r4, r5, r6, r7, lr}
    f946:	4657      	mov	r7, sl
    f948:	4645      	mov	r5, r8
    f94a:	46de      	mov	lr, fp
    f94c:	464e      	mov	r6, r9
    f94e:	b5e0      	push	{r5, r6, r7, lr}
    f950:	004c      	lsls	r4, r1, #1
    f952:	030e      	lsls	r6, r1, #12
    f954:	b087      	sub	sp, #28
    f956:	4683      	mov	fp, r0
    f958:	4692      	mov	sl, r2
    f95a:	001d      	movs	r5, r3
    f95c:	4680      	mov	r8, r0
    f95e:	0b36      	lsrs	r6, r6, #12
    f960:	0d64      	lsrs	r4, r4, #21
    f962:	0fcf      	lsrs	r7, r1, #31
    f964:	2c00      	cmp	r4, #0
    f966:	d04f      	beq.n	fa08 <__aeabi_ddiv+0xc4>
    f968:	4b6f      	ldr	r3, [pc, #444]	; (fb28 <__aeabi_ddiv+0x1e4>)
    f96a:	429c      	cmp	r4, r3
    f96c:	d035      	beq.n	f9da <__aeabi_ddiv+0x96>
    f96e:	2380      	movs	r3, #128	; 0x80
    f970:	0f42      	lsrs	r2, r0, #29
    f972:	041b      	lsls	r3, r3, #16
    f974:	00f6      	lsls	r6, r6, #3
    f976:	4313      	orrs	r3, r2
    f978:	4333      	orrs	r3, r6
    f97a:	4699      	mov	r9, r3
    f97c:	00c3      	lsls	r3, r0, #3
    f97e:	4698      	mov	r8, r3
    f980:	4b6a      	ldr	r3, [pc, #424]	; (fb2c <__aeabi_ddiv+0x1e8>)
    f982:	2600      	movs	r6, #0
    f984:	469c      	mov	ip, r3
    f986:	2300      	movs	r3, #0
    f988:	4464      	add	r4, ip
    f98a:	9303      	str	r3, [sp, #12]
    f98c:	032b      	lsls	r3, r5, #12
    f98e:	0b1b      	lsrs	r3, r3, #12
    f990:	469b      	mov	fp, r3
    f992:	006b      	lsls	r3, r5, #1
    f994:	0fed      	lsrs	r5, r5, #31
    f996:	4650      	mov	r0, sl
    f998:	0d5b      	lsrs	r3, r3, #21
    f99a:	9501      	str	r5, [sp, #4]
    f99c:	d05e      	beq.n	fa5c <__aeabi_ddiv+0x118>
    f99e:	4a62      	ldr	r2, [pc, #392]	; (fb28 <__aeabi_ddiv+0x1e4>)
    f9a0:	4293      	cmp	r3, r2
    f9a2:	d053      	beq.n	fa4c <__aeabi_ddiv+0x108>
    f9a4:	465a      	mov	r2, fp
    f9a6:	00d1      	lsls	r1, r2, #3
    f9a8:	2280      	movs	r2, #128	; 0x80
    f9aa:	0f40      	lsrs	r0, r0, #29
    f9ac:	0412      	lsls	r2, r2, #16
    f9ae:	4302      	orrs	r2, r0
    f9b0:	430a      	orrs	r2, r1
    f9b2:	4693      	mov	fp, r2
    f9b4:	4652      	mov	r2, sl
    f9b6:	00d1      	lsls	r1, r2, #3
    f9b8:	4a5c      	ldr	r2, [pc, #368]	; (fb2c <__aeabi_ddiv+0x1e8>)
    f9ba:	4694      	mov	ip, r2
    f9bc:	2200      	movs	r2, #0
    f9be:	4463      	add	r3, ip
    f9c0:	0038      	movs	r0, r7
    f9c2:	4068      	eors	r0, r5
    f9c4:	4684      	mov	ip, r0
    f9c6:	9002      	str	r0, [sp, #8]
    f9c8:	1ae4      	subs	r4, r4, r3
    f9ca:	4316      	orrs	r6, r2
    f9cc:	2e0f      	cmp	r6, #15
    f9ce:	d900      	bls.n	f9d2 <__aeabi_ddiv+0x8e>
    f9d0:	e0b4      	b.n	fb3c <__aeabi_ddiv+0x1f8>
    f9d2:	4b57      	ldr	r3, [pc, #348]	; (fb30 <__aeabi_ddiv+0x1ec>)
    f9d4:	00b6      	lsls	r6, r6, #2
    f9d6:	599b      	ldr	r3, [r3, r6]
    f9d8:	469f      	mov	pc, r3
    f9da:	0003      	movs	r3, r0
    f9dc:	4333      	orrs	r3, r6
    f9de:	4699      	mov	r9, r3
    f9e0:	d16c      	bne.n	fabc <__aeabi_ddiv+0x178>
    f9e2:	2300      	movs	r3, #0
    f9e4:	4698      	mov	r8, r3
    f9e6:	3302      	adds	r3, #2
    f9e8:	2608      	movs	r6, #8
    f9ea:	9303      	str	r3, [sp, #12]
    f9ec:	e7ce      	b.n	f98c <__aeabi_ddiv+0x48>
    f9ee:	46cb      	mov	fp, r9
    f9f0:	4641      	mov	r1, r8
    f9f2:	9a03      	ldr	r2, [sp, #12]
    f9f4:	9701      	str	r7, [sp, #4]
    f9f6:	2a02      	cmp	r2, #2
    f9f8:	d165      	bne.n	fac6 <__aeabi_ddiv+0x182>
    f9fa:	9b01      	ldr	r3, [sp, #4]
    f9fc:	4c4a      	ldr	r4, [pc, #296]	; (fb28 <__aeabi_ddiv+0x1e4>)
    f9fe:	469c      	mov	ip, r3
    fa00:	2300      	movs	r3, #0
    fa02:	2200      	movs	r2, #0
    fa04:	4698      	mov	r8, r3
    fa06:	e06b      	b.n	fae0 <__aeabi_ddiv+0x19c>
    fa08:	0003      	movs	r3, r0
    fa0a:	4333      	orrs	r3, r6
    fa0c:	4699      	mov	r9, r3
    fa0e:	d04e      	beq.n	faae <__aeabi_ddiv+0x16a>
    fa10:	2e00      	cmp	r6, #0
    fa12:	d100      	bne.n	fa16 <__aeabi_ddiv+0xd2>
    fa14:	e1bc      	b.n	fd90 <__aeabi_ddiv+0x44c>
    fa16:	0030      	movs	r0, r6
    fa18:	f001 f8ca 	bl	10bb0 <__clzsi2>
    fa1c:	0003      	movs	r3, r0
    fa1e:	3b0b      	subs	r3, #11
    fa20:	2b1c      	cmp	r3, #28
    fa22:	dd00      	ble.n	fa26 <__aeabi_ddiv+0xe2>
    fa24:	e1ac      	b.n	fd80 <__aeabi_ddiv+0x43c>
    fa26:	221d      	movs	r2, #29
    fa28:	1ad3      	subs	r3, r2, r3
    fa2a:	465a      	mov	r2, fp
    fa2c:	0001      	movs	r1, r0
    fa2e:	40da      	lsrs	r2, r3
    fa30:	3908      	subs	r1, #8
    fa32:	408e      	lsls	r6, r1
    fa34:	0013      	movs	r3, r2
    fa36:	4333      	orrs	r3, r6
    fa38:	4699      	mov	r9, r3
    fa3a:	465b      	mov	r3, fp
    fa3c:	408b      	lsls	r3, r1
    fa3e:	4698      	mov	r8, r3
    fa40:	2300      	movs	r3, #0
    fa42:	4c3c      	ldr	r4, [pc, #240]	; (fb34 <__aeabi_ddiv+0x1f0>)
    fa44:	2600      	movs	r6, #0
    fa46:	1a24      	subs	r4, r4, r0
    fa48:	9303      	str	r3, [sp, #12]
    fa4a:	e79f      	b.n	f98c <__aeabi_ddiv+0x48>
    fa4c:	4651      	mov	r1, sl
    fa4e:	465a      	mov	r2, fp
    fa50:	4311      	orrs	r1, r2
    fa52:	d129      	bne.n	faa8 <__aeabi_ddiv+0x164>
    fa54:	2200      	movs	r2, #0
    fa56:	4693      	mov	fp, r2
    fa58:	3202      	adds	r2, #2
    fa5a:	e7b1      	b.n	f9c0 <__aeabi_ddiv+0x7c>
    fa5c:	4659      	mov	r1, fp
    fa5e:	4301      	orrs	r1, r0
    fa60:	d01e      	beq.n	faa0 <__aeabi_ddiv+0x15c>
    fa62:	465b      	mov	r3, fp
    fa64:	2b00      	cmp	r3, #0
    fa66:	d100      	bne.n	fa6a <__aeabi_ddiv+0x126>
    fa68:	e19e      	b.n	fda8 <__aeabi_ddiv+0x464>
    fa6a:	4658      	mov	r0, fp
    fa6c:	f001 f8a0 	bl	10bb0 <__clzsi2>
    fa70:	0003      	movs	r3, r0
    fa72:	3b0b      	subs	r3, #11
    fa74:	2b1c      	cmp	r3, #28
    fa76:	dd00      	ble.n	fa7a <__aeabi_ddiv+0x136>
    fa78:	e18f      	b.n	fd9a <__aeabi_ddiv+0x456>
    fa7a:	0002      	movs	r2, r0
    fa7c:	4659      	mov	r1, fp
    fa7e:	3a08      	subs	r2, #8
    fa80:	4091      	lsls	r1, r2
    fa82:	468b      	mov	fp, r1
    fa84:	211d      	movs	r1, #29
    fa86:	1acb      	subs	r3, r1, r3
    fa88:	4651      	mov	r1, sl
    fa8a:	40d9      	lsrs	r1, r3
    fa8c:	000b      	movs	r3, r1
    fa8e:	4659      	mov	r1, fp
    fa90:	430b      	orrs	r3, r1
    fa92:	4651      	mov	r1, sl
    fa94:	469b      	mov	fp, r3
    fa96:	4091      	lsls	r1, r2
    fa98:	4b26      	ldr	r3, [pc, #152]	; (fb34 <__aeabi_ddiv+0x1f0>)
    fa9a:	2200      	movs	r2, #0
    fa9c:	1a1b      	subs	r3, r3, r0
    fa9e:	e78f      	b.n	f9c0 <__aeabi_ddiv+0x7c>
    faa0:	2300      	movs	r3, #0
    faa2:	2201      	movs	r2, #1
    faa4:	469b      	mov	fp, r3
    faa6:	e78b      	b.n	f9c0 <__aeabi_ddiv+0x7c>
    faa8:	4651      	mov	r1, sl
    faaa:	2203      	movs	r2, #3
    faac:	e788      	b.n	f9c0 <__aeabi_ddiv+0x7c>
    faae:	2300      	movs	r3, #0
    fab0:	4698      	mov	r8, r3
    fab2:	3301      	adds	r3, #1
    fab4:	2604      	movs	r6, #4
    fab6:	2400      	movs	r4, #0
    fab8:	9303      	str	r3, [sp, #12]
    faba:	e767      	b.n	f98c <__aeabi_ddiv+0x48>
    fabc:	2303      	movs	r3, #3
    fabe:	46b1      	mov	r9, r6
    fac0:	9303      	str	r3, [sp, #12]
    fac2:	260c      	movs	r6, #12
    fac4:	e762      	b.n	f98c <__aeabi_ddiv+0x48>
    fac6:	2a03      	cmp	r2, #3
    fac8:	d100      	bne.n	facc <__aeabi_ddiv+0x188>
    faca:	e25c      	b.n	ff86 <__aeabi_ddiv+0x642>
    facc:	9b01      	ldr	r3, [sp, #4]
    face:	2a01      	cmp	r2, #1
    fad0:	d000      	beq.n	fad4 <__aeabi_ddiv+0x190>
    fad2:	e1e4      	b.n	fe9e <__aeabi_ddiv+0x55a>
    fad4:	4013      	ands	r3, r2
    fad6:	469c      	mov	ip, r3
    fad8:	2300      	movs	r3, #0
    fada:	2400      	movs	r4, #0
    fadc:	2200      	movs	r2, #0
    fade:	4698      	mov	r8, r3
    fae0:	2100      	movs	r1, #0
    fae2:	0312      	lsls	r2, r2, #12
    fae4:	0b13      	lsrs	r3, r2, #12
    fae6:	0d0a      	lsrs	r2, r1, #20
    fae8:	0512      	lsls	r2, r2, #20
    faea:	431a      	orrs	r2, r3
    faec:	0523      	lsls	r3, r4, #20
    faee:	4c12      	ldr	r4, [pc, #72]	; (fb38 <__aeabi_ddiv+0x1f4>)
    faf0:	4640      	mov	r0, r8
    faf2:	4022      	ands	r2, r4
    faf4:	4313      	orrs	r3, r2
    faf6:	4662      	mov	r2, ip
    faf8:	005b      	lsls	r3, r3, #1
    fafa:	07d2      	lsls	r2, r2, #31
    fafc:	085b      	lsrs	r3, r3, #1
    fafe:	4313      	orrs	r3, r2
    fb00:	0019      	movs	r1, r3
    fb02:	b007      	add	sp, #28
    fb04:	bc3c      	pop	{r2, r3, r4, r5}
    fb06:	4690      	mov	r8, r2
    fb08:	4699      	mov	r9, r3
    fb0a:	46a2      	mov	sl, r4
    fb0c:	46ab      	mov	fp, r5
    fb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb10:	2300      	movs	r3, #0
    fb12:	2280      	movs	r2, #128	; 0x80
    fb14:	469c      	mov	ip, r3
    fb16:	0312      	lsls	r2, r2, #12
    fb18:	4698      	mov	r8, r3
    fb1a:	4c03      	ldr	r4, [pc, #12]	; (fb28 <__aeabi_ddiv+0x1e4>)
    fb1c:	e7e0      	b.n	fae0 <__aeabi_ddiv+0x19c>
    fb1e:	2300      	movs	r3, #0
    fb20:	4c01      	ldr	r4, [pc, #4]	; (fb28 <__aeabi_ddiv+0x1e4>)
    fb22:	2200      	movs	r2, #0
    fb24:	4698      	mov	r8, r3
    fb26:	e7db      	b.n	fae0 <__aeabi_ddiv+0x19c>
    fb28:	000007ff 	.word	0x000007ff
    fb2c:	fffffc01 	.word	0xfffffc01
    fb30:	00012b94 	.word	0x00012b94
    fb34:	fffffc0d 	.word	0xfffffc0d
    fb38:	800fffff 	.word	0x800fffff
    fb3c:	45d9      	cmp	r9, fp
    fb3e:	d900      	bls.n	fb42 <__aeabi_ddiv+0x1fe>
    fb40:	e139      	b.n	fdb6 <__aeabi_ddiv+0x472>
    fb42:	d100      	bne.n	fb46 <__aeabi_ddiv+0x202>
    fb44:	e134      	b.n	fdb0 <__aeabi_ddiv+0x46c>
    fb46:	2300      	movs	r3, #0
    fb48:	4646      	mov	r6, r8
    fb4a:	464d      	mov	r5, r9
    fb4c:	469a      	mov	sl, r3
    fb4e:	3c01      	subs	r4, #1
    fb50:	465b      	mov	r3, fp
    fb52:	0e0a      	lsrs	r2, r1, #24
    fb54:	021b      	lsls	r3, r3, #8
    fb56:	431a      	orrs	r2, r3
    fb58:	020b      	lsls	r3, r1, #8
    fb5a:	0c17      	lsrs	r7, r2, #16
    fb5c:	9303      	str	r3, [sp, #12]
    fb5e:	0413      	lsls	r3, r2, #16
    fb60:	0c1b      	lsrs	r3, r3, #16
    fb62:	0039      	movs	r1, r7
    fb64:	0028      	movs	r0, r5
    fb66:	4690      	mov	r8, r2
    fb68:	9301      	str	r3, [sp, #4]
    fb6a:	f7fe fc65 	bl	e438 <__udivsi3>
    fb6e:	0002      	movs	r2, r0
    fb70:	9b01      	ldr	r3, [sp, #4]
    fb72:	4683      	mov	fp, r0
    fb74:	435a      	muls	r2, r3
    fb76:	0028      	movs	r0, r5
    fb78:	0039      	movs	r1, r7
    fb7a:	4691      	mov	r9, r2
    fb7c:	f7fe fce2 	bl	e544 <__aeabi_uidivmod>
    fb80:	0c35      	lsrs	r5, r6, #16
    fb82:	0409      	lsls	r1, r1, #16
    fb84:	430d      	orrs	r5, r1
    fb86:	45a9      	cmp	r9, r5
    fb88:	d90d      	bls.n	fba6 <__aeabi_ddiv+0x262>
    fb8a:	465b      	mov	r3, fp
    fb8c:	4445      	add	r5, r8
    fb8e:	3b01      	subs	r3, #1
    fb90:	45a8      	cmp	r8, r5
    fb92:	d900      	bls.n	fb96 <__aeabi_ddiv+0x252>
    fb94:	e13a      	b.n	fe0c <__aeabi_ddiv+0x4c8>
    fb96:	45a9      	cmp	r9, r5
    fb98:	d800      	bhi.n	fb9c <__aeabi_ddiv+0x258>
    fb9a:	e137      	b.n	fe0c <__aeabi_ddiv+0x4c8>
    fb9c:	2302      	movs	r3, #2
    fb9e:	425b      	negs	r3, r3
    fba0:	469c      	mov	ip, r3
    fba2:	4445      	add	r5, r8
    fba4:	44e3      	add	fp, ip
    fba6:	464b      	mov	r3, r9
    fba8:	1aeb      	subs	r3, r5, r3
    fbaa:	0039      	movs	r1, r7
    fbac:	0018      	movs	r0, r3
    fbae:	9304      	str	r3, [sp, #16]
    fbb0:	f7fe fc42 	bl	e438 <__udivsi3>
    fbb4:	9b01      	ldr	r3, [sp, #4]
    fbb6:	0005      	movs	r5, r0
    fbb8:	4343      	muls	r3, r0
    fbba:	0039      	movs	r1, r7
    fbbc:	9804      	ldr	r0, [sp, #16]
    fbbe:	4699      	mov	r9, r3
    fbc0:	f7fe fcc0 	bl	e544 <__aeabi_uidivmod>
    fbc4:	0433      	lsls	r3, r6, #16
    fbc6:	0409      	lsls	r1, r1, #16
    fbc8:	0c1b      	lsrs	r3, r3, #16
    fbca:	430b      	orrs	r3, r1
    fbcc:	4599      	cmp	r9, r3
    fbce:	d909      	bls.n	fbe4 <__aeabi_ddiv+0x2a0>
    fbd0:	4443      	add	r3, r8
    fbd2:	1e6a      	subs	r2, r5, #1
    fbd4:	4598      	cmp	r8, r3
    fbd6:	d900      	bls.n	fbda <__aeabi_ddiv+0x296>
    fbd8:	e11a      	b.n	fe10 <__aeabi_ddiv+0x4cc>
    fbda:	4599      	cmp	r9, r3
    fbdc:	d800      	bhi.n	fbe0 <__aeabi_ddiv+0x29c>
    fbde:	e117      	b.n	fe10 <__aeabi_ddiv+0x4cc>
    fbe0:	3d02      	subs	r5, #2
    fbe2:	4443      	add	r3, r8
    fbe4:	464a      	mov	r2, r9
    fbe6:	1a9b      	subs	r3, r3, r2
    fbe8:	465a      	mov	r2, fp
    fbea:	0412      	lsls	r2, r2, #16
    fbec:	432a      	orrs	r2, r5
    fbee:	9903      	ldr	r1, [sp, #12]
    fbf0:	4693      	mov	fp, r2
    fbf2:	0c10      	lsrs	r0, r2, #16
    fbf4:	0c0a      	lsrs	r2, r1, #16
    fbf6:	4691      	mov	r9, r2
    fbf8:	0409      	lsls	r1, r1, #16
    fbfa:	465a      	mov	r2, fp
    fbfc:	0c09      	lsrs	r1, r1, #16
    fbfe:	464e      	mov	r6, r9
    fc00:	000d      	movs	r5, r1
    fc02:	0412      	lsls	r2, r2, #16
    fc04:	0c12      	lsrs	r2, r2, #16
    fc06:	4345      	muls	r5, r0
    fc08:	9105      	str	r1, [sp, #20]
    fc0a:	4351      	muls	r1, r2
    fc0c:	4372      	muls	r2, r6
    fc0e:	4370      	muls	r0, r6
    fc10:	1952      	adds	r2, r2, r5
    fc12:	0c0e      	lsrs	r6, r1, #16
    fc14:	18b2      	adds	r2, r6, r2
    fc16:	4295      	cmp	r5, r2
    fc18:	d903      	bls.n	fc22 <__aeabi_ddiv+0x2de>
    fc1a:	2580      	movs	r5, #128	; 0x80
    fc1c:	026d      	lsls	r5, r5, #9
    fc1e:	46ac      	mov	ip, r5
    fc20:	4460      	add	r0, ip
    fc22:	0c15      	lsrs	r5, r2, #16
    fc24:	0409      	lsls	r1, r1, #16
    fc26:	0412      	lsls	r2, r2, #16
    fc28:	0c09      	lsrs	r1, r1, #16
    fc2a:	1828      	adds	r0, r5, r0
    fc2c:	1852      	adds	r2, r2, r1
    fc2e:	4283      	cmp	r3, r0
    fc30:	d200      	bcs.n	fc34 <__aeabi_ddiv+0x2f0>
    fc32:	e0ce      	b.n	fdd2 <__aeabi_ddiv+0x48e>
    fc34:	d100      	bne.n	fc38 <__aeabi_ddiv+0x2f4>
    fc36:	e0c8      	b.n	fdca <__aeabi_ddiv+0x486>
    fc38:	1a1d      	subs	r5, r3, r0
    fc3a:	4653      	mov	r3, sl
    fc3c:	1a9e      	subs	r6, r3, r2
    fc3e:	45b2      	cmp	sl, r6
    fc40:	4192      	sbcs	r2, r2
    fc42:	4252      	negs	r2, r2
    fc44:	1aab      	subs	r3, r5, r2
    fc46:	469a      	mov	sl, r3
    fc48:	4598      	cmp	r8, r3
    fc4a:	d100      	bne.n	fc4e <__aeabi_ddiv+0x30a>
    fc4c:	e117      	b.n	fe7e <__aeabi_ddiv+0x53a>
    fc4e:	0039      	movs	r1, r7
    fc50:	0018      	movs	r0, r3
    fc52:	f7fe fbf1 	bl	e438 <__udivsi3>
    fc56:	9b01      	ldr	r3, [sp, #4]
    fc58:	0005      	movs	r5, r0
    fc5a:	4343      	muls	r3, r0
    fc5c:	0039      	movs	r1, r7
    fc5e:	4650      	mov	r0, sl
    fc60:	9304      	str	r3, [sp, #16]
    fc62:	f7fe fc6f 	bl	e544 <__aeabi_uidivmod>
    fc66:	9804      	ldr	r0, [sp, #16]
    fc68:	040b      	lsls	r3, r1, #16
    fc6a:	0c31      	lsrs	r1, r6, #16
    fc6c:	4319      	orrs	r1, r3
    fc6e:	4288      	cmp	r0, r1
    fc70:	d909      	bls.n	fc86 <__aeabi_ddiv+0x342>
    fc72:	4441      	add	r1, r8
    fc74:	1e6b      	subs	r3, r5, #1
    fc76:	4588      	cmp	r8, r1
    fc78:	d900      	bls.n	fc7c <__aeabi_ddiv+0x338>
    fc7a:	e107      	b.n	fe8c <__aeabi_ddiv+0x548>
    fc7c:	4288      	cmp	r0, r1
    fc7e:	d800      	bhi.n	fc82 <__aeabi_ddiv+0x33e>
    fc80:	e104      	b.n	fe8c <__aeabi_ddiv+0x548>
    fc82:	3d02      	subs	r5, #2
    fc84:	4441      	add	r1, r8
    fc86:	9b04      	ldr	r3, [sp, #16]
    fc88:	1acb      	subs	r3, r1, r3
    fc8a:	0018      	movs	r0, r3
    fc8c:	0039      	movs	r1, r7
    fc8e:	9304      	str	r3, [sp, #16]
    fc90:	f7fe fbd2 	bl	e438 <__udivsi3>
    fc94:	9b01      	ldr	r3, [sp, #4]
    fc96:	4682      	mov	sl, r0
    fc98:	4343      	muls	r3, r0
    fc9a:	0039      	movs	r1, r7
    fc9c:	9804      	ldr	r0, [sp, #16]
    fc9e:	9301      	str	r3, [sp, #4]
    fca0:	f7fe fc50 	bl	e544 <__aeabi_uidivmod>
    fca4:	9801      	ldr	r0, [sp, #4]
    fca6:	040b      	lsls	r3, r1, #16
    fca8:	0431      	lsls	r1, r6, #16
    fcaa:	0c09      	lsrs	r1, r1, #16
    fcac:	4319      	orrs	r1, r3
    fcae:	4288      	cmp	r0, r1
    fcb0:	d90d      	bls.n	fcce <__aeabi_ddiv+0x38a>
    fcb2:	4653      	mov	r3, sl
    fcb4:	4441      	add	r1, r8
    fcb6:	3b01      	subs	r3, #1
    fcb8:	4588      	cmp	r8, r1
    fcba:	d900      	bls.n	fcbe <__aeabi_ddiv+0x37a>
    fcbc:	e0e8      	b.n	fe90 <__aeabi_ddiv+0x54c>
    fcbe:	4288      	cmp	r0, r1
    fcc0:	d800      	bhi.n	fcc4 <__aeabi_ddiv+0x380>
    fcc2:	e0e5      	b.n	fe90 <__aeabi_ddiv+0x54c>
    fcc4:	2302      	movs	r3, #2
    fcc6:	425b      	negs	r3, r3
    fcc8:	469c      	mov	ip, r3
    fcca:	4441      	add	r1, r8
    fccc:	44e2      	add	sl, ip
    fcce:	9b01      	ldr	r3, [sp, #4]
    fcd0:	042d      	lsls	r5, r5, #16
    fcd2:	1ace      	subs	r6, r1, r3
    fcd4:	4651      	mov	r1, sl
    fcd6:	4329      	orrs	r1, r5
    fcd8:	9d05      	ldr	r5, [sp, #20]
    fcda:	464f      	mov	r7, r9
    fcdc:	002a      	movs	r2, r5
    fcde:	040b      	lsls	r3, r1, #16
    fce0:	0c08      	lsrs	r0, r1, #16
    fce2:	0c1b      	lsrs	r3, r3, #16
    fce4:	435a      	muls	r2, r3
    fce6:	4345      	muls	r5, r0
    fce8:	437b      	muls	r3, r7
    fcea:	4378      	muls	r0, r7
    fcec:	195b      	adds	r3, r3, r5
    fcee:	0c17      	lsrs	r7, r2, #16
    fcf0:	18fb      	adds	r3, r7, r3
    fcf2:	429d      	cmp	r5, r3
    fcf4:	d903      	bls.n	fcfe <__aeabi_ddiv+0x3ba>
    fcf6:	2580      	movs	r5, #128	; 0x80
    fcf8:	026d      	lsls	r5, r5, #9
    fcfa:	46ac      	mov	ip, r5
    fcfc:	4460      	add	r0, ip
    fcfe:	0c1d      	lsrs	r5, r3, #16
    fd00:	0412      	lsls	r2, r2, #16
    fd02:	041b      	lsls	r3, r3, #16
    fd04:	0c12      	lsrs	r2, r2, #16
    fd06:	1828      	adds	r0, r5, r0
    fd08:	189b      	adds	r3, r3, r2
    fd0a:	4286      	cmp	r6, r0
    fd0c:	d200      	bcs.n	fd10 <__aeabi_ddiv+0x3cc>
    fd0e:	e093      	b.n	fe38 <__aeabi_ddiv+0x4f4>
    fd10:	d100      	bne.n	fd14 <__aeabi_ddiv+0x3d0>
    fd12:	e08e      	b.n	fe32 <__aeabi_ddiv+0x4ee>
    fd14:	2301      	movs	r3, #1
    fd16:	4319      	orrs	r1, r3
    fd18:	4ba0      	ldr	r3, [pc, #640]	; (ff9c <__aeabi_ddiv+0x658>)
    fd1a:	18e3      	adds	r3, r4, r3
    fd1c:	2b00      	cmp	r3, #0
    fd1e:	dc00      	bgt.n	fd22 <__aeabi_ddiv+0x3de>
    fd20:	e099      	b.n	fe56 <__aeabi_ddiv+0x512>
    fd22:	074a      	lsls	r2, r1, #29
    fd24:	d000      	beq.n	fd28 <__aeabi_ddiv+0x3e4>
    fd26:	e09e      	b.n	fe66 <__aeabi_ddiv+0x522>
    fd28:	465a      	mov	r2, fp
    fd2a:	01d2      	lsls	r2, r2, #7
    fd2c:	d506      	bpl.n	fd3c <__aeabi_ddiv+0x3f8>
    fd2e:	465a      	mov	r2, fp
    fd30:	4b9b      	ldr	r3, [pc, #620]	; (ffa0 <__aeabi_ddiv+0x65c>)
    fd32:	401a      	ands	r2, r3
    fd34:	2380      	movs	r3, #128	; 0x80
    fd36:	4693      	mov	fp, r2
    fd38:	00db      	lsls	r3, r3, #3
    fd3a:	18e3      	adds	r3, r4, r3
    fd3c:	4a99      	ldr	r2, [pc, #612]	; (ffa4 <__aeabi_ddiv+0x660>)
    fd3e:	4293      	cmp	r3, r2
    fd40:	dd68      	ble.n	fe14 <__aeabi_ddiv+0x4d0>
    fd42:	2301      	movs	r3, #1
    fd44:	9a02      	ldr	r2, [sp, #8]
    fd46:	4c98      	ldr	r4, [pc, #608]	; (ffa8 <__aeabi_ddiv+0x664>)
    fd48:	401a      	ands	r2, r3
    fd4a:	2300      	movs	r3, #0
    fd4c:	4694      	mov	ip, r2
    fd4e:	4698      	mov	r8, r3
    fd50:	2200      	movs	r2, #0
    fd52:	e6c5      	b.n	fae0 <__aeabi_ddiv+0x19c>
    fd54:	2280      	movs	r2, #128	; 0x80
    fd56:	464b      	mov	r3, r9
    fd58:	0312      	lsls	r2, r2, #12
    fd5a:	4213      	tst	r3, r2
    fd5c:	d00a      	beq.n	fd74 <__aeabi_ddiv+0x430>
    fd5e:	465b      	mov	r3, fp
    fd60:	4213      	tst	r3, r2
    fd62:	d106      	bne.n	fd72 <__aeabi_ddiv+0x42e>
    fd64:	431a      	orrs	r2, r3
    fd66:	0312      	lsls	r2, r2, #12
    fd68:	0b12      	lsrs	r2, r2, #12
    fd6a:	46ac      	mov	ip, r5
    fd6c:	4688      	mov	r8, r1
    fd6e:	4c8e      	ldr	r4, [pc, #568]	; (ffa8 <__aeabi_ddiv+0x664>)
    fd70:	e6b6      	b.n	fae0 <__aeabi_ddiv+0x19c>
    fd72:	464b      	mov	r3, r9
    fd74:	431a      	orrs	r2, r3
    fd76:	0312      	lsls	r2, r2, #12
    fd78:	0b12      	lsrs	r2, r2, #12
    fd7a:	46bc      	mov	ip, r7
    fd7c:	4c8a      	ldr	r4, [pc, #552]	; (ffa8 <__aeabi_ddiv+0x664>)
    fd7e:	e6af      	b.n	fae0 <__aeabi_ddiv+0x19c>
    fd80:	0003      	movs	r3, r0
    fd82:	465a      	mov	r2, fp
    fd84:	3b28      	subs	r3, #40	; 0x28
    fd86:	409a      	lsls	r2, r3
    fd88:	2300      	movs	r3, #0
    fd8a:	4691      	mov	r9, r2
    fd8c:	4698      	mov	r8, r3
    fd8e:	e657      	b.n	fa40 <__aeabi_ddiv+0xfc>
    fd90:	4658      	mov	r0, fp
    fd92:	f000 ff0d 	bl	10bb0 <__clzsi2>
    fd96:	3020      	adds	r0, #32
    fd98:	e640      	b.n	fa1c <__aeabi_ddiv+0xd8>
    fd9a:	0003      	movs	r3, r0
    fd9c:	4652      	mov	r2, sl
    fd9e:	3b28      	subs	r3, #40	; 0x28
    fda0:	409a      	lsls	r2, r3
    fda2:	2100      	movs	r1, #0
    fda4:	4693      	mov	fp, r2
    fda6:	e677      	b.n	fa98 <__aeabi_ddiv+0x154>
    fda8:	f000 ff02 	bl	10bb0 <__clzsi2>
    fdac:	3020      	adds	r0, #32
    fdae:	e65f      	b.n	fa70 <__aeabi_ddiv+0x12c>
    fdb0:	4588      	cmp	r8, r1
    fdb2:	d200      	bcs.n	fdb6 <__aeabi_ddiv+0x472>
    fdb4:	e6c7      	b.n	fb46 <__aeabi_ddiv+0x202>
    fdb6:	464b      	mov	r3, r9
    fdb8:	07de      	lsls	r6, r3, #31
    fdba:	085d      	lsrs	r5, r3, #1
    fdbc:	4643      	mov	r3, r8
    fdbe:	085b      	lsrs	r3, r3, #1
    fdc0:	431e      	orrs	r6, r3
    fdc2:	4643      	mov	r3, r8
    fdc4:	07db      	lsls	r3, r3, #31
    fdc6:	469a      	mov	sl, r3
    fdc8:	e6c2      	b.n	fb50 <__aeabi_ddiv+0x20c>
    fdca:	2500      	movs	r5, #0
    fdcc:	4592      	cmp	sl, r2
    fdce:	d300      	bcc.n	fdd2 <__aeabi_ddiv+0x48e>
    fdd0:	e733      	b.n	fc3a <__aeabi_ddiv+0x2f6>
    fdd2:	9e03      	ldr	r6, [sp, #12]
    fdd4:	4659      	mov	r1, fp
    fdd6:	46b4      	mov	ip, r6
    fdd8:	44e2      	add	sl, ip
    fdda:	45b2      	cmp	sl, r6
    fddc:	41ad      	sbcs	r5, r5
    fdde:	426d      	negs	r5, r5
    fde0:	4445      	add	r5, r8
    fde2:	18eb      	adds	r3, r5, r3
    fde4:	3901      	subs	r1, #1
    fde6:	4598      	cmp	r8, r3
    fde8:	d207      	bcs.n	fdfa <__aeabi_ddiv+0x4b6>
    fdea:	4298      	cmp	r0, r3
    fdec:	d900      	bls.n	fdf0 <__aeabi_ddiv+0x4ac>
    fdee:	e07f      	b.n	fef0 <__aeabi_ddiv+0x5ac>
    fdf0:	d100      	bne.n	fdf4 <__aeabi_ddiv+0x4b0>
    fdf2:	e0bc      	b.n	ff6e <__aeabi_ddiv+0x62a>
    fdf4:	1a1d      	subs	r5, r3, r0
    fdf6:	468b      	mov	fp, r1
    fdf8:	e71f      	b.n	fc3a <__aeabi_ddiv+0x2f6>
    fdfa:	4598      	cmp	r8, r3
    fdfc:	d1fa      	bne.n	fdf4 <__aeabi_ddiv+0x4b0>
    fdfe:	9d03      	ldr	r5, [sp, #12]
    fe00:	4555      	cmp	r5, sl
    fe02:	d9f2      	bls.n	fdea <__aeabi_ddiv+0x4a6>
    fe04:	4643      	mov	r3, r8
    fe06:	468b      	mov	fp, r1
    fe08:	1a1d      	subs	r5, r3, r0
    fe0a:	e716      	b.n	fc3a <__aeabi_ddiv+0x2f6>
    fe0c:	469b      	mov	fp, r3
    fe0e:	e6ca      	b.n	fba6 <__aeabi_ddiv+0x262>
    fe10:	0015      	movs	r5, r2
    fe12:	e6e7      	b.n	fbe4 <__aeabi_ddiv+0x2a0>
    fe14:	465a      	mov	r2, fp
    fe16:	08c9      	lsrs	r1, r1, #3
    fe18:	0752      	lsls	r2, r2, #29
    fe1a:	430a      	orrs	r2, r1
    fe1c:	055b      	lsls	r3, r3, #21
    fe1e:	4690      	mov	r8, r2
    fe20:	0d5c      	lsrs	r4, r3, #21
    fe22:	465a      	mov	r2, fp
    fe24:	2301      	movs	r3, #1
    fe26:	9902      	ldr	r1, [sp, #8]
    fe28:	0252      	lsls	r2, r2, #9
    fe2a:	4019      	ands	r1, r3
    fe2c:	0b12      	lsrs	r2, r2, #12
    fe2e:	468c      	mov	ip, r1
    fe30:	e656      	b.n	fae0 <__aeabi_ddiv+0x19c>
    fe32:	2b00      	cmp	r3, #0
    fe34:	d100      	bne.n	fe38 <__aeabi_ddiv+0x4f4>
    fe36:	e76f      	b.n	fd18 <__aeabi_ddiv+0x3d4>
    fe38:	4446      	add	r6, r8
    fe3a:	1e4a      	subs	r2, r1, #1
    fe3c:	45b0      	cmp	r8, r6
    fe3e:	d929      	bls.n	fe94 <__aeabi_ddiv+0x550>
    fe40:	0011      	movs	r1, r2
    fe42:	4286      	cmp	r6, r0
    fe44:	d000      	beq.n	fe48 <__aeabi_ddiv+0x504>
    fe46:	e765      	b.n	fd14 <__aeabi_ddiv+0x3d0>
    fe48:	9a03      	ldr	r2, [sp, #12]
    fe4a:	4293      	cmp	r3, r2
    fe4c:	d000      	beq.n	fe50 <__aeabi_ddiv+0x50c>
    fe4e:	e761      	b.n	fd14 <__aeabi_ddiv+0x3d0>
    fe50:	e762      	b.n	fd18 <__aeabi_ddiv+0x3d4>
    fe52:	2101      	movs	r1, #1
    fe54:	4249      	negs	r1, r1
    fe56:	2001      	movs	r0, #1
    fe58:	1ac2      	subs	r2, r0, r3
    fe5a:	2a38      	cmp	r2, #56	; 0x38
    fe5c:	dd21      	ble.n	fea2 <__aeabi_ddiv+0x55e>
    fe5e:	9b02      	ldr	r3, [sp, #8]
    fe60:	4003      	ands	r3, r0
    fe62:	469c      	mov	ip, r3
    fe64:	e638      	b.n	fad8 <__aeabi_ddiv+0x194>
    fe66:	220f      	movs	r2, #15
    fe68:	400a      	ands	r2, r1
    fe6a:	2a04      	cmp	r2, #4
    fe6c:	d100      	bne.n	fe70 <__aeabi_ddiv+0x52c>
    fe6e:	e75b      	b.n	fd28 <__aeabi_ddiv+0x3e4>
    fe70:	000a      	movs	r2, r1
    fe72:	1d11      	adds	r1, r2, #4
    fe74:	4291      	cmp	r1, r2
    fe76:	4192      	sbcs	r2, r2
    fe78:	4252      	negs	r2, r2
    fe7a:	4493      	add	fp, r2
    fe7c:	e754      	b.n	fd28 <__aeabi_ddiv+0x3e4>
    fe7e:	4b47      	ldr	r3, [pc, #284]	; (ff9c <__aeabi_ddiv+0x658>)
    fe80:	18e3      	adds	r3, r4, r3
    fe82:	2b00      	cmp	r3, #0
    fe84:	dde5      	ble.n	fe52 <__aeabi_ddiv+0x50e>
    fe86:	2201      	movs	r2, #1
    fe88:	4252      	negs	r2, r2
    fe8a:	e7f2      	b.n	fe72 <__aeabi_ddiv+0x52e>
    fe8c:	001d      	movs	r5, r3
    fe8e:	e6fa      	b.n	fc86 <__aeabi_ddiv+0x342>
    fe90:	469a      	mov	sl, r3
    fe92:	e71c      	b.n	fcce <__aeabi_ddiv+0x38a>
    fe94:	42b0      	cmp	r0, r6
    fe96:	d839      	bhi.n	ff0c <__aeabi_ddiv+0x5c8>
    fe98:	d06e      	beq.n	ff78 <__aeabi_ddiv+0x634>
    fe9a:	0011      	movs	r1, r2
    fe9c:	e73a      	b.n	fd14 <__aeabi_ddiv+0x3d0>
    fe9e:	9302      	str	r3, [sp, #8]
    fea0:	e73a      	b.n	fd18 <__aeabi_ddiv+0x3d4>
    fea2:	2a1f      	cmp	r2, #31
    fea4:	dc3c      	bgt.n	ff20 <__aeabi_ddiv+0x5dc>
    fea6:	2320      	movs	r3, #32
    fea8:	1a9b      	subs	r3, r3, r2
    feaa:	000c      	movs	r4, r1
    feac:	4658      	mov	r0, fp
    feae:	4099      	lsls	r1, r3
    feb0:	4098      	lsls	r0, r3
    feb2:	1e4b      	subs	r3, r1, #1
    feb4:	4199      	sbcs	r1, r3
    feb6:	465b      	mov	r3, fp
    feb8:	40d4      	lsrs	r4, r2
    feba:	40d3      	lsrs	r3, r2
    febc:	4320      	orrs	r0, r4
    febe:	4308      	orrs	r0, r1
    fec0:	001a      	movs	r2, r3
    fec2:	0743      	lsls	r3, r0, #29
    fec4:	d009      	beq.n	feda <__aeabi_ddiv+0x596>
    fec6:	230f      	movs	r3, #15
    fec8:	4003      	ands	r3, r0
    feca:	2b04      	cmp	r3, #4
    fecc:	d005      	beq.n	feda <__aeabi_ddiv+0x596>
    fece:	0001      	movs	r1, r0
    fed0:	1d08      	adds	r0, r1, #4
    fed2:	4288      	cmp	r0, r1
    fed4:	419b      	sbcs	r3, r3
    fed6:	425b      	negs	r3, r3
    fed8:	18d2      	adds	r2, r2, r3
    feda:	0213      	lsls	r3, r2, #8
    fedc:	d53a      	bpl.n	ff54 <__aeabi_ddiv+0x610>
    fede:	2301      	movs	r3, #1
    fee0:	9a02      	ldr	r2, [sp, #8]
    fee2:	2401      	movs	r4, #1
    fee4:	401a      	ands	r2, r3
    fee6:	2300      	movs	r3, #0
    fee8:	4694      	mov	ip, r2
    feea:	4698      	mov	r8, r3
    feec:	2200      	movs	r2, #0
    feee:	e5f7      	b.n	fae0 <__aeabi_ddiv+0x19c>
    fef0:	2102      	movs	r1, #2
    fef2:	4249      	negs	r1, r1
    fef4:	468c      	mov	ip, r1
    fef6:	9d03      	ldr	r5, [sp, #12]
    fef8:	44e3      	add	fp, ip
    fefa:	46ac      	mov	ip, r5
    fefc:	44e2      	add	sl, ip
    fefe:	45aa      	cmp	sl, r5
    ff00:	41ad      	sbcs	r5, r5
    ff02:	426d      	negs	r5, r5
    ff04:	4445      	add	r5, r8
    ff06:	18ed      	adds	r5, r5, r3
    ff08:	1a2d      	subs	r5, r5, r0
    ff0a:	e696      	b.n	fc3a <__aeabi_ddiv+0x2f6>
    ff0c:	1e8a      	subs	r2, r1, #2
    ff0e:	9903      	ldr	r1, [sp, #12]
    ff10:	004d      	lsls	r5, r1, #1
    ff12:	428d      	cmp	r5, r1
    ff14:	4189      	sbcs	r1, r1
    ff16:	4249      	negs	r1, r1
    ff18:	4441      	add	r1, r8
    ff1a:	1876      	adds	r6, r6, r1
    ff1c:	9503      	str	r5, [sp, #12]
    ff1e:	e78f      	b.n	fe40 <__aeabi_ddiv+0x4fc>
    ff20:	201f      	movs	r0, #31
    ff22:	4240      	negs	r0, r0
    ff24:	1ac3      	subs	r3, r0, r3
    ff26:	4658      	mov	r0, fp
    ff28:	40d8      	lsrs	r0, r3
    ff2a:	0003      	movs	r3, r0
    ff2c:	2a20      	cmp	r2, #32
    ff2e:	d028      	beq.n	ff82 <__aeabi_ddiv+0x63e>
    ff30:	2040      	movs	r0, #64	; 0x40
    ff32:	465d      	mov	r5, fp
    ff34:	1a82      	subs	r2, r0, r2
    ff36:	4095      	lsls	r5, r2
    ff38:	4329      	orrs	r1, r5
    ff3a:	1e4a      	subs	r2, r1, #1
    ff3c:	4191      	sbcs	r1, r2
    ff3e:	4319      	orrs	r1, r3
    ff40:	2307      	movs	r3, #7
    ff42:	2200      	movs	r2, #0
    ff44:	400b      	ands	r3, r1
    ff46:	d009      	beq.n	ff5c <__aeabi_ddiv+0x618>
    ff48:	230f      	movs	r3, #15
    ff4a:	2200      	movs	r2, #0
    ff4c:	400b      	ands	r3, r1
    ff4e:	0008      	movs	r0, r1
    ff50:	2b04      	cmp	r3, #4
    ff52:	d1bd      	bne.n	fed0 <__aeabi_ddiv+0x58c>
    ff54:	0001      	movs	r1, r0
    ff56:	0753      	lsls	r3, r2, #29
    ff58:	0252      	lsls	r2, r2, #9
    ff5a:	0b12      	lsrs	r2, r2, #12
    ff5c:	08c9      	lsrs	r1, r1, #3
    ff5e:	4319      	orrs	r1, r3
    ff60:	2301      	movs	r3, #1
    ff62:	4688      	mov	r8, r1
    ff64:	9902      	ldr	r1, [sp, #8]
    ff66:	2400      	movs	r4, #0
    ff68:	4019      	ands	r1, r3
    ff6a:	468c      	mov	ip, r1
    ff6c:	e5b8      	b.n	fae0 <__aeabi_ddiv+0x19c>
    ff6e:	4552      	cmp	r2, sl
    ff70:	d8be      	bhi.n	fef0 <__aeabi_ddiv+0x5ac>
    ff72:	468b      	mov	fp, r1
    ff74:	2500      	movs	r5, #0
    ff76:	e660      	b.n	fc3a <__aeabi_ddiv+0x2f6>
    ff78:	9d03      	ldr	r5, [sp, #12]
    ff7a:	429d      	cmp	r5, r3
    ff7c:	d3c6      	bcc.n	ff0c <__aeabi_ddiv+0x5c8>
    ff7e:	0011      	movs	r1, r2
    ff80:	e762      	b.n	fe48 <__aeabi_ddiv+0x504>
    ff82:	2500      	movs	r5, #0
    ff84:	e7d8      	b.n	ff38 <__aeabi_ddiv+0x5f4>
    ff86:	2280      	movs	r2, #128	; 0x80
    ff88:	465b      	mov	r3, fp
    ff8a:	0312      	lsls	r2, r2, #12
    ff8c:	431a      	orrs	r2, r3
    ff8e:	9b01      	ldr	r3, [sp, #4]
    ff90:	0312      	lsls	r2, r2, #12
    ff92:	0b12      	lsrs	r2, r2, #12
    ff94:	469c      	mov	ip, r3
    ff96:	4688      	mov	r8, r1
    ff98:	4c03      	ldr	r4, [pc, #12]	; (ffa8 <__aeabi_ddiv+0x664>)
    ff9a:	e5a1      	b.n	fae0 <__aeabi_ddiv+0x19c>
    ff9c:	000003ff 	.word	0x000003ff
    ffa0:	feffffff 	.word	0xfeffffff
    ffa4:	000007fe 	.word	0x000007fe
    ffa8:	000007ff 	.word	0x000007ff

0000ffac <__aeabi_dmul>:
    ffac:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffae:	4657      	mov	r7, sl
    ffb0:	4645      	mov	r5, r8
    ffb2:	46de      	mov	lr, fp
    ffb4:	464e      	mov	r6, r9
    ffb6:	b5e0      	push	{r5, r6, r7, lr}
    ffb8:	030c      	lsls	r4, r1, #12
    ffba:	4698      	mov	r8, r3
    ffbc:	004e      	lsls	r6, r1, #1
    ffbe:	0b23      	lsrs	r3, r4, #12
    ffc0:	b087      	sub	sp, #28
    ffc2:	0007      	movs	r7, r0
    ffc4:	4692      	mov	sl, r2
    ffc6:	469b      	mov	fp, r3
    ffc8:	0d76      	lsrs	r6, r6, #21
    ffca:	0fcd      	lsrs	r5, r1, #31
    ffcc:	2e00      	cmp	r6, #0
    ffce:	d06b      	beq.n	100a8 <__aeabi_dmul+0xfc>
    ffd0:	4b6d      	ldr	r3, [pc, #436]	; (10188 <__aeabi_dmul+0x1dc>)
    ffd2:	429e      	cmp	r6, r3
    ffd4:	d035      	beq.n	10042 <__aeabi_dmul+0x96>
    ffd6:	2480      	movs	r4, #128	; 0x80
    ffd8:	465b      	mov	r3, fp
    ffda:	0f42      	lsrs	r2, r0, #29
    ffdc:	0424      	lsls	r4, r4, #16
    ffde:	00db      	lsls	r3, r3, #3
    ffe0:	4314      	orrs	r4, r2
    ffe2:	431c      	orrs	r4, r3
    ffe4:	00c3      	lsls	r3, r0, #3
    ffe6:	4699      	mov	r9, r3
    ffe8:	4b68      	ldr	r3, [pc, #416]	; (1018c <__aeabi_dmul+0x1e0>)
    ffea:	46a3      	mov	fp, r4
    ffec:	469c      	mov	ip, r3
    ffee:	2300      	movs	r3, #0
    fff0:	2700      	movs	r7, #0
    fff2:	4466      	add	r6, ip
    fff4:	9302      	str	r3, [sp, #8]
    fff6:	4643      	mov	r3, r8
    fff8:	031c      	lsls	r4, r3, #12
    fffa:	005a      	lsls	r2, r3, #1
    fffc:	0fdb      	lsrs	r3, r3, #31
    fffe:	4650      	mov	r0, sl
   10000:	0b24      	lsrs	r4, r4, #12
   10002:	0d52      	lsrs	r2, r2, #21
   10004:	4698      	mov	r8, r3
   10006:	d100      	bne.n	1000a <__aeabi_dmul+0x5e>
   10008:	e076      	b.n	100f8 <__aeabi_dmul+0x14c>
   1000a:	4b5f      	ldr	r3, [pc, #380]	; (10188 <__aeabi_dmul+0x1dc>)
   1000c:	429a      	cmp	r2, r3
   1000e:	d06d      	beq.n	100ec <__aeabi_dmul+0x140>
   10010:	2380      	movs	r3, #128	; 0x80
   10012:	0f41      	lsrs	r1, r0, #29
   10014:	041b      	lsls	r3, r3, #16
   10016:	430b      	orrs	r3, r1
   10018:	495c      	ldr	r1, [pc, #368]	; (1018c <__aeabi_dmul+0x1e0>)
   1001a:	00e4      	lsls	r4, r4, #3
   1001c:	468c      	mov	ip, r1
   1001e:	431c      	orrs	r4, r3
   10020:	00c3      	lsls	r3, r0, #3
   10022:	2000      	movs	r0, #0
   10024:	4462      	add	r2, ip
   10026:	4641      	mov	r1, r8
   10028:	18b6      	adds	r6, r6, r2
   1002a:	4069      	eors	r1, r5
   1002c:	1c72      	adds	r2, r6, #1
   1002e:	9101      	str	r1, [sp, #4]
   10030:	4694      	mov	ip, r2
   10032:	4307      	orrs	r7, r0
   10034:	2f0f      	cmp	r7, #15
   10036:	d900      	bls.n	1003a <__aeabi_dmul+0x8e>
   10038:	e0b0      	b.n	1019c <__aeabi_dmul+0x1f0>
   1003a:	4a55      	ldr	r2, [pc, #340]	; (10190 <__aeabi_dmul+0x1e4>)
   1003c:	00bf      	lsls	r7, r7, #2
   1003e:	59d2      	ldr	r2, [r2, r7]
   10040:	4697      	mov	pc, r2
   10042:	465b      	mov	r3, fp
   10044:	4303      	orrs	r3, r0
   10046:	4699      	mov	r9, r3
   10048:	d000      	beq.n	1004c <__aeabi_dmul+0xa0>
   1004a:	e087      	b.n	1015c <__aeabi_dmul+0x1b0>
   1004c:	2300      	movs	r3, #0
   1004e:	469b      	mov	fp, r3
   10050:	3302      	adds	r3, #2
   10052:	2708      	movs	r7, #8
   10054:	9302      	str	r3, [sp, #8]
   10056:	e7ce      	b.n	fff6 <__aeabi_dmul+0x4a>
   10058:	4642      	mov	r2, r8
   1005a:	9201      	str	r2, [sp, #4]
   1005c:	2802      	cmp	r0, #2
   1005e:	d067      	beq.n	10130 <__aeabi_dmul+0x184>
   10060:	2803      	cmp	r0, #3
   10062:	d100      	bne.n	10066 <__aeabi_dmul+0xba>
   10064:	e20e      	b.n	10484 <__aeabi_dmul+0x4d8>
   10066:	2801      	cmp	r0, #1
   10068:	d000      	beq.n	1006c <__aeabi_dmul+0xc0>
   1006a:	e162      	b.n	10332 <__aeabi_dmul+0x386>
   1006c:	2300      	movs	r3, #0
   1006e:	2400      	movs	r4, #0
   10070:	2200      	movs	r2, #0
   10072:	4699      	mov	r9, r3
   10074:	9901      	ldr	r1, [sp, #4]
   10076:	4001      	ands	r1, r0
   10078:	b2cd      	uxtb	r5, r1
   1007a:	2100      	movs	r1, #0
   1007c:	0312      	lsls	r2, r2, #12
   1007e:	0d0b      	lsrs	r3, r1, #20
   10080:	0b12      	lsrs	r2, r2, #12
   10082:	051b      	lsls	r3, r3, #20
   10084:	4313      	orrs	r3, r2
   10086:	4a43      	ldr	r2, [pc, #268]	; (10194 <__aeabi_dmul+0x1e8>)
   10088:	0524      	lsls	r4, r4, #20
   1008a:	4013      	ands	r3, r2
   1008c:	431c      	orrs	r4, r3
   1008e:	0064      	lsls	r4, r4, #1
   10090:	07ed      	lsls	r5, r5, #31
   10092:	0864      	lsrs	r4, r4, #1
   10094:	432c      	orrs	r4, r5
   10096:	4648      	mov	r0, r9
   10098:	0021      	movs	r1, r4
   1009a:	b007      	add	sp, #28
   1009c:	bc3c      	pop	{r2, r3, r4, r5}
   1009e:	4690      	mov	r8, r2
   100a0:	4699      	mov	r9, r3
   100a2:	46a2      	mov	sl, r4
   100a4:	46ab      	mov	fp, r5
   100a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100a8:	4303      	orrs	r3, r0
   100aa:	4699      	mov	r9, r3
   100ac:	d04f      	beq.n	1014e <__aeabi_dmul+0x1a2>
   100ae:	465b      	mov	r3, fp
   100b0:	2b00      	cmp	r3, #0
   100b2:	d100      	bne.n	100b6 <__aeabi_dmul+0x10a>
   100b4:	e189      	b.n	103ca <__aeabi_dmul+0x41e>
   100b6:	4658      	mov	r0, fp
   100b8:	f000 fd7a 	bl	10bb0 <__clzsi2>
   100bc:	0003      	movs	r3, r0
   100be:	3b0b      	subs	r3, #11
   100c0:	2b1c      	cmp	r3, #28
   100c2:	dd00      	ble.n	100c6 <__aeabi_dmul+0x11a>
   100c4:	e17a      	b.n	103bc <__aeabi_dmul+0x410>
   100c6:	221d      	movs	r2, #29
   100c8:	1ad3      	subs	r3, r2, r3
   100ca:	003a      	movs	r2, r7
   100cc:	0001      	movs	r1, r0
   100ce:	465c      	mov	r4, fp
   100d0:	40da      	lsrs	r2, r3
   100d2:	3908      	subs	r1, #8
   100d4:	408c      	lsls	r4, r1
   100d6:	0013      	movs	r3, r2
   100d8:	408f      	lsls	r7, r1
   100da:	4323      	orrs	r3, r4
   100dc:	469b      	mov	fp, r3
   100de:	46b9      	mov	r9, r7
   100e0:	2300      	movs	r3, #0
   100e2:	4e2d      	ldr	r6, [pc, #180]	; (10198 <__aeabi_dmul+0x1ec>)
   100e4:	2700      	movs	r7, #0
   100e6:	1a36      	subs	r6, r6, r0
   100e8:	9302      	str	r3, [sp, #8]
   100ea:	e784      	b.n	fff6 <__aeabi_dmul+0x4a>
   100ec:	4653      	mov	r3, sl
   100ee:	4323      	orrs	r3, r4
   100f0:	d12a      	bne.n	10148 <__aeabi_dmul+0x19c>
   100f2:	2400      	movs	r4, #0
   100f4:	2002      	movs	r0, #2
   100f6:	e796      	b.n	10026 <__aeabi_dmul+0x7a>
   100f8:	4653      	mov	r3, sl
   100fa:	4323      	orrs	r3, r4
   100fc:	d020      	beq.n	10140 <__aeabi_dmul+0x194>
   100fe:	2c00      	cmp	r4, #0
   10100:	d100      	bne.n	10104 <__aeabi_dmul+0x158>
   10102:	e157      	b.n	103b4 <__aeabi_dmul+0x408>
   10104:	0020      	movs	r0, r4
   10106:	f000 fd53 	bl	10bb0 <__clzsi2>
   1010a:	0003      	movs	r3, r0
   1010c:	3b0b      	subs	r3, #11
   1010e:	2b1c      	cmp	r3, #28
   10110:	dd00      	ble.n	10114 <__aeabi_dmul+0x168>
   10112:	e149      	b.n	103a8 <__aeabi_dmul+0x3fc>
   10114:	211d      	movs	r1, #29
   10116:	1acb      	subs	r3, r1, r3
   10118:	4651      	mov	r1, sl
   1011a:	0002      	movs	r2, r0
   1011c:	40d9      	lsrs	r1, r3
   1011e:	4653      	mov	r3, sl
   10120:	3a08      	subs	r2, #8
   10122:	4094      	lsls	r4, r2
   10124:	4093      	lsls	r3, r2
   10126:	430c      	orrs	r4, r1
   10128:	4a1b      	ldr	r2, [pc, #108]	; (10198 <__aeabi_dmul+0x1ec>)
   1012a:	1a12      	subs	r2, r2, r0
   1012c:	2000      	movs	r0, #0
   1012e:	e77a      	b.n	10026 <__aeabi_dmul+0x7a>
   10130:	2501      	movs	r5, #1
   10132:	9b01      	ldr	r3, [sp, #4]
   10134:	4c14      	ldr	r4, [pc, #80]	; (10188 <__aeabi_dmul+0x1dc>)
   10136:	401d      	ands	r5, r3
   10138:	2300      	movs	r3, #0
   1013a:	2200      	movs	r2, #0
   1013c:	4699      	mov	r9, r3
   1013e:	e79c      	b.n	1007a <__aeabi_dmul+0xce>
   10140:	2400      	movs	r4, #0
   10142:	2200      	movs	r2, #0
   10144:	2001      	movs	r0, #1
   10146:	e76e      	b.n	10026 <__aeabi_dmul+0x7a>
   10148:	4653      	mov	r3, sl
   1014a:	2003      	movs	r0, #3
   1014c:	e76b      	b.n	10026 <__aeabi_dmul+0x7a>
   1014e:	2300      	movs	r3, #0
   10150:	469b      	mov	fp, r3
   10152:	3301      	adds	r3, #1
   10154:	2704      	movs	r7, #4
   10156:	2600      	movs	r6, #0
   10158:	9302      	str	r3, [sp, #8]
   1015a:	e74c      	b.n	fff6 <__aeabi_dmul+0x4a>
   1015c:	2303      	movs	r3, #3
   1015e:	4681      	mov	r9, r0
   10160:	270c      	movs	r7, #12
   10162:	9302      	str	r3, [sp, #8]
   10164:	e747      	b.n	fff6 <__aeabi_dmul+0x4a>
   10166:	2280      	movs	r2, #128	; 0x80
   10168:	2300      	movs	r3, #0
   1016a:	2500      	movs	r5, #0
   1016c:	0312      	lsls	r2, r2, #12
   1016e:	4699      	mov	r9, r3
   10170:	4c05      	ldr	r4, [pc, #20]	; (10188 <__aeabi_dmul+0x1dc>)
   10172:	e782      	b.n	1007a <__aeabi_dmul+0xce>
   10174:	465c      	mov	r4, fp
   10176:	464b      	mov	r3, r9
   10178:	9802      	ldr	r0, [sp, #8]
   1017a:	e76f      	b.n	1005c <__aeabi_dmul+0xb0>
   1017c:	465c      	mov	r4, fp
   1017e:	464b      	mov	r3, r9
   10180:	9501      	str	r5, [sp, #4]
   10182:	9802      	ldr	r0, [sp, #8]
   10184:	e76a      	b.n	1005c <__aeabi_dmul+0xb0>
   10186:	46c0      	nop			; (mov r8, r8)
   10188:	000007ff 	.word	0x000007ff
   1018c:	fffffc01 	.word	0xfffffc01
   10190:	00012bd4 	.word	0x00012bd4
   10194:	800fffff 	.word	0x800fffff
   10198:	fffffc0d 	.word	0xfffffc0d
   1019c:	464a      	mov	r2, r9
   1019e:	4649      	mov	r1, r9
   101a0:	0c17      	lsrs	r7, r2, #16
   101a2:	0c1a      	lsrs	r2, r3, #16
   101a4:	041b      	lsls	r3, r3, #16
   101a6:	0c1b      	lsrs	r3, r3, #16
   101a8:	0408      	lsls	r0, r1, #16
   101aa:	0019      	movs	r1, r3
   101ac:	0c00      	lsrs	r0, r0, #16
   101ae:	4341      	muls	r1, r0
   101b0:	0015      	movs	r5, r2
   101b2:	4688      	mov	r8, r1
   101b4:	0019      	movs	r1, r3
   101b6:	437d      	muls	r5, r7
   101b8:	4379      	muls	r1, r7
   101ba:	9503      	str	r5, [sp, #12]
   101bc:	4689      	mov	r9, r1
   101be:	0029      	movs	r1, r5
   101c0:	0015      	movs	r5, r2
   101c2:	4345      	muls	r5, r0
   101c4:	444d      	add	r5, r9
   101c6:	9502      	str	r5, [sp, #8]
   101c8:	4645      	mov	r5, r8
   101ca:	0c2d      	lsrs	r5, r5, #16
   101cc:	46aa      	mov	sl, r5
   101ce:	9d02      	ldr	r5, [sp, #8]
   101d0:	4455      	add	r5, sl
   101d2:	45a9      	cmp	r9, r5
   101d4:	d906      	bls.n	101e4 <__aeabi_dmul+0x238>
   101d6:	468a      	mov	sl, r1
   101d8:	2180      	movs	r1, #128	; 0x80
   101da:	0249      	lsls	r1, r1, #9
   101dc:	4689      	mov	r9, r1
   101de:	44ca      	add	sl, r9
   101e0:	4651      	mov	r1, sl
   101e2:	9103      	str	r1, [sp, #12]
   101e4:	0c29      	lsrs	r1, r5, #16
   101e6:	9104      	str	r1, [sp, #16]
   101e8:	4641      	mov	r1, r8
   101ea:	0409      	lsls	r1, r1, #16
   101ec:	042d      	lsls	r5, r5, #16
   101ee:	0c09      	lsrs	r1, r1, #16
   101f0:	4688      	mov	r8, r1
   101f2:	0029      	movs	r1, r5
   101f4:	0c25      	lsrs	r5, r4, #16
   101f6:	0424      	lsls	r4, r4, #16
   101f8:	4441      	add	r1, r8
   101fa:	0c24      	lsrs	r4, r4, #16
   101fc:	9105      	str	r1, [sp, #20]
   101fe:	0021      	movs	r1, r4
   10200:	4341      	muls	r1, r0
   10202:	4688      	mov	r8, r1
   10204:	0021      	movs	r1, r4
   10206:	4379      	muls	r1, r7
   10208:	468a      	mov	sl, r1
   1020a:	4368      	muls	r0, r5
   1020c:	4641      	mov	r1, r8
   1020e:	4450      	add	r0, sl
   10210:	4681      	mov	r9, r0
   10212:	0c08      	lsrs	r0, r1, #16
   10214:	4448      	add	r0, r9
   10216:	436f      	muls	r7, r5
   10218:	4582      	cmp	sl, r0
   1021a:	d903      	bls.n	10224 <__aeabi_dmul+0x278>
   1021c:	2180      	movs	r1, #128	; 0x80
   1021e:	0249      	lsls	r1, r1, #9
   10220:	4689      	mov	r9, r1
   10222:	444f      	add	r7, r9
   10224:	0c01      	lsrs	r1, r0, #16
   10226:	4689      	mov	r9, r1
   10228:	0039      	movs	r1, r7
   1022a:	4449      	add	r1, r9
   1022c:	9102      	str	r1, [sp, #8]
   1022e:	4641      	mov	r1, r8
   10230:	040f      	lsls	r7, r1, #16
   10232:	9904      	ldr	r1, [sp, #16]
   10234:	0c3f      	lsrs	r7, r7, #16
   10236:	4688      	mov	r8, r1
   10238:	0400      	lsls	r0, r0, #16
   1023a:	19c0      	adds	r0, r0, r7
   1023c:	4480      	add	r8, r0
   1023e:	4641      	mov	r1, r8
   10240:	9104      	str	r1, [sp, #16]
   10242:	4659      	mov	r1, fp
   10244:	0c0f      	lsrs	r7, r1, #16
   10246:	0409      	lsls	r1, r1, #16
   10248:	0c09      	lsrs	r1, r1, #16
   1024a:	4688      	mov	r8, r1
   1024c:	4359      	muls	r1, r3
   1024e:	468a      	mov	sl, r1
   10250:	0039      	movs	r1, r7
   10252:	4351      	muls	r1, r2
   10254:	4689      	mov	r9, r1
   10256:	4641      	mov	r1, r8
   10258:	434a      	muls	r2, r1
   1025a:	4651      	mov	r1, sl
   1025c:	0c09      	lsrs	r1, r1, #16
   1025e:	468b      	mov	fp, r1
   10260:	437b      	muls	r3, r7
   10262:	18d2      	adds	r2, r2, r3
   10264:	445a      	add	r2, fp
   10266:	4293      	cmp	r3, r2
   10268:	d903      	bls.n	10272 <__aeabi_dmul+0x2c6>
   1026a:	2380      	movs	r3, #128	; 0x80
   1026c:	025b      	lsls	r3, r3, #9
   1026e:	469b      	mov	fp, r3
   10270:	44d9      	add	r9, fp
   10272:	4651      	mov	r1, sl
   10274:	0409      	lsls	r1, r1, #16
   10276:	0c09      	lsrs	r1, r1, #16
   10278:	468a      	mov	sl, r1
   1027a:	4641      	mov	r1, r8
   1027c:	4361      	muls	r1, r4
   1027e:	437c      	muls	r4, r7
   10280:	0c13      	lsrs	r3, r2, #16
   10282:	0412      	lsls	r2, r2, #16
   10284:	444b      	add	r3, r9
   10286:	4452      	add	r2, sl
   10288:	46a1      	mov	r9, r4
   1028a:	468a      	mov	sl, r1
   1028c:	003c      	movs	r4, r7
   1028e:	4641      	mov	r1, r8
   10290:	436c      	muls	r4, r5
   10292:	434d      	muls	r5, r1
   10294:	4651      	mov	r1, sl
   10296:	444d      	add	r5, r9
   10298:	0c0f      	lsrs	r7, r1, #16
   1029a:	197d      	adds	r5, r7, r5
   1029c:	45a9      	cmp	r9, r5
   1029e:	d903      	bls.n	102a8 <__aeabi_dmul+0x2fc>
   102a0:	2180      	movs	r1, #128	; 0x80
   102a2:	0249      	lsls	r1, r1, #9
   102a4:	4688      	mov	r8, r1
   102a6:	4444      	add	r4, r8
   102a8:	9f04      	ldr	r7, [sp, #16]
   102aa:	9903      	ldr	r1, [sp, #12]
   102ac:	46b8      	mov	r8, r7
   102ae:	4441      	add	r1, r8
   102b0:	468b      	mov	fp, r1
   102b2:	4583      	cmp	fp, r0
   102b4:	4180      	sbcs	r0, r0
   102b6:	4241      	negs	r1, r0
   102b8:	4688      	mov	r8, r1
   102ba:	4651      	mov	r1, sl
   102bc:	0408      	lsls	r0, r1, #16
   102be:	042f      	lsls	r7, r5, #16
   102c0:	0c00      	lsrs	r0, r0, #16
   102c2:	183f      	adds	r7, r7, r0
   102c4:	4658      	mov	r0, fp
   102c6:	9902      	ldr	r1, [sp, #8]
   102c8:	1810      	adds	r0, r2, r0
   102ca:	4689      	mov	r9, r1
   102cc:	4290      	cmp	r0, r2
   102ce:	4192      	sbcs	r2, r2
   102d0:	444f      	add	r7, r9
   102d2:	46ba      	mov	sl, r7
   102d4:	4252      	negs	r2, r2
   102d6:	4699      	mov	r9, r3
   102d8:	4693      	mov	fp, r2
   102da:	44c2      	add	sl, r8
   102dc:	44d1      	add	r9, sl
   102de:	44cb      	add	fp, r9
   102e0:	428f      	cmp	r7, r1
   102e2:	41bf      	sbcs	r7, r7
   102e4:	45c2      	cmp	sl, r8
   102e6:	4189      	sbcs	r1, r1
   102e8:	4599      	cmp	r9, r3
   102ea:	419b      	sbcs	r3, r3
   102ec:	4593      	cmp	fp, r2
   102ee:	4192      	sbcs	r2, r2
   102f0:	427f      	negs	r7, r7
   102f2:	4249      	negs	r1, r1
   102f4:	0c2d      	lsrs	r5, r5, #16
   102f6:	4252      	negs	r2, r2
   102f8:	430f      	orrs	r7, r1
   102fa:	425b      	negs	r3, r3
   102fc:	4313      	orrs	r3, r2
   102fe:	197f      	adds	r7, r7, r5
   10300:	18ff      	adds	r7, r7, r3
   10302:	465b      	mov	r3, fp
   10304:	193c      	adds	r4, r7, r4
   10306:	0ddb      	lsrs	r3, r3, #23
   10308:	9a05      	ldr	r2, [sp, #20]
   1030a:	0264      	lsls	r4, r4, #9
   1030c:	431c      	orrs	r4, r3
   1030e:	0243      	lsls	r3, r0, #9
   10310:	4313      	orrs	r3, r2
   10312:	1e5d      	subs	r5, r3, #1
   10314:	41ab      	sbcs	r3, r5
   10316:	465a      	mov	r2, fp
   10318:	0dc0      	lsrs	r0, r0, #23
   1031a:	4303      	orrs	r3, r0
   1031c:	0252      	lsls	r2, r2, #9
   1031e:	4313      	orrs	r3, r2
   10320:	01e2      	lsls	r2, r4, #7
   10322:	d556      	bpl.n	103d2 <__aeabi_dmul+0x426>
   10324:	2001      	movs	r0, #1
   10326:	085a      	lsrs	r2, r3, #1
   10328:	4003      	ands	r3, r0
   1032a:	4313      	orrs	r3, r2
   1032c:	07e2      	lsls	r2, r4, #31
   1032e:	4313      	orrs	r3, r2
   10330:	0864      	lsrs	r4, r4, #1
   10332:	485a      	ldr	r0, [pc, #360]	; (1049c <__aeabi_dmul+0x4f0>)
   10334:	4460      	add	r0, ip
   10336:	2800      	cmp	r0, #0
   10338:	dd4d      	ble.n	103d6 <__aeabi_dmul+0x42a>
   1033a:	075a      	lsls	r2, r3, #29
   1033c:	d009      	beq.n	10352 <__aeabi_dmul+0x3a6>
   1033e:	220f      	movs	r2, #15
   10340:	401a      	ands	r2, r3
   10342:	2a04      	cmp	r2, #4
   10344:	d005      	beq.n	10352 <__aeabi_dmul+0x3a6>
   10346:	1d1a      	adds	r2, r3, #4
   10348:	429a      	cmp	r2, r3
   1034a:	419b      	sbcs	r3, r3
   1034c:	425b      	negs	r3, r3
   1034e:	18e4      	adds	r4, r4, r3
   10350:	0013      	movs	r3, r2
   10352:	01e2      	lsls	r2, r4, #7
   10354:	d504      	bpl.n	10360 <__aeabi_dmul+0x3b4>
   10356:	2080      	movs	r0, #128	; 0x80
   10358:	4a51      	ldr	r2, [pc, #324]	; (104a0 <__aeabi_dmul+0x4f4>)
   1035a:	00c0      	lsls	r0, r0, #3
   1035c:	4014      	ands	r4, r2
   1035e:	4460      	add	r0, ip
   10360:	4a50      	ldr	r2, [pc, #320]	; (104a4 <__aeabi_dmul+0x4f8>)
   10362:	4290      	cmp	r0, r2
   10364:	dd00      	ble.n	10368 <__aeabi_dmul+0x3bc>
   10366:	e6e3      	b.n	10130 <__aeabi_dmul+0x184>
   10368:	2501      	movs	r5, #1
   1036a:	08db      	lsrs	r3, r3, #3
   1036c:	0762      	lsls	r2, r4, #29
   1036e:	431a      	orrs	r2, r3
   10370:	0264      	lsls	r4, r4, #9
   10372:	9b01      	ldr	r3, [sp, #4]
   10374:	4691      	mov	r9, r2
   10376:	0b22      	lsrs	r2, r4, #12
   10378:	0544      	lsls	r4, r0, #21
   1037a:	0d64      	lsrs	r4, r4, #21
   1037c:	401d      	ands	r5, r3
   1037e:	e67c      	b.n	1007a <__aeabi_dmul+0xce>
   10380:	2280      	movs	r2, #128	; 0x80
   10382:	4659      	mov	r1, fp
   10384:	0312      	lsls	r2, r2, #12
   10386:	4211      	tst	r1, r2
   10388:	d008      	beq.n	1039c <__aeabi_dmul+0x3f0>
   1038a:	4214      	tst	r4, r2
   1038c:	d106      	bne.n	1039c <__aeabi_dmul+0x3f0>
   1038e:	4322      	orrs	r2, r4
   10390:	0312      	lsls	r2, r2, #12
   10392:	0b12      	lsrs	r2, r2, #12
   10394:	4645      	mov	r5, r8
   10396:	4699      	mov	r9, r3
   10398:	4c43      	ldr	r4, [pc, #268]	; (104a8 <__aeabi_dmul+0x4fc>)
   1039a:	e66e      	b.n	1007a <__aeabi_dmul+0xce>
   1039c:	465b      	mov	r3, fp
   1039e:	431a      	orrs	r2, r3
   103a0:	0312      	lsls	r2, r2, #12
   103a2:	0b12      	lsrs	r2, r2, #12
   103a4:	4c40      	ldr	r4, [pc, #256]	; (104a8 <__aeabi_dmul+0x4fc>)
   103a6:	e668      	b.n	1007a <__aeabi_dmul+0xce>
   103a8:	0003      	movs	r3, r0
   103aa:	4654      	mov	r4, sl
   103ac:	3b28      	subs	r3, #40	; 0x28
   103ae:	409c      	lsls	r4, r3
   103b0:	2300      	movs	r3, #0
   103b2:	e6b9      	b.n	10128 <__aeabi_dmul+0x17c>
   103b4:	f000 fbfc 	bl	10bb0 <__clzsi2>
   103b8:	3020      	adds	r0, #32
   103ba:	e6a6      	b.n	1010a <__aeabi_dmul+0x15e>
   103bc:	0003      	movs	r3, r0
   103be:	3b28      	subs	r3, #40	; 0x28
   103c0:	409f      	lsls	r7, r3
   103c2:	2300      	movs	r3, #0
   103c4:	46bb      	mov	fp, r7
   103c6:	4699      	mov	r9, r3
   103c8:	e68a      	b.n	100e0 <__aeabi_dmul+0x134>
   103ca:	f000 fbf1 	bl	10bb0 <__clzsi2>
   103ce:	3020      	adds	r0, #32
   103d0:	e674      	b.n	100bc <__aeabi_dmul+0x110>
   103d2:	46b4      	mov	ip, r6
   103d4:	e7ad      	b.n	10332 <__aeabi_dmul+0x386>
   103d6:	2501      	movs	r5, #1
   103d8:	1a2a      	subs	r2, r5, r0
   103da:	2a38      	cmp	r2, #56	; 0x38
   103dc:	dd06      	ble.n	103ec <__aeabi_dmul+0x440>
   103de:	9b01      	ldr	r3, [sp, #4]
   103e0:	2400      	movs	r4, #0
   103e2:	401d      	ands	r5, r3
   103e4:	2300      	movs	r3, #0
   103e6:	2200      	movs	r2, #0
   103e8:	4699      	mov	r9, r3
   103ea:	e646      	b.n	1007a <__aeabi_dmul+0xce>
   103ec:	2a1f      	cmp	r2, #31
   103ee:	dc21      	bgt.n	10434 <__aeabi_dmul+0x488>
   103f0:	2520      	movs	r5, #32
   103f2:	0020      	movs	r0, r4
   103f4:	1aad      	subs	r5, r5, r2
   103f6:	001e      	movs	r6, r3
   103f8:	40ab      	lsls	r3, r5
   103fa:	40a8      	lsls	r0, r5
   103fc:	40d6      	lsrs	r6, r2
   103fe:	1e5d      	subs	r5, r3, #1
   10400:	41ab      	sbcs	r3, r5
   10402:	4330      	orrs	r0, r6
   10404:	4318      	orrs	r0, r3
   10406:	40d4      	lsrs	r4, r2
   10408:	0743      	lsls	r3, r0, #29
   1040a:	d009      	beq.n	10420 <__aeabi_dmul+0x474>
   1040c:	230f      	movs	r3, #15
   1040e:	4003      	ands	r3, r0
   10410:	2b04      	cmp	r3, #4
   10412:	d005      	beq.n	10420 <__aeabi_dmul+0x474>
   10414:	0003      	movs	r3, r0
   10416:	1d18      	adds	r0, r3, #4
   10418:	4298      	cmp	r0, r3
   1041a:	419b      	sbcs	r3, r3
   1041c:	425b      	negs	r3, r3
   1041e:	18e4      	adds	r4, r4, r3
   10420:	0223      	lsls	r3, r4, #8
   10422:	d521      	bpl.n	10468 <__aeabi_dmul+0x4bc>
   10424:	2501      	movs	r5, #1
   10426:	9b01      	ldr	r3, [sp, #4]
   10428:	2401      	movs	r4, #1
   1042a:	401d      	ands	r5, r3
   1042c:	2300      	movs	r3, #0
   1042e:	2200      	movs	r2, #0
   10430:	4699      	mov	r9, r3
   10432:	e622      	b.n	1007a <__aeabi_dmul+0xce>
   10434:	251f      	movs	r5, #31
   10436:	0021      	movs	r1, r4
   10438:	426d      	negs	r5, r5
   1043a:	1a28      	subs	r0, r5, r0
   1043c:	40c1      	lsrs	r1, r0
   1043e:	0008      	movs	r0, r1
   10440:	2a20      	cmp	r2, #32
   10442:	d01d      	beq.n	10480 <__aeabi_dmul+0x4d4>
   10444:	355f      	adds	r5, #95	; 0x5f
   10446:	1aaa      	subs	r2, r5, r2
   10448:	4094      	lsls	r4, r2
   1044a:	4323      	orrs	r3, r4
   1044c:	1e5c      	subs	r4, r3, #1
   1044e:	41a3      	sbcs	r3, r4
   10450:	2507      	movs	r5, #7
   10452:	4303      	orrs	r3, r0
   10454:	401d      	ands	r5, r3
   10456:	2200      	movs	r2, #0
   10458:	2d00      	cmp	r5, #0
   1045a:	d009      	beq.n	10470 <__aeabi_dmul+0x4c4>
   1045c:	220f      	movs	r2, #15
   1045e:	2400      	movs	r4, #0
   10460:	401a      	ands	r2, r3
   10462:	0018      	movs	r0, r3
   10464:	2a04      	cmp	r2, #4
   10466:	d1d6      	bne.n	10416 <__aeabi_dmul+0x46a>
   10468:	0003      	movs	r3, r0
   1046a:	0765      	lsls	r5, r4, #29
   1046c:	0264      	lsls	r4, r4, #9
   1046e:	0b22      	lsrs	r2, r4, #12
   10470:	08db      	lsrs	r3, r3, #3
   10472:	432b      	orrs	r3, r5
   10474:	2501      	movs	r5, #1
   10476:	4699      	mov	r9, r3
   10478:	9b01      	ldr	r3, [sp, #4]
   1047a:	2400      	movs	r4, #0
   1047c:	401d      	ands	r5, r3
   1047e:	e5fc      	b.n	1007a <__aeabi_dmul+0xce>
   10480:	2400      	movs	r4, #0
   10482:	e7e2      	b.n	1044a <__aeabi_dmul+0x49e>
   10484:	2280      	movs	r2, #128	; 0x80
   10486:	2501      	movs	r5, #1
   10488:	0312      	lsls	r2, r2, #12
   1048a:	4322      	orrs	r2, r4
   1048c:	9901      	ldr	r1, [sp, #4]
   1048e:	0312      	lsls	r2, r2, #12
   10490:	0b12      	lsrs	r2, r2, #12
   10492:	400d      	ands	r5, r1
   10494:	4699      	mov	r9, r3
   10496:	4c04      	ldr	r4, [pc, #16]	; (104a8 <__aeabi_dmul+0x4fc>)
   10498:	e5ef      	b.n	1007a <__aeabi_dmul+0xce>
   1049a:	46c0      	nop			; (mov r8, r8)
   1049c:	000003ff 	.word	0x000003ff
   104a0:	feffffff 	.word	0xfeffffff
   104a4:	000007fe 	.word	0x000007fe
   104a8:	000007ff 	.word	0x000007ff

000104ac <__aeabi_dsub>:
   104ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   104ae:	4646      	mov	r6, r8
   104b0:	46d6      	mov	lr, sl
   104b2:	464f      	mov	r7, r9
   104b4:	030c      	lsls	r4, r1, #12
   104b6:	b5c0      	push	{r6, r7, lr}
   104b8:	0fcd      	lsrs	r5, r1, #31
   104ba:	004e      	lsls	r6, r1, #1
   104bc:	0a61      	lsrs	r1, r4, #9
   104be:	0f44      	lsrs	r4, r0, #29
   104c0:	430c      	orrs	r4, r1
   104c2:	00c1      	lsls	r1, r0, #3
   104c4:	0058      	lsls	r0, r3, #1
   104c6:	0d40      	lsrs	r0, r0, #21
   104c8:	4684      	mov	ip, r0
   104ca:	468a      	mov	sl, r1
   104cc:	000f      	movs	r7, r1
   104ce:	0319      	lsls	r1, r3, #12
   104d0:	0f50      	lsrs	r0, r2, #29
   104d2:	0a49      	lsrs	r1, r1, #9
   104d4:	4301      	orrs	r1, r0
   104d6:	48c6      	ldr	r0, [pc, #792]	; (107f0 <__aeabi_dsub+0x344>)
   104d8:	0d76      	lsrs	r6, r6, #21
   104da:	46a8      	mov	r8, r5
   104dc:	0fdb      	lsrs	r3, r3, #31
   104de:	00d2      	lsls	r2, r2, #3
   104e0:	4584      	cmp	ip, r0
   104e2:	d100      	bne.n	104e6 <__aeabi_dsub+0x3a>
   104e4:	e0d8      	b.n	10698 <__aeabi_dsub+0x1ec>
   104e6:	2001      	movs	r0, #1
   104e8:	4043      	eors	r3, r0
   104ea:	42ab      	cmp	r3, r5
   104ec:	d100      	bne.n	104f0 <__aeabi_dsub+0x44>
   104ee:	e0a6      	b.n	1063e <__aeabi_dsub+0x192>
   104f0:	4660      	mov	r0, ip
   104f2:	1a35      	subs	r5, r6, r0
   104f4:	2d00      	cmp	r5, #0
   104f6:	dc00      	bgt.n	104fa <__aeabi_dsub+0x4e>
   104f8:	e105      	b.n	10706 <__aeabi_dsub+0x25a>
   104fa:	2800      	cmp	r0, #0
   104fc:	d110      	bne.n	10520 <__aeabi_dsub+0x74>
   104fe:	000b      	movs	r3, r1
   10500:	4313      	orrs	r3, r2
   10502:	d100      	bne.n	10506 <__aeabi_dsub+0x5a>
   10504:	e0d7      	b.n	106b6 <__aeabi_dsub+0x20a>
   10506:	1e6b      	subs	r3, r5, #1
   10508:	2b00      	cmp	r3, #0
   1050a:	d000      	beq.n	1050e <__aeabi_dsub+0x62>
   1050c:	e14b      	b.n	107a6 <__aeabi_dsub+0x2fa>
   1050e:	4653      	mov	r3, sl
   10510:	1a9f      	subs	r7, r3, r2
   10512:	45ba      	cmp	sl, r7
   10514:	4180      	sbcs	r0, r0
   10516:	1a64      	subs	r4, r4, r1
   10518:	4240      	negs	r0, r0
   1051a:	1a24      	subs	r4, r4, r0
   1051c:	2601      	movs	r6, #1
   1051e:	e01e      	b.n	1055e <__aeabi_dsub+0xb2>
   10520:	4bb3      	ldr	r3, [pc, #716]	; (107f0 <__aeabi_dsub+0x344>)
   10522:	429e      	cmp	r6, r3
   10524:	d048      	beq.n	105b8 <__aeabi_dsub+0x10c>
   10526:	2380      	movs	r3, #128	; 0x80
   10528:	041b      	lsls	r3, r3, #16
   1052a:	4319      	orrs	r1, r3
   1052c:	2d38      	cmp	r5, #56	; 0x38
   1052e:	dd00      	ble.n	10532 <__aeabi_dsub+0x86>
   10530:	e119      	b.n	10766 <__aeabi_dsub+0x2ba>
   10532:	2d1f      	cmp	r5, #31
   10534:	dd00      	ble.n	10538 <__aeabi_dsub+0x8c>
   10536:	e14c      	b.n	107d2 <__aeabi_dsub+0x326>
   10538:	2320      	movs	r3, #32
   1053a:	000f      	movs	r7, r1
   1053c:	1b5b      	subs	r3, r3, r5
   1053e:	0010      	movs	r0, r2
   10540:	409a      	lsls	r2, r3
   10542:	409f      	lsls	r7, r3
   10544:	40e8      	lsrs	r0, r5
   10546:	1e53      	subs	r3, r2, #1
   10548:	419a      	sbcs	r2, r3
   1054a:	40e9      	lsrs	r1, r5
   1054c:	4307      	orrs	r7, r0
   1054e:	4317      	orrs	r7, r2
   10550:	4653      	mov	r3, sl
   10552:	1bdf      	subs	r7, r3, r7
   10554:	1a61      	subs	r1, r4, r1
   10556:	45ba      	cmp	sl, r7
   10558:	41a4      	sbcs	r4, r4
   1055a:	4264      	negs	r4, r4
   1055c:	1b0c      	subs	r4, r1, r4
   1055e:	0223      	lsls	r3, r4, #8
   10560:	d400      	bmi.n	10564 <__aeabi_dsub+0xb8>
   10562:	e0c5      	b.n	106f0 <__aeabi_dsub+0x244>
   10564:	0264      	lsls	r4, r4, #9
   10566:	0a65      	lsrs	r5, r4, #9
   10568:	2d00      	cmp	r5, #0
   1056a:	d100      	bne.n	1056e <__aeabi_dsub+0xc2>
   1056c:	e0f6      	b.n	1075c <__aeabi_dsub+0x2b0>
   1056e:	0028      	movs	r0, r5
   10570:	f000 fb1e 	bl	10bb0 <__clzsi2>
   10574:	0003      	movs	r3, r0
   10576:	3b08      	subs	r3, #8
   10578:	2b1f      	cmp	r3, #31
   1057a:	dd00      	ble.n	1057e <__aeabi_dsub+0xd2>
   1057c:	e0e9      	b.n	10752 <__aeabi_dsub+0x2a6>
   1057e:	2220      	movs	r2, #32
   10580:	003c      	movs	r4, r7
   10582:	1ad2      	subs	r2, r2, r3
   10584:	409d      	lsls	r5, r3
   10586:	40d4      	lsrs	r4, r2
   10588:	409f      	lsls	r7, r3
   1058a:	4325      	orrs	r5, r4
   1058c:	429e      	cmp	r6, r3
   1058e:	dd00      	ble.n	10592 <__aeabi_dsub+0xe6>
   10590:	e0db      	b.n	1074a <__aeabi_dsub+0x29e>
   10592:	1b9e      	subs	r6, r3, r6
   10594:	1c73      	adds	r3, r6, #1
   10596:	2b1f      	cmp	r3, #31
   10598:	dd00      	ble.n	1059c <__aeabi_dsub+0xf0>
   1059a:	e10a      	b.n	107b2 <__aeabi_dsub+0x306>
   1059c:	2220      	movs	r2, #32
   1059e:	0038      	movs	r0, r7
   105a0:	1ad2      	subs	r2, r2, r3
   105a2:	0029      	movs	r1, r5
   105a4:	4097      	lsls	r7, r2
   105a6:	002c      	movs	r4, r5
   105a8:	4091      	lsls	r1, r2
   105aa:	40d8      	lsrs	r0, r3
   105ac:	1e7a      	subs	r2, r7, #1
   105ae:	4197      	sbcs	r7, r2
   105b0:	40dc      	lsrs	r4, r3
   105b2:	2600      	movs	r6, #0
   105b4:	4301      	orrs	r1, r0
   105b6:	430f      	orrs	r7, r1
   105b8:	077b      	lsls	r3, r7, #29
   105ba:	d009      	beq.n	105d0 <__aeabi_dsub+0x124>
   105bc:	230f      	movs	r3, #15
   105be:	403b      	ands	r3, r7
   105c0:	2b04      	cmp	r3, #4
   105c2:	d005      	beq.n	105d0 <__aeabi_dsub+0x124>
   105c4:	1d3b      	adds	r3, r7, #4
   105c6:	42bb      	cmp	r3, r7
   105c8:	41bf      	sbcs	r7, r7
   105ca:	427f      	negs	r7, r7
   105cc:	19e4      	adds	r4, r4, r7
   105ce:	001f      	movs	r7, r3
   105d0:	0223      	lsls	r3, r4, #8
   105d2:	d525      	bpl.n	10620 <__aeabi_dsub+0x174>
   105d4:	4b86      	ldr	r3, [pc, #536]	; (107f0 <__aeabi_dsub+0x344>)
   105d6:	3601      	adds	r6, #1
   105d8:	429e      	cmp	r6, r3
   105da:	d100      	bne.n	105de <__aeabi_dsub+0x132>
   105dc:	e0af      	b.n	1073e <__aeabi_dsub+0x292>
   105de:	4b85      	ldr	r3, [pc, #532]	; (107f4 <__aeabi_dsub+0x348>)
   105e0:	2501      	movs	r5, #1
   105e2:	401c      	ands	r4, r3
   105e4:	4643      	mov	r3, r8
   105e6:	0762      	lsls	r2, r4, #29
   105e8:	08ff      	lsrs	r7, r7, #3
   105ea:	0264      	lsls	r4, r4, #9
   105ec:	0576      	lsls	r6, r6, #21
   105ee:	4317      	orrs	r7, r2
   105f0:	0b24      	lsrs	r4, r4, #12
   105f2:	0d76      	lsrs	r6, r6, #21
   105f4:	401d      	ands	r5, r3
   105f6:	2100      	movs	r1, #0
   105f8:	0324      	lsls	r4, r4, #12
   105fa:	0b23      	lsrs	r3, r4, #12
   105fc:	0d0c      	lsrs	r4, r1, #20
   105fe:	4a7e      	ldr	r2, [pc, #504]	; (107f8 <__aeabi_dsub+0x34c>)
   10600:	0524      	lsls	r4, r4, #20
   10602:	431c      	orrs	r4, r3
   10604:	4014      	ands	r4, r2
   10606:	0533      	lsls	r3, r6, #20
   10608:	4323      	orrs	r3, r4
   1060a:	005b      	lsls	r3, r3, #1
   1060c:	07ed      	lsls	r5, r5, #31
   1060e:	085b      	lsrs	r3, r3, #1
   10610:	432b      	orrs	r3, r5
   10612:	0038      	movs	r0, r7
   10614:	0019      	movs	r1, r3
   10616:	bc1c      	pop	{r2, r3, r4}
   10618:	4690      	mov	r8, r2
   1061a:	4699      	mov	r9, r3
   1061c:	46a2      	mov	sl, r4
   1061e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10620:	2501      	movs	r5, #1
   10622:	4643      	mov	r3, r8
   10624:	0762      	lsls	r2, r4, #29
   10626:	08ff      	lsrs	r7, r7, #3
   10628:	4317      	orrs	r7, r2
   1062a:	08e4      	lsrs	r4, r4, #3
   1062c:	401d      	ands	r5, r3
   1062e:	4b70      	ldr	r3, [pc, #448]	; (107f0 <__aeabi_dsub+0x344>)
   10630:	429e      	cmp	r6, r3
   10632:	d036      	beq.n	106a2 <__aeabi_dsub+0x1f6>
   10634:	0324      	lsls	r4, r4, #12
   10636:	0576      	lsls	r6, r6, #21
   10638:	0b24      	lsrs	r4, r4, #12
   1063a:	0d76      	lsrs	r6, r6, #21
   1063c:	e7db      	b.n	105f6 <__aeabi_dsub+0x14a>
   1063e:	4663      	mov	r3, ip
   10640:	1af3      	subs	r3, r6, r3
   10642:	2b00      	cmp	r3, #0
   10644:	dc00      	bgt.n	10648 <__aeabi_dsub+0x19c>
   10646:	e094      	b.n	10772 <__aeabi_dsub+0x2c6>
   10648:	4660      	mov	r0, ip
   1064a:	2800      	cmp	r0, #0
   1064c:	d035      	beq.n	106ba <__aeabi_dsub+0x20e>
   1064e:	4868      	ldr	r0, [pc, #416]	; (107f0 <__aeabi_dsub+0x344>)
   10650:	4286      	cmp	r6, r0
   10652:	d0b1      	beq.n	105b8 <__aeabi_dsub+0x10c>
   10654:	2780      	movs	r7, #128	; 0x80
   10656:	043f      	lsls	r7, r7, #16
   10658:	4339      	orrs	r1, r7
   1065a:	2b38      	cmp	r3, #56	; 0x38
   1065c:	dc00      	bgt.n	10660 <__aeabi_dsub+0x1b4>
   1065e:	e0fd      	b.n	1085c <__aeabi_dsub+0x3b0>
   10660:	430a      	orrs	r2, r1
   10662:	0017      	movs	r7, r2
   10664:	2100      	movs	r1, #0
   10666:	1e7a      	subs	r2, r7, #1
   10668:	4197      	sbcs	r7, r2
   1066a:	4457      	add	r7, sl
   1066c:	4557      	cmp	r7, sl
   1066e:	4180      	sbcs	r0, r0
   10670:	1909      	adds	r1, r1, r4
   10672:	4244      	negs	r4, r0
   10674:	190c      	adds	r4, r1, r4
   10676:	0223      	lsls	r3, r4, #8
   10678:	d53a      	bpl.n	106f0 <__aeabi_dsub+0x244>
   1067a:	4b5d      	ldr	r3, [pc, #372]	; (107f0 <__aeabi_dsub+0x344>)
   1067c:	3601      	adds	r6, #1
   1067e:	429e      	cmp	r6, r3
   10680:	d100      	bne.n	10684 <__aeabi_dsub+0x1d8>
   10682:	e14b      	b.n	1091c <__aeabi_dsub+0x470>
   10684:	2201      	movs	r2, #1
   10686:	4b5b      	ldr	r3, [pc, #364]	; (107f4 <__aeabi_dsub+0x348>)
   10688:	401c      	ands	r4, r3
   1068a:	087b      	lsrs	r3, r7, #1
   1068c:	4017      	ands	r7, r2
   1068e:	431f      	orrs	r7, r3
   10690:	07e2      	lsls	r2, r4, #31
   10692:	4317      	orrs	r7, r2
   10694:	0864      	lsrs	r4, r4, #1
   10696:	e78f      	b.n	105b8 <__aeabi_dsub+0x10c>
   10698:	0008      	movs	r0, r1
   1069a:	4310      	orrs	r0, r2
   1069c:	d000      	beq.n	106a0 <__aeabi_dsub+0x1f4>
   1069e:	e724      	b.n	104ea <__aeabi_dsub+0x3e>
   106a0:	e721      	b.n	104e6 <__aeabi_dsub+0x3a>
   106a2:	0023      	movs	r3, r4
   106a4:	433b      	orrs	r3, r7
   106a6:	d100      	bne.n	106aa <__aeabi_dsub+0x1fe>
   106a8:	e1b9      	b.n	10a1e <__aeabi_dsub+0x572>
   106aa:	2280      	movs	r2, #128	; 0x80
   106ac:	0312      	lsls	r2, r2, #12
   106ae:	4314      	orrs	r4, r2
   106b0:	0324      	lsls	r4, r4, #12
   106b2:	0b24      	lsrs	r4, r4, #12
   106b4:	e79f      	b.n	105f6 <__aeabi_dsub+0x14a>
   106b6:	002e      	movs	r6, r5
   106b8:	e77e      	b.n	105b8 <__aeabi_dsub+0x10c>
   106ba:	0008      	movs	r0, r1
   106bc:	4310      	orrs	r0, r2
   106be:	d100      	bne.n	106c2 <__aeabi_dsub+0x216>
   106c0:	e0ca      	b.n	10858 <__aeabi_dsub+0x3ac>
   106c2:	1e58      	subs	r0, r3, #1
   106c4:	4684      	mov	ip, r0
   106c6:	2800      	cmp	r0, #0
   106c8:	d000      	beq.n	106cc <__aeabi_dsub+0x220>
   106ca:	e0e7      	b.n	1089c <__aeabi_dsub+0x3f0>
   106cc:	4452      	add	r2, sl
   106ce:	4552      	cmp	r2, sl
   106d0:	4180      	sbcs	r0, r0
   106d2:	1864      	adds	r4, r4, r1
   106d4:	4240      	negs	r0, r0
   106d6:	1824      	adds	r4, r4, r0
   106d8:	0017      	movs	r7, r2
   106da:	2601      	movs	r6, #1
   106dc:	0223      	lsls	r3, r4, #8
   106de:	d507      	bpl.n	106f0 <__aeabi_dsub+0x244>
   106e0:	2602      	movs	r6, #2
   106e2:	e7cf      	b.n	10684 <__aeabi_dsub+0x1d8>
   106e4:	4664      	mov	r4, ip
   106e6:	432c      	orrs	r4, r5
   106e8:	d100      	bne.n	106ec <__aeabi_dsub+0x240>
   106ea:	e1b3      	b.n	10a54 <__aeabi_dsub+0x5a8>
   106ec:	002c      	movs	r4, r5
   106ee:	4667      	mov	r7, ip
   106f0:	077b      	lsls	r3, r7, #29
   106f2:	d000      	beq.n	106f6 <__aeabi_dsub+0x24a>
   106f4:	e762      	b.n	105bc <__aeabi_dsub+0x110>
   106f6:	0763      	lsls	r3, r4, #29
   106f8:	08ff      	lsrs	r7, r7, #3
   106fa:	431f      	orrs	r7, r3
   106fc:	2501      	movs	r5, #1
   106fe:	4643      	mov	r3, r8
   10700:	08e4      	lsrs	r4, r4, #3
   10702:	401d      	ands	r5, r3
   10704:	e793      	b.n	1062e <__aeabi_dsub+0x182>
   10706:	2d00      	cmp	r5, #0
   10708:	d178      	bne.n	107fc <__aeabi_dsub+0x350>
   1070a:	1c75      	adds	r5, r6, #1
   1070c:	056d      	lsls	r5, r5, #21
   1070e:	0d6d      	lsrs	r5, r5, #21
   10710:	2d01      	cmp	r5, #1
   10712:	dc00      	bgt.n	10716 <__aeabi_dsub+0x26a>
   10714:	e0f2      	b.n	108fc <__aeabi_dsub+0x450>
   10716:	4650      	mov	r0, sl
   10718:	1a80      	subs	r0, r0, r2
   1071a:	4582      	cmp	sl, r0
   1071c:	41bf      	sbcs	r7, r7
   1071e:	1a65      	subs	r5, r4, r1
   10720:	427f      	negs	r7, r7
   10722:	1bed      	subs	r5, r5, r7
   10724:	4684      	mov	ip, r0
   10726:	0228      	lsls	r0, r5, #8
   10728:	d400      	bmi.n	1072c <__aeabi_dsub+0x280>
   1072a:	e08c      	b.n	10846 <__aeabi_dsub+0x39a>
   1072c:	4650      	mov	r0, sl
   1072e:	1a17      	subs	r7, r2, r0
   10730:	42ba      	cmp	r2, r7
   10732:	4192      	sbcs	r2, r2
   10734:	1b0c      	subs	r4, r1, r4
   10736:	4255      	negs	r5, r2
   10738:	1b65      	subs	r5, r4, r5
   1073a:	4698      	mov	r8, r3
   1073c:	e714      	b.n	10568 <__aeabi_dsub+0xbc>
   1073e:	2501      	movs	r5, #1
   10740:	4643      	mov	r3, r8
   10742:	2400      	movs	r4, #0
   10744:	401d      	ands	r5, r3
   10746:	2700      	movs	r7, #0
   10748:	e755      	b.n	105f6 <__aeabi_dsub+0x14a>
   1074a:	4c2a      	ldr	r4, [pc, #168]	; (107f4 <__aeabi_dsub+0x348>)
   1074c:	1af6      	subs	r6, r6, r3
   1074e:	402c      	ands	r4, r5
   10750:	e732      	b.n	105b8 <__aeabi_dsub+0x10c>
   10752:	003d      	movs	r5, r7
   10754:	3828      	subs	r0, #40	; 0x28
   10756:	4085      	lsls	r5, r0
   10758:	2700      	movs	r7, #0
   1075a:	e717      	b.n	1058c <__aeabi_dsub+0xe0>
   1075c:	0038      	movs	r0, r7
   1075e:	f000 fa27 	bl	10bb0 <__clzsi2>
   10762:	3020      	adds	r0, #32
   10764:	e706      	b.n	10574 <__aeabi_dsub+0xc8>
   10766:	430a      	orrs	r2, r1
   10768:	0017      	movs	r7, r2
   1076a:	2100      	movs	r1, #0
   1076c:	1e7a      	subs	r2, r7, #1
   1076e:	4197      	sbcs	r7, r2
   10770:	e6ee      	b.n	10550 <__aeabi_dsub+0xa4>
   10772:	2b00      	cmp	r3, #0
   10774:	d000      	beq.n	10778 <__aeabi_dsub+0x2cc>
   10776:	e0e5      	b.n	10944 <__aeabi_dsub+0x498>
   10778:	1c73      	adds	r3, r6, #1
   1077a:	469c      	mov	ip, r3
   1077c:	055b      	lsls	r3, r3, #21
   1077e:	0d5b      	lsrs	r3, r3, #21
   10780:	2b01      	cmp	r3, #1
   10782:	dc00      	bgt.n	10786 <__aeabi_dsub+0x2da>
   10784:	e09f      	b.n	108c6 <__aeabi_dsub+0x41a>
   10786:	4b1a      	ldr	r3, [pc, #104]	; (107f0 <__aeabi_dsub+0x344>)
   10788:	459c      	cmp	ip, r3
   1078a:	d100      	bne.n	1078e <__aeabi_dsub+0x2e2>
   1078c:	e0c5      	b.n	1091a <__aeabi_dsub+0x46e>
   1078e:	4452      	add	r2, sl
   10790:	4552      	cmp	r2, sl
   10792:	4180      	sbcs	r0, r0
   10794:	1864      	adds	r4, r4, r1
   10796:	4240      	negs	r0, r0
   10798:	1824      	adds	r4, r4, r0
   1079a:	07e7      	lsls	r7, r4, #31
   1079c:	0852      	lsrs	r2, r2, #1
   1079e:	4317      	orrs	r7, r2
   107a0:	0864      	lsrs	r4, r4, #1
   107a2:	4666      	mov	r6, ip
   107a4:	e708      	b.n	105b8 <__aeabi_dsub+0x10c>
   107a6:	4812      	ldr	r0, [pc, #72]	; (107f0 <__aeabi_dsub+0x344>)
   107a8:	4285      	cmp	r5, r0
   107aa:	d100      	bne.n	107ae <__aeabi_dsub+0x302>
   107ac:	e085      	b.n	108ba <__aeabi_dsub+0x40e>
   107ae:	001d      	movs	r5, r3
   107b0:	e6bc      	b.n	1052c <__aeabi_dsub+0x80>
   107b2:	0029      	movs	r1, r5
   107b4:	3e1f      	subs	r6, #31
   107b6:	40f1      	lsrs	r1, r6
   107b8:	2b20      	cmp	r3, #32
   107ba:	d100      	bne.n	107be <__aeabi_dsub+0x312>
   107bc:	e07f      	b.n	108be <__aeabi_dsub+0x412>
   107be:	2240      	movs	r2, #64	; 0x40
   107c0:	1ad3      	subs	r3, r2, r3
   107c2:	409d      	lsls	r5, r3
   107c4:	432f      	orrs	r7, r5
   107c6:	1e7d      	subs	r5, r7, #1
   107c8:	41af      	sbcs	r7, r5
   107ca:	2400      	movs	r4, #0
   107cc:	430f      	orrs	r7, r1
   107ce:	2600      	movs	r6, #0
   107d0:	e78e      	b.n	106f0 <__aeabi_dsub+0x244>
   107d2:	002b      	movs	r3, r5
   107d4:	000f      	movs	r7, r1
   107d6:	3b20      	subs	r3, #32
   107d8:	40df      	lsrs	r7, r3
   107da:	2d20      	cmp	r5, #32
   107dc:	d071      	beq.n	108c2 <__aeabi_dsub+0x416>
   107de:	2340      	movs	r3, #64	; 0x40
   107e0:	1b5d      	subs	r5, r3, r5
   107e2:	40a9      	lsls	r1, r5
   107e4:	430a      	orrs	r2, r1
   107e6:	1e51      	subs	r1, r2, #1
   107e8:	418a      	sbcs	r2, r1
   107ea:	2100      	movs	r1, #0
   107ec:	4317      	orrs	r7, r2
   107ee:	e6af      	b.n	10550 <__aeabi_dsub+0xa4>
   107f0:	000007ff 	.word	0x000007ff
   107f4:	ff7fffff 	.word	0xff7fffff
   107f8:	800fffff 	.word	0x800fffff
   107fc:	2e00      	cmp	r6, #0
   107fe:	d03e      	beq.n	1087e <__aeabi_dsub+0x3d2>
   10800:	4eb3      	ldr	r6, [pc, #716]	; (10ad0 <__aeabi_dsub+0x624>)
   10802:	45b4      	cmp	ip, r6
   10804:	d045      	beq.n	10892 <__aeabi_dsub+0x3e6>
   10806:	2680      	movs	r6, #128	; 0x80
   10808:	0436      	lsls	r6, r6, #16
   1080a:	426d      	negs	r5, r5
   1080c:	4334      	orrs	r4, r6
   1080e:	2d38      	cmp	r5, #56	; 0x38
   10810:	dd00      	ble.n	10814 <__aeabi_dsub+0x368>
   10812:	e0a8      	b.n	10966 <__aeabi_dsub+0x4ba>
   10814:	2d1f      	cmp	r5, #31
   10816:	dd00      	ble.n	1081a <__aeabi_dsub+0x36e>
   10818:	e11f      	b.n	10a5a <__aeabi_dsub+0x5ae>
   1081a:	2620      	movs	r6, #32
   1081c:	0027      	movs	r7, r4
   1081e:	4650      	mov	r0, sl
   10820:	1b76      	subs	r6, r6, r5
   10822:	40b7      	lsls	r7, r6
   10824:	40e8      	lsrs	r0, r5
   10826:	4307      	orrs	r7, r0
   10828:	4650      	mov	r0, sl
   1082a:	40b0      	lsls	r0, r6
   1082c:	1e46      	subs	r6, r0, #1
   1082e:	41b0      	sbcs	r0, r6
   10830:	40ec      	lsrs	r4, r5
   10832:	4338      	orrs	r0, r7
   10834:	1a17      	subs	r7, r2, r0
   10836:	42ba      	cmp	r2, r7
   10838:	4192      	sbcs	r2, r2
   1083a:	1b0c      	subs	r4, r1, r4
   1083c:	4252      	negs	r2, r2
   1083e:	1aa4      	subs	r4, r4, r2
   10840:	4666      	mov	r6, ip
   10842:	4698      	mov	r8, r3
   10844:	e68b      	b.n	1055e <__aeabi_dsub+0xb2>
   10846:	4664      	mov	r4, ip
   10848:	4667      	mov	r7, ip
   1084a:	432c      	orrs	r4, r5
   1084c:	d000      	beq.n	10850 <__aeabi_dsub+0x3a4>
   1084e:	e68b      	b.n	10568 <__aeabi_dsub+0xbc>
   10850:	2500      	movs	r5, #0
   10852:	2600      	movs	r6, #0
   10854:	2700      	movs	r7, #0
   10856:	e6ea      	b.n	1062e <__aeabi_dsub+0x182>
   10858:	001e      	movs	r6, r3
   1085a:	e6ad      	b.n	105b8 <__aeabi_dsub+0x10c>
   1085c:	2b1f      	cmp	r3, #31
   1085e:	dc60      	bgt.n	10922 <__aeabi_dsub+0x476>
   10860:	2720      	movs	r7, #32
   10862:	1af8      	subs	r0, r7, r3
   10864:	000f      	movs	r7, r1
   10866:	4684      	mov	ip, r0
   10868:	4087      	lsls	r7, r0
   1086a:	0010      	movs	r0, r2
   1086c:	40d8      	lsrs	r0, r3
   1086e:	4307      	orrs	r7, r0
   10870:	4660      	mov	r0, ip
   10872:	4082      	lsls	r2, r0
   10874:	1e50      	subs	r0, r2, #1
   10876:	4182      	sbcs	r2, r0
   10878:	40d9      	lsrs	r1, r3
   1087a:	4317      	orrs	r7, r2
   1087c:	e6f5      	b.n	1066a <__aeabi_dsub+0x1be>
   1087e:	0026      	movs	r6, r4
   10880:	4650      	mov	r0, sl
   10882:	4306      	orrs	r6, r0
   10884:	d005      	beq.n	10892 <__aeabi_dsub+0x3e6>
   10886:	43ed      	mvns	r5, r5
   10888:	2d00      	cmp	r5, #0
   1088a:	d0d3      	beq.n	10834 <__aeabi_dsub+0x388>
   1088c:	4e90      	ldr	r6, [pc, #576]	; (10ad0 <__aeabi_dsub+0x624>)
   1088e:	45b4      	cmp	ip, r6
   10890:	d1bd      	bne.n	1080e <__aeabi_dsub+0x362>
   10892:	000c      	movs	r4, r1
   10894:	0017      	movs	r7, r2
   10896:	4666      	mov	r6, ip
   10898:	4698      	mov	r8, r3
   1089a:	e68d      	b.n	105b8 <__aeabi_dsub+0x10c>
   1089c:	488c      	ldr	r0, [pc, #560]	; (10ad0 <__aeabi_dsub+0x624>)
   1089e:	4283      	cmp	r3, r0
   108a0:	d00b      	beq.n	108ba <__aeabi_dsub+0x40e>
   108a2:	4663      	mov	r3, ip
   108a4:	e6d9      	b.n	1065a <__aeabi_dsub+0x1ae>
   108a6:	2d00      	cmp	r5, #0
   108a8:	d000      	beq.n	108ac <__aeabi_dsub+0x400>
   108aa:	e096      	b.n	109da <__aeabi_dsub+0x52e>
   108ac:	0008      	movs	r0, r1
   108ae:	4310      	orrs	r0, r2
   108b0:	d100      	bne.n	108b4 <__aeabi_dsub+0x408>
   108b2:	e0e2      	b.n	10a7a <__aeabi_dsub+0x5ce>
   108b4:	000c      	movs	r4, r1
   108b6:	0017      	movs	r7, r2
   108b8:	4698      	mov	r8, r3
   108ba:	4e85      	ldr	r6, [pc, #532]	; (10ad0 <__aeabi_dsub+0x624>)
   108bc:	e67c      	b.n	105b8 <__aeabi_dsub+0x10c>
   108be:	2500      	movs	r5, #0
   108c0:	e780      	b.n	107c4 <__aeabi_dsub+0x318>
   108c2:	2100      	movs	r1, #0
   108c4:	e78e      	b.n	107e4 <__aeabi_dsub+0x338>
   108c6:	0023      	movs	r3, r4
   108c8:	4650      	mov	r0, sl
   108ca:	4303      	orrs	r3, r0
   108cc:	2e00      	cmp	r6, #0
   108ce:	d000      	beq.n	108d2 <__aeabi_dsub+0x426>
   108d0:	e0a8      	b.n	10a24 <__aeabi_dsub+0x578>
   108d2:	2b00      	cmp	r3, #0
   108d4:	d100      	bne.n	108d8 <__aeabi_dsub+0x42c>
   108d6:	e0de      	b.n	10a96 <__aeabi_dsub+0x5ea>
   108d8:	000b      	movs	r3, r1
   108da:	4313      	orrs	r3, r2
   108dc:	d100      	bne.n	108e0 <__aeabi_dsub+0x434>
   108de:	e66b      	b.n	105b8 <__aeabi_dsub+0x10c>
   108e0:	4452      	add	r2, sl
   108e2:	4552      	cmp	r2, sl
   108e4:	4180      	sbcs	r0, r0
   108e6:	1864      	adds	r4, r4, r1
   108e8:	4240      	negs	r0, r0
   108ea:	1824      	adds	r4, r4, r0
   108ec:	0017      	movs	r7, r2
   108ee:	0223      	lsls	r3, r4, #8
   108f0:	d400      	bmi.n	108f4 <__aeabi_dsub+0x448>
   108f2:	e6fd      	b.n	106f0 <__aeabi_dsub+0x244>
   108f4:	4b77      	ldr	r3, [pc, #476]	; (10ad4 <__aeabi_dsub+0x628>)
   108f6:	4666      	mov	r6, ip
   108f8:	401c      	ands	r4, r3
   108fa:	e65d      	b.n	105b8 <__aeabi_dsub+0x10c>
   108fc:	0025      	movs	r5, r4
   108fe:	4650      	mov	r0, sl
   10900:	4305      	orrs	r5, r0
   10902:	2e00      	cmp	r6, #0
   10904:	d1cf      	bne.n	108a6 <__aeabi_dsub+0x3fa>
   10906:	2d00      	cmp	r5, #0
   10908:	d14f      	bne.n	109aa <__aeabi_dsub+0x4fe>
   1090a:	000c      	movs	r4, r1
   1090c:	4314      	orrs	r4, r2
   1090e:	d100      	bne.n	10912 <__aeabi_dsub+0x466>
   10910:	e0a0      	b.n	10a54 <__aeabi_dsub+0x5a8>
   10912:	000c      	movs	r4, r1
   10914:	0017      	movs	r7, r2
   10916:	4698      	mov	r8, r3
   10918:	e64e      	b.n	105b8 <__aeabi_dsub+0x10c>
   1091a:	4666      	mov	r6, ip
   1091c:	2400      	movs	r4, #0
   1091e:	2700      	movs	r7, #0
   10920:	e685      	b.n	1062e <__aeabi_dsub+0x182>
   10922:	001f      	movs	r7, r3
   10924:	0008      	movs	r0, r1
   10926:	3f20      	subs	r7, #32
   10928:	40f8      	lsrs	r0, r7
   1092a:	0007      	movs	r7, r0
   1092c:	2b20      	cmp	r3, #32
   1092e:	d100      	bne.n	10932 <__aeabi_dsub+0x486>
   10930:	e08e      	b.n	10a50 <__aeabi_dsub+0x5a4>
   10932:	2040      	movs	r0, #64	; 0x40
   10934:	1ac3      	subs	r3, r0, r3
   10936:	4099      	lsls	r1, r3
   10938:	430a      	orrs	r2, r1
   1093a:	1e51      	subs	r1, r2, #1
   1093c:	418a      	sbcs	r2, r1
   1093e:	2100      	movs	r1, #0
   10940:	4317      	orrs	r7, r2
   10942:	e692      	b.n	1066a <__aeabi_dsub+0x1be>
   10944:	2e00      	cmp	r6, #0
   10946:	d114      	bne.n	10972 <__aeabi_dsub+0x4c6>
   10948:	0026      	movs	r6, r4
   1094a:	4650      	mov	r0, sl
   1094c:	4306      	orrs	r6, r0
   1094e:	d062      	beq.n	10a16 <__aeabi_dsub+0x56a>
   10950:	43db      	mvns	r3, r3
   10952:	2b00      	cmp	r3, #0
   10954:	d15c      	bne.n	10a10 <__aeabi_dsub+0x564>
   10956:	1887      	adds	r7, r0, r2
   10958:	4297      	cmp	r7, r2
   1095a:	4192      	sbcs	r2, r2
   1095c:	1864      	adds	r4, r4, r1
   1095e:	4252      	negs	r2, r2
   10960:	18a4      	adds	r4, r4, r2
   10962:	4666      	mov	r6, ip
   10964:	e687      	b.n	10676 <__aeabi_dsub+0x1ca>
   10966:	4650      	mov	r0, sl
   10968:	4320      	orrs	r0, r4
   1096a:	1e44      	subs	r4, r0, #1
   1096c:	41a0      	sbcs	r0, r4
   1096e:	2400      	movs	r4, #0
   10970:	e760      	b.n	10834 <__aeabi_dsub+0x388>
   10972:	4e57      	ldr	r6, [pc, #348]	; (10ad0 <__aeabi_dsub+0x624>)
   10974:	45b4      	cmp	ip, r6
   10976:	d04e      	beq.n	10a16 <__aeabi_dsub+0x56a>
   10978:	2680      	movs	r6, #128	; 0x80
   1097a:	0436      	lsls	r6, r6, #16
   1097c:	425b      	negs	r3, r3
   1097e:	4334      	orrs	r4, r6
   10980:	2b38      	cmp	r3, #56	; 0x38
   10982:	dd00      	ble.n	10986 <__aeabi_dsub+0x4da>
   10984:	e07f      	b.n	10a86 <__aeabi_dsub+0x5da>
   10986:	2b1f      	cmp	r3, #31
   10988:	dd00      	ble.n	1098c <__aeabi_dsub+0x4e0>
   1098a:	e08b      	b.n	10aa4 <__aeabi_dsub+0x5f8>
   1098c:	2620      	movs	r6, #32
   1098e:	0027      	movs	r7, r4
   10990:	4650      	mov	r0, sl
   10992:	1af6      	subs	r6, r6, r3
   10994:	40b7      	lsls	r7, r6
   10996:	40d8      	lsrs	r0, r3
   10998:	4307      	orrs	r7, r0
   1099a:	4650      	mov	r0, sl
   1099c:	40b0      	lsls	r0, r6
   1099e:	1e46      	subs	r6, r0, #1
   109a0:	41b0      	sbcs	r0, r6
   109a2:	4307      	orrs	r7, r0
   109a4:	40dc      	lsrs	r4, r3
   109a6:	18bf      	adds	r7, r7, r2
   109a8:	e7d6      	b.n	10958 <__aeabi_dsub+0x4ac>
   109aa:	000d      	movs	r5, r1
   109ac:	4315      	orrs	r5, r2
   109ae:	d100      	bne.n	109b2 <__aeabi_dsub+0x506>
   109b0:	e602      	b.n	105b8 <__aeabi_dsub+0x10c>
   109b2:	4650      	mov	r0, sl
   109b4:	1a80      	subs	r0, r0, r2
   109b6:	4582      	cmp	sl, r0
   109b8:	41bf      	sbcs	r7, r7
   109ba:	1a65      	subs	r5, r4, r1
   109bc:	427f      	negs	r7, r7
   109be:	1bed      	subs	r5, r5, r7
   109c0:	4684      	mov	ip, r0
   109c2:	0228      	lsls	r0, r5, #8
   109c4:	d400      	bmi.n	109c8 <__aeabi_dsub+0x51c>
   109c6:	e68d      	b.n	106e4 <__aeabi_dsub+0x238>
   109c8:	4650      	mov	r0, sl
   109ca:	1a17      	subs	r7, r2, r0
   109cc:	42ba      	cmp	r2, r7
   109ce:	4192      	sbcs	r2, r2
   109d0:	1b0c      	subs	r4, r1, r4
   109d2:	4252      	negs	r2, r2
   109d4:	1aa4      	subs	r4, r4, r2
   109d6:	4698      	mov	r8, r3
   109d8:	e5ee      	b.n	105b8 <__aeabi_dsub+0x10c>
   109da:	000d      	movs	r5, r1
   109dc:	4315      	orrs	r5, r2
   109de:	d100      	bne.n	109e2 <__aeabi_dsub+0x536>
   109e0:	e76b      	b.n	108ba <__aeabi_dsub+0x40e>
   109e2:	4650      	mov	r0, sl
   109e4:	0767      	lsls	r7, r4, #29
   109e6:	08c0      	lsrs	r0, r0, #3
   109e8:	4307      	orrs	r7, r0
   109ea:	2080      	movs	r0, #128	; 0x80
   109ec:	08e4      	lsrs	r4, r4, #3
   109ee:	0300      	lsls	r0, r0, #12
   109f0:	4204      	tst	r4, r0
   109f2:	d007      	beq.n	10a04 <__aeabi_dsub+0x558>
   109f4:	08cd      	lsrs	r5, r1, #3
   109f6:	4205      	tst	r5, r0
   109f8:	d104      	bne.n	10a04 <__aeabi_dsub+0x558>
   109fa:	002c      	movs	r4, r5
   109fc:	4698      	mov	r8, r3
   109fe:	08d7      	lsrs	r7, r2, #3
   10a00:	0749      	lsls	r1, r1, #29
   10a02:	430f      	orrs	r7, r1
   10a04:	0f7b      	lsrs	r3, r7, #29
   10a06:	00e4      	lsls	r4, r4, #3
   10a08:	431c      	orrs	r4, r3
   10a0a:	00ff      	lsls	r7, r7, #3
   10a0c:	4e30      	ldr	r6, [pc, #192]	; (10ad0 <__aeabi_dsub+0x624>)
   10a0e:	e5d3      	b.n	105b8 <__aeabi_dsub+0x10c>
   10a10:	4e2f      	ldr	r6, [pc, #188]	; (10ad0 <__aeabi_dsub+0x624>)
   10a12:	45b4      	cmp	ip, r6
   10a14:	d1b4      	bne.n	10980 <__aeabi_dsub+0x4d4>
   10a16:	000c      	movs	r4, r1
   10a18:	0017      	movs	r7, r2
   10a1a:	4666      	mov	r6, ip
   10a1c:	e5cc      	b.n	105b8 <__aeabi_dsub+0x10c>
   10a1e:	2700      	movs	r7, #0
   10a20:	2400      	movs	r4, #0
   10a22:	e5e8      	b.n	105f6 <__aeabi_dsub+0x14a>
   10a24:	2b00      	cmp	r3, #0
   10a26:	d039      	beq.n	10a9c <__aeabi_dsub+0x5f0>
   10a28:	000b      	movs	r3, r1
   10a2a:	4313      	orrs	r3, r2
   10a2c:	d100      	bne.n	10a30 <__aeabi_dsub+0x584>
   10a2e:	e744      	b.n	108ba <__aeabi_dsub+0x40e>
   10a30:	08c0      	lsrs	r0, r0, #3
   10a32:	0767      	lsls	r7, r4, #29
   10a34:	4307      	orrs	r7, r0
   10a36:	2080      	movs	r0, #128	; 0x80
   10a38:	08e4      	lsrs	r4, r4, #3
   10a3a:	0300      	lsls	r0, r0, #12
   10a3c:	4204      	tst	r4, r0
   10a3e:	d0e1      	beq.n	10a04 <__aeabi_dsub+0x558>
   10a40:	08cb      	lsrs	r3, r1, #3
   10a42:	4203      	tst	r3, r0
   10a44:	d1de      	bne.n	10a04 <__aeabi_dsub+0x558>
   10a46:	08d7      	lsrs	r7, r2, #3
   10a48:	0749      	lsls	r1, r1, #29
   10a4a:	430f      	orrs	r7, r1
   10a4c:	001c      	movs	r4, r3
   10a4e:	e7d9      	b.n	10a04 <__aeabi_dsub+0x558>
   10a50:	2100      	movs	r1, #0
   10a52:	e771      	b.n	10938 <__aeabi_dsub+0x48c>
   10a54:	2500      	movs	r5, #0
   10a56:	2700      	movs	r7, #0
   10a58:	e5e9      	b.n	1062e <__aeabi_dsub+0x182>
   10a5a:	002e      	movs	r6, r5
   10a5c:	0027      	movs	r7, r4
   10a5e:	3e20      	subs	r6, #32
   10a60:	40f7      	lsrs	r7, r6
   10a62:	2d20      	cmp	r5, #32
   10a64:	d02f      	beq.n	10ac6 <__aeabi_dsub+0x61a>
   10a66:	2640      	movs	r6, #64	; 0x40
   10a68:	1b75      	subs	r5, r6, r5
   10a6a:	40ac      	lsls	r4, r5
   10a6c:	4650      	mov	r0, sl
   10a6e:	4320      	orrs	r0, r4
   10a70:	1e44      	subs	r4, r0, #1
   10a72:	41a0      	sbcs	r0, r4
   10a74:	2400      	movs	r4, #0
   10a76:	4338      	orrs	r0, r7
   10a78:	e6dc      	b.n	10834 <__aeabi_dsub+0x388>
   10a7a:	2480      	movs	r4, #128	; 0x80
   10a7c:	2500      	movs	r5, #0
   10a7e:	0324      	lsls	r4, r4, #12
   10a80:	4e13      	ldr	r6, [pc, #76]	; (10ad0 <__aeabi_dsub+0x624>)
   10a82:	2700      	movs	r7, #0
   10a84:	e5d3      	b.n	1062e <__aeabi_dsub+0x182>
   10a86:	4650      	mov	r0, sl
   10a88:	4320      	orrs	r0, r4
   10a8a:	0007      	movs	r7, r0
   10a8c:	1e78      	subs	r0, r7, #1
   10a8e:	4187      	sbcs	r7, r0
   10a90:	2400      	movs	r4, #0
   10a92:	18bf      	adds	r7, r7, r2
   10a94:	e760      	b.n	10958 <__aeabi_dsub+0x4ac>
   10a96:	000c      	movs	r4, r1
   10a98:	0017      	movs	r7, r2
   10a9a:	e58d      	b.n	105b8 <__aeabi_dsub+0x10c>
   10a9c:	000c      	movs	r4, r1
   10a9e:	0017      	movs	r7, r2
   10aa0:	4e0b      	ldr	r6, [pc, #44]	; (10ad0 <__aeabi_dsub+0x624>)
   10aa2:	e589      	b.n	105b8 <__aeabi_dsub+0x10c>
   10aa4:	001e      	movs	r6, r3
   10aa6:	0027      	movs	r7, r4
   10aa8:	3e20      	subs	r6, #32
   10aaa:	40f7      	lsrs	r7, r6
   10aac:	2b20      	cmp	r3, #32
   10aae:	d00c      	beq.n	10aca <__aeabi_dsub+0x61e>
   10ab0:	2640      	movs	r6, #64	; 0x40
   10ab2:	1af3      	subs	r3, r6, r3
   10ab4:	409c      	lsls	r4, r3
   10ab6:	4650      	mov	r0, sl
   10ab8:	4320      	orrs	r0, r4
   10aba:	1e44      	subs	r4, r0, #1
   10abc:	41a0      	sbcs	r0, r4
   10abe:	4307      	orrs	r7, r0
   10ac0:	2400      	movs	r4, #0
   10ac2:	18bf      	adds	r7, r7, r2
   10ac4:	e748      	b.n	10958 <__aeabi_dsub+0x4ac>
   10ac6:	2400      	movs	r4, #0
   10ac8:	e7d0      	b.n	10a6c <__aeabi_dsub+0x5c0>
   10aca:	2400      	movs	r4, #0
   10acc:	e7f3      	b.n	10ab6 <__aeabi_dsub+0x60a>
   10ace:	46c0      	nop			; (mov r8, r8)
   10ad0:	000007ff 	.word	0x000007ff
   10ad4:	ff7fffff 	.word	0xff7fffff

00010ad8 <__aeabi_d2iz>:
   10ad8:	b530      	push	{r4, r5, lr}
   10ada:	4d13      	ldr	r5, [pc, #76]	; (10b28 <__aeabi_d2iz+0x50>)
   10adc:	030a      	lsls	r2, r1, #12
   10ade:	004b      	lsls	r3, r1, #1
   10ae0:	0b12      	lsrs	r2, r2, #12
   10ae2:	0d5b      	lsrs	r3, r3, #21
   10ae4:	0fc9      	lsrs	r1, r1, #31
   10ae6:	2400      	movs	r4, #0
   10ae8:	42ab      	cmp	r3, r5
   10aea:	dd10      	ble.n	10b0e <__aeabi_d2iz+0x36>
   10aec:	4c0f      	ldr	r4, [pc, #60]	; (10b2c <__aeabi_d2iz+0x54>)
   10aee:	42a3      	cmp	r3, r4
   10af0:	dc0f      	bgt.n	10b12 <__aeabi_d2iz+0x3a>
   10af2:	2480      	movs	r4, #128	; 0x80
   10af4:	4d0e      	ldr	r5, [pc, #56]	; (10b30 <__aeabi_d2iz+0x58>)
   10af6:	0364      	lsls	r4, r4, #13
   10af8:	4322      	orrs	r2, r4
   10afa:	1aed      	subs	r5, r5, r3
   10afc:	2d1f      	cmp	r5, #31
   10afe:	dd0b      	ble.n	10b18 <__aeabi_d2iz+0x40>
   10b00:	480c      	ldr	r0, [pc, #48]	; (10b34 <__aeabi_d2iz+0x5c>)
   10b02:	1ac3      	subs	r3, r0, r3
   10b04:	40da      	lsrs	r2, r3
   10b06:	4254      	negs	r4, r2
   10b08:	2900      	cmp	r1, #0
   10b0a:	d100      	bne.n	10b0e <__aeabi_d2iz+0x36>
   10b0c:	0014      	movs	r4, r2
   10b0e:	0020      	movs	r0, r4
   10b10:	bd30      	pop	{r4, r5, pc}
   10b12:	4b09      	ldr	r3, [pc, #36]	; (10b38 <__aeabi_d2iz+0x60>)
   10b14:	18cc      	adds	r4, r1, r3
   10b16:	e7fa      	b.n	10b0e <__aeabi_d2iz+0x36>
   10b18:	4c08      	ldr	r4, [pc, #32]	; (10b3c <__aeabi_d2iz+0x64>)
   10b1a:	40e8      	lsrs	r0, r5
   10b1c:	46a4      	mov	ip, r4
   10b1e:	4463      	add	r3, ip
   10b20:	409a      	lsls	r2, r3
   10b22:	4302      	orrs	r2, r0
   10b24:	e7ef      	b.n	10b06 <__aeabi_d2iz+0x2e>
   10b26:	46c0      	nop			; (mov r8, r8)
   10b28:	000003fe 	.word	0x000003fe
   10b2c:	0000041d 	.word	0x0000041d
   10b30:	00000433 	.word	0x00000433
   10b34:	00000413 	.word	0x00000413
   10b38:	7fffffff 	.word	0x7fffffff
   10b3c:	fffffbed 	.word	0xfffffbed

00010b40 <__aeabi_ui2d>:
   10b40:	b510      	push	{r4, lr}
   10b42:	1e04      	subs	r4, r0, #0
   10b44:	d028      	beq.n	10b98 <__aeabi_ui2d+0x58>
   10b46:	f000 f833 	bl	10bb0 <__clzsi2>
   10b4a:	4b15      	ldr	r3, [pc, #84]	; (10ba0 <__aeabi_ui2d+0x60>)
   10b4c:	4a15      	ldr	r2, [pc, #84]	; (10ba4 <__aeabi_ui2d+0x64>)
   10b4e:	1a1b      	subs	r3, r3, r0
   10b50:	1ad2      	subs	r2, r2, r3
   10b52:	2a1f      	cmp	r2, #31
   10b54:	dd15      	ble.n	10b82 <__aeabi_ui2d+0x42>
   10b56:	4a14      	ldr	r2, [pc, #80]	; (10ba8 <__aeabi_ui2d+0x68>)
   10b58:	1ad2      	subs	r2, r2, r3
   10b5a:	4094      	lsls	r4, r2
   10b5c:	2200      	movs	r2, #0
   10b5e:	0324      	lsls	r4, r4, #12
   10b60:	055b      	lsls	r3, r3, #21
   10b62:	0b24      	lsrs	r4, r4, #12
   10b64:	0d5b      	lsrs	r3, r3, #21
   10b66:	2100      	movs	r1, #0
   10b68:	0010      	movs	r0, r2
   10b6a:	0324      	lsls	r4, r4, #12
   10b6c:	0d0a      	lsrs	r2, r1, #20
   10b6e:	0b24      	lsrs	r4, r4, #12
   10b70:	0512      	lsls	r2, r2, #20
   10b72:	4322      	orrs	r2, r4
   10b74:	4c0d      	ldr	r4, [pc, #52]	; (10bac <__aeabi_ui2d+0x6c>)
   10b76:	051b      	lsls	r3, r3, #20
   10b78:	4022      	ands	r2, r4
   10b7a:	4313      	orrs	r3, r2
   10b7c:	005b      	lsls	r3, r3, #1
   10b7e:	0859      	lsrs	r1, r3, #1
   10b80:	bd10      	pop	{r4, pc}
   10b82:	0021      	movs	r1, r4
   10b84:	4091      	lsls	r1, r2
   10b86:	000a      	movs	r2, r1
   10b88:	210b      	movs	r1, #11
   10b8a:	1a08      	subs	r0, r1, r0
   10b8c:	40c4      	lsrs	r4, r0
   10b8e:	055b      	lsls	r3, r3, #21
   10b90:	0324      	lsls	r4, r4, #12
   10b92:	0b24      	lsrs	r4, r4, #12
   10b94:	0d5b      	lsrs	r3, r3, #21
   10b96:	e7e6      	b.n	10b66 <__aeabi_ui2d+0x26>
   10b98:	2300      	movs	r3, #0
   10b9a:	2400      	movs	r4, #0
   10b9c:	2200      	movs	r2, #0
   10b9e:	e7e2      	b.n	10b66 <__aeabi_ui2d+0x26>
   10ba0:	0000041e 	.word	0x0000041e
   10ba4:	00000433 	.word	0x00000433
   10ba8:	00000413 	.word	0x00000413
   10bac:	800fffff 	.word	0x800fffff

00010bb0 <__clzsi2>:
   10bb0:	211c      	movs	r1, #28
   10bb2:	2301      	movs	r3, #1
   10bb4:	041b      	lsls	r3, r3, #16
   10bb6:	4298      	cmp	r0, r3
   10bb8:	d301      	bcc.n	10bbe <__clzsi2+0xe>
   10bba:	0c00      	lsrs	r0, r0, #16
   10bbc:	3910      	subs	r1, #16
   10bbe:	0a1b      	lsrs	r3, r3, #8
   10bc0:	4298      	cmp	r0, r3
   10bc2:	d301      	bcc.n	10bc8 <__clzsi2+0x18>
   10bc4:	0a00      	lsrs	r0, r0, #8
   10bc6:	3908      	subs	r1, #8
   10bc8:	091b      	lsrs	r3, r3, #4
   10bca:	4298      	cmp	r0, r3
   10bcc:	d301      	bcc.n	10bd2 <__clzsi2+0x22>
   10bce:	0900      	lsrs	r0, r0, #4
   10bd0:	3904      	subs	r1, #4
   10bd2:	a202      	add	r2, pc, #8	; (adr r2, 10bdc <__clzsi2+0x2c>)
   10bd4:	5c10      	ldrb	r0, [r2, r0]
   10bd6:	1840      	adds	r0, r0, r1
   10bd8:	4770      	bx	lr
   10bda:	46c0      	nop			; (mov r8, r8)
   10bdc:	02020304 	.word	0x02020304
   10be0:	01010101 	.word	0x01010101
	...

00010bec <__assert_func>:
   10bec:	b530      	push	{r4, r5, lr}
   10bee:	001c      	movs	r4, r3
   10bf0:	4b09      	ldr	r3, [pc, #36]	; (10c18 <__assert_func+0x2c>)
   10bf2:	0005      	movs	r5, r0
   10bf4:	681b      	ldr	r3, [r3, #0]
   10bf6:	b085      	sub	sp, #20
   10bf8:	68d8      	ldr	r0, [r3, #12]
   10bfa:	4b08      	ldr	r3, [pc, #32]	; (10c1c <__assert_func+0x30>)
   10bfc:	2a00      	cmp	r2, #0
   10bfe:	d101      	bne.n	10c04 <__assert_func+0x18>
   10c00:	4b07      	ldr	r3, [pc, #28]	; (10c20 <__assert_func+0x34>)
   10c02:	001a      	movs	r2, r3
   10c04:	9202      	str	r2, [sp, #8]
   10c06:	9301      	str	r3, [sp, #4]
   10c08:	9100      	str	r1, [sp, #0]
   10c0a:	002b      	movs	r3, r5
   10c0c:	0022      	movs	r2, r4
   10c0e:	4905      	ldr	r1, [pc, #20]	; (10c24 <__assert_func+0x38>)
   10c10:	f000 f80a 	bl	10c28 <fiprintf>
   10c14:	f000 fd98 	bl	11748 <abort>
   10c18:	20000038 	.word	0x20000038
   10c1c:	00012c14 	.word	0x00012c14
   10c20:	00012c4f 	.word	0x00012c4f
   10c24:	00012c21 	.word	0x00012c21

00010c28 <fiprintf>:
   10c28:	b40e      	push	{r1, r2, r3}
   10c2a:	b503      	push	{r0, r1, lr}
   10c2c:	0001      	movs	r1, r0
   10c2e:	ab03      	add	r3, sp, #12
   10c30:	4804      	ldr	r0, [pc, #16]	; (10c44 <fiprintf+0x1c>)
   10c32:	cb04      	ldmia	r3!, {r2}
   10c34:	6800      	ldr	r0, [r0, #0]
   10c36:	9301      	str	r3, [sp, #4]
   10c38:	f000 f872 	bl	10d20 <_vfiprintf_r>
   10c3c:	b002      	add	sp, #8
   10c3e:	bc08      	pop	{r3}
   10c40:	b003      	add	sp, #12
   10c42:	4718      	bx	r3
   10c44:	20000038 	.word	0x20000038

00010c48 <__libc_init_array>:
   10c48:	b570      	push	{r4, r5, r6, lr}
   10c4a:	2600      	movs	r6, #0
   10c4c:	4d0c      	ldr	r5, [pc, #48]	; (10c80 <__libc_init_array+0x38>)
   10c4e:	4c0d      	ldr	r4, [pc, #52]	; (10c84 <__libc_init_array+0x3c>)
   10c50:	1b64      	subs	r4, r4, r5
   10c52:	10a4      	asrs	r4, r4, #2
   10c54:	42a6      	cmp	r6, r4
   10c56:	d109      	bne.n	10c6c <__libc_init_array+0x24>
   10c58:	2600      	movs	r6, #0
   10c5a:	f002 f845 	bl	12ce8 <_init>
   10c5e:	4d0a      	ldr	r5, [pc, #40]	; (10c88 <__libc_init_array+0x40>)
   10c60:	4c0a      	ldr	r4, [pc, #40]	; (10c8c <__libc_init_array+0x44>)
   10c62:	1b64      	subs	r4, r4, r5
   10c64:	10a4      	asrs	r4, r4, #2
   10c66:	42a6      	cmp	r6, r4
   10c68:	d105      	bne.n	10c76 <__libc_init_array+0x2e>
   10c6a:	bd70      	pop	{r4, r5, r6, pc}
   10c6c:	00b3      	lsls	r3, r6, #2
   10c6e:	58eb      	ldr	r3, [r5, r3]
   10c70:	4798      	blx	r3
   10c72:	3601      	adds	r6, #1
   10c74:	e7ee      	b.n	10c54 <__libc_init_array+0xc>
   10c76:	00b3      	lsls	r3, r6, #2
   10c78:	58eb      	ldr	r3, [r5, r3]
   10c7a:	4798      	blx	r3
   10c7c:	3601      	adds	r6, #1
   10c7e:	e7f2      	b.n	10c66 <__libc_init_array+0x1e>
   10c80:	00012cf4 	.word	0x00012cf4
   10c84:	00012cf4 	.word	0x00012cf4
   10c88:	00012cf4 	.word	0x00012cf4
   10c8c:	00012cf8 	.word	0x00012cf8

00010c90 <memcmp>:
   10c90:	b530      	push	{r4, r5, lr}
   10c92:	2400      	movs	r4, #0
   10c94:	42a2      	cmp	r2, r4
   10c96:	d101      	bne.n	10c9c <memcmp+0xc>
   10c98:	2000      	movs	r0, #0
   10c9a:	e005      	b.n	10ca8 <memcmp+0x18>
   10c9c:	5d03      	ldrb	r3, [r0, r4]
   10c9e:	1c65      	adds	r5, r4, #1
   10ca0:	5d0c      	ldrb	r4, [r1, r4]
   10ca2:	42a3      	cmp	r3, r4
   10ca4:	d001      	beq.n	10caa <memcmp+0x1a>
   10ca6:	1b18      	subs	r0, r3, r4
   10ca8:	bd30      	pop	{r4, r5, pc}
   10caa:	002c      	movs	r4, r5
   10cac:	e7f2      	b.n	10c94 <memcmp+0x4>

00010cae <memcpy>:
   10cae:	2300      	movs	r3, #0
   10cb0:	b510      	push	{r4, lr}
   10cb2:	429a      	cmp	r2, r3
   10cb4:	d100      	bne.n	10cb8 <memcpy+0xa>
   10cb6:	bd10      	pop	{r4, pc}
   10cb8:	5ccc      	ldrb	r4, [r1, r3]
   10cba:	54c4      	strb	r4, [r0, r3]
   10cbc:	3301      	adds	r3, #1
   10cbe:	e7f8      	b.n	10cb2 <memcpy+0x4>

00010cc0 <memset>:
   10cc0:	0003      	movs	r3, r0
   10cc2:	1882      	adds	r2, r0, r2
   10cc4:	4293      	cmp	r3, r2
   10cc6:	d100      	bne.n	10cca <memset+0xa>
   10cc8:	4770      	bx	lr
   10cca:	7019      	strb	r1, [r3, #0]
   10ccc:	3301      	adds	r3, #1
   10cce:	e7f9      	b.n	10cc4 <memset+0x4>

00010cd0 <__sfputc_r>:
   10cd0:	6893      	ldr	r3, [r2, #8]
   10cd2:	b510      	push	{r4, lr}
   10cd4:	3b01      	subs	r3, #1
   10cd6:	6093      	str	r3, [r2, #8]
   10cd8:	2b00      	cmp	r3, #0
   10cda:	da05      	bge.n	10ce8 <__sfputc_r+0x18>
   10cdc:	6994      	ldr	r4, [r2, #24]
   10cde:	42a3      	cmp	r3, r4
   10ce0:	db08      	blt.n	10cf4 <__sfputc_r+0x24>
   10ce2:	b2cb      	uxtb	r3, r1
   10ce4:	2b0a      	cmp	r3, #10
   10ce6:	d005      	beq.n	10cf4 <__sfputc_r+0x24>
   10ce8:	6813      	ldr	r3, [r2, #0]
   10cea:	1c58      	adds	r0, r3, #1
   10cec:	6010      	str	r0, [r2, #0]
   10cee:	7019      	strb	r1, [r3, #0]
   10cf0:	b2c8      	uxtb	r0, r1
   10cf2:	bd10      	pop	{r4, pc}
   10cf4:	f000 fc5c 	bl	115b0 <__swbuf_r>
   10cf8:	e7fb      	b.n	10cf2 <__sfputc_r+0x22>

00010cfa <__sfputs_r>:
   10cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10cfc:	0006      	movs	r6, r0
   10cfe:	000f      	movs	r7, r1
   10d00:	0014      	movs	r4, r2
   10d02:	18d5      	adds	r5, r2, r3
   10d04:	42ac      	cmp	r4, r5
   10d06:	d101      	bne.n	10d0c <__sfputs_r+0x12>
   10d08:	2000      	movs	r0, #0
   10d0a:	e007      	b.n	10d1c <__sfputs_r+0x22>
   10d0c:	7821      	ldrb	r1, [r4, #0]
   10d0e:	003a      	movs	r2, r7
   10d10:	0030      	movs	r0, r6
   10d12:	f7ff ffdd 	bl	10cd0 <__sfputc_r>
   10d16:	3401      	adds	r4, #1
   10d18:	1c43      	adds	r3, r0, #1
   10d1a:	d1f3      	bne.n	10d04 <__sfputs_r+0xa>
   10d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d1e:	Address 0x00010d1e is out of bounds.


00010d20 <_vfiprintf_r>:
   10d20:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d22:	b09f      	sub	sp, #124	; 0x7c
   10d24:	0006      	movs	r6, r0
   10d26:	000f      	movs	r7, r1
   10d28:	0014      	movs	r4, r2
   10d2a:	9305      	str	r3, [sp, #20]
   10d2c:	2800      	cmp	r0, #0
   10d2e:	d004      	beq.n	10d3a <_vfiprintf_r+0x1a>
   10d30:	6983      	ldr	r3, [r0, #24]
   10d32:	2b00      	cmp	r3, #0
   10d34:	d101      	bne.n	10d3a <_vfiprintf_r+0x1a>
   10d36:	f000 fe07 	bl	11948 <__sinit>
   10d3a:	4b7f      	ldr	r3, [pc, #508]	; (10f38 <_vfiprintf_r+0x218>)
   10d3c:	429f      	cmp	r7, r3
   10d3e:	d15c      	bne.n	10dfa <_vfiprintf_r+0xda>
   10d40:	6877      	ldr	r7, [r6, #4]
   10d42:	89bb      	ldrh	r3, [r7, #12]
   10d44:	071b      	lsls	r3, r3, #28
   10d46:	d562      	bpl.n	10e0e <_vfiprintf_r+0xee>
   10d48:	693b      	ldr	r3, [r7, #16]
   10d4a:	2b00      	cmp	r3, #0
   10d4c:	d05f      	beq.n	10e0e <_vfiprintf_r+0xee>
   10d4e:	2300      	movs	r3, #0
   10d50:	ad06      	add	r5, sp, #24
   10d52:	616b      	str	r3, [r5, #20]
   10d54:	3320      	adds	r3, #32
   10d56:	766b      	strb	r3, [r5, #25]
   10d58:	3310      	adds	r3, #16
   10d5a:	76ab      	strb	r3, [r5, #26]
   10d5c:	9402      	str	r4, [sp, #8]
   10d5e:	9c02      	ldr	r4, [sp, #8]
   10d60:	7823      	ldrb	r3, [r4, #0]
   10d62:	2b00      	cmp	r3, #0
   10d64:	d15d      	bne.n	10e22 <_vfiprintf_r+0x102>
   10d66:	9b02      	ldr	r3, [sp, #8]
   10d68:	1ae3      	subs	r3, r4, r3
   10d6a:	9304      	str	r3, [sp, #16]
   10d6c:	d00d      	beq.n	10d8a <_vfiprintf_r+0x6a>
   10d6e:	9b04      	ldr	r3, [sp, #16]
   10d70:	9a02      	ldr	r2, [sp, #8]
   10d72:	0039      	movs	r1, r7
   10d74:	0030      	movs	r0, r6
   10d76:	f7ff ffc0 	bl	10cfa <__sfputs_r>
   10d7a:	1c43      	adds	r3, r0, #1
   10d7c:	d100      	bne.n	10d80 <_vfiprintf_r+0x60>
   10d7e:	e0cc      	b.n	10f1a <_vfiprintf_r+0x1fa>
   10d80:	696a      	ldr	r2, [r5, #20]
   10d82:	9b04      	ldr	r3, [sp, #16]
   10d84:	4694      	mov	ip, r2
   10d86:	4463      	add	r3, ip
   10d88:	616b      	str	r3, [r5, #20]
   10d8a:	7823      	ldrb	r3, [r4, #0]
   10d8c:	2b00      	cmp	r3, #0
   10d8e:	d100      	bne.n	10d92 <_vfiprintf_r+0x72>
   10d90:	e0c3      	b.n	10f1a <_vfiprintf_r+0x1fa>
   10d92:	2201      	movs	r2, #1
   10d94:	2300      	movs	r3, #0
   10d96:	4252      	negs	r2, r2
   10d98:	606a      	str	r2, [r5, #4]
   10d9a:	a902      	add	r1, sp, #8
   10d9c:	3254      	adds	r2, #84	; 0x54
   10d9e:	1852      	adds	r2, r2, r1
   10da0:	3401      	adds	r4, #1
   10da2:	602b      	str	r3, [r5, #0]
   10da4:	60eb      	str	r3, [r5, #12]
   10da6:	60ab      	str	r3, [r5, #8]
   10da8:	7013      	strb	r3, [r2, #0]
   10daa:	65ab      	str	r3, [r5, #88]	; 0x58
   10dac:	7821      	ldrb	r1, [r4, #0]
   10dae:	2205      	movs	r2, #5
   10db0:	4862      	ldr	r0, [pc, #392]	; (10f3c <_vfiprintf_r+0x21c>)
   10db2:	f000 fed5 	bl	11b60 <memchr>
   10db6:	1c63      	adds	r3, r4, #1
   10db8:	469c      	mov	ip, r3
   10dba:	2800      	cmp	r0, #0
   10dbc:	d135      	bne.n	10e2a <_vfiprintf_r+0x10a>
   10dbe:	6829      	ldr	r1, [r5, #0]
   10dc0:	06cb      	lsls	r3, r1, #27
   10dc2:	d504      	bpl.n	10dce <_vfiprintf_r+0xae>
   10dc4:	2353      	movs	r3, #83	; 0x53
   10dc6:	aa02      	add	r2, sp, #8
   10dc8:	3020      	adds	r0, #32
   10dca:	189b      	adds	r3, r3, r2
   10dcc:	7018      	strb	r0, [r3, #0]
   10dce:	070b      	lsls	r3, r1, #28
   10dd0:	d504      	bpl.n	10ddc <_vfiprintf_r+0xbc>
   10dd2:	2353      	movs	r3, #83	; 0x53
   10dd4:	202b      	movs	r0, #43	; 0x2b
   10dd6:	aa02      	add	r2, sp, #8
   10dd8:	189b      	adds	r3, r3, r2
   10dda:	7018      	strb	r0, [r3, #0]
   10ddc:	7823      	ldrb	r3, [r4, #0]
   10dde:	2b2a      	cmp	r3, #42	; 0x2a
   10de0:	d02c      	beq.n	10e3c <_vfiprintf_r+0x11c>
   10de2:	2000      	movs	r0, #0
   10de4:	210a      	movs	r1, #10
   10de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10de8:	7822      	ldrb	r2, [r4, #0]
   10dea:	3a30      	subs	r2, #48	; 0x30
   10dec:	2a09      	cmp	r2, #9
   10dee:	d800      	bhi.n	10df2 <_vfiprintf_r+0xd2>
   10df0:	e06b      	b.n	10eca <_vfiprintf_r+0x1aa>
   10df2:	2800      	cmp	r0, #0
   10df4:	d02a      	beq.n	10e4c <_vfiprintf_r+0x12c>
   10df6:	9309      	str	r3, [sp, #36]	; 0x24
   10df8:	e028      	b.n	10e4c <_vfiprintf_r+0x12c>
   10dfa:	4b51      	ldr	r3, [pc, #324]	; (10f40 <_vfiprintf_r+0x220>)
   10dfc:	429f      	cmp	r7, r3
   10dfe:	d101      	bne.n	10e04 <_vfiprintf_r+0xe4>
   10e00:	68b7      	ldr	r7, [r6, #8]
   10e02:	e79e      	b.n	10d42 <_vfiprintf_r+0x22>
   10e04:	4b4f      	ldr	r3, [pc, #316]	; (10f44 <_vfiprintf_r+0x224>)
   10e06:	429f      	cmp	r7, r3
   10e08:	d19b      	bne.n	10d42 <_vfiprintf_r+0x22>
   10e0a:	68f7      	ldr	r7, [r6, #12]
   10e0c:	e799      	b.n	10d42 <_vfiprintf_r+0x22>
   10e0e:	0039      	movs	r1, r7
   10e10:	0030      	movs	r0, r6
   10e12:	f000 fc23 	bl	1165c <__swsetup_r>
   10e16:	2800      	cmp	r0, #0
   10e18:	d099      	beq.n	10d4e <_vfiprintf_r+0x2e>
   10e1a:	2001      	movs	r0, #1
   10e1c:	4240      	negs	r0, r0
   10e1e:	b01f      	add	sp, #124	; 0x7c
   10e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e22:	2b25      	cmp	r3, #37	; 0x25
   10e24:	d09f      	beq.n	10d66 <_vfiprintf_r+0x46>
   10e26:	3401      	adds	r4, #1
   10e28:	e79a      	b.n	10d60 <_vfiprintf_r+0x40>
   10e2a:	4b44      	ldr	r3, [pc, #272]	; (10f3c <_vfiprintf_r+0x21c>)
   10e2c:	6829      	ldr	r1, [r5, #0]
   10e2e:	1ac0      	subs	r0, r0, r3
   10e30:	2301      	movs	r3, #1
   10e32:	4083      	lsls	r3, r0
   10e34:	430b      	orrs	r3, r1
   10e36:	602b      	str	r3, [r5, #0]
   10e38:	4664      	mov	r4, ip
   10e3a:	e7b7      	b.n	10dac <_vfiprintf_r+0x8c>
   10e3c:	9b05      	ldr	r3, [sp, #20]
   10e3e:	1d18      	adds	r0, r3, #4
   10e40:	681b      	ldr	r3, [r3, #0]
   10e42:	9005      	str	r0, [sp, #20]
   10e44:	2b00      	cmp	r3, #0
   10e46:	db3a      	blt.n	10ebe <_vfiprintf_r+0x19e>
   10e48:	9309      	str	r3, [sp, #36]	; 0x24
   10e4a:	4664      	mov	r4, ip
   10e4c:	7823      	ldrb	r3, [r4, #0]
   10e4e:	2b2e      	cmp	r3, #46	; 0x2e
   10e50:	d10b      	bne.n	10e6a <_vfiprintf_r+0x14a>
   10e52:	7863      	ldrb	r3, [r4, #1]
   10e54:	1c62      	adds	r2, r4, #1
   10e56:	2b2a      	cmp	r3, #42	; 0x2a
   10e58:	d13f      	bne.n	10eda <_vfiprintf_r+0x1ba>
   10e5a:	9b05      	ldr	r3, [sp, #20]
   10e5c:	3402      	adds	r4, #2
   10e5e:	1d1a      	adds	r2, r3, #4
   10e60:	681b      	ldr	r3, [r3, #0]
   10e62:	9205      	str	r2, [sp, #20]
   10e64:	2b00      	cmp	r3, #0
   10e66:	db35      	blt.n	10ed4 <_vfiprintf_r+0x1b4>
   10e68:	9307      	str	r3, [sp, #28]
   10e6a:	7821      	ldrb	r1, [r4, #0]
   10e6c:	2203      	movs	r2, #3
   10e6e:	4836      	ldr	r0, [pc, #216]	; (10f48 <_vfiprintf_r+0x228>)
   10e70:	f000 fe76 	bl	11b60 <memchr>
   10e74:	2800      	cmp	r0, #0
   10e76:	d007      	beq.n	10e88 <_vfiprintf_r+0x168>
   10e78:	4b33      	ldr	r3, [pc, #204]	; (10f48 <_vfiprintf_r+0x228>)
   10e7a:	682a      	ldr	r2, [r5, #0]
   10e7c:	1ac0      	subs	r0, r0, r3
   10e7e:	2340      	movs	r3, #64	; 0x40
   10e80:	4083      	lsls	r3, r0
   10e82:	4313      	orrs	r3, r2
   10e84:	602b      	str	r3, [r5, #0]
   10e86:	3401      	adds	r4, #1
   10e88:	7821      	ldrb	r1, [r4, #0]
   10e8a:	1c63      	adds	r3, r4, #1
   10e8c:	2206      	movs	r2, #6
   10e8e:	482f      	ldr	r0, [pc, #188]	; (10f4c <_vfiprintf_r+0x22c>)
   10e90:	9302      	str	r3, [sp, #8]
   10e92:	7629      	strb	r1, [r5, #24]
   10e94:	f000 fe64 	bl	11b60 <memchr>
   10e98:	2800      	cmp	r0, #0
   10e9a:	d044      	beq.n	10f26 <_vfiprintf_r+0x206>
   10e9c:	4b2c      	ldr	r3, [pc, #176]	; (10f50 <_vfiprintf_r+0x230>)
   10e9e:	2b00      	cmp	r3, #0
   10ea0:	d12f      	bne.n	10f02 <_vfiprintf_r+0x1e2>
   10ea2:	6829      	ldr	r1, [r5, #0]
   10ea4:	9b05      	ldr	r3, [sp, #20]
   10ea6:	2207      	movs	r2, #7
   10ea8:	05c9      	lsls	r1, r1, #23
   10eaa:	d528      	bpl.n	10efe <_vfiprintf_r+0x1de>
   10eac:	189b      	adds	r3, r3, r2
   10eae:	4393      	bics	r3, r2
   10eb0:	3308      	adds	r3, #8
   10eb2:	9305      	str	r3, [sp, #20]
   10eb4:	696b      	ldr	r3, [r5, #20]
   10eb6:	9a03      	ldr	r2, [sp, #12]
   10eb8:	189b      	adds	r3, r3, r2
   10eba:	616b      	str	r3, [r5, #20]
   10ebc:	e74f      	b.n	10d5e <_vfiprintf_r+0x3e>
   10ebe:	425b      	negs	r3, r3
   10ec0:	60eb      	str	r3, [r5, #12]
   10ec2:	2302      	movs	r3, #2
   10ec4:	430b      	orrs	r3, r1
   10ec6:	602b      	str	r3, [r5, #0]
   10ec8:	e7bf      	b.n	10e4a <_vfiprintf_r+0x12a>
   10eca:	434b      	muls	r3, r1
   10ecc:	3401      	adds	r4, #1
   10ece:	189b      	adds	r3, r3, r2
   10ed0:	2001      	movs	r0, #1
   10ed2:	e789      	b.n	10de8 <_vfiprintf_r+0xc8>
   10ed4:	2301      	movs	r3, #1
   10ed6:	425b      	negs	r3, r3
   10ed8:	e7c6      	b.n	10e68 <_vfiprintf_r+0x148>
   10eda:	2300      	movs	r3, #0
   10edc:	0014      	movs	r4, r2
   10ede:	200a      	movs	r0, #10
   10ee0:	001a      	movs	r2, r3
   10ee2:	606b      	str	r3, [r5, #4]
   10ee4:	7821      	ldrb	r1, [r4, #0]
   10ee6:	3930      	subs	r1, #48	; 0x30
   10ee8:	2909      	cmp	r1, #9
   10eea:	d903      	bls.n	10ef4 <_vfiprintf_r+0x1d4>
   10eec:	2b00      	cmp	r3, #0
   10eee:	d0bc      	beq.n	10e6a <_vfiprintf_r+0x14a>
   10ef0:	9207      	str	r2, [sp, #28]
   10ef2:	e7ba      	b.n	10e6a <_vfiprintf_r+0x14a>
   10ef4:	4342      	muls	r2, r0
   10ef6:	3401      	adds	r4, #1
   10ef8:	1852      	adds	r2, r2, r1
   10efa:	2301      	movs	r3, #1
   10efc:	e7f2      	b.n	10ee4 <_vfiprintf_r+0x1c4>
   10efe:	3307      	adds	r3, #7
   10f00:	e7d5      	b.n	10eae <_vfiprintf_r+0x18e>
   10f02:	ab05      	add	r3, sp, #20
   10f04:	9300      	str	r3, [sp, #0]
   10f06:	003a      	movs	r2, r7
   10f08:	4b12      	ldr	r3, [pc, #72]	; (10f54 <_vfiprintf_r+0x234>)
   10f0a:	0029      	movs	r1, r5
   10f0c:	0030      	movs	r0, r6
   10f0e:	e000      	b.n	10f12 <_vfiprintf_r+0x1f2>
   10f10:	bf00      	nop
   10f12:	9003      	str	r0, [sp, #12]
   10f14:	9b03      	ldr	r3, [sp, #12]
   10f16:	3301      	adds	r3, #1
   10f18:	d1cc      	bne.n	10eb4 <_vfiprintf_r+0x194>
   10f1a:	89bb      	ldrh	r3, [r7, #12]
   10f1c:	065b      	lsls	r3, r3, #25
   10f1e:	d500      	bpl.n	10f22 <_vfiprintf_r+0x202>
   10f20:	e77b      	b.n	10e1a <_vfiprintf_r+0xfa>
   10f22:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10f24:	e77b      	b.n	10e1e <_vfiprintf_r+0xfe>
   10f26:	ab05      	add	r3, sp, #20
   10f28:	9300      	str	r3, [sp, #0]
   10f2a:	003a      	movs	r2, r7
   10f2c:	4b09      	ldr	r3, [pc, #36]	; (10f54 <_vfiprintf_r+0x234>)
   10f2e:	0029      	movs	r1, r5
   10f30:	0030      	movs	r0, r6
   10f32:	f000 f87f 	bl	11034 <_printf_i>
   10f36:	e7ec      	b.n	10f12 <_vfiprintf_r+0x1f2>
   10f38:	00012ca8 	.word	0x00012ca8
   10f3c:	00012c54 	.word	0x00012c54
   10f40:	00012cc8 	.word	0x00012cc8
   10f44:	00012c88 	.word	0x00012c88
   10f48:	00012c5a 	.word	0x00012c5a
   10f4c:	00012c5e 	.word	0x00012c5e
   10f50:	00000000 	.word	0x00000000
   10f54:	00010cfb 	.word	0x00010cfb

00010f58 <_printf_common>:
   10f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10f5a:	0015      	movs	r5, r2
   10f5c:	9301      	str	r3, [sp, #4]
   10f5e:	688a      	ldr	r2, [r1, #8]
   10f60:	690b      	ldr	r3, [r1, #16]
   10f62:	9000      	str	r0, [sp, #0]
   10f64:	000c      	movs	r4, r1
   10f66:	4293      	cmp	r3, r2
   10f68:	da00      	bge.n	10f6c <_printf_common+0x14>
   10f6a:	0013      	movs	r3, r2
   10f6c:	0022      	movs	r2, r4
   10f6e:	602b      	str	r3, [r5, #0]
   10f70:	3243      	adds	r2, #67	; 0x43
   10f72:	7812      	ldrb	r2, [r2, #0]
   10f74:	2a00      	cmp	r2, #0
   10f76:	d001      	beq.n	10f7c <_printf_common+0x24>
   10f78:	3301      	adds	r3, #1
   10f7a:	602b      	str	r3, [r5, #0]
   10f7c:	6823      	ldr	r3, [r4, #0]
   10f7e:	069b      	lsls	r3, r3, #26
   10f80:	d502      	bpl.n	10f88 <_printf_common+0x30>
   10f82:	682b      	ldr	r3, [r5, #0]
   10f84:	3302      	adds	r3, #2
   10f86:	602b      	str	r3, [r5, #0]
   10f88:	2706      	movs	r7, #6
   10f8a:	6823      	ldr	r3, [r4, #0]
   10f8c:	401f      	ands	r7, r3
   10f8e:	d027      	beq.n	10fe0 <_printf_common+0x88>
   10f90:	0023      	movs	r3, r4
   10f92:	3343      	adds	r3, #67	; 0x43
   10f94:	781b      	ldrb	r3, [r3, #0]
   10f96:	1e5a      	subs	r2, r3, #1
   10f98:	4193      	sbcs	r3, r2
   10f9a:	6822      	ldr	r2, [r4, #0]
   10f9c:	0692      	lsls	r2, r2, #26
   10f9e:	d430      	bmi.n	11002 <_printf_common+0xaa>
   10fa0:	0022      	movs	r2, r4
   10fa2:	9901      	ldr	r1, [sp, #4]
   10fa4:	3243      	adds	r2, #67	; 0x43
   10fa6:	9800      	ldr	r0, [sp, #0]
   10fa8:	9e08      	ldr	r6, [sp, #32]
   10faa:	47b0      	blx	r6
   10fac:	1c43      	adds	r3, r0, #1
   10fae:	d025      	beq.n	10ffc <_printf_common+0xa4>
   10fb0:	2306      	movs	r3, #6
   10fb2:	6820      	ldr	r0, [r4, #0]
   10fb4:	682a      	ldr	r2, [r5, #0]
   10fb6:	68e1      	ldr	r1, [r4, #12]
   10fb8:	4003      	ands	r3, r0
   10fba:	2500      	movs	r5, #0
   10fbc:	2b04      	cmp	r3, #4
   10fbe:	d103      	bne.n	10fc8 <_printf_common+0x70>
   10fc0:	1a8d      	subs	r5, r1, r2
   10fc2:	43eb      	mvns	r3, r5
   10fc4:	17db      	asrs	r3, r3, #31
   10fc6:	401d      	ands	r5, r3
   10fc8:	68a3      	ldr	r3, [r4, #8]
   10fca:	6922      	ldr	r2, [r4, #16]
   10fcc:	4293      	cmp	r3, r2
   10fce:	dd01      	ble.n	10fd4 <_printf_common+0x7c>
   10fd0:	1a9b      	subs	r3, r3, r2
   10fd2:	18ed      	adds	r5, r5, r3
   10fd4:	2700      	movs	r7, #0
   10fd6:	42bd      	cmp	r5, r7
   10fd8:	d120      	bne.n	1101c <_printf_common+0xc4>
   10fda:	2000      	movs	r0, #0
   10fdc:	e010      	b.n	11000 <_printf_common+0xa8>
   10fde:	3701      	adds	r7, #1
   10fe0:	68e3      	ldr	r3, [r4, #12]
   10fe2:	682a      	ldr	r2, [r5, #0]
   10fe4:	1a9b      	subs	r3, r3, r2
   10fe6:	429f      	cmp	r7, r3
   10fe8:	dad2      	bge.n	10f90 <_printf_common+0x38>
   10fea:	0022      	movs	r2, r4
   10fec:	2301      	movs	r3, #1
   10fee:	3219      	adds	r2, #25
   10ff0:	9901      	ldr	r1, [sp, #4]
   10ff2:	9800      	ldr	r0, [sp, #0]
   10ff4:	9e08      	ldr	r6, [sp, #32]
   10ff6:	47b0      	blx	r6
   10ff8:	1c43      	adds	r3, r0, #1
   10ffa:	d1f0      	bne.n	10fde <_printf_common+0x86>
   10ffc:	2001      	movs	r0, #1
   10ffe:	4240      	negs	r0, r0
   11000:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11002:	2030      	movs	r0, #48	; 0x30
   11004:	18e1      	adds	r1, r4, r3
   11006:	3143      	adds	r1, #67	; 0x43
   11008:	7008      	strb	r0, [r1, #0]
   1100a:	0021      	movs	r1, r4
   1100c:	1c5a      	adds	r2, r3, #1
   1100e:	3145      	adds	r1, #69	; 0x45
   11010:	7809      	ldrb	r1, [r1, #0]
   11012:	18a2      	adds	r2, r4, r2
   11014:	3243      	adds	r2, #67	; 0x43
   11016:	3302      	adds	r3, #2
   11018:	7011      	strb	r1, [r2, #0]
   1101a:	e7c1      	b.n	10fa0 <_printf_common+0x48>
   1101c:	0022      	movs	r2, r4
   1101e:	2301      	movs	r3, #1
   11020:	321a      	adds	r2, #26
   11022:	9901      	ldr	r1, [sp, #4]
   11024:	9800      	ldr	r0, [sp, #0]
   11026:	9e08      	ldr	r6, [sp, #32]
   11028:	47b0      	blx	r6
   1102a:	1c43      	adds	r3, r0, #1
   1102c:	d0e6      	beq.n	10ffc <_printf_common+0xa4>
   1102e:	3701      	adds	r7, #1
   11030:	e7d1      	b.n	10fd6 <_printf_common+0x7e>
   11032:	Address 0x00011032 is out of bounds.


00011034 <_printf_i>:
   11034:	b5f0      	push	{r4, r5, r6, r7, lr}
   11036:	b08b      	sub	sp, #44	; 0x2c
   11038:	9206      	str	r2, [sp, #24]
   1103a:	000a      	movs	r2, r1
   1103c:	3243      	adds	r2, #67	; 0x43
   1103e:	9307      	str	r3, [sp, #28]
   11040:	9005      	str	r0, [sp, #20]
   11042:	9204      	str	r2, [sp, #16]
   11044:	7e0a      	ldrb	r2, [r1, #24]
   11046:	000c      	movs	r4, r1
   11048:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1104a:	2a6e      	cmp	r2, #110	; 0x6e
   1104c:	d100      	bne.n	11050 <_printf_i+0x1c>
   1104e:	e08f      	b.n	11170 <_printf_i+0x13c>
   11050:	d817      	bhi.n	11082 <_printf_i+0x4e>
   11052:	2a63      	cmp	r2, #99	; 0x63
   11054:	d02c      	beq.n	110b0 <_printf_i+0x7c>
   11056:	d808      	bhi.n	1106a <_printf_i+0x36>
   11058:	2a00      	cmp	r2, #0
   1105a:	d100      	bne.n	1105e <_printf_i+0x2a>
   1105c:	e099      	b.n	11192 <_printf_i+0x15e>
   1105e:	2a58      	cmp	r2, #88	; 0x58
   11060:	d054      	beq.n	1110c <_printf_i+0xd8>
   11062:	0026      	movs	r6, r4
   11064:	3642      	adds	r6, #66	; 0x42
   11066:	7032      	strb	r2, [r6, #0]
   11068:	e029      	b.n	110be <_printf_i+0x8a>
   1106a:	2a64      	cmp	r2, #100	; 0x64
   1106c:	d001      	beq.n	11072 <_printf_i+0x3e>
   1106e:	2a69      	cmp	r2, #105	; 0x69
   11070:	d1f7      	bne.n	11062 <_printf_i+0x2e>
   11072:	6821      	ldr	r1, [r4, #0]
   11074:	681a      	ldr	r2, [r3, #0]
   11076:	0608      	lsls	r0, r1, #24
   11078:	d523      	bpl.n	110c2 <_printf_i+0x8e>
   1107a:	1d11      	adds	r1, r2, #4
   1107c:	6019      	str	r1, [r3, #0]
   1107e:	6815      	ldr	r5, [r2, #0]
   11080:	e025      	b.n	110ce <_printf_i+0x9a>
   11082:	2a73      	cmp	r2, #115	; 0x73
   11084:	d100      	bne.n	11088 <_printf_i+0x54>
   11086:	e088      	b.n	1119a <_printf_i+0x166>
   11088:	d808      	bhi.n	1109c <_printf_i+0x68>
   1108a:	2a6f      	cmp	r2, #111	; 0x6f
   1108c:	d029      	beq.n	110e2 <_printf_i+0xae>
   1108e:	2a70      	cmp	r2, #112	; 0x70
   11090:	d1e7      	bne.n	11062 <_printf_i+0x2e>
   11092:	2220      	movs	r2, #32
   11094:	6809      	ldr	r1, [r1, #0]
   11096:	430a      	orrs	r2, r1
   11098:	6022      	str	r2, [r4, #0]
   1109a:	e003      	b.n	110a4 <_printf_i+0x70>
   1109c:	2a75      	cmp	r2, #117	; 0x75
   1109e:	d020      	beq.n	110e2 <_printf_i+0xae>
   110a0:	2a78      	cmp	r2, #120	; 0x78
   110a2:	d1de      	bne.n	11062 <_printf_i+0x2e>
   110a4:	0022      	movs	r2, r4
   110a6:	2178      	movs	r1, #120	; 0x78
   110a8:	3245      	adds	r2, #69	; 0x45
   110aa:	7011      	strb	r1, [r2, #0]
   110ac:	4a6c      	ldr	r2, [pc, #432]	; (11260 <_printf_i+0x22c>)
   110ae:	e030      	b.n	11112 <_printf_i+0xde>
   110b0:	000e      	movs	r6, r1
   110b2:	681a      	ldr	r2, [r3, #0]
   110b4:	3642      	adds	r6, #66	; 0x42
   110b6:	1d11      	adds	r1, r2, #4
   110b8:	6019      	str	r1, [r3, #0]
   110ba:	6813      	ldr	r3, [r2, #0]
   110bc:	7033      	strb	r3, [r6, #0]
   110be:	2301      	movs	r3, #1
   110c0:	e079      	b.n	111b6 <_printf_i+0x182>
   110c2:	0649      	lsls	r1, r1, #25
   110c4:	d5d9      	bpl.n	1107a <_printf_i+0x46>
   110c6:	1d11      	adds	r1, r2, #4
   110c8:	6019      	str	r1, [r3, #0]
   110ca:	2300      	movs	r3, #0
   110cc:	5ed5      	ldrsh	r5, [r2, r3]
   110ce:	2d00      	cmp	r5, #0
   110d0:	da03      	bge.n	110da <_printf_i+0xa6>
   110d2:	232d      	movs	r3, #45	; 0x2d
   110d4:	9a04      	ldr	r2, [sp, #16]
   110d6:	426d      	negs	r5, r5
   110d8:	7013      	strb	r3, [r2, #0]
   110da:	4b62      	ldr	r3, [pc, #392]	; (11264 <_printf_i+0x230>)
   110dc:	270a      	movs	r7, #10
   110de:	9303      	str	r3, [sp, #12]
   110e0:	e02f      	b.n	11142 <_printf_i+0x10e>
   110e2:	6820      	ldr	r0, [r4, #0]
   110e4:	6819      	ldr	r1, [r3, #0]
   110e6:	0605      	lsls	r5, r0, #24
   110e8:	d503      	bpl.n	110f2 <_printf_i+0xbe>
   110ea:	1d08      	adds	r0, r1, #4
   110ec:	6018      	str	r0, [r3, #0]
   110ee:	680d      	ldr	r5, [r1, #0]
   110f0:	e005      	b.n	110fe <_printf_i+0xca>
   110f2:	0640      	lsls	r0, r0, #25
   110f4:	d5f9      	bpl.n	110ea <_printf_i+0xb6>
   110f6:	680d      	ldr	r5, [r1, #0]
   110f8:	1d08      	adds	r0, r1, #4
   110fa:	6018      	str	r0, [r3, #0]
   110fc:	b2ad      	uxth	r5, r5
   110fe:	4b59      	ldr	r3, [pc, #356]	; (11264 <_printf_i+0x230>)
   11100:	2708      	movs	r7, #8
   11102:	9303      	str	r3, [sp, #12]
   11104:	2a6f      	cmp	r2, #111	; 0x6f
   11106:	d018      	beq.n	1113a <_printf_i+0x106>
   11108:	270a      	movs	r7, #10
   1110a:	e016      	b.n	1113a <_printf_i+0x106>
   1110c:	3145      	adds	r1, #69	; 0x45
   1110e:	700a      	strb	r2, [r1, #0]
   11110:	4a54      	ldr	r2, [pc, #336]	; (11264 <_printf_i+0x230>)
   11112:	9203      	str	r2, [sp, #12]
   11114:	681a      	ldr	r2, [r3, #0]
   11116:	6821      	ldr	r1, [r4, #0]
   11118:	1d10      	adds	r0, r2, #4
   1111a:	6018      	str	r0, [r3, #0]
   1111c:	6815      	ldr	r5, [r2, #0]
   1111e:	0608      	lsls	r0, r1, #24
   11120:	d522      	bpl.n	11168 <_printf_i+0x134>
   11122:	07cb      	lsls	r3, r1, #31
   11124:	d502      	bpl.n	1112c <_printf_i+0xf8>
   11126:	2320      	movs	r3, #32
   11128:	4319      	orrs	r1, r3
   1112a:	6021      	str	r1, [r4, #0]
   1112c:	2710      	movs	r7, #16
   1112e:	2d00      	cmp	r5, #0
   11130:	d103      	bne.n	1113a <_printf_i+0x106>
   11132:	2320      	movs	r3, #32
   11134:	6822      	ldr	r2, [r4, #0]
   11136:	439a      	bics	r2, r3
   11138:	6022      	str	r2, [r4, #0]
   1113a:	0023      	movs	r3, r4
   1113c:	2200      	movs	r2, #0
   1113e:	3343      	adds	r3, #67	; 0x43
   11140:	701a      	strb	r2, [r3, #0]
   11142:	6863      	ldr	r3, [r4, #4]
   11144:	60a3      	str	r3, [r4, #8]
   11146:	2b00      	cmp	r3, #0
   11148:	db5c      	blt.n	11204 <_printf_i+0x1d0>
   1114a:	2204      	movs	r2, #4
   1114c:	6821      	ldr	r1, [r4, #0]
   1114e:	4391      	bics	r1, r2
   11150:	6021      	str	r1, [r4, #0]
   11152:	2d00      	cmp	r5, #0
   11154:	d158      	bne.n	11208 <_printf_i+0x1d4>
   11156:	9e04      	ldr	r6, [sp, #16]
   11158:	2b00      	cmp	r3, #0
   1115a:	d064      	beq.n	11226 <_printf_i+0x1f2>
   1115c:	0026      	movs	r6, r4
   1115e:	9b03      	ldr	r3, [sp, #12]
   11160:	3642      	adds	r6, #66	; 0x42
   11162:	781b      	ldrb	r3, [r3, #0]
   11164:	7033      	strb	r3, [r6, #0]
   11166:	e05e      	b.n	11226 <_printf_i+0x1f2>
   11168:	0648      	lsls	r0, r1, #25
   1116a:	d5da      	bpl.n	11122 <_printf_i+0xee>
   1116c:	b2ad      	uxth	r5, r5
   1116e:	e7d8      	b.n	11122 <_printf_i+0xee>
   11170:	6809      	ldr	r1, [r1, #0]
   11172:	681a      	ldr	r2, [r3, #0]
   11174:	0608      	lsls	r0, r1, #24
   11176:	d505      	bpl.n	11184 <_printf_i+0x150>
   11178:	1d11      	adds	r1, r2, #4
   1117a:	6019      	str	r1, [r3, #0]
   1117c:	6813      	ldr	r3, [r2, #0]
   1117e:	6962      	ldr	r2, [r4, #20]
   11180:	601a      	str	r2, [r3, #0]
   11182:	e006      	b.n	11192 <_printf_i+0x15e>
   11184:	0649      	lsls	r1, r1, #25
   11186:	d5f7      	bpl.n	11178 <_printf_i+0x144>
   11188:	1d11      	adds	r1, r2, #4
   1118a:	6019      	str	r1, [r3, #0]
   1118c:	6813      	ldr	r3, [r2, #0]
   1118e:	8aa2      	ldrh	r2, [r4, #20]
   11190:	801a      	strh	r2, [r3, #0]
   11192:	2300      	movs	r3, #0
   11194:	9e04      	ldr	r6, [sp, #16]
   11196:	6123      	str	r3, [r4, #16]
   11198:	e054      	b.n	11244 <_printf_i+0x210>
   1119a:	681a      	ldr	r2, [r3, #0]
   1119c:	1d11      	adds	r1, r2, #4
   1119e:	6019      	str	r1, [r3, #0]
   111a0:	6816      	ldr	r6, [r2, #0]
   111a2:	2100      	movs	r1, #0
   111a4:	6862      	ldr	r2, [r4, #4]
   111a6:	0030      	movs	r0, r6
   111a8:	f000 fcda 	bl	11b60 <memchr>
   111ac:	2800      	cmp	r0, #0
   111ae:	d001      	beq.n	111b4 <_printf_i+0x180>
   111b0:	1b80      	subs	r0, r0, r6
   111b2:	6060      	str	r0, [r4, #4]
   111b4:	6863      	ldr	r3, [r4, #4]
   111b6:	6123      	str	r3, [r4, #16]
   111b8:	2300      	movs	r3, #0
   111ba:	9a04      	ldr	r2, [sp, #16]
   111bc:	7013      	strb	r3, [r2, #0]
   111be:	e041      	b.n	11244 <_printf_i+0x210>
   111c0:	6923      	ldr	r3, [r4, #16]
   111c2:	0032      	movs	r2, r6
   111c4:	9906      	ldr	r1, [sp, #24]
   111c6:	9805      	ldr	r0, [sp, #20]
   111c8:	9d07      	ldr	r5, [sp, #28]
   111ca:	47a8      	blx	r5
   111cc:	1c43      	adds	r3, r0, #1
   111ce:	d043      	beq.n	11258 <_printf_i+0x224>
   111d0:	6823      	ldr	r3, [r4, #0]
   111d2:	2500      	movs	r5, #0
   111d4:	079b      	lsls	r3, r3, #30
   111d6:	d40f      	bmi.n	111f8 <_printf_i+0x1c4>
   111d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   111da:	68e0      	ldr	r0, [r4, #12]
   111dc:	4298      	cmp	r0, r3
   111de:	da3d      	bge.n	1125c <_printf_i+0x228>
   111e0:	0018      	movs	r0, r3
   111e2:	e03b      	b.n	1125c <_printf_i+0x228>
   111e4:	0022      	movs	r2, r4
   111e6:	2301      	movs	r3, #1
   111e8:	3219      	adds	r2, #25
   111ea:	9906      	ldr	r1, [sp, #24]
   111ec:	9805      	ldr	r0, [sp, #20]
   111ee:	9e07      	ldr	r6, [sp, #28]
   111f0:	47b0      	blx	r6
   111f2:	1c43      	adds	r3, r0, #1
   111f4:	d030      	beq.n	11258 <_printf_i+0x224>
   111f6:	3501      	adds	r5, #1
   111f8:	68e3      	ldr	r3, [r4, #12]
   111fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111fc:	1a9b      	subs	r3, r3, r2
   111fe:	429d      	cmp	r5, r3
   11200:	dbf0      	blt.n	111e4 <_printf_i+0x1b0>
   11202:	e7e9      	b.n	111d8 <_printf_i+0x1a4>
   11204:	2d00      	cmp	r5, #0
   11206:	d0a9      	beq.n	1115c <_printf_i+0x128>
   11208:	9e04      	ldr	r6, [sp, #16]
   1120a:	0028      	movs	r0, r5
   1120c:	0039      	movs	r1, r7
   1120e:	f7fd f999 	bl	e544 <__aeabi_uidivmod>
   11212:	9b03      	ldr	r3, [sp, #12]
   11214:	3e01      	subs	r6, #1
   11216:	5c5b      	ldrb	r3, [r3, r1]
   11218:	0028      	movs	r0, r5
   1121a:	7033      	strb	r3, [r6, #0]
   1121c:	0039      	movs	r1, r7
   1121e:	f7fd f90b 	bl	e438 <__udivsi3>
   11222:	1e05      	subs	r5, r0, #0
   11224:	d1f1      	bne.n	1120a <_printf_i+0x1d6>
   11226:	2f08      	cmp	r7, #8
   11228:	d109      	bne.n	1123e <_printf_i+0x20a>
   1122a:	6823      	ldr	r3, [r4, #0]
   1122c:	07db      	lsls	r3, r3, #31
   1122e:	d506      	bpl.n	1123e <_printf_i+0x20a>
   11230:	6863      	ldr	r3, [r4, #4]
   11232:	6922      	ldr	r2, [r4, #16]
   11234:	4293      	cmp	r3, r2
   11236:	dc02      	bgt.n	1123e <_printf_i+0x20a>
   11238:	2330      	movs	r3, #48	; 0x30
   1123a:	3e01      	subs	r6, #1
   1123c:	7033      	strb	r3, [r6, #0]
   1123e:	9b04      	ldr	r3, [sp, #16]
   11240:	1b9b      	subs	r3, r3, r6
   11242:	6123      	str	r3, [r4, #16]
   11244:	9b07      	ldr	r3, [sp, #28]
   11246:	aa09      	add	r2, sp, #36	; 0x24
   11248:	9300      	str	r3, [sp, #0]
   1124a:	0021      	movs	r1, r4
   1124c:	9b06      	ldr	r3, [sp, #24]
   1124e:	9805      	ldr	r0, [sp, #20]
   11250:	f7ff fe82 	bl	10f58 <_printf_common>
   11254:	1c43      	adds	r3, r0, #1
   11256:	d1b3      	bne.n	111c0 <_printf_i+0x18c>
   11258:	2001      	movs	r0, #1
   1125a:	4240      	negs	r0, r0
   1125c:	b00b      	add	sp, #44	; 0x2c
   1125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11260:	00012c76 	.word	0x00012c76
   11264:	00012c65 	.word	0x00012c65

00011268 <iprintf>:
   11268:	b40f      	push	{r0, r1, r2, r3}
   1126a:	4b0b      	ldr	r3, [pc, #44]	; (11298 <iprintf+0x30>)
   1126c:	b513      	push	{r0, r1, r4, lr}
   1126e:	681c      	ldr	r4, [r3, #0]
   11270:	2c00      	cmp	r4, #0
   11272:	d005      	beq.n	11280 <iprintf+0x18>
   11274:	69a3      	ldr	r3, [r4, #24]
   11276:	2b00      	cmp	r3, #0
   11278:	d102      	bne.n	11280 <iprintf+0x18>
   1127a:	0020      	movs	r0, r4
   1127c:	f000 fb64 	bl	11948 <__sinit>
   11280:	ab05      	add	r3, sp, #20
   11282:	9a04      	ldr	r2, [sp, #16]
   11284:	68a1      	ldr	r1, [r4, #8]
   11286:	0020      	movs	r0, r4
   11288:	9301      	str	r3, [sp, #4]
   1128a:	f7ff fd49 	bl	10d20 <_vfiprintf_r>
   1128e:	bc16      	pop	{r1, r2, r4}
   11290:	bc08      	pop	{r3}
   11292:	b004      	add	sp, #16
   11294:	4718      	bx	r3
   11296:	46c0      	nop			; (mov r8, r8)
   11298:	20000038 	.word	0x20000038

0001129c <_puts_r>:
   1129c:	b570      	push	{r4, r5, r6, lr}
   1129e:	0005      	movs	r5, r0
   112a0:	000e      	movs	r6, r1
   112a2:	2800      	cmp	r0, #0
   112a4:	d004      	beq.n	112b0 <_puts_r+0x14>
   112a6:	6983      	ldr	r3, [r0, #24]
   112a8:	2b00      	cmp	r3, #0
   112aa:	d101      	bne.n	112b0 <_puts_r+0x14>
   112ac:	f000 fb4c 	bl	11948 <__sinit>
   112b0:	69ab      	ldr	r3, [r5, #24]
   112b2:	68ac      	ldr	r4, [r5, #8]
   112b4:	2b00      	cmp	r3, #0
   112b6:	d102      	bne.n	112be <_puts_r+0x22>
   112b8:	0028      	movs	r0, r5
   112ba:	f000 fb45 	bl	11948 <__sinit>
   112be:	4b24      	ldr	r3, [pc, #144]	; (11350 <_puts_r+0xb4>)
   112c0:	429c      	cmp	r4, r3
   112c2:	d10f      	bne.n	112e4 <_puts_r+0x48>
   112c4:	686c      	ldr	r4, [r5, #4]
   112c6:	89a3      	ldrh	r3, [r4, #12]
   112c8:	071b      	lsls	r3, r3, #28
   112ca:	d502      	bpl.n	112d2 <_puts_r+0x36>
   112cc:	6923      	ldr	r3, [r4, #16]
   112ce:	2b00      	cmp	r3, #0
   112d0:	d120      	bne.n	11314 <_puts_r+0x78>
   112d2:	0021      	movs	r1, r4
   112d4:	0028      	movs	r0, r5
   112d6:	f000 f9c1 	bl	1165c <__swsetup_r>
   112da:	2800      	cmp	r0, #0
   112dc:	d01a      	beq.n	11314 <_puts_r+0x78>
   112de:	2001      	movs	r0, #1
   112e0:	4240      	negs	r0, r0
   112e2:	bd70      	pop	{r4, r5, r6, pc}
   112e4:	4b1b      	ldr	r3, [pc, #108]	; (11354 <_puts_r+0xb8>)
   112e6:	429c      	cmp	r4, r3
   112e8:	d101      	bne.n	112ee <_puts_r+0x52>
   112ea:	68ac      	ldr	r4, [r5, #8]
   112ec:	e7eb      	b.n	112c6 <_puts_r+0x2a>
   112ee:	4b1a      	ldr	r3, [pc, #104]	; (11358 <_puts_r+0xbc>)
   112f0:	429c      	cmp	r4, r3
   112f2:	d1e8      	bne.n	112c6 <_puts_r+0x2a>
   112f4:	68ec      	ldr	r4, [r5, #12]
   112f6:	e7e6      	b.n	112c6 <_puts_r+0x2a>
   112f8:	3b01      	subs	r3, #1
   112fa:	3601      	adds	r6, #1
   112fc:	60a3      	str	r3, [r4, #8]
   112fe:	2b00      	cmp	r3, #0
   11300:	da04      	bge.n	1130c <_puts_r+0x70>
   11302:	69a2      	ldr	r2, [r4, #24]
   11304:	4293      	cmp	r3, r2
   11306:	db16      	blt.n	11336 <_puts_r+0x9a>
   11308:	290a      	cmp	r1, #10
   1130a:	d014      	beq.n	11336 <_puts_r+0x9a>
   1130c:	6823      	ldr	r3, [r4, #0]
   1130e:	1c5a      	adds	r2, r3, #1
   11310:	6022      	str	r2, [r4, #0]
   11312:	7019      	strb	r1, [r3, #0]
   11314:	7831      	ldrb	r1, [r6, #0]
   11316:	68a3      	ldr	r3, [r4, #8]
   11318:	2900      	cmp	r1, #0
   1131a:	d1ed      	bne.n	112f8 <_puts_r+0x5c>
   1131c:	3b01      	subs	r3, #1
   1131e:	60a3      	str	r3, [r4, #8]
   11320:	2b00      	cmp	r3, #0
   11322:	da0f      	bge.n	11344 <_puts_r+0xa8>
   11324:	0022      	movs	r2, r4
   11326:	310a      	adds	r1, #10
   11328:	0028      	movs	r0, r5
   1132a:	f000 f941 	bl	115b0 <__swbuf_r>
   1132e:	1c43      	adds	r3, r0, #1
   11330:	d0d5      	beq.n	112de <_puts_r+0x42>
   11332:	200a      	movs	r0, #10
   11334:	e7d5      	b.n	112e2 <_puts_r+0x46>
   11336:	0022      	movs	r2, r4
   11338:	0028      	movs	r0, r5
   1133a:	f000 f939 	bl	115b0 <__swbuf_r>
   1133e:	1c43      	adds	r3, r0, #1
   11340:	d1e8      	bne.n	11314 <_puts_r+0x78>
   11342:	e7cc      	b.n	112de <_puts_r+0x42>
   11344:	200a      	movs	r0, #10
   11346:	6823      	ldr	r3, [r4, #0]
   11348:	1c5a      	adds	r2, r3, #1
   1134a:	6022      	str	r2, [r4, #0]
   1134c:	7018      	strb	r0, [r3, #0]
   1134e:	e7c8      	b.n	112e2 <_puts_r+0x46>
   11350:	00012ca8 	.word	0x00012ca8
   11354:	00012cc8 	.word	0x00012cc8
   11358:	00012c88 	.word	0x00012c88

0001135c <puts>:
   1135c:	b510      	push	{r4, lr}
   1135e:	4b03      	ldr	r3, [pc, #12]	; (1136c <puts+0x10>)
   11360:	0001      	movs	r1, r0
   11362:	6818      	ldr	r0, [r3, #0]
   11364:	f7ff ff9a 	bl	1129c <_puts_r>
   11368:	bd10      	pop	{r4, pc}
   1136a:	46c0      	nop			; (mov r8, r8)
   1136c:	20000038 	.word	0x20000038

00011370 <srand>:
   11370:	4b10      	ldr	r3, [pc, #64]	; (113b4 <srand+0x44>)
   11372:	b570      	push	{r4, r5, r6, lr}
   11374:	681c      	ldr	r4, [r3, #0]
   11376:	0005      	movs	r5, r0
   11378:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1137a:	2b00      	cmp	r3, #0
   1137c:	d115      	bne.n	113aa <srand+0x3a>
   1137e:	2018      	movs	r0, #24
   11380:	f000 fbe4 	bl	11b4c <malloc>
   11384:	4b0c      	ldr	r3, [pc, #48]	; (113b8 <srand+0x48>)
   11386:	63a0      	str	r0, [r4, #56]	; 0x38
   11388:	8003      	strh	r3, [r0, #0]
   1138a:	4b0c      	ldr	r3, [pc, #48]	; (113bc <srand+0x4c>)
   1138c:	2201      	movs	r2, #1
   1138e:	8043      	strh	r3, [r0, #2]
   11390:	4b0b      	ldr	r3, [pc, #44]	; (113c0 <srand+0x50>)
   11392:	8083      	strh	r3, [r0, #4]
   11394:	4b0b      	ldr	r3, [pc, #44]	; (113c4 <srand+0x54>)
   11396:	80c3      	strh	r3, [r0, #6]
   11398:	4b0b      	ldr	r3, [pc, #44]	; (113c8 <srand+0x58>)
   1139a:	8103      	strh	r3, [r0, #8]
   1139c:	2305      	movs	r3, #5
   1139e:	8143      	strh	r3, [r0, #10]
   113a0:	3306      	adds	r3, #6
   113a2:	8183      	strh	r3, [r0, #12]
   113a4:	2300      	movs	r3, #0
   113a6:	6102      	str	r2, [r0, #16]
   113a8:	6143      	str	r3, [r0, #20]
   113aa:	2200      	movs	r2, #0
   113ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   113ae:	611d      	str	r5, [r3, #16]
   113b0:	615a      	str	r2, [r3, #20]
   113b2:	bd70      	pop	{r4, r5, r6, pc}
   113b4:	20000038 	.word	0x20000038
   113b8:	0000330e 	.word	0x0000330e
   113bc:	ffffabcd 	.word	0xffffabcd
   113c0:	00001234 	.word	0x00001234
   113c4:	ffffe66d 	.word	0xffffe66d
   113c8:	ffffdeec 	.word	0xffffdeec

000113cc <rand>:
   113cc:	4b15      	ldr	r3, [pc, #84]	; (11424 <rand+0x58>)
   113ce:	b510      	push	{r4, lr}
   113d0:	681c      	ldr	r4, [r3, #0]
   113d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   113d4:	2b00      	cmp	r3, #0
   113d6:	d115      	bne.n	11404 <rand+0x38>
   113d8:	2018      	movs	r0, #24
   113da:	f000 fbb7 	bl	11b4c <malloc>
   113de:	4b12      	ldr	r3, [pc, #72]	; (11428 <rand+0x5c>)
   113e0:	63a0      	str	r0, [r4, #56]	; 0x38
   113e2:	8003      	strh	r3, [r0, #0]
   113e4:	4b11      	ldr	r3, [pc, #68]	; (1142c <rand+0x60>)
   113e6:	2201      	movs	r2, #1
   113e8:	8043      	strh	r3, [r0, #2]
   113ea:	4b11      	ldr	r3, [pc, #68]	; (11430 <rand+0x64>)
   113ec:	8083      	strh	r3, [r0, #4]
   113ee:	4b11      	ldr	r3, [pc, #68]	; (11434 <rand+0x68>)
   113f0:	80c3      	strh	r3, [r0, #6]
   113f2:	4b11      	ldr	r3, [pc, #68]	; (11438 <rand+0x6c>)
   113f4:	8103      	strh	r3, [r0, #8]
   113f6:	2305      	movs	r3, #5
   113f8:	8143      	strh	r3, [r0, #10]
   113fa:	3306      	adds	r3, #6
   113fc:	8183      	strh	r3, [r0, #12]
   113fe:	2300      	movs	r3, #0
   11400:	6102      	str	r2, [r0, #16]
   11402:	6143      	str	r3, [r0, #20]
   11404:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   11406:	4a0d      	ldr	r2, [pc, #52]	; (1143c <rand+0x70>)
   11408:	6920      	ldr	r0, [r4, #16]
   1140a:	6961      	ldr	r1, [r4, #20]
   1140c:	4b0c      	ldr	r3, [pc, #48]	; (11440 <rand+0x74>)
   1140e:	f7fd f9c3 	bl	e798 <__aeabi_lmul>
   11412:	2201      	movs	r2, #1
   11414:	2300      	movs	r3, #0
   11416:	1880      	adds	r0, r0, r2
   11418:	4159      	adcs	r1, r3
   1141a:	6120      	str	r0, [r4, #16]
   1141c:	6161      	str	r1, [r4, #20]
   1141e:	0048      	lsls	r0, r1, #1
   11420:	0840      	lsrs	r0, r0, #1
   11422:	bd10      	pop	{r4, pc}
   11424:	20000038 	.word	0x20000038
   11428:	0000330e 	.word	0x0000330e
   1142c:	ffffabcd 	.word	0xffffabcd
   11430:	00001234 	.word	0x00001234
   11434:	ffffe66d 	.word	0xffffe66d
   11438:	ffffdeec 	.word	0xffffdeec
   1143c:	4c957f2d 	.word	0x4c957f2d
   11440:	5851f42d 	.word	0x5851f42d

00011444 <setbuf>:
   11444:	424a      	negs	r2, r1
   11446:	414a      	adcs	r2, r1
   11448:	2380      	movs	r3, #128	; 0x80
   1144a:	b510      	push	{r4, lr}
   1144c:	0052      	lsls	r2, r2, #1
   1144e:	00db      	lsls	r3, r3, #3
   11450:	f000 f802 	bl	11458 <setvbuf>
   11454:	bd10      	pop	{r4, pc}
   11456:	Address 0x00011456 is out of bounds.


00011458 <setvbuf>:
   11458:	b5f0      	push	{r4, r5, r6, r7, lr}
   1145a:	001d      	movs	r5, r3
   1145c:	4b4f      	ldr	r3, [pc, #316]	; (1159c <setvbuf+0x144>)
   1145e:	b085      	sub	sp, #20
   11460:	681e      	ldr	r6, [r3, #0]
   11462:	0004      	movs	r4, r0
   11464:	000f      	movs	r7, r1
   11466:	9200      	str	r2, [sp, #0]
   11468:	2e00      	cmp	r6, #0
   1146a:	d005      	beq.n	11478 <setvbuf+0x20>
   1146c:	69b3      	ldr	r3, [r6, #24]
   1146e:	2b00      	cmp	r3, #0
   11470:	d102      	bne.n	11478 <setvbuf+0x20>
   11472:	0030      	movs	r0, r6
   11474:	f000 fa68 	bl	11948 <__sinit>
   11478:	4b49      	ldr	r3, [pc, #292]	; (115a0 <setvbuf+0x148>)
   1147a:	429c      	cmp	r4, r3
   1147c:	d150      	bne.n	11520 <setvbuf+0xc8>
   1147e:	6874      	ldr	r4, [r6, #4]
   11480:	9b00      	ldr	r3, [sp, #0]
   11482:	2b02      	cmp	r3, #2
   11484:	d005      	beq.n	11492 <setvbuf+0x3a>
   11486:	2b01      	cmp	r3, #1
   11488:	d900      	bls.n	1148c <setvbuf+0x34>
   1148a:	e084      	b.n	11596 <setvbuf+0x13e>
   1148c:	2d00      	cmp	r5, #0
   1148e:	da00      	bge.n	11492 <setvbuf+0x3a>
   11490:	e081      	b.n	11596 <setvbuf+0x13e>
   11492:	0021      	movs	r1, r4
   11494:	0030      	movs	r0, r6
   11496:	f000 f9e9 	bl	1186c <_fflush_r>
   1149a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1149c:	2900      	cmp	r1, #0
   1149e:	d008      	beq.n	114b2 <setvbuf+0x5a>
   114a0:	0023      	movs	r3, r4
   114a2:	3344      	adds	r3, #68	; 0x44
   114a4:	4299      	cmp	r1, r3
   114a6:	d002      	beq.n	114ae <setvbuf+0x56>
   114a8:	0030      	movs	r0, r6
   114aa:	f000 fb65 	bl	11b78 <_free_r>
   114ae:	2300      	movs	r3, #0
   114b0:	6363      	str	r3, [r4, #52]	; 0x34
   114b2:	2300      	movs	r3, #0
   114b4:	61a3      	str	r3, [r4, #24]
   114b6:	6063      	str	r3, [r4, #4]
   114b8:	89a3      	ldrh	r3, [r4, #12]
   114ba:	061b      	lsls	r3, r3, #24
   114bc:	d503      	bpl.n	114c6 <setvbuf+0x6e>
   114be:	6921      	ldr	r1, [r4, #16]
   114c0:	0030      	movs	r0, r6
   114c2:	f000 fb59 	bl	11b78 <_free_r>
   114c6:	89a3      	ldrh	r3, [r4, #12]
   114c8:	4a36      	ldr	r2, [pc, #216]	; (115a4 <setvbuf+0x14c>)
   114ca:	4013      	ands	r3, r2
   114cc:	81a3      	strh	r3, [r4, #12]
   114ce:	9b00      	ldr	r3, [sp, #0]
   114d0:	2b02      	cmp	r3, #2
   114d2:	d05a      	beq.n	1158a <setvbuf+0x132>
   114d4:	ab03      	add	r3, sp, #12
   114d6:	aa02      	add	r2, sp, #8
   114d8:	0021      	movs	r1, r4
   114da:	0030      	movs	r0, r6
   114dc:	f000 faca 	bl	11a74 <__swhatbuf_r>
   114e0:	89a3      	ldrh	r3, [r4, #12]
   114e2:	4318      	orrs	r0, r3
   114e4:	81a0      	strh	r0, [r4, #12]
   114e6:	2d00      	cmp	r5, #0
   114e8:	d124      	bne.n	11534 <setvbuf+0xdc>
   114ea:	9d02      	ldr	r5, [sp, #8]
   114ec:	0028      	movs	r0, r5
   114ee:	f000 fb2d 	bl	11b4c <malloc>
   114f2:	9501      	str	r5, [sp, #4]
   114f4:	1e07      	subs	r7, r0, #0
   114f6:	d142      	bne.n	1157e <setvbuf+0x126>
   114f8:	9b02      	ldr	r3, [sp, #8]
   114fa:	9301      	str	r3, [sp, #4]
   114fc:	42ab      	cmp	r3, r5
   114fe:	d139      	bne.n	11574 <setvbuf+0x11c>
   11500:	2001      	movs	r0, #1
   11502:	4240      	negs	r0, r0
   11504:	2302      	movs	r3, #2
   11506:	89a2      	ldrh	r2, [r4, #12]
   11508:	4313      	orrs	r3, r2
   1150a:	81a3      	strh	r3, [r4, #12]
   1150c:	2300      	movs	r3, #0
   1150e:	60a3      	str	r3, [r4, #8]
   11510:	0023      	movs	r3, r4
   11512:	3347      	adds	r3, #71	; 0x47
   11514:	6023      	str	r3, [r4, #0]
   11516:	6123      	str	r3, [r4, #16]
   11518:	2301      	movs	r3, #1
   1151a:	6163      	str	r3, [r4, #20]
   1151c:	b005      	add	sp, #20
   1151e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11520:	4b21      	ldr	r3, [pc, #132]	; (115a8 <setvbuf+0x150>)
   11522:	429c      	cmp	r4, r3
   11524:	d101      	bne.n	1152a <setvbuf+0xd2>
   11526:	68b4      	ldr	r4, [r6, #8]
   11528:	e7aa      	b.n	11480 <setvbuf+0x28>
   1152a:	4b20      	ldr	r3, [pc, #128]	; (115ac <setvbuf+0x154>)
   1152c:	429c      	cmp	r4, r3
   1152e:	d1a7      	bne.n	11480 <setvbuf+0x28>
   11530:	68f4      	ldr	r4, [r6, #12]
   11532:	e7a5      	b.n	11480 <setvbuf+0x28>
   11534:	2f00      	cmp	r7, #0
   11536:	d0d9      	beq.n	114ec <setvbuf+0x94>
   11538:	69b3      	ldr	r3, [r6, #24]
   1153a:	2b00      	cmp	r3, #0
   1153c:	d102      	bne.n	11544 <setvbuf+0xec>
   1153e:	0030      	movs	r0, r6
   11540:	f000 fa02 	bl	11948 <__sinit>
   11544:	9b00      	ldr	r3, [sp, #0]
   11546:	2b01      	cmp	r3, #1
   11548:	d103      	bne.n	11552 <setvbuf+0xfa>
   1154a:	89a3      	ldrh	r3, [r4, #12]
   1154c:	9a00      	ldr	r2, [sp, #0]
   1154e:	431a      	orrs	r2, r3
   11550:	81a2      	strh	r2, [r4, #12]
   11552:	2008      	movs	r0, #8
   11554:	89a3      	ldrh	r3, [r4, #12]
   11556:	6027      	str	r7, [r4, #0]
   11558:	6127      	str	r7, [r4, #16]
   1155a:	6165      	str	r5, [r4, #20]
   1155c:	4018      	ands	r0, r3
   1155e:	d018      	beq.n	11592 <setvbuf+0x13a>
   11560:	2001      	movs	r0, #1
   11562:	4018      	ands	r0, r3
   11564:	2300      	movs	r3, #0
   11566:	4298      	cmp	r0, r3
   11568:	d011      	beq.n	1158e <setvbuf+0x136>
   1156a:	426d      	negs	r5, r5
   1156c:	60a3      	str	r3, [r4, #8]
   1156e:	61a5      	str	r5, [r4, #24]
   11570:	0018      	movs	r0, r3
   11572:	e7d3      	b.n	1151c <setvbuf+0xc4>
   11574:	9801      	ldr	r0, [sp, #4]
   11576:	f000 fae9 	bl	11b4c <malloc>
   1157a:	1e07      	subs	r7, r0, #0
   1157c:	d0c0      	beq.n	11500 <setvbuf+0xa8>
   1157e:	2380      	movs	r3, #128	; 0x80
   11580:	89a2      	ldrh	r2, [r4, #12]
   11582:	9d01      	ldr	r5, [sp, #4]
   11584:	4313      	orrs	r3, r2
   11586:	81a3      	strh	r3, [r4, #12]
   11588:	e7d6      	b.n	11538 <setvbuf+0xe0>
   1158a:	2000      	movs	r0, #0
   1158c:	e7ba      	b.n	11504 <setvbuf+0xac>
   1158e:	60a5      	str	r5, [r4, #8]
   11590:	e7c4      	b.n	1151c <setvbuf+0xc4>
   11592:	60a0      	str	r0, [r4, #8]
   11594:	e7c2      	b.n	1151c <setvbuf+0xc4>
   11596:	2001      	movs	r0, #1
   11598:	4240      	negs	r0, r0
   1159a:	e7bf      	b.n	1151c <setvbuf+0xc4>
   1159c:	20000038 	.word	0x20000038
   115a0:	00012ca8 	.word	0x00012ca8
   115a4:	fffff35c 	.word	0xfffff35c
   115a8:	00012cc8 	.word	0x00012cc8
   115ac:	00012c88 	.word	0x00012c88

000115b0 <__swbuf_r>:
   115b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115b2:	0005      	movs	r5, r0
   115b4:	000e      	movs	r6, r1
   115b6:	0014      	movs	r4, r2
   115b8:	2800      	cmp	r0, #0
   115ba:	d004      	beq.n	115c6 <__swbuf_r+0x16>
   115bc:	6983      	ldr	r3, [r0, #24]
   115be:	2b00      	cmp	r3, #0
   115c0:	d101      	bne.n	115c6 <__swbuf_r+0x16>
   115c2:	f000 f9c1 	bl	11948 <__sinit>
   115c6:	4b22      	ldr	r3, [pc, #136]	; (11650 <__swbuf_r+0xa0>)
   115c8:	429c      	cmp	r4, r3
   115ca:	d12d      	bne.n	11628 <__swbuf_r+0x78>
   115cc:	686c      	ldr	r4, [r5, #4]
   115ce:	69a3      	ldr	r3, [r4, #24]
   115d0:	60a3      	str	r3, [r4, #8]
   115d2:	89a3      	ldrh	r3, [r4, #12]
   115d4:	071b      	lsls	r3, r3, #28
   115d6:	d531      	bpl.n	1163c <__swbuf_r+0x8c>
   115d8:	6923      	ldr	r3, [r4, #16]
   115da:	2b00      	cmp	r3, #0
   115dc:	d02e      	beq.n	1163c <__swbuf_r+0x8c>
   115de:	6823      	ldr	r3, [r4, #0]
   115e0:	6922      	ldr	r2, [r4, #16]
   115e2:	b2f7      	uxtb	r7, r6
   115e4:	1a98      	subs	r0, r3, r2
   115e6:	6963      	ldr	r3, [r4, #20]
   115e8:	b2f6      	uxtb	r6, r6
   115ea:	4298      	cmp	r0, r3
   115ec:	db05      	blt.n	115fa <__swbuf_r+0x4a>
   115ee:	0021      	movs	r1, r4
   115f0:	0028      	movs	r0, r5
   115f2:	f000 f93b 	bl	1186c <_fflush_r>
   115f6:	2800      	cmp	r0, #0
   115f8:	d126      	bne.n	11648 <__swbuf_r+0x98>
   115fa:	68a3      	ldr	r3, [r4, #8]
   115fc:	3001      	adds	r0, #1
   115fe:	3b01      	subs	r3, #1
   11600:	60a3      	str	r3, [r4, #8]
   11602:	6823      	ldr	r3, [r4, #0]
   11604:	1c5a      	adds	r2, r3, #1
   11606:	6022      	str	r2, [r4, #0]
   11608:	701f      	strb	r7, [r3, #0]
   1160a:	6963      	ldr	r3, [r4, #20]
   1160c:	4298      	cmp	r0, r3
   1160e:	d004      	beq.n	1161a <__swbuf_r+0x6a>
   11610:	89a3      	ldrh	r3, [r4, #12]
   11612:	07db      	lsls	r3, r3, #31
   11614:	d51a      	bpl.n	1164c <__swbuf_r+0x9c>
   11616:	2e0a      	cmp	r6, #10
   11618:	d118      	bne.n	1164c <__swbuf_r+0x9c>
   1161a:	0021      	movs	r1, r4
   1161c:	0028      	movs	r0, r5
   1161e:	f000 f925 	bl	1186c <_fflush_r>
   11622:	2800      	cmp	r0, #0
   11624:	d012      	beq.n	1164c <__swbuf_r+0x9c>
   11626:	e00f      	b.n	11648 <__swbuf_r+0x98>
   11628:	4b0a      	ldr	r3, [pc, #40]	; (11654 <__swbuf_r+0xa4>)
   1162a:	429c      	cmp	r4, r3
   1162c:	d101      	bne.n	11632 <__swbuf_r+0x82>
   1162e:	68ac      	ldr	r4, [r5, #8]
   11630:	e7cd      	b.n	115ce <__swbuf_r+0x1e>
   11632:	4b09      	ldr	r3, [pc, #36]	; (11658 <__swbuf_r+0xa8>)
   11634:	429c      	cmp	r4, r3
   11636:	d1ca      	bne.n	115ce <__swbuf_r+0x1e>
   11638:	68ec      	ldr	r4, [r5, #12]
   1163a:	e7c8      	b.n	115ce <__swbuf_r+0x1e>
   1163c:	0021      	movs	r1, r4
   1163e:	0028      	movs	r0, r5
   11640:	f000 f80c 	bl	1165c <__swsetup_r>
   11644:	2800      	cmp	r0, #0
   11646:	d0ca      	beq.n	115de <__swbuf_r+0x2e>
   11648:	2601      	movs	r6, #1
   1164a:	4276      	negs	r6, r6
   1164c:	0030      	movs	r0, r6
   1164e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11650:	00012ca8 	.word	0x00012ca8
   11654:	00012cc8 	.word	0x00012cc8
   11658:	00012c88 	.word	0x00012c88

0001165c <__swsetup_r>:
   1165c:	4b36      	ldr	r3, [pc, #216]	; (11738 <__swsetup_r+0xdc>)
   1165e:	b570      	push	{r4, r5, r6, lr}
   11660:	681d      	ldr	r5, [r3, #0]
   11662:	0006      	movs	r6, r0
   11664:	000c      	movs	r4, r1
   11666:	2d00      	cmp	r5, #0
   11668:	d005      	beq.n	11676 <__swsetup_r+0x1a>
   1166a:	69ab      	ldr	r3, [r5, #24]
   1166c:	2b00      	cmp	r3, #0
   1166e:	d102      	bne.n	11676 <__swsetup_r+0x1a>
   11670:	0028      	movs	r0, r5
   11672:	f000 f969 	bl	11948 <__sinit>
   11676:	4b31      	ldr	r3, [pc, #196]	; (1173c <__swsetup_r+0xe0>)
   11678:	429c      	cmp	r4, r3
   1167a:	d10f      	bne.n	1169c <__swsetup_r+0x40>
   1167c:	686c      	ldr	r4, [r5, #4]
   1167e:	230c      	movs	r3, #12
   11680:	5ee2      	ldrsh	r2, [r4, r3]
   11682:	b293      	uxth	r3, r2
   11684:	0719      	lsls	r1, r3, #28
   11686:	d42d      	bmi.n	116e4 <__swsetup_r+0x88>
   11688:	06d9      	lsls	r1, r3, #27
   1168a:	d411      	bmi.n	116b0 <__swsetup_r+0x54>
   1168c:	2309      	movs	r3, #9
   1168e:	2001      	movs	r0, #1
   11690:	6033      	str	r3, [r6, #0]
   11692:	3337      	adds	r3, #55	; 0x37
   11694:	4313      	orrs	r3, r2
   11696:	81a3      	strh	r3, [r4, #12]
   11698:	4240      	negs	r0, r0
   1169a:	bd70      	pop	{r4, r5, r6, pc}
   1169c:	4b28      	ldr	r3, [pc, #160]	; (11740 <__swsetup_r+0xe4>)
   1169e:	429c      	cmp	r4, r3
   116a0:	d101      	bne.n	116a6 <__swsetup_r+0x4a>
   116a2:	68ac      	ldr	r4, [r5, #8]
   116a4:	e7eb      	b.n	1167e <__swsetup_r+0x22>
   116a6:	4b27      	ldr	r3, [pc, #156]	; (11744 <__swsetup_r+0xe8>)
   116a8:	429c      	cmp	r4, r3
   116aa:	d1e8      	bne.n	1167e <__swsetup_r+0x22>
   116ac:	68ec      	ldr	r4, [r5, #12]
   116ae:	e7e6      	b.n	1167e <__swsetup_r+0x22>
   116b0:	075b      	lsls	r3, r3, #29
   116b2:	d513      	bpl.n	116dc <__swsetup_r+0x80>
   116b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   116b6:	2900      	cmp	r1, #0
   116b8:	d008      	beq.n	116cc <__swsetup_r+0x70>
   116ba:	0023      	movs	r3, r4
   116bc:	3344      	adds	r3, #68	; 0x44
   116be:	4299      	cmp	r1, r3
   116c0:	d002      	beq.n	116c8 <__swsetup_r+0x6c>
   116c2:	0030      	movs	r0, r6
   116c4:	f000 fa58 	bl	11b78 <_free_r>
   116c8:	2300      	movs	r3, #0
   116ca:	6363      	str	r3, [r4, #52]	; 0x34
   116cc:	2224      	movs	r2, #36	; 0x24
   116ce:	89a3      	ldrh	r3, [r4, #12]
   116d0:	4393      	bics	r3, r2
   116d2:	81a3      	strh	r3, [r4, #12]
   116d4:	2300      	movs	r3, #0
   116d6:	6063      	str	r3, [r4, #4]
   116d8:	6923      	ldr	r3, [r4, #16]
   116da:	6023      	str	r3, [r4, #0]
   116dc:	2308      	movs	r3, #8
   116de:	89a2      	ldrh	r2, [r4, #12]
   116e0:	4313      	orrs	r3, r2
   116e2:	81a3      	strh	r3, [r4, #12]
   116e4:	6923      	ldr	r3, [r4, #16]
   116e6:	2b00      	cmp	r3, #0
   116e8:	d10b      	bne.n	11702 <__swsetup_r+0xa6>
   116ea:	21a0      	movs	r1, #160	; 0xa0
   116ec:	2280      	movs	r2, #128	; 0x80
   116ee:	89a3      	ldrh	r3, [r4, #12]
   116f0:	0089      	lsls	r1, r1, #2
   116f2:	0092      	lsls	r2, r2, #2
   116f4:	400b      	ands	r3, r1
   116f6:	4293      	cmp	r3, r2
   116f8:	d003      	beq.n	11702 <__swsetup_r+0xa6>
   116fa:	0021      	movs	r1, r4
   116fc:	0030      	movs	r0, r6
   116fe:	f000 f9e1 	bl	11ac4 <__smakebuf_r>
   11702:	2301      	movs	r3, #1
   11704:	89a2      	ldrh	r2, [r4, #12]
   11706:	4013      	ands	r3, r2
   11708:	d011      	beq.n	1172e <__swsetup_r+0xd2>
   1170a:	2300      	movs	r3, #0
   1170c:	60a3      	str	r3, [r4, #8]
   1170e:	6963      	ldr	r3, [r4, #20]
   11710:	425b      	negs	r3, r3
   11712:	61a3      	str	r3, [r4, #24]
   11714:	2000      	movs	r0, #0
   11716:	6923      	ldr	r3, [r4, #16]
   11718:	4283      	cmp	r3, r0
   1171a:	d1be      	bne.n	1169a <__swsetup_r+0x3e>
   1171c:	230c      	movs	r3, #12
   1171e:	5ee2      	ldrsh	r2, [r4, r3]
   11720:	0613      	lsls	r3, r2, #24
   11722:	d5ba      	bpl.n	1169a <__swsetup_r+0x3e>
   11724:	2340      	movs	r3, #64	; 0x40
   11726:	4313      	orrs	r3, r2
   11728:	81a3      	strh	r3, [r4, #12]
   1172a:	3801      	subs	r0, #1
   1172c:	e7b5      	b.n	1169a <__swsetup_r+0x3e>
   1172e:	0792      	lsls	r2, r2, #30
   11730:	d400      	bmi.n	11734 <__swsetup_r+0xd8>
   11732:	6963      	ldr	r3, [r4, #20]
   11734:	60a3      	str	r3, [r4, #8]
   11736:	e7ed      	b.n	11714 <__swsetup_r+0xb8>
   11738:	20000038 	.word	0x20000038
   1173c:	00012ca8 	.word	0x00012ca8
   11740:	00012cc8 	.word	0x00012cc8
   11744:	00012c88 	.word	0x00012c88

00011748 <abort>:
   11748:	b510      	push	{r4, lr}
   1174a:	2006      	movs	r0, #6
   1174c:	f000 faf8 	bl	11d40 <raise>
   11750:	2001      	movs	r0, #1
   11752:	f7f7 f9e9 	bl	8b28 <_exit>
   11756:	Address 0x00011756 is out of bounds.


00011758 <__sflush_r>:
   11758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1175a:	898a      	ldrh	r2, [r1, #12]
   1175c:	0005      	movs	r5, r0
   1175e:	000c      	movs	r4, r1
   11760:	0713      	lsls	r3, r2, #28
   11762:	d460      	bmi.n	11826 <__sflush_r+0xce>
   11764:	684b      	ldr	r3, [r1, #4]
   11766:	2b00      	cmp	r3, #0
   11768:	dc04      	bgt.n	11774 <__sflush_r+0x1c>
   1176a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1176c:	2b00      	cmp	r3, #0
   1176e:	dc01      	bgt.n	11774 <__sflush_r+0x1c>
   11770:	2000      	movs	r0, #0
   11772:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11774:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   11776:	2f00      	cmp	r7, #0
   11778:	d0fa      	beq.n	11770 <__sflush_r+0x18>
   1177a:	2300      	movs	r3, #0
   1177c:	682e      	ldr	r6, [r5, #0]
   1177e:	602b      	str	r3, [r5, #0]
   11780:	2380      	movs	r3, #128	; 0x80
   11782:	015b      	lsls	r3, r3, #5
   11784:	401a      	ands	r2, r3
   11786:	d034      	beq.n	117f2 <__sflush_r+0x9a>
   11788:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1178a:	89a3      	ldrh	r3, [r4, #12]
   1178c:	075b      	lsls	r3, r3, #29
   1178e:	d506      	bpl.n	1179e <__sflush_r+0x46>
   11790:	6863      	ldr	r3, [r4, #4]
   11792:	1ac0      	subs	r0, r0, r3
   11794:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11796:	2b00      	cmp	r3, #0
   11798:	d001      	beq.n	1179e <__sflush_r+0x46>
   1179a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1179c:	1ac0      	subs	r0, r0, r3
   1179e:	0002      	movs	r2, r0
   117a0:	6a21      	ldr	r1, [r4, #32]
   117a2:	2300      	movs	r3, #0
   117a4:	0028      	movs	r0, r5
   117a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   117a8:	47b8      	blx	r7
   117aa:	89a1      	ldrh	r1, [r4, #12]
   117ac:	1c43      	adds	r3, r0, #1
   117ae:	d106      	bne.n	117be <__sflush_r+0x66>
   117b0:	682b      	ldr	r3, [r5, #0]
   117b2:	2b1d      	cmp	r3, #29
   117b4:	d831      	bhi.n	1181a <__sflush_r+0xc2>
   117b6:	4a2c      	ldr	r2, [pc, #176]	; (11868 <__sflush_r+0x110>)
   117b8:	40da      	lsrs	r2, r3
   117ba:	07d3      	lsls	r3, r2, #31
   117bc:	d52d      	bpl.n	1181a <__sflush_r+0xc2>
   117be:	2300      	movs	r3, #0
   117c0:	6063      	str	r3, [r4, #4]
   117c2:	6923      	ldr	r3, [r4, #16]
   117c4:	6023      	str	r3, [r4, #0]
   117c6:	04cb      	lsls	r3, r1, #19
   117c8:	d505      	bpl.n	117d6 <__sflush_r+0x7e>
   117ca:	1c43      	adds	r3, r0, #1
   117cc:	d102      	bne.n	117d4 <__sflush_r+0x7c>
   117ce:	682b      	ldr	r3, [r5, #0]
   117d0:	2b00      	cmp	r3, #0
   117d2:	d100      	bne.n	117d6 <__sflush_r+0x7e>
   117d4:	6560      	str	r0, [r4, #84]	; 0x54
   117d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   117d8:	602e      	str	r6, [r5, #0]
   117da:	2900      	cmp	r1, #0
   117dc:	d0c8      	beq.n	11770 <__sflush_r+0x18>
   117de:	0023      	movs	r3, r4
   117e0:	3344      	adds	r3, #68	; 0x44
   117e2:	4299      	cmp	r1, r3
   117e4:	d002      	beq.n	117ec <__sflush_r+0x94>
   117e6:	0028      	movs	r0, r5
   117e8:	f000 f9c6 	bl	11b78 <_free_r>
   117ec:	2000      	movs	r0, #0
   117ee:	6360      	str	r0, [r4, #52]	; 0x34
   117f0:	e7bf      	b.n	11772 <__sflush_r+0x1a>
   117f2:	2301      	movs	r3, #1
   117f4:	6a21      	ldr	r1, [r4, #32]
   117f6:	0028      	movs	r0, r5
   117f8:	47b8      	blx	r7
   117fa:	1c43      	adds	r3, r0, #1
   117fc:	d1c5      	bne.n	1178a <__sflush_r+0x32>
   117fe:	682b      	ldr	r3, [r5, #0]
   11800:	2b00      	cmp	r3, #0
   11802:	d0c2      	beq.n	1178a <__sflush_r+0x32>
   11804:	2b1d      	cmp	r3, #29
   11806:	d001      	beq.n	1180c <__sflush_r+0xb4>
   11808:	2b16      	cmp	r3, #22
   1180a:	d101      	bne.n	11810 <__sflush_r+0xb8>
   1180c:	602e      	str	r6, [r5, #0]
   1180e:	e7af      	b.n	11770 <__sflush_r+0x18>
   11810:	2340      	movs	r3, #64	; 0x40
   11812:	89a2      	ldrh	r2, [r4, #12]
   11814:	4313      	orrs	r3, r2
   11816:	81a3      	strh	r3, [r4, #12]
   11818:	e7ab      	b.n	11772 <__sflush_r+0x1a>
   1181a:	2340      	movs	r3, #64	; 0x40
   1181c:	430b      	orrs	r3, r1
   1181e:	2001      	movs	r0, #1
   11820:	81a3      	strh	r3, [r4, #12]
   11822:	4240      	negs	r0, r0
   11824:	e7a5      	b.n	11772 <__sflush_r+0x1a>
   11826:	690f      	ldr	r7, [r1, #16]
   11828:	2f00      	cmp	r7, #0
   1182a:	d0a1      	beq.n	11770 <__sflush_r+0x18>
   1182c:	680b      	ldr	r3, [r1, #0]
   1182e:	600f      	str	r7, [r1, #0]
   11830:	1bdb      	subs	r3, r3, r7
   11832:	9301      	str	r3, [sp, #4]
   11834:	2300      	movs	r3, #0
   11836:	0792      	lsls	r2, r2, #30
   11838:	d100      	bne.n	1183c <__sflush_r+0xe4>
   1183a:	694b      	ldr	r3, [r1, #20]
   1183c:	60a3      	str	r3, [r4, #8]
   1183e:	9b01      	ldr	r3, [sp, #4]
   11840:	2b00      	cmp	r3, #0
   11842:	dc00      	bgt.n	11846 <__sflush_r+0xee>
   11844:	e794      	b.n	11770 <__sflush_r+0x18>
   11846:	9b01      	ldr	r3, [sp, #4]
   11848:	003a      	movs	r2, r7
   1184a:	6a21      	ldr	r1, [r4, #32]
   1184c:	0028      	movs	r0, r5
   1184e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   11850:	47b0      	blx	r6
   11852:	2800      	cmp	r0, #0
   11854:	dc03      	bgt.n	1185e <__sflush_r+0x106>
   11856:	2340      	movs	r3, #64	; 0x40
   11858:	89a2      	ldrh	r2, [r4, #12]
   1185a:	4313      	orrs	r3, r2
   1185c:	e7df      	b.n	1181e <__sflush_r+0xc6>
   1185e:	9b01      	ldr	r3, [sp, #4]
   11860:	183f      	adds	r7, r7, r0
   11862:	1a1b      	subs	r3, r3, r0
   11864:	9301      	str	r3, [sp, #4]
   11866:	e7ea      	b.n	1183e <__sflush_r+0xe6>
   11868:	20400001 	.word	0x20400001

0001186c <_fflush_r>:
   1186c:	690b      	ldr	r3, [r1, #16]
   1186e:	b570      	push	{r4, r5, r6, lr}
   11870:	0005      	movs	r5, r0
   11872:	000c      	movs	r4, r1
   11874:	2b00      	cmp	r3, #0
   11876:	d101      	bne.n	1187c <_fflush_r+0x10>
   11878:	2000      	movs	r0, #0
   1187a:	bd70      	pop	{r4, r5, r6, pc}
   1187c:	2800      	cmp	r0, #0
   1187e:	d004      	beq.n	1188a <_fflush_r+0x1e>
   11880:	6983      	ldr	r3, [r0, #24]
   11882:	2b00      	cmp	r3, #0
   11884:	d101      	bne.n	1188a <_fflush_r+0x1e>
   11886:	f000 f85f 	bl	11948 <__sinit>
   1188a:	4b0b      	ldr	r3, [pc, #44]	; (118b8 <_fflush_r+0x4c>)
   1188c:	429c      	cmp	r4, r3
   1188e:	d109      	bne.n	118a4 <_fflush_r+0x38>
   11890:	686c      	ldr	r4, [r5, #4]
   11892:	220c      	movs	r2, #12
   11894:	5ea3      	ldrsh	r3, [r4, r2]
   11896:	2b00      	cmp	r3, #0
   11898:	d0ee      	beq.n	11878 <_fflush_r+0xc>
   1189a:	0021      	movs	r1, r4
   1189c:	0028      	movs	r0, r5
   1189e:	f7ff ff5b 	bl	11758 <__sflush_r>
   118a2:	e7ea      	b.n	1187a <_fflush_r+0xe>
   118a4:	4b05      	ldr	r3, [pc, #20]	; (118bc <_fflush_r+0x50>)
   118a6:	429c      	cmp	r4, r3
   118a8:	d101      	bne.n	118ae <_fflush_r+0x42>
   118aa:	68ac      	ldr	r4, [r5, #8]
   118ac:	e7f1      	b.n	11892 <_fflush_r+0x26>
   118ae:	4b04      	ldr	r3, [pc, #16]	; (118c0 <_fflush_r+0x54>)
   118b0:	429c      	cmp	r4, r3
   118b2:	d1ee      	bne.n	11892 <_fflush_r+0x26>
   118b4:	68ec      	ldr	r4, [r5, #12]
   118b6:	e7ec      	b.n	11892 <_fflush_r+0x26>
   118b8:	00012ca8 	.word	0x00012ca8
   118bc:	00012cc8 	.word	0x00012cc8
   118c0:	00012c88 	.word	0x00012c88

000118c4 <_cleanup_r>:
   118c4:	b510      	push	{r4, lr}
   118c6:	4902      	ldr	r1, [pc, #8]	; (118d0 <_cleanup_r+0xc>)
   118c8:	f000 f8b2 	bl	11a30 <_fwalk_reent>
   118cc:	bd10      	pop	{r4, pc}
   118ce:	46c0      	nop			; (mov r8, r8)
   118d0:	0001186d 	.word	0x0001186d

000118d4 <std.isra.0>:
   118d4:	2300      	movs	r3, #0
   118d6:	b510      	push	{r4, lr}
   118d8:	0004      	movs	r4, r0
   118da:	6003      	str	r3, [r0, #0]
   118dc:	6043      	str	r3, [r0, #4]
   118de:	6083      	str	r3, [r0, #8]
   118e0:	8181      	strh	r1, [r0, #12]
   118e2:	6643      	str	r3, [r0, #100]	; 0x64
   118e4:	81c2      	strh	r2, [r0, #14]
   118e6:	6103      	str	r3, [r0, #16]
   118e8:	6143      	str	r3, [r0, #20]
   118ea:	6183      	str	r3, [r0, #24]
   118ec:	0019      	movs	r1, r3
   118ee:	2208      	movs	r2, #8
   118f0:	305c      	adds	r0, #92	; 0x5c
   118f2:	f7ff f9e5 	bl	10cc0 <memset>
   118f6:	4b05      	ldr	r3, [pc, #20]	; (1190c <std.isra.0+0x38>)
   118f8:	6224      	str	r4, [r4, #32]
   118fa:	6263      	str	r3, [r4, #36]	; 0x24
   118fc:	4b04      	ldr	r3, [pc, #16]	; (11910 <std.isra.0+0x3c>)
   118fe:	62a3      	str	r3, [r4, #40]	; 0x28
   11900:	4b04      	ldr	r3, [pc, #16]	; (11914 <std.isra.0+0x40>)
   11902:	62e3      	str	r3, [r4, #44]	; 0x2c
   11904:	4b04      	ldr	r3, [pc, #16]	; (11918 <std.isra.0+0x44>)
   11906:	6323      	str	r3, [r4, #48]	; 0x30
   11908:	bd10      	pop	{r4, pc}
   1190a:	46c0      	nop			; (mov r8, r8)
   1190c:	00011d81 	.word	0x00011d81
   11910:	00011da9 	.word	0x00011da9
   11914:	00011de1 	.word	0x00011de1
   11918:	00011e0d 	.word	0x00011e0d

0001191c <__sfmoreglue>:
   1191c:	b570      	push	{r4, r5, r6, lr}
   1191e:	2568      	movs	r5, #104	; 0x68
   11920:	1e4a      	subs	r2, r1, #1
   11922:	4355      	muls	r5, r2
   11924:	000e      	movs	r6, r1
   11926:	0029      	movs	r1, r5
   11928:	3174      	adds	r1, #116	; 0x74
   1192a:	f000 f96f 	bl	11c0c <_malloc_r>
   1192e:	1e04      	subs	r4, r0, #0
   11930:	d008      	beq.n	11944 <__sfmoreglue+0x28>
   11932:	2100      	movs	r1, #0
   11934:	002a      	movs	r2, r5
   11936:	6001      	str	r1, [r0, #0]
   11938:	6046      	str	r6, [r0, #4]
   1193a:	300c      	adds	r0, #12
   1193c:	60a0      	str	r0, [r4, #8]
   1193e:	3268      	adds	r2, #104	; 0x68
   11940:	f7ff f9be 	bl	10cc0 <memset>
   11944:	0020      	movs	r0, r4
   11946:	bd70      	pop	{r4, r5, r6, pc}

00011948 <__sinit>:
   11948:	6983      	ldr	r3, [r0, #24]
   1194a:	b513      	push	{r0, r1, r4, lr}
   1194c:	0004      	movs	r4, r0
   1194e:	2b00      	cmp	r3, #0
   11950:	d128      	bne.n	119a4 <__sinit+0x5c>
   11952:	6483      	str	r3, [r0, #72]	; 0x48
   11954:	64c3      	str	r3, [r0, #76]	; 0x4c
   11956:	6503      	str	r3, [r0, #80]	; 0x50
   11958:	4b13      	ldr	r3, [pc, #76]	; (119a8 <__sinit+0x60>)
   1195a:	4a14      	ldr	r2, [pc, #80]	; (119ac <__sinit+0x64>)
   1195c:	681b      	ldr	r3, [r3, #0]
   1195e:	6282      	str	r2, [r0, #40]	; 0x28
   11960:	9301      	str	r3, [sp, #4]
   11962:	4298      	cmp	r0, r3
   11964:	d101      	bne.n	1196a <__sinit+0x22>
   11966:	2301      	movs	r3, #1
   11968:	6183      	str	r3, [r0, #24]
   1196a:	0020      	movs	r0, r4
   1196c:	f000 f820 	bl	119b0 <__sfp>
   11970:	6060      	str	r0, [r4, #4]
   11972:	0020      	movs	r0, r4
   11974:	f000 f81c 	bl	119b0 <__sfp>
   11978:	60a0      	str	r0, [r4, #8]
   1197a:	0020      	movs	r0, r4
   1197c:	f000 f818 	bl	119b0 <__sfp>
   11980:	2200      	movs	r2, #0
   11982:	60e0      	str	r0, [r4, #12]
   11984:	2104      	movs	r1, #4
   11986:	6860      	ldr	r0, [r4, #4]
   11988:	f7ff ffa4 	bl	118d4 <std.isra.0>
   1198c:	2201      	movs	r2, #1
   1198e:	2109      	movs	r1, #9
   11990:	68a0      	ldr	r0, [r4, #8]
   11992:	f7ff ff9f 	bl	118d4 <std.isra.0>
   11996:	2202      	movs	r2, #2
   11998:	2112      	movs	r1, #18
   1199a:	68e0      	ldr	r0, [r4, #12]
   1199c:	f7ff ff9a 	bl	118d4 <std.isra.0>
   119a0:	2301      	movs	r3, #1
   119a2:	61a3      	str	r3, [r4, #24]
   119a4:	bd13      	pop	{r0, r1, r4, pc}
   119a6:	46c0      	nop			; (mov r8, r8)
   119a8:	00012c50 	.word	0x00012c50
   119ac:	000118c5 	.word	0x000118c5

000119b0 <__sfp>:
   119b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119b2:	4b1e      	ldr	r3, [pc, #120]	; (11a2c <__sfp+0x7c>)
   119b4:	0007      	movs	r7, r0
   119b6:	681e      	ldr	r6, [r3, #0]
   119b8:	69b3      	ldr	r3, [r6, #24]
   119ba:	2b00      	cmp	r3, #0
   119bc:	d102      	bne.n	119c4 <__sfp+0x14>
   119be:	0030      	movs	r0, r6
   119c0:	f7ff ffc2 	bl	11948 <__sinit>
   119c4:	3648      	adds	r6, #72	; 0x48
   119c6:	68b4      	ldr	r4, [r6, #8]
   119c8:	6873      	ldr	r3, [r6, #4]
   119ca:	3b01      	subs	r3, #1
   119cc:	d504      	bpl.n	119d8 <__sfp+0x28>
   119ce:	6833      	ldr	r3, [r6, #0]
   119d0:	2b00      	cmp	r3, #0
   119d2:	d007      	beq.n	119e4 <__sfp+0x34>
   119d4:	6836      	ldr	r6, [r6, #0]
   119d6:	e7f6      	b.n	119c6 <__sfp+0x16>
   119d8:	220c      	movs	r2, #12
   119da:	5ea5      	ldrsh	r5, [r4, r2]
   119dc:	2d00      	cmp	r5, #0
   119de:	d00d      	beq.n	119fc <__sfp+0x4c>
   119e0:	3468      	adds	r4, #104	; 0x68
   119e2:	e7f2      	b.n	119ca <__sfp+0x1a>
   119e4:	2104      	movs	r1, #4
   119e6:	0038      	movs	r0, r7
   119e8:	f7ff ff98 	bl	1191c <__sfmoreglue>
   119ec:	6030      	str	r0, [r6, #0]
   119ee:	2800      	cmp	r0, #0
   119f0:	d1f0      	bne.n	119d4 <__sfp+0x24>
   119f2:	230c      	movs	r3, #12
   119f4:	0004      	movs	r4, r0
   119f6:	603b      	str	r3, [r7, #0]
   119f8:	0020      	movs	r0, r4
   119fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   119fc:	2301      	movs	r3, #1
   119fe:	0020      	movs	r0, r4
   11a00:	425b      	negs	r3, r3
   11a02:	81e3      	strh	r3, [r4, #14]
   11a04:	3302      	adds	r3, #2
   11a06:	81a3      	strh	r3, [r4, #12]
   11a08:	6665      	str	r5, [r4, #100]	; 0x64
   11a0a:	6025      	str	r5, [r4, #0]
   11a0c:	60a5      	str	r5, [r4, #8]
   11a0e:	6065      	str	r5, [r4, #4]
   11a10:	6125      	str	r5, [r4, #16]
   11a12:	6165      	str	r5, [r4, #20]
   11a14:	61a5      	str	r5, [r4, #24]
   11a16:	2208      	movs	r2, #8
   11a18:	0029      	movs	r1, r5
   11a1a:	305c      	adds	r0, #92	; 0x5c
   11a1c:	f7ff f950 	bl	10cc0 <memset>
   11a20:	6365      	str	r5, [r4, #52]	; 0x34
   11a22:	63a5      	str	r5, [r4, #56]	; 0x38
   11a24:	64a5      	str	r5, [r4, #72]	; 0x48
   11a26:	64e5      	str	r5, [r4, #76]	; 0x4c
   11a28:	e7e6      	b.n	119f8 <__sfp+0x48>
   11a2a:	46c0      	nop			; (mov r8, r8)
   11a2c:	00012c50 	.word	0x00012c50

00011a30 <_fwalk_reent>:
   11a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11a32:	0004      	movs	r4, r0
   11a34:	0007      	movs	r7, r0
   11a36:	2600      	movs	r6, #0
   11a38:	9101      	str	r1, [sp, #4]
   11a3a:	3448      	adds	r4, #72	; 0x48
   11a3c:	2c00      	cmp	r4, #0
   11a3e:	d101      	bne.n	11a44 <_fwalk_reent+0x14>
   11a40:	0030      	movs	r0, r6
   11a42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11a44:	6863      	ldr	r3, [r4, #4]
   11a46:	68a5      	ldr	r5, [r4, #8]
   11a48:	9300      	str	r3, [sp, #0]
   11a4a:	9b00      	ldr	r3, [sp, #0]
   11a4c:	3b01      	subs	r3, #1
   11a4e:	9300      	str	r3, [sp, #0]
   11a50:	d501      	bpl.n	11a56 <_fwalk_reent+0x26>
   11a52:	6824      	ldr	r4, [r4, #0]
   11a54:	e7f2      	b.n	11a3c <_fwalk_reent+0xc>
   11a56:	89ab      	ldrh	r3, [r5, #12]
   11a58:	2b01      	cmp	r3, #1
   11a5a:	d908      	bls.n	11a6e <_fwalk_reent+0x3e>
   11a5c:	220e      	movs	r2, #14
   11a5e:	5eab      	ldrsh	r3, [r5, r2]
   11a60:	3301      	adds	r3, #1
   11a62:	d004      	beq.n	11a6e <_fwalk_reent+0x3e>
   11a64:	0029      	movs	r1, r5
   11a66:	0038      	movs	r0, r7
   11a68:	9b01      	ldr	r3, [sp, #4]
   11a6a:	4798      	blx	r3
   11a6c:	4306      	orrs	r6, r0
   11a6e:	3568      	adds	r5, #104	; 0x68
   11a70:	e7eb      	b.n	11a4a <_fwalk_reent+0x1a>
   11a72:	Address 0x00011a72 is out of bounds.


00011a74 <__swhatbuf_r>:
   11a74:	b570      	push	{r4, r5, r6, lr}
   11a76:	000e      	movs	r6, r1
   11a78:	001d      	movs	r5, r3
   11a7a:	230e      	movs	r3, #14
   11a7c:	5ec9      	ldrsh	r1, [r1, r3]
   11a7e:	b090      	sub	sp, #64	; 0x40
   11a80:	0014      	movs	r4, r2
   11a82:	2900      	cmp	r1, #0
   11a84:	da07      	bge.n	11a96 <__swhatbuf_r+0x22>
   11a86:	2300      	movs	r3, #0
   11a88:	602b      	str	r3, [r5, #0]
   11a8a:	89b3      	ldrh	r3, [r6, #12]
   11a8c:	061b      	lsls	r3, r3, #24
   11a8e:	d411      	bmi.n	11ab4 <__swhatbuf_r+0x40>
   11a90:	2380      	movs	r3, #128	; 0x80
   11a92:	00db      	lsls	r3, r3, #3
   11a94:	e00f      	b.n	11ab6 <__swhatbuf_r+0x42>
   11a96:	aa01      	add	r2, sp, #4
   11a98:	f000 f9e4 	bl	11e64 <_fstat_r>
   11a9c:	2800      	cmp	r0, #0
   11a9e:	dbf2      	blt.n	11a86 <__swhatbuf_r+0x12>
   11aa0:	22f0      	movs	r2, #240	; 0xf0
   11aa2:	9b02      	ldr	r3, [sp, #8]
   11aa4:	0212      	lsls	r2, r2, #8
   11aa6:	4013      	ands	r3, r2
   11aa8:	4a05      	ldr	r2, [pc, #20]	; (11ac0 <__swhatbuf_r+0x4c>)
   11aaa:	189b      	adds	r3, r3, r2
   11aac:	425a      	negs	r2, r3
   11aae:	4153      	adcs	r3, r2
   11ab0:	602b      	str	r3, [r5, #0]
   11ab2:	e7ed      	b.n	11a90 <__swhatbuf_r+0x1c>
   11ab4:	2340      	movs	r3, #64	; 0x40
   11ab6:	2000      	movs	r0, #0
   11ab8:	6023      	str	r3, [r4, #0]
   11aba:	b010      	add	sp, #64	; 0x40
   11abc:	bd70      	pop	{r4, r5, r6, pc}
   11abe:	46c0      	nop			; (mov r8, r8)
   11ac0:	ffffe000 	.word	0xffffe000

00011ac4 <__smakebuf_r>:
   11ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11ac6:	2602      	movs	r6, #2
   11ac8:	898b      	ldrh	r3, [r1, #12]
   11aca:	0005      	movs	r5, r0
   11acc:	000c      	movs	r4, r1
   11ace:	4233      	tst	r3, r6
   11ad0:	d006      	beq.n	11ae0 <__smakebuf_r+0x1c>
   11ad2:	0023      	movs	r3, r4
   11ad4:	3347      	adds	r3, #71	; 0x47
   11ad6:	6023      	str	r3, [r4, #0]
   11ad8:	6123      	str	r3, [r4, #16]
   11ada:	2301      	movs	r3, #1
   11adc:	6163      	str	r3, [r4, #20]
   11ade:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   11ae0:	ab01      	add	r3, sp, #4
   11ae2:	466a      	mov	r2, sp
   11ae4:	f7ff ffc6 	bl	11a74 <__swhatbuf_r>
   11ae8:	9900      	ldr	r1, [sp, #0]
   11aea:	0007      	movs	r7, r0
   11aec:	0028      	movs	r0, r5
   11aee:	f000 f88d 	bl	11c0c <_malloc_r>
   11af2:	2800      	cmp	r0, #0
   11af4:	d108      	bne.n	11b08 <__smakebuf_r+0x44>
   11af6:	220c      	movs	r2, #12
   11af8:	5ea3      	ldrsh	r3, [r4, r2]
   11afa:	059a      	lsls	r2, r3, #22
   11afc:	d4ef      	bmi.n	11ade <__smakebuf_r+0x1a>
   11afe:	2203      	movs	r2, #3
   11b00:	4393      	bics	r3, r2
   11b02:	431e      	orrs	r6, r3
   11b04:	81a6      	strh	r6, [r4, #12]
   11b06:	e7e4      	b.n	11ad2 <__smakebuf_r+0xe>
   11b08:	4b0f      	ldr	r3, [pc, #60]	; (11b48 <__smakebuf_r+0x84>)
   11b0a:	62ab      	str	r3, [r5, #40]	; 0x28
   11b0c:	2380      	movs	r3, #128	; 0x80
   11b0e:	89a2      	ldrh	r2, [r4, #12]
   11b10:	6020      	str	r0, [r4, #0]
   11b12:	4313      	orrs	r3, r2
   11b14:	81a3      	strh	r3, [r4, #12]
   11b16:	9b00      	ldr	r3, [sp, #0]
   11b18:	6120      	str	r0, [r4, #16]
   11b1a:	6163      	str	r3, [r4, #20]
   11b1c:	9b01      	ldr	r3, [sp, #4]
   11b1e:	2b00      	cmp	r3, #0
   11b20:	d00d      	beq.n	11b3e <__smakebuf_r+0x7a>
   11b22:	230e      	movs	r3, #14
   11b24:	5ee1      	ldrsh	r1, [r4, r3]
   11b26:	0028      	movs	r0, r5
   11b28:	f000 f9ae 	bl	11e88 <_isatty_r>
   11b2c:	2800      	cmp	r0, #0
   11b2e:	d006      	beq.n	11b3e <__smakebuf_r+0x7a>
   11b30:	2203      	movs	r2, #3
   11b32:	89a3      	ldrh	r3, [r4, #12]
   11b34:	4393      	bics	r3, r2
   11b36:	001a      	movs	r2, r3
   11b38:	2301      	movs	r3, #1
   11b3a:	4313      	orrs	r3, r2
   11b3c:	81a3      	strh	r3, [r4, #12]
   11b3e:	89a0      	ldrh	r0, [r4, #12]
   11b40:	4338      	orrs	r0, r7
   11b42:	81a0      	strh	r0, [r4, #12]
   11b44:	e7cb      	b.n	11ade <__smakebuf_r+0x1a>
   11b46:	46c0      	nop			; (mov r8, r8)
   11b48:	000118c5 	.word	0x000118c5

00011b4c <malloc>:
   11b4c:	b510      	push	{r4, lr}
   11b4e:	4b03      	ldr	r3, [pc, #12]	; (11b5c <malloc+0x10>)
   11b50:	0001      	movs	r1, r0
   11b52:	6818      	ldr	r0, [r3, #0]
   11b54:	f000 f85a 	bl	11c0c <_malloc_r>
   11b58:	bd10      	pop	{r4, pc}
   11b5a:	46c0      	nop			; (mov r8, r8)
   11b5c:	20000038 	.word	0x20000038

00011b60 <memchr>:
   11b60:	b2c9      	uxtb	r1, r1
   11b62:	1882      	adds	r2, r0, r2
   11b64:	4290      	cmp	r0, r2
   11b66:	d101      	bne.n	11b6c <memchr+0xc>
   11b68:	2000      	movs	r0, #0
   11b6a:	4770      	bx	lr
   11b6c:	7803      	ldrb	r3, [r0, #0]
   11b6e:	428b      	cmp	r3, r1
   11b70:	d0fb      	beq.n	11b6a <memchr+0xa>
   11b72:	3001      	adds	r0, #1
   11b74:	e7f6      	b.n	11b64 <memchr+0x4>
   11b76:	Address 0x00011b76 is out of bounds.


00011b78 <_free_r>:
   11b78:	b570      	push	{r4, r5, r6, lr}
   11b7a:	0005      	movs	r5, r0
   11b7c:	2900      	cmp	r1, #0
   11b7e:	d010      	beq.n	11ba2 <_free_r+0x2a>
   11b80:	1f0c      	subs	r4, r1, #4
   11b82:	6823      	ldr	r3, [r4, #0]
   11b84:	2b00      	cmp	r3, #0
   11b86:	da00      	bge.n	11b8a <_free_r+0x12>
   11b88:	18e4      	adds	r4, r4, r3
   11b8a:	0028      	movs	r0, r5
   11b8c:	f000 f9a2 	bl	11ed4 <__malloc_lock>
   11b90:	4a1d      	ldr	r2, [pc, #116]	; (11c08 <_free_r+0x90>)
   11b92:	6813      	ldr	r3, [r2, #0]
   11b94:	2b00      	cmp	r3, #0
   11b96:	d105      	bne.n	11ba4 <_free_r+0x2c>
   11b98:	6063      	str	r3, [r4, #4]
   11b9a:	6014      	str	r4, [r2, #0]
   11b9c:	0028      	movs	r0, r5
   11b9e:	f000 f99a 	bl	11ed6 <__malloc_unlock>
   11ba2:	bd70      	pop	{r4, r5, r6, pc}
   11ba4:	42a3      	cmp	r3, r4
   11ba6:	d909      	bls.n	11bbc <_free_r+0x44>
   11ba8:	6821      	ldr	r1, [r4, #0]
   11baa:	1860      	adds	r0, r4, r1
   11bac:	4283      	cmp	r3, r0
   11bae:	d1f3      	bne.n	11b98 <_free_r+0x20>
   11bb0:	6818      	ldr	r0, [r3, #0]
   11bb2:	685b      	ldr	r3, [r3, #4]
   11bb4:	1841      	adds	r1, r0, r1
   11bb6:	6021      	str	r1, [r4, #0]
   11bb8:	e7ee      	b.n	11b98 <_free_r+0x20>
   11bba:	0013      	movs	r3, r2
   11bbc:	685a      	ldr	r2, [r3, #4]
   11bbe:	2a00      	cmp	r2, #0
   11bc0:	d001      	beq.n	11bc6 <_free_r+0x4e>
   11bc2:	42a2      	cmp	r2, r4
   11bc4:	d9f9      	bls.n	11bba <_free_r+0x42>
   11bc6:	6819      	ldr	r1, [r3, #0]
   11bc8:	1858      	adds	r0, r3, r1
   11bca:	42a0      	cmp	r0, r4
   11bcc:	d10b      	bne.n	11be6 <_free_r+0x6e>
   11bce:	6820      	ldr	r0, [r4, #0]
   11bd0:	1809      	adds	r1, r1, r0
   11bd2:	1858      	adds	r0, r3, r1
   11bd4:	6019      	str	r1, [r3, #0]
   11bd6:	4282      	cmp	r2, r0
   11bd8:	d1e0      	bne.n	11b9c <_free_r+0x24>
   11bda:	6810      	ldr	r0, [r2, #0]
   11bdc:	6852      	ldr	r2, [r2, #4]
   11bde:	1841      	adds	r1, r0, r1
   11be0:	6019      	str	r1, [r3, #0]
   11be2:	605a      	str	r2, [r3, #4]
   11be4:	e7da      	b.n	11b9c <_free_r+0x24>
   11be6:	42a0      	cmp	r0, r4
   11be8:	d902      	bls.n	11bf0 <_free_r+0x78>
   11bea:	230c      	movs	r3, #12
   11bec:	602b      	str	r3, [r5, #0]
   11bee:	e7d5      	b.n	11b9c <_free_r+0x24>
   11bf0:	6821      	ldr	r1, [r4, #0]
   11bf2:	1860      	adds	r0, r4, r1
   11bf4:	4282      	cmp	r2, r0
   11bf6:	d103      	bne.n	11c00 <_free_r+0x88>
   11bf8:	6810      	ldr	r0, [r2, #0]
   11bfa:	6852      	ldr	r2, [r2, #4]
   11bfc:	1841      	adds	r1, r0, r1
   11bfe:	6021      	str	r1, [r4, #0]
   11c00:	6062      	str	r2, [r4, #4]
   11c02:	605c      	str	r4, [r3, #4]
   11c04:	e7ca      	b.n	11b9c <_free_r+0x24>
   11c06:	46c0      	nop			; (mov r8, r8)
   11c08:	20001c78 	.word	0x20001c78

00011c0c <_malloc_r>:
   11c0c:	2303      	movs	r3, #3
   11c0e:	b570      	push	{r4, r5, r6, lr}
   11c10:	1ccd      	adds	r5, r1, #3
   11c12:	439d      	bics	r5, r3
   11c14:	3508      	adds	r5, #8
   11c16:	0006      	movs	r6, r0
   11c18:	2d0c      	cmp	r5, #12
   11c1a:	d21e      	bcs.n	11c5a <_malloc_r+0x4e>
   11c1c:	250c      	movs	r5, #12
   11c1e:	42a9      	cmp	r1, r5
   11c20:	d81d      	bhi.n	11c5e <_malloc_r+0x52>
   11c22:	0030      	movs	r0, r6
   11c24:	f000 f956 	bl	11ed4 <__malloc_lock>
   11c28:	4a25      	ldr	r2, [pc, #148]	; (11cc0 <_malloc_r+0xb4>)
   11c2a:	6814      	ldr	r4, [r2, #0]
   11c2c:	0021      	movs	r1, r4
   11c2e:	2900      	cmp	r1, #0
   11c30:	d119      	bne.n	11c66 <_malloc_r+0x5a>
   11c32:	4c24      	ldr	r4, [pc, #144]	; (11cc4 <_malloc_r+0xb8>)
   11c34:	6823      	ldr	r3, [r4, #0]
   11c36:	2b00      	cmp	r3, #0
   11c38:	d103      	bne.n	11c42 <_malloc_r+0x36>
   11c3a:	0030      	movs	r0, r6
   11c3c:	f000 f844 	bl	11cc8 <_sbrk_r>
   11c40:	6020      	str	r0, [r4, #0]
   11c42:	0029      	movs	r1, r5
   11c44:	0030      	movs	r0, r6
   11c46:	f000 f83f 	bl	11cc8 <_sbrk_r>
   11c4a:	1c43      	adds	r3, r0, #1
   11c4c:	d12c      	bne.n	11ca8 <_malloc_r+0x9c>
   11c4e:	230c      	movs	r3, #12
   11c50:	0030      	movs	r0, r6
   11c52:	6033      	str	r3, [r6, #0]
   11c54:	f000 f93f 	bl	11ed6 <__malloc_unlock>
   11c58:	e003      	b.n	11c62 <_malloc_r+0x56>
   11c5a:	2d00      	cmp	r5, #0
   11c5c:	dadf      	bge.n	11c1e <_malloc_r+0x12>
   11c5e:	230c      	movs	r3, #12
   11c60:	6033      	str	r3, [r6, #0]
   11c62:	2000      	movs	r0, #0
   11c64:	bd70      	pop	{r4, r5, r6, pc}
   11c66:	680b      	ldr	r3, [r1, #0]
   11c68:	1b5b      	subs	r3, r3, r5
   11c6a:	d41a      	bmi.n	11ca2 <_malloc_r+0x96>
   11c6c:	2b0b      	cmp	r3, #11
   11c6e:	d903      	bls.n	11c78 <_malloc_r+0x6c>
   11c70:	600b      	str	r3, [r1, #0]
   11c72:	18cc      	adds	r4, r1, r3
   11c74:	6025      	str	r5, [r4, #0]
   11c76:	e003      	b.n	11c80 <_malloc_r+0x74>
   11c78:	428c      	cmp	r4, r1
   11c7a:	d10e      	bne.n	11c9a <_malloc_r+0x8e>
   11c7c:	6863      	ldr	r3, [r4, #4]
   11c7e:	6013      	str	r3, [r2, #0]
   11c80:	0030      	movs	r0, r6
   11c82:	f000 f928 	bl	11ed6 <__malloc_unlock>
   11c86:	0020      	movs	r0, r4
   11c88:	2207      	movs	r2, #7
   11c8a:	300b      	adds	r0, #11
   11c8c:	1d23      	adds	r3, r4, #4
   11c8e:	4390      	bics	r0, r2
   11c90:	1ac3      	subs	r3, r0, r3
   11c92:	d0e7      	beq.n	11c64 <_malloc_r+0x58>
   11c94:	425a      	negs	r2, r3
   11c96:	50e2      	str	r2, [r4, r3]
   11c98:	e7e4      	b.n	11c64 <_malloc_r+0x58>
   11c9a:	684b      	ldr	r3, [r1, #4]
   11c9c:	6063      	str	r3, [r4, #4]
   11c9e:	000c      	movs	r4, r1
   11ca0:	e7ee      	b.n	11c80 <_malloc_r+0x74>
   11ca2:	000c      	movs	r4, r1
   11ca4:	6849      	ldr	r1, [r1, #4]
   11ca6:	e7c2      	b.n	11c2e <_malloc_r+0x22>
   11ca8:	2303      	movs	r3, #3
   11caa:	1cc4      	adds	r4, r0, #3
   11cac:	439c      	bics	r4, r3
   11cae:	42a0      	cmp	r0, r4
   11cb0:	d0e0      	beq.n	11c74 <_malloc_r+0x68>
   11cb2:	1a21      	subs	r1, r4, r0
   11cb4:	0030      	movs	r0, r6
   11cb6:	f000 f807 	bl	11cc8 <_sbrk_r>
   11cba:	1c43      	adds	r3, r0, #1
   11cbc:	d1da      	bne.n	11c74 <_malloc_r+0x68>
   11cbe:	e7c6      	b.n	11c4e <_malloc_r+0x42>
   11cc0:	20001c78 	.word	0x20001c78
   11cc4:	20001c7c 	.word	0x20001c7c

00011cc8 <_sbrk_r>:
   11cc8:	2300      	movs	r3, #0
   11cca:	b570      	push	{r4, r5, r6, lr}
   11ccc:	4c06      	ldr	r4, [pc, #24]	; (11ce8 <_sbrk_r+0x20>)
   11cce:	0005      	movs	r5, r0
   11cd0:	0008      	movs	r0, r1
   11cd2:	6023      	str	r3, [r4, #0]
   11cd4:	f7f6 ff0a 	bl	8aec <_sbrk>
   11cd8:	1c43      	adds	r3, r0, #1
   11cda:	d103      	bne.n	11ce4 <_sbrk_r+0x1c>
   11cdc:	6823      	ldr	r3, [r4, #0]
   11cde:	2b00      	cmp	r3, #0
   11ce0:	d000      	beq.n	11ce4 <_sbrk_r+0x1c>
   11ce2:	602b      	str	r3, [r5, #0]
   11ce4:	bd70      	pop	{r4, r5, r6, pc}
   11ce6:	46c0      	nop			; (mov r8, r8)
   11ce8:	200021cc 	.word	0x200021cc

00011cec <_raise_r>:
   11cec:	b570      	push	{r4, r5, r6, lr}
   11cee:	0004      	movs	r4, r0
   11cf0:	000d      	movs	r5, r1
   11cf2:	291f      	cmp	r1, #31
   11cf4:	d904      	bls.n	11d00 <_raise_r+0x14>
   11cf6:	2316      	movs	r3, #22
   11cf8:	6003      	str	r3, [r0, #0]
   11cfa:	2001      	movs	r0, #1
   11cfc:	4240      	negs	r0, r0
   11cfe:	bd70      	pop	{r4, r5, r6, pc}
   11d00:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11d02:	2b00      	cmp	r3, #0
   11d04:	d004      	beq.n	11d10 <_raise_r+0x24>
   11d06:	008a      	lsls	r2, r1, #2
   11d08:	189b      	adds	r3, r3, r2
   11d0a:	681a      	ldr	r2, [r3, #0]
   11d0c:	2a00      	cmp	r2, #0
   11d0e:	d108      	bne.n	11d22 <_raise_r+0x36>
   11d10:	0020      	movs	r0, r4
   11d12:	f000 f831 	bl	11d78 <_getpid_r>
   11d16:	002a      	movs	r2, r5
   11d18:	0001      	movs	r1, r0
   11d1a:	0020      	movs	r0, r4
   11d1c:	f000 f81a 	bl	11d54 <_kill_r>
   11d20:	e7ed      	b.n	11cfe <_raise_r+0x12>
   11d22:	2000      	movs	r0, #0
   11d24:	2a01      	cmp	r2, #1
   11d26:	d0ea      	beq.n	11cfe <_raise_r+0x12>
   11d28:	1c51      	adds	r1, r2, #1
   11d2a:	d103      	bne.n	11d34 <_raise_r+0x48>
   11d2c:	2316      	movs	r3, #22
   11d2e:	3001      	adds	r0, #1
   11d30:	6023      	str	r3, [r4, #0]
   11d32:	e7e4      	b.n	11cfe <_raise_r+0x12>
   11d34:	2400      	movs	r4, #0
   11d36:	0028      	movs	r0, r5
   11d38:	601c      	str	r4, [r3, #0]
   11d3a:	4790      	blx	r2
   11d3c:	0020      	movs	r0, r4
   11d3e:	e7de      	b.n	11cfe <_raise_r+0x12>

00011d40 <raise>:
   11d40:	b510      	push	{r4, lr}
   11d42:	4b03      	ldr	r3, [pc, #12]	; (11d50 <raise+0x10>)
   11d44:	0001      	movs	r1, r0
   11d46:	6818      	ldr	r0, [r3, #0]
   11d48:	f7ff ffd0 	bl	11cec <_raise_r>
   11d4c:	bd10      	pop	{r4, pc}
   11d4e:	46c0      	nop			; (mov r8, r8)
   11d50:	20000038 	.word	0x20000038

00011d54 <_kill_r>:
   11d54:	2300      	movs	r3, #0
   11d56:	b570      	push	{r4, r5, r6, lr}
   11d58:	4c06      	ldr	r4, [pc, #24]	; (11d74 <_kill_r+0x20>)
   11d5a:	0005      	movs	r5, r0
   11d5c:	0008      	movs	r0, r1
   11d5e:	0011      	movs	r1, r2
   11d60:	6023      	str	r3, [r4, #0]
   11d62:	f7f6 fee3 	bl	8b2c <_kill>
   11d66:	1c43      	adds	r3, r0, #1
   11d68:	d103      	bne.n	11d72 <_kill_r+0x1e>
   11d6a:	6823      	ldr	r3, [r4, #0]
   11d6c:	2b00      	cmp	r3, #0
   11d6e:	d000      	beq.n	11d72 <_kill_r+0x1e>
   11d70:	602b      	str	r3, [r5, #0]
   11d72:	bd70      	pop	{r4, r5, r6, pc}
   11d74:	200021cc 	.word	0x200021cc

00011d78 <_getpid_r>:
   11d78:	b510      	push	{r4, lr}
   11d7a:	f7f6 fed8 	bl	8b2e <_getpid>
   11d7e:	bd10      	pop	{r4, pc}

00011d80 <__sread>:
   11d80:	b570      	push	{r4, r5, r6, lr}
   11d82:	000c      	movs	r4, r1
   11d84:	250e      	movs	r5, #14
   11d86:	5f49      	ldrsh	r1, [r1, r5]
   11d88:	f000 f8a6 	bl	11ed8 <_read_r>
   11d8c:	2800      	cmp	r0, #0
   11d8e:	db03      	blt.n	11d98 <__sread+0x18>
   11d90:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11d92:	181b      	adds	r3, r3, r0
   11d94:	6563      	str	r3, [r4, #84]	; 0x54
   11d96:	bd70      	pop	{r4, r5, r6, pc}
   11d98:	89a3      	ldrh	r3, [r4, #12]
   11d9a:	4a02      	ldr	r2, [pc, #8]	; (11da4 <__sread+0x24>)
   11d9c:	4013      	ands	r3, r2
   11d9e:	81a3      	strh	r3, [r4, #12]
   11da0:	e7f9      	b.n	11d96 <__sread+0x16>
   11da2:	46c0      	nop			; (mov r8, r8)
   11da4:	ffffefff 	.word	0xffffefff

00011da8 <__swrite>:
   11da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11daa:	001f      	movs	r7, r3
   11dac:	898b      	ldrh	r3, [r1, #12]
   11dae:	0005      	movs	r5, r0
   11db0:	000c      	movs	r4, r1
   11db2:	0016      	movs	r6, r2
   11db4:	05db      	lsls	r3, r3, #23
   11db6:	d505      	bpl.n	11dc4 <__swrite+0x1c>
   11db8:	230e      	movs	r3, #14
   11dba:	5ec9      	ldrsh	r1, [r1, r3]
   11dbc:	2200      	movs	r2, #0
   11dbe:	2302      	movs	r3, #2
   11dc0:	f000 f874 	bl	11eac <_lseek_r>
   11dc4:	89a3      	ldrh	r3, [r4, #12]
   11dc6:	4a05      	ldr	r2, [pc, #20]	; (11ddc <__swrite+0x34>)
   11dc8:	0028      	movs	r0, r5
   11dca:	4013      	ands	r3, r2
   11dcc:	81a3      	strh	r3, [r4, #12]
   11dce:	0032      	movs	r2, r6
   11dd0:	230e      	movs	r3, #14
   11dd2:	5ee1      	ldrsh	r1, [r4, r3]
   11dd4:	003b      	movs	r3, r7
   11dd6:	f000 f81f 	bl	11e18 <_write_r>
   11dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ddc:	ffffefff 	.word	0xffffefff

00011de0 <__sseek>:
   11de0:	b570      	push	{r4, r5, r6, lr}
   11de2:	000c      	movs	r4, r1
   11de4:	250e      	movs	r5, #14
   11de6:	5f49      	ldrsh	r1, [r1, r5]
   11de8:	f000 f860 	bl	11eac <_lseek_r>
   11dec:	89a3      	ldrh	r3, [r4, #12]
   11dee:	1c42      	adds	r2, r0, #1
   11df0:	d103      	bne.n	11dfa <__sseek+0x1a>
   11df2:	4a05      	ldr	r2, [pc, #20]	; (11e08 <__sseek+0x28>)
   11df4:	4013      	ands	r3, r2
   11df6:	81a3      	strh	r3, [r4, #12]
   11df8:	bd70      	pop	{r4, r5, r6, pc}
   11dfa:	2280      	movs	r2, #128	; 0x80
   11dfc:	0152      	lsls	r2, r2, #5
   11dfe:	4313      	orrs	r3, r2
   11e00:	81a3      	strh	r3, [r4, #12]
   11e02:	6560      	str	r0, [r4, #84]	; 0x54
   11e04:	e7f8      	b.n	11df8 <__sseek+0x18>
   11e06:	46c0      	nop			; (mov r8, r8)
   11e08:	ffffefff 	.word	0xffffefff

00011e0c <__sclose>:
   11e0c:	b510      	push	{r4, lr}
   11e0e:	230e      	movs	r3, #14
   11e10:	5ec9      	ldrsh	r1, [r1, r3]
   11e12:	f000 f815 	bl	11e40 <_close_r>
   11e16:	bd10      	pop	{r4, pc}

00011e18 <_write_r>:
   11e18:	b570      	push	{r4, r5, r6, lr}
   11e1a:	0005      	movs	r5, r0
   11e1c:	0008      	movs	r0, r1
   11e1e:	0011      	movs	r1, r2
   11e20:	2200      	movs	r2, #0
   11e22:	4c06      	ldr	r4, [pc, #24]	; (11e3c <_write_r+0x24>)
   11e24:	6022      	str	r2, [r4, #0]
   11e26:	001a      	movs	r2, r3
   11e28:	f7f6 fe38 	bl	8a9c <_write>
   11e2c:	1c43      	adds	r3, r0, #1
   11e2e:	d103      	bne.n	11e38 <_write_r+0x20>
   11e30:	6823      	ldr	r3, [r4, #0]
   11e32:	2b00      	cmp	r3, #0
   11e34:	d000      	beq.n	11e38 <_write_r+0x20>
   11e36:	602b      	str	r3, [r5, #0]
   11e38:	bd70      	pop	{r4, r5, r6, pc}
   11e3a:	46c0      	nop			; (mov r8, r8)
   11e3c:	200021cc 	.word	0x200021cc

00011e40 <_close_r>:
   11e40:	2300      	movs	r3, #0
   11e42:	b570      	push	{r4, r5, r6, lr}
   11e44:	4c06      	ldr	r4, [pc, #24]	; (11e60 <_close_r+0x20>)
   11e46:	0005      	movs	r5, r0
   11e48:	0008      	movs	r0, r1
   11e4a:	6023      	str	r3, [r4, #0]
   11e4c:	f7f6 fe60 	bl	8b10 <_close>
   11e50:	1c43      	adds	r3, r0, #1
   11e52:	d103      	bne.n	11e5c <_close_r+0x1c>
   11e54:	6823      	ldr	r3, [r4, #0]
   11e56:	2b00      	cmp	r3, #0
   11e58:	d000      	beq.n	11e5c <_close_r+0x1c>
   11e5a:	602b      	str	r3, [r5, #0]
   11e5c:	bd70      	pop	{r4, r5, r6, pc}
   11e5e:	46c0      	nop			; (mov r8, r8)
   11e60:	200021cc 	.word	0x200021cc

00011e64 <_fstat_r>:
   11e64:	2300      	movs	r3, #0
   11e66:	b570      	push	{r4, r5, r6, lr}
   11e68:	4c06      	ldr	r4, [pc, #24]	; (11e84 <_fstat_r+0x20>)
   11e6a:	0005      	movs	r5, r0
   11e6c:	0008      	movs	r0, r1
   11e6e:	0011      	movs	r1, r2
   11e70:	6023      	str	r3, [r4, #0]
   11e72:	f7f6 fe50 	bl	8b16 <_fstat>
   11e76:	1c43      	adds	r3, r0, #1
   11e78:	d103      	bne.n	11e82 <_fstat_r+0x1e>
   11e7a:	6823      	ldr	r3, [r4, #0]
   11e7c:	2b00      	cmp	r3, #0
   11e7e:	d000      	beq.n	11e82 <_fstat_r+0x1e>
   11e80:	602b      	str	r3, [r5, #0]
   11e82:	bd70      	pop	{r4, r5, r6, pc}
   11e84:	200021cc 	.word	0x200021cc

00011e88 <_isatty_r>:
   11e88:	2300      	movs	r3, #0
   11e8a:	b570      	push	{r4, r5, r6, lr}
   11e8c:	4c06      	ldr	r4, [pc, #24]	; (11ea8 <_isatty_r+0x20>)
   11e8e:	0005      	movs	r5, r0
   11e90:	0008      	movs	r0, r1
   11e92:	6023      	str	r3, [r4, #0]
   11e94:	f7f6 fe44 	bl	8b20 <_isatty>
   11e98:	1c43      	adds	r3, r0, #1
   11e9a:	d103      	bne.n	11ea4 <_isatty_r+0x1c>
   11e9c:	6823      	ldr	r3, [r4, #0]
   11e9e:	2b00      	cmp	r3, #0
   11ea0:	d000      	beq.n	11ea4 <_isatty_r+0x1c>
   11ea2:	602b      	str	r3, [r5, #0]
   11ea4:	bd70      	pop	{r4, r5, r6, pc}
   11ea6:	46c0      	nop			; (mov r8, r8)
   11ea8:	200021cc 	.word	0x200021cc

00011eac <_lseek_r>:
   11eac:	b570      	push	{r4, r5, r6, lr}
   11eae:	0005      	movs	r5, r0
   11eb0:	0008      	movs	r0, r1
   11eb2:	0011      	movs	r1, r2
   11eb4:	2200      	movs	r2, #0
   11eb6:	4c06      	ldr	r4, [pc, #24]	; (11ed0 <_lseek_r+0x24>)
   11eb8:	6022      	str	r2, [r4, #0]
   11eba:	001a      	movs	r2, r3
   11ebc:	f7f6 fe32 	bl	8b24 <_lseek>
   11ec0:	1c43      	adds	r3, r0, #1
   11ec2:	d103      	bne.n	11ecc <_lseek_r+0x20>
   11ec4:	6823      	ldr	r3, [r4, #0]
   11ec6:	2b00      	cmp	r3, #0
   11ec8:	d000      	beq.n	11ecc <_lseek_r+0x20>
   11eca:	602b      	str	r3, [r5, #0]
   11ecc:	bd70      	pop	{r4, r5, r6, pc}
   11ece:	46c0      	nop			; (mov r8, r8)
   11ed0:	200021cc 	.word	0x200021cc

00011ed4 <__malloc_lock>:
   11ed4:	4770      	bx	lr

00011ed6 <__malloc_unlock>:
   11ed6:	4770      	bx	lr

00011ed8 <_read_r>:
   11ed8:	b570      	push	{r4, r5, r6, lr}
   11eda:	0005      	movs	r5, r0
   11edc:	0008      	movs	r0, r1
   11ede:	0011      	movs	r1, r2
   11ee0:	2200      	movs	r2, #0
   11ee2:	4c06      	ldr	r4, [pc, #24]	; (11efc <_read_r+0x24>)
   11ee4:	6022      	str	r2, [r4, #0]
   11ee6:	001a      	movs	r2, r3
   11ee8:	f7f6 fdb6 	bl	8a58 <_read>
   11eec:	1c43      	adds	r3, r0, #1
   11eee:	d103      	bne.n	11ef8 <_read_r+0x20>
   11ef0:	6823      	ldr	r3, [r4, #0]
   11ef2:	2b00      	cmp	r3, #0
   11ef4:	d000      	beq.n	11ef8 <_read_r+0x20>
   11ef6:	602b      	str	r3, [r5, #0]
   11ef8:	bd70      	pop	{r4, r5, r6, pc}
   11efa:	46c0      	nop			; (mov r8, r8)
   11efc:	200021cc 	.word	0x200021cc
   11f00:	00006694 	.word	0x00006694
   11f04:	00006694 	.word	0x00006694
   11f08:	00006670 	.word	0x00006670
   11f0c:	00006694 	.word	0x00006694
   11f10:	00006670 	.word	0x00006670
   11f14:	00006656 	.word	0x00006656
   11f18:	00006656 	.word	0x00006656
   11f1c:	00006694 	.word	0x00006694
   11f20:	00006694 	.word	0x00006694
   11f24:	00006694 	.word	0x00006694
   11f28:	00006694 	.word	0x00006694
   11f2c:	00006694 	.word	0x00006694
   11f30:	00006694 	.word	0x00006694
   11f34:	00006694 	.word	0x00006694
   11f38:	00006694 	.word	0x00006694
   11f3c:	00006694 	.word	0x00006694
   11f40:	00006694 	.word	0x00006694
   11f44:	00006694 	.word	0x00006694
   11f48:	00006694 	.word	0x00006694
   11f4c:	00006694 	.word	0x00006694
   11f50:	00006694 	.word	0x00006694
   11f54:	00006694 	.word	0x00006694
   11f58:	00006694 	.word	0x00006694
   11f5c:	00006694 	.word	0x00006694
   11f60:	00006694 	.word	0x00006694
   11f64:	00006694 	.word	0x00006694
   11f68:	00006694 	.word	0x00006694
   11f6c:	00006694 	.word	0x00006694
   11f70:	00006694 	.word	0x00006694
   11f74:	00006694 	.word	0x00006694
   11f78:	00006694 	.word	0x00006694
   11f7c:	00006694 	.word	0x00006694
   11f80:	00006694 	.word	0x00006694
   11f84:	00006694 	.word	0x00006694
   11f88:	00006694 	.word	0x00006694
   11f8c:	00006694 	.word	0x00006694
   11f90:	00006694 	.word	0x00006694
   11f94:	00006694 	.word	0x00006694
   11f98:	00006694 	.word	0x00006694
   11f9c:	00006694 	.word	0x00006694
   11fa0:	00006694 	.word	0x00006694
   11fa4:	00006694 	.word	0x00006694
   11fa8:	00006694 	.word	0x00006694
   11fac:	00006694 	.word	0x00006694
   11fb0:	00006694 	.word	0x00006694
   11fb4:	00006694 	.word	0x00006694
   11fb8:	00006694 	.word	0x00006694
   11fbc:	00006694 	.word	0x00006694
   11fc0:	00006694 	.word	0x00006694
   11fc4:	00006694 	.word	0x00006694
   11fc8:	00006694 	.word	0x00006694
   11fcc:	00006694 	.word	0x00006694
   11fd0:	00006694 	.word	0x00006694
   11fd4:	00006694 	.word	0x00006694
   11fd8:	00006694 	.word	0x00006694
   11fdc:	00006694 	.word	0x00006694
   11fe0:	00006694 	.word	0x00006694
   11fe4:	00006694 	.word	0x00006694
   11fe8:	00006694 	.word	0x00006694
   11fec:	00006694 	.word	0x00006694
   11ff0:	00006694 	.word	0x00006694
   11ff4:	00006694 	.word	0x00006694
   11ff8:	00006694 	.word	0x00006694
   11ffc:	00006694 	.word	0x00006694
   12000:	00006670 	.word	0x00006670
   12004:	00006670 	.word	0x00006670
   12008:	00006678 	.word	0x00006678
   1200c:	00006678 	.word	0x00006678
   12010:	00006678 	.word	0x00006678
   12014:	00006678 	.word	0x00006678
   12018:	42000800 	.word	0x42000800
   1201c:	42000c00 	.word	0x42000c00
   12020:	42001000 	.word	0x42001000
   12024:	42001400 	.word	0x42001400
   12028:	42001800 	.word	0x42001800
   1202c:	42001c00 	.word	0x42001c00
   12030:	00007d26 	.word	0x00007d26
   12034:	00007d22 	.word	0x00007d22
   12038:	00007d22 	.word	0x00007d22
   1203c:	00007d88 	.word	0x00007d88
   12040:	00007d88 	.word	0x00007d88
   12044:	00007d3a 	.word	0x00007d3a
   12048:	00007d2c 	.word	0x00007d2c
   1204c:	00007d40 	.word	0x00007d40
   12050:	00007d76 	.word	0x00007d76
   12054:	00007fc4 	.word	0x00007fc4
   12058:	00007fa4 	.word	0x00007fa4
   1205c:	00007fa4 	.word	0x00007fa4
   12060:	00008030 	.word	0x00008030
   12064:	00007fb6 	.word	0x00007fb6
   12068:	00007fd2 	.word	0x00007fd2
   1206c:	00007fa8 	.word	0x00007fa8
   12070:	00007fe0 	.word	0x00007fe0
   12074:	00008020 	.word	0x00008020
   12078:	42002c00 	.word	0x42002c00
   1207c:	42003000 	.word	0x42003000
   12080:	42003400 	.word	0x42003400
   12084:	626d756e 	.word	0x626d756e
   12088:	664f7265 	.word	0x664f7265
   1208c:	65747942 	.word	0x65747942
   12090:	00000073 	.word	0x00000073
   12094:	732f2e2e 	.word	0x732f2e2e
   12098:	412f6372 	.word	0x412f6372
   1209c:	742f4653 	.word	0x742f4653
   120a0:	64726968 	.word	0x64726968
   120a4:	74726170 	.word	0x74726170
   120a8:	69772f79 	.word	0x69772f79
   120ac:	656c6572 	.word	0x656c6572
   120b0:	6d2f7373 	.word	0x6d2f7373
   120b4:	2f697769 	.word	0x2f697769
   120b8:	76726573 	.word	0x76726573
   120bc:	73656369 	.word	0x73656369
   120c0:	7364702f 	.word	0x7364702f
   120c4:	6372732f 	.word	0x6372732f
   120c8:	2f766e2f 	.word	0x2f766e2f
   120cc:	764e5f44 	.word	0x764e5f44
   120d0:	0000632e 	.word	0x0000632e
   120d4:	72646461 	.word	0x72646461
   120d8:	20737365 	.word	0x20737365
   120dc:	44203d3c 	.word	0x44203d3c
   120e0:	5f564e5f 	.word	0x5f564e5f
   120e4:	4f4d454d 	.word	0x4f4d454d
   120e8:	455f5952 	.word	0x455f5952
   120ec:	0000444e 	.word	0x0000444e
   120f0:	64646128 	.word	0x64646128
   120f4:	73736572 	.word	0x73736572
   120f8:	6e202b20 	.word	0x6e202b20
   120fc:	65626d75 	.word	0x65626d75
   12100:	42664f72 	.word	0x42664f72
   12104:	73657479 	.word	0x73657479
   12108:	3d3c2029 	.word	0x3d3c2029
   1210c:	5f442820 	.word	0x5f442820
   12110:	4d5f564e 	.word	0x4d5f564e
   12114:	524f4d45 	.word	0x524f4d45
   12118:	4e455f59 	.word	0x4e455f59
   1211c:	202b2044 	.word	0x202b2044
   12120:	00295531 	.word	0x00295531
   12124:	66666f28 	.word	0x66666f28
   12128:	20746573 	.word	0x20746573
   1212c:	756e202b 	.word	0x756e202b
   12130:	7265626d 	.word	0x7265626d
   12134:	7942664f 	.word	0x7942664f
   12138:	29736574 	.word	0x29736574
   1213c:	203d3c20 	.word	0x203d3c20
   12140:	564e5f44 	.word	0x564e5f44
   12144:	4345535f 	.word	0x4345535f
   12148:	5f524f54 	.word	0x5f524f54
   1214c:	455a4953 	.word	0x455a4953
   12150:	ffffff00 	.word	0xffffff00
   12154:	4e5f4428 	.word	0x4e5f4428
   12158:	454d5f56 	.word	0x454d5f56
   1215c:	59524f4d 	.word	0x59524f4d
   12160:	4154535f 	.word	0x4154535f
   12164:	25205452 	.word	0x25205452
   12168:	4d564e20 	.word	0x4d564e20
   1216c:	4c525443 	.word	0x4c525443
   12170:	574f525f 	.word	0x574f525f
   12174:	5a49535f 	.word	0x5a49535f
   12178:	3d202945 	.word	0x3d202945
   1217c:	5530203d 	.word	0x5530203d
   12180:	00000000 	.word	0x00000000
   12184:	4e5f4428 	.word	0x4e5f4428
   12188:	454d5f56 	.word	0x454d5f56
   1218c:	59524f4d 	.word	0x59524f4d
   12190:	444e455f 	.word	0x444e455f
   12194:	44202d20 	.word	0x44202d20
   12198:	5f564e5f 	.word	0x5f564e5f
   1219c:	4f4d454d 	.word	0x4f4d454d
   121a0:	535f5952 	.word	0x535f5952
   121a4:	54524154 	.word	0x54524154
   121a8:	31202b20 	.word	0x31202b20
   121ac:	3d202955 	.word	0x3d202955
   121b0:	5f44203d 	.word	0x5f44203d
   121b4:	4d5f564e 	.word	0x4d5f564e
   121b8:	524f4d45 	.word	0x524f4d45
   121bc:	49535f59 	.word	0x49535f59
   121c0:	ff00455a 	.word	0xff00455a

000121c4 <__func__.11827>:
   121c4:	764e5f44 696e495f ffff0074              D_Nv_Init...

000121d0 <__func__.11839>:
   121d0:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

000121e0 <__func__.11852>:
   121e0:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

000121f0 <__func__.11864>:
   121f0:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   12200:	706d495f ffff006c                       _Impl...

00012208 <__func__.11877>:
   12208:	706d6f43 44657261 00617461 68636163     CompareData.cach
   12218:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   12228:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   12238:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   12248:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   12258:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   12268:	646e6946 6d657449 68636143 64692865     FindItemCache(id
   12278:	3d212029 4c554e20 ffff004c 68636163     ) != NULL...cach
   12288:	6c3e2d65 42747361 6b636f6c 203d2120     e->lastBlock != 
   12298:	30307830 00003030 732f2e2e 412f6372     0x0000..../src/A
   122a8:	742f4653 64726968 74726170 69772f79     SF/thirdparty/wi
   122b8:	656c6572 6d2f7373 2f697769 76726573     reless/miwi/serv
   122c8:	73656369 7364702f 6372732f 2f766e2f     ices/pds/src/nv/
   122d8:	764e5f53 6d61532d 2e313252 ffff0063     S_Nv-SamR21.c...
   122e8:	20646928 30203d21 26202975 69282026     (id != 0u) && (i
   122f8:	203c2064 30467830 29753030 20262620     d < 0xF000u) && 
   12308:	65746928 6e654c6d 20687467 4d203d3c     (itemLength <= M
   12318:	495f5841 5f4d4554 474e454c 00294854     AX_ITEM_LENGTH).
   12328:	21206469 7530203d ffffff00 20646928     id != 0u....(id 
   12338:	30203d21 26202975 70282026 61746144     != 0u) && (pData
   12348:	203d2120 4c4c554e ffff0029               != NULL)...

00012354 <__func__.11868>:
   12354:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   12364:	69467265 00646572                       erFired.

0001236c <__func__.11904>:
   1236c:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

0001237c <__func__.11911>:
   1237c:	61657243 74496574 61436d65 00656863     CreateItemCache.

0001238c <__func__.11916>:
   1238c:	656c6544 74496574 61436d65 00656863     DeleteItemCache.

0001239c <__func__.12009>:
   1239c:	64616f4c 74636553 ff00726f              LoadSector..

000123a8 <__func__.12031>:
   123a8:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

000123b8 <__func__.12051>:
   123b8:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   123c8:	65646565 ffff0064                       eeded...

000123d0 <__func__.12058>:
   123d0:	706d6f43 49746361 006d6574              CompactItem.

000123dc <__func__.12082>:
   123dc:	764e5f53 7261455f 6e49796c ff007469     S_Nv_EarlyInit..

000123ec <__func__.12092>:
   123ec:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   123fc:	ff006c70                                pl..

00012400 <__func__.12105>:
   12400:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00012410 <__func__.12116>:
   12410:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00012420 <__func__.12121>:
   12420:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   12430:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   12440:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   12450:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   12460:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   12470:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   12480:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   12490:	6d2f7373 2f697769 76726573 73656369     ss/miwi/services
   124a0:	7364702f 6372732f 2f6c772f 64506c77     /pds/src/wl/wlPd
   124b0:	74614473 72655361 2e726576 00000063     sDataServer.c...
   124c0:	4e5f5328 65525f76 6e727574 756c6156     (S_Nv_ReturnValu
   124d0:	69445f65 746f4e64 73697845 3d3d2074     e_DidNotExist ==
   124e0:	74657220 7c7c2029 5f532820 525f764e      ret) || (S_Nv_R
   124f0:	72757465 6c61566e 4f5f6575 3d3d206b     eturnValue_Ok ==
   12500:	74657220 ffff0029                        ret)...

00012508 <__func__.11781>:
   12508:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   12518:	646e6148 0072656c                       Handler.

00012520 <__func__.11801>:
   12520:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....

00012530 <__func__.11808>:
   12530:	52736470 6f747365 74496572 ff006d65     pdsRestoreItem..
   12540:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   12550:	61566e72 5f65756c ff006b4f 6d657469     rnValue_Ok..item
   12560:	63736544 6574692e 7a69536d 00000065     Desc.itemSize...
   12570:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
   12580:	74726170 69772f79 656c6572 6d2f7373     party/wireless/m
   12590:	2f697769 76726573 73656369 7364702f     iwi/services/pds
   125a0:	6372732f 2f6c772f 64506c77 696e4973     /src/wl/wlPdsIni
   125b0:	00632e74                                t.c.

000125b4 <__func__.11539>:
   125b4:	5f534450 74696e49 6d657449 ffff0073     PDS_InitItems...

000125c4 <__func__.11985>:
   125c4:	69726576 74497966 69536d65 0073657a     verifyItemSizes.
   125d4:	4970616d 2e6d6574 67616c66 20262073     mapItem.flags & 
   125e4:	455a4953 444f4d5f 43494649 4f495441     SIZE_MODIFICATIO
   125f4:	4c415f4e 45574f4c 00000044 732f2e2e     N_ALLOWED...../s
   12604:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   12614:	69772f79 656c6572 6d2f7373 2f697769     y/wireless/miwi/
   12624:	76726573 73656369 7364702f 6372732f     services/pds/src
   12634:	2f6c772f 64506c77 70795473 6f437365     /wl/wlPdsTypesCo
   12644:	7265766e 2e726574 ffff0063              nverter.c...

00012650 <mySecurityKey>:
   12650:	03020100 07060504 0b0a0908 0f0e0d0c     ................

00012660 <MiWiItemIdsTable>:
   12660:	00040002 00060005 00030007 ffff0001     ................
   12670:	0000c29a 0000c46c 0000c5c0 0000c5c0     ....l...........
   12680:	0000c5c0 0000c5c0 0000c3e8 0000c5c0     ................
   12690:	0000c5c0 0000c5c0 0000c5c0 0000c5c0     ................
   126a0:	0000c5c0 0000c5c0 0000c5c0 0000c5c0     ................
   126b0:	0000c376 0000c57e 0000c5c0 0000c5c0     v...~...........
   126c0:	0000c5c0 0000c5c0 0000c448              ........H...

000126cc <tc_interrupt_vectors.11960>:
   126cc:	ff141312 00020028 2000001c 00000000     ....(...... ....

000126dc <DE>:
   126dc:	20b2b2b2 b2b2b220 b20a0db2 20b22020     ...  .......  . 
   126ec:	202020b2 20b20a0d b220b220 0db2b2b2     .   ...  . .....
   126fc:	2020b20a 20b220b2 0a0d2020 20b2b2b2     ..  . .   ..... 
   1270c:	b2b2b220 200a0db2 20202020 20202020      ......         
   1271c:	ffff0a0d 6f430a0d 63656e6e 676e6974     ......Connecting
   1272c:	65655020 6e6f2072 61684320 6c656e6e      Peer on Channel
   1273c:	00000020 00006425 6f430a0d 63656e6e      ...%d....Connec
   1274c:	20646574 72656550 206e6f20 6e616843     ted Peer on Chan
   1275c:	206c656e ffffff00 65530a0d 7463656c     nel ......Select
   1276c:	206e6f69 6320666f 6e6e6168 00206c65     ion of channel .
   1277c:	20736920 20746f6e 70707573 6574726f      is not supporte
   1278c:	6e692064 72756320 746e6572 6e6f6320     d in current con
   1279c:	75676966 69746172 0d2e6e6f ffffff00     figuration......
   127ac:	74530a0d 69747261 4e20676e 2065646f     ..Starting Node 
   127bc:	666f2031 6d695320 20656c70 6f6d6544     1 of Simple Demo
   127cc:	726f6620 57694d20 4d542869 32502029      for MiWi(TM) P2
   127dc:	74532050 206b6361 002e2e2e 20200a0d     P Stack ......  
   127ec:	52202020 72542046 63736e61 65766965        RF Transceive
   127fc:	41203a72 52363854 33333246 00000000     r: AT86RF233....
   1280c:	20200a0d 6d654420 6e49206f 75727473     ..   Demo Instru
   1281c:	6f697463 00003a6e 20200a0d 20202020     ction:....      
   1282c:	20202020 20202020 20202020 50202020                    P
   1283c:	7265776f 206e6f20 20656874 72616f62     ower on the boar
   1284c:	6e752064 206c6974 2044454c 696c2031     d until LED 1 li
   1285c:	73746867 00707520 20200a0d 20202020     ghts up...      
   1286c:	20202020 20202020 20202020 74202020                    t
   1287c:	6e69206f 61636964 63206574 656e6e6f     o indicate conne
   1288c:	6e697463 69772067 70206874 2e726565     cting with peer.
   1289c:	00000020 20200a0d 20202020 20202020      .....          
   128ac:	20202020 20202020 50202020 20687375                Push 
   128bc:	42205753 6f747475 6f74206e 6f726220     SW Button to bro
   128cc:	61636461 6d207473 61737365 202e6567     adcast message. 
   128dc:	00000000 20200a0d 20202020 20202020     ......          
   128ec:	20202020 20202020 4c202020 31204445                LED 1
   128fc:	6c697720 6562206c 676f7420 64656c67      will be toggled
   1290c:	6f707520 6572206e 76696563 20676e69      upon receiving 
   1291c:	7373656d 73656761 0000202e 000d0a0d     messages. ......
   1292c:	75636553 20646572 00000000 616f7242     Secured ....Broa
   1293c:	73616364 61502074 74656b63 74697720     dcast Packet wit
   1294c:	53522068 00204953 63696e55 20747361     h RSSI .Unicast 
   1295c:	6b636150 77207465 20687469 49535352     Packet with RSSI
   1296c:	00000020 78323025 00000000 6f726620      ...%02x.... fro
   1297c:	0000206d 00007825 ff00203a 6e550a0d     m ..%x..: ....Un
   1298c:	73616369 61462074 64656c69 ffff000d     icast Failed....

0001299c <MiWi>:
   1299c:	2020b220 2020b220 20b220b2 20202020      .   .  . .     
   129ac:	0db220b2 b220b20a b220b220 b2202020     . .... . . .   .
   129bc:	20b22020 2020b220 20b20a0d 2020b220       .  .  ...  .  
   129cc:	20b220b2 b22020b2 20b22020 b20a0db2     . . .  .  . ....
   129dc:	20b22020 b220b220 20b22020 20b220b2       .  . .  . . . 
   129ec:	0a0db220 b22020b2 20b22020 202020b2      ....  .  . .   
   129fc:	20b220b2 0db22020 2020200a 20202020     . .   ...       
   12a0c:	20202020 20202020 20202020 ffff0a0d                 ....
   12a1c:	74530a0d 65747261 69572064 656c6572     ..Started Wirele
   12a2c:	43207373 756d6d6f 6163696e 6e6f6974     ss Communication
   12a3c:	206e6f20 6e616843 206c656e 00000000      on Channel ....
   12a4c:	ff007525 0a0d0a0d 4120794d 65726464     %u......My Addre
   12a5c:	203a7373 00007830 41502020 3a44494e     ss: 0x..  PANID:
   12a6c:	00783020 68432020 656e6e61 00203a6c      0x.  Channel: .
   12a7c:	6f430a0d 63656e6e 6e6f6974 65500920     ..Connection .Pe
   12a8c:	6f4c7265 6441676e 73657264 50092073     erLongAddress .P
   12a9c:	49726565 0d6f666e 00000000 00090909     eerInfo.........
   12aac:	0000742f 0a0d0a0d 6e6e6f43 69746365     /t......Connecti
   12abc:	20206e6f 50202020 4c726565 41676e6f     on     PeerLongA
   12acc:	65726464 20207373 50202020 49726565     ddress     PeerI
   12adc:	0d6f666e 00000000 20202020 20202020     nfo.....        
   12aec:	20202020 00000020 20202020 ffffff00          ...    ....
   12afc:	41500a0d 3a44494e 00000000 61684320     ..PANID:.... Cha
   12b0c:	6c656e6e 0000003a 0000eccc 0000ec9c     nnel:...........
   12b1c:	0000ecae 0000ebf0 0000ecae 0000ec92     ................
   12b2c:	0000ecae 0000ebf0 0000ec9c 0000ec9c     ................
   12b3c:	0000ec92 0000ebf0 0000ebf8 0000ebf8     ................
   12b4c:	0000ebf8 0000ecb4 0000ec9c 0000ec9c     ................
   12b5c:	0000ec70 0000ed54 0000ec70 0000ec92     p...T...p.......
   12b6c:	0000ec70 0000ed54 0000ec9c 0000ec9c     p...T...........
   12b7c:	0000ec92 0000ed54 0000ebf8 0000ebf8     ....T...........
   12b8c:	0000ebf8 0000ed5e 0000fb3c 0000fb1e     ....^...<.......
   12b9c:	0000fad8 0000f9f6 0000fad8 0000fb10     ................
   12bac:	0000fad8 0000f9f6 0000fb1e 0000fb1e     ................
   12bbc:	0000fb10 0000f9f6 0000f9ee 0000f9ee     ................
   12bcc:	0000f9ee 0000fd54 0001019c 0001005c     ....T.......\...
   12bdc:	0001005c 00010058 00010174 00010174     \...X...t...t...
   12bec:	00010166 00010058 00010174 00010166     f...X...t...f...
   12bfc:	00010174 00010058 0001017c 0001017c     t...X...|...|...
   12c0c:	0001017c 00010380 7566202c 6974636e     |......., functi
   12c1c:	203a6e6f 73736100 69747265 22206e6f     on: .assertion "
   12c2c:	20227325 6c696166 203a6465 656c6966     %s" failed: file
   12c3c:	73252220 6c202c22 20656e69 73256425      "%s", line %d%s
   12c4c:	000a7325                                %s..

00012c50 <_global_impure_ptr>:
   12c50:	2000003c 2b302d23 6c680020 6665004c     <.. #-0+ .hlL.ef
   12c60:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   12c70:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   12c80:	64636261 ff006665                       abcdef..

00012c88 <__sf_fake_stderr>:
	...

00012ca8 <__sf_fake_stdin>:
	...

00012cc8 <__sf_fake_stdout>:
	...

00012ce8 <_init>:
   12ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cea:	46c0      	nop			; (mov r8, r8)
   12cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12cee:	bc08      	pop	{r3}
   12cf0:	469e      	mov	lr, r3
   12cf2:	4770      	bx	lr

00012cf4 <__init_array_start>:
   12cf4:	000061a1 	.word	0x000061a1

00012cf8 <_fini>:
   12cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cfa:	46c0      	nop			; (mov r8, r8)
   12cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12cfe:	bc08      	pop	{r3}
   12d00:	469e      	mov	lr, r3
   12d02:	4770      	bx	lr

00012d04 <__fini_array_start>:
   12d04:	00006179 	.word	0x00006179
